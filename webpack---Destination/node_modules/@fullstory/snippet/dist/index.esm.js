// @ts-nocheck
var SnippetSrcV2 = "!function(m,n,e,t,l,o,g,y){var s,f,a=function(h){\nreturn!(h in m)||(m.console&&m.console.log&&m.console.log('FullStory namespace conflict. Please set window[\"_fs_namespace\"].'),!1)}(e)\n;function j(b){var h,d=[];function k(){h&&(d.forEach((function(b){var d;try{d=b[h[0]]&&b[h[0]](h[1])}catch(h){return void(b[3]&&b[3](h))}\nd&&d.then?d.then(b[2],b[3]):b[2]&&b[2](d)})),d.length=0)}function r(b){return function(d){h||(h=[b,d],k())}}return b(r(0),r(1)),{\nthen:function(b,h){return j((function(r,i){d.push([b,h,r,i]),k()}))}}}a&&(g=m[e]=function(){var b=function(b,d,k,r){function i(i,c){\nh(b,d,k,i,c,r)}r=r||2;var c,u=/Async$/;return u.test(b)?(b=b.replace(u,\"\"),\"function\"==typeof Promise?new Promise(i):j(i)):h(b,d,k,c,c,r)}\n;function h(h,d,k,r,i,c){return b._api?b._api(h,d,k,r,i,c):(b.q&&b.q.push([h,d,k,r,i,c]),null)}return b.q=[],b}(),y=function(b){function h(h){\n\"function\"==typeof h[4]&&h[4](new Error(b))}var d=g.q;if(d){for(var k=0;k<d.length;k++)h(d[k]);d.length=0,d.push=h}},function(){\n(o=n.createElement(t)).async=!0,o.crossOrigin=\"anonymous\",o.src=\"https://\"+l,o.onerror=function(){y(\"Error loading \"+l)}\n;var b=n.getElementsByTagName(t)[0];b.parentNode.insertBefore(o,b)}(),function(){function b(){}function h(b,h,d){g(b,h,d,1)}function d(b,d,k){\nh(\"setProperties\",{type:b,properties:d},k)}function k(b,h){d(\"user\",b,h)}function r(b,h,d){k({uid:b},d),h&&k(h,d)}g.identify=r,g.setUserVars=k,\ng.identifyAccount=b,g.clearUserCookie=b,g.setVars=d,g.event=function(b,d,k){h(\"trackEvent\",{name:b,properties:d},k)},g.anonymize=function(){r(!1)\n},g.shutdown=function(){h(\"shutdown\")},g.restart=function(){h(\"restart\")},g.log=function(b,d){h(\"log\",{level:b,msg:d})},g.consent=function(b){\nh(\"setIdentity\",{consent:!arguments.length||b})}}(),s=\"fetch\",f=\"XMLHttpRequest\",g._w={},g._w[f]=m[f],g._w[s]=m[s],m[s]&&(m[s]=function(){\nreturn g._w[s].apply(this,arguments)}),g._v=\"2.0.0\")}(window,document,window._fs_namespace,\"script\",window._fs_script);";
var executeSnippet = function executeSnippet() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$wnd = _ref.wnd,
        wnd = _ref$wnd === void 0 ? window : _ref$wnd;
    (function(win, doc, fsNamespace, tagName, fsScript, script, api, rejector) {
        var valid = function checkNamespace(fsNamespace) {
            if (!(fsNamespace in win)) {
                return true;
            }
            if (win.console && win.console.log) {
                win.console.log("FullStory namespace conflict. Please set window[\"_fs_namespace\"].");
            }
            return false;
        }(fsNamespace);
        if (!valid) return;

        function makeThenable(callback) {
            var waiters = [];
            var resolution;

            function flush() {
                if (!resolution) {
                    return;
                }
                waiters.forEach(function(waiter) {
                    var result;
                    try {
                        result = waiter[resolution[0]] && waiter[resolution[0]](resolution[1]);
                    } catch (error) {
                        waiter[3] && waiter[3](error);
                        return;
                    }
                    if (result && result.then) {
                        result.then(waiter[2], waiter[3]);
                    } else {
                        waiter[2] && waiter[2](result);
                    }
                });
                waiters.length = 0;
            }

            function makeHandler(which) {
                return function(value) {
                    if (resolution) {
                        return;
                    }
                    resolution = [which, value];
                    flush();
                };
            }
            callback(makeHandler(0), makeHandler(1));

            function _then(onFulfilled, onRejected) {
                return makeThenable(function(nextResolve, nextReject) {
                    waiters.push([onFulfilled, onRejected, nextResolve, nextReject]);
                    flush();
                });
            }
            return {
                then: _then
            };
        }
        api = win[fsNamespace] = function createV2API() {
            var FS = function FS(action, options, source, apiVersion) {
                apiVersion = apiVersion || 2;

                function setResolve(resolve, reject) {
                    api(action, options, source, resolve, reject, apiVersion);
                }
                var re = /Async$/;
                if (re.test(action)) {
                    action = action.replace(re, '');
                    // @ts-ignore
                    if (typeof Promise === 'function') {
                        // @ts-ignore
                        return new Promise(setResolve);
                    }
                    return makeThenable(setResolve);
                }
                var _undefined;
                return api(action, options, source, _undefined, _undefined, apiVersion);
            };

            function api(op, args, source, resolve, reject, apiVersion) {
                // Once fs.js is bootstrapped, we have access to ._api which
                //   handles pushing deferred methods into the queue internally.
                if (FS._api) {
                    return FS._api(op, args, source, resolve, reject, apiVersion);
                }
                if (FS.q) {
                    FS.q.push([op, args, source, resolve, reject, apiVersion]);
                }
                return null;
            }
            FS.q = [];
            return FS;
        }();
        rejector = function createRejector() {
            // Returns a function called on the error handler of the fs.js script tag.
            // Its purpose is to reject all pending and future asynchronous api calls.
            // The 4th argument to any api operation is always the reject function if it
            // has been called with the "Async" modifier.
            return function(reason) {
                function doReject(operation) {
                    if (typeof operation[4] === 'function') {
                        operation[4](new Error(reason));
                    }
                }
                var q = api.q;
                if (q) {
                    for (var i = 0; i < q.length; i++) {
                        doReject(q[i]);
                    }
                    q.length = 0;
                    q.push = doReject;
                }
            };
        }();
        (function insertScript() {
            script = doc.createElement(tagName);
            script.async = true;
            script.crossOrigin = 'anonymous';
            script.src = 'https://' + fsScript;
            script.onerror = function() {
                rejector('Error loading ' + fsScript);
            };
            var firstScript = doc.getElementsByTagName(tagName)[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        })();
        (function translateV1API() {
            function noop() {}

            function callAPI(action, option, source) {
                api(action, option, source, 1);
            }

            function setProperties(scope, props, source) {
                callAPI('setProperties', {
                    type: scope,
                    properties: props
                }, source);
            }

            function setUserProperties(props, source) {
                setProperties('user', props, source);
            }

            function identify(uid, customVars, source) {
                setUserProperties({
                    uid: uid
                }, source);
                if (customVars) {
                    setUserProperties(customVars, source);
                }
            }
            api.identify = identify;
            api.setUserVars = setUserProperties;
            api.identifyAccount = noop;
            api.clearUserCookie = noop;
            api.setVars = setProperties;
            api.event = function(eventName, eventProps, source) {
                callAPI('trackEvent', {
                    name: eventName,
                    properties: eventProps
                }, source);
            };
            api.anonymize = function() {
                identify(false);
            };
            api.shutdown = function() {
                callAPI('shutdown');
            };
            api.restart = function() {
                callAPI('restart');
            };
            api.log = function(level, msg) {
                callAPI('log', {
                    level: level,
                    msg: msg
                });
            };
            api.consent = function(userConsents) {
                callAPI('setIdentity', {
                    consent: !arguments.length || userConsents
                });
            };
        })();
        (function snapshotGlobals() {
            var f = 'fetch';
            var xhr = 'XMLHttpRequest';
            api._w = {};
            api._w[xhr] = win[xhr];
            api._w[f] = win[f];
            if (win[f]) {
                win[f] = function() {
                    return api._w[f].apply(this, arguments);
                };
            }
        })();
        api._v = "2.0.0";
    })(wnd, wnd.document, wnd['_fs_namespace'], 'script', wnd['_fs_script']);
};
var executeSnippetV1 = function executeSnippetV1() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$wnd = _ref2.wnd,
        wnd = _ref2$wnd === void 0 ? window : _ref2$wnd;
    (function(m, n, e, t, l, o, g, y) {
        if (e in m) {
            if (m.console && m.console.log) {
                m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');
            }
            return;
        }
        g = m[e] = function(a, b, s) {
            g.q ? g.q.push([a, b, s]) : g._api(a, b, s);
        };
        g.q = [];
        o = n.createElement(t);
        o.async = 1;
        o.crossOrigin = 'anonymous';
        o.src = 'https://' + _fs_script;
        y = n.getElementsByTagName(t)[0];
        y.parentNode.insertBefore(o, y);
        g.identify = function(i, v, s) {
            g(l, {
                uid: i
            }, s);
            if (v) g(l, v, s);
        };
        g.setUserVars = function(v, s) {
            g(l, v, s);
        };
        g.event = function(i, v, s) {
            g('event', {
                n: i,
                p: v
            }, s);
        };
        g.anonymize = function() {
            g.identify(!!0);
        };
        g.shutdown = function() {
            g("rec", !1);
        };
        g.restart = function() {
            g("rec", !0);
        };
        g.log = function(a, b) {
            g("log", [a, b]);
        };
        g.consent = function(a) {
            g("consent", !arguments.length || a);
        };
        g.identifyAccount = function(i, v) {
            o = 'account';
            v = v || {};
            v.acctId = i;
            g(o, v);
        };
        g.clearUserCookie = function() {};
        g.setVars = function(n, p) {
            g('setVars', [n, p]);
        };
        g._w = {};
        y = 'XMLHttpRequest';
        g._w[y] = m[y];
        y = 'fetch';
        g._w[y] = m[y];
        if (m[y]) m[y] = function() {
            return g._w[y].apply(this, arguments);
        };
        g._v = "1.3.0";
    })(wnd, wnd.document, wnd['_fs_namespace'], 'script', 'user');
};
var getDocumentVar = function getDocumentVar(globalVar) {
    return globalVar === 'window' ? 'document' : "".concat(globalVar, ".document");
};
var toV1String = function toV1String() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$shouldInsertScr = _ref3.shouldInsertScript,
        shouldInsertScript = _ref3$shouldInsertScr === void 0 ? true : _ref3$shouldInsertScr,
        _ref3$globalVar = _ref3.globalVar,
        globalVar = _ref3$globalVar === void 0 ? 'window' : _ref3$globalVar,
        _ref3$apiVersion = _ref3.apiVersion,
        apiVersion = _ref3$apiVersion === void 0 ? '1.3.0' : _ref3$apiVersion;
    return "(function(m,n,e,t,l,o,g,y){\n    if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window[\"_fs_namespace\"].');} return;}\n    g=m[e]=function(a,b,s){g.q?g.q.push([a,b,s]):g._api(a,b,s);};g.q=[];".concat(shouldInsertScript ? "\n    o=n.createElement(t);o.async=1;o.crossOrigin='anonymous';o.src='https://'+_fs_script;\n    y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);" : '', "\n    g.identify=function(i,v,s){g(l,{uid:i},s);if(v)g(l,v,s)};g.setUserVars=function(v,s){g(l,v,s)};g.event=function(i,v,s){g('event',{n:i,p:v},s)};\n    g.anonymize=function(){g.identify(!!0)};\n    g.shutdown=function(){g(\"rec\",!1)};g.restart=function(){g(\"rec\",!0)};\n    g.log = function(a,b){g(\"log\",[a,b])};\n    g.consent=function(a){g(\"consent\",!arguments.length||a)};\n    g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};\n    g.clearUserCookie=function(){};\n    g.setVars=function(n, p){g('setVars',[n,p]);};\n    g._w={};y='XMLHttpRequest';g._w[y]=m[y];y='fetch';g._w[y]=m[y];\n    if(m[y])m[y]=function(){return g._w[y].apply(this,arguments)};\n    g._v=\"").concat(apiVersion, "\";\n})(").concat(globalVar, ",").concat(getDocumentVar(globalVar), ",").concat(globalVar, "['_fs_namespace'],'script','user');");
};
var initFS = function initFS(_a) {
    var orgId = _a.orgId,
        _b = _a.namespace,
        namespace = _b === void 0 ? 'FS' : _b,
        _c = _a.host,
        host = _c === void 0 ? 'fullstory.com' : _c,
        _d = _a.script,
        script = _d === void 0 ? 'edge.fullstory.com/s/fs.js' : _d;
    if (!orgId) {
        throw new Error('FullStory orgId is a required parameter');
    }
    window['_fs_host'] = host;
    window['_fs_script'] = script;
    window['_fs_org'] = orgId;
    window['_fs_namespace'] = namespace;
    executeSnippet();
};
var initFSV1 = function initFSV1(_a) {
    var orgId = _a.orgId,
        _b = _a.namespace,
        namespace = _b === void 0 ? 'FS' : _b,
        _c = _a.host,
        host = _c === void 0 ? 'fullstory.com' : _c,
        _d = _a.script,
        script = _d === void 0 ? 'edge.fullstory.com/s/fs.js' : _d;
    if (!orgId) {
        throw new Error('FullStory orgId is a required parameter');
    }
    window['_fs_host'] = host;
    window['_fs_script'] = script;
    window['_fs_org'] = orgId;
    window['_fs_namespace'] = namespace;
    executeSnippetV1();
};
var SnippetSrc = SnippetSrcV2;
var SnippetSrcV1 = toV1String();
var generateSnippetText = function generateSnippetText(_a) {
    var orgId = _a.orgId,
        _b = _a.namespace,
        namespace = _b === void 0 ? 'FS' : _b,
        _c = _a.host,
        host = _c === void 0 ? 'fullstory.com' : _c,
        _d = _a.script,
        script = _d === void 0 ? 'edge.fullstory.com/s/fs.js' : _d;
    if (!orgId) {
        throw new Error('FullStory orgId is a required parameter');
    }
    return "window['_fs_host'] = '".concat(host, "';\nwindow['_fs_script'] = '").concat(script, "';\nwindow['_fs_org'] = '").concat(orgId, "';\nwindow['_fs_namespace'] = '").concat(namespace, "';\n").concat(SnippetSrc, "\n");
};
var generateSnippetTextV1 = function generateSnippetTextV1(_a) {
    var orgId = _a.orgId,
        _b = _a.namespace,
        namespace = _b === void 0 ? 'FS' : _b,
        _c = _a.host,
        host = _c === void 0 ? 'fullstory.com' : _c,
        _d = _a.script,
        script = _d === void 0 ? 'edge.fullstory.com/s/fs.js' : _d;
    if (!orgId) {
        throw new Error('FullStory orgId is a required parameter');
    }
    return "window['_fs_host'] = '".concat(host, "';\nwindow['_fs_script'] = '").concat(script, "';\nwindow['_fs_org'] = '").concat(orgId, "';\nwindow['_fs_namespace'] = '").concat(namespace, "';\n").concat(SnippetSrcV1, "\n");
};
export {
    SnippetSrc,
    SnippetSrcV1,
    generateSnippetText,
    generateSnippetTextV1,
    initFS,
    initFSV1
};