(window.qualifiedWebpackJsonp = window.qualifiedWebpackJsonp || []).push([
    [7], {
        1: function(e, t, n) {
            "use strict";
            n.d(t, "d", (function() {
                return s
            })), n.d(t, "c", (function() {
                return l
            })), n.d(t, "n", (function() {
                return d
            })), n.d(t, "m", (function() {
                return c
            })), n.d(t, "k", (function() {
                return u
            })), n.d(t, "i", (function() {
                return m
            })), n.d(t, "j", (function() {
                return g
            })), n.d(t, "h", (function() {
                return p
            })), n.d(t, "b", (function() {
                return h
            })), n.d(t, "o", (function() {
                return v
            })), n.d(t, "f", (function() {
                return b
            })), n.d(t, "g", (function() {
                return E
            })), n.d(t, "p", (function() {
                return _
            })), n.d(t, "e", (function() {
                return f
            })), n.d(t, "a", (function() {
                return C
            })), n.d(t, "l", (function() {
                return S
            }));
            var a = n(2),
                i = n(21);
            const o = {
                red: "#EC645E",
                quartzRed: "#E4251B",
                quartzLightRed: "#F64D46",
                quartzInProgressBackground: "#EFEEFF",
                quartzSuccessBackground: "#E4F8E8",
                quartzWarningBackground: "#FFE7DE",
                quartzErrorBackground: "#FAD3D1",
                waitingRed: "#FA5663",
                teal: "#66B8C7",
                lightTeal: "#A7E4E4",
                darkTeal: "#579FAE",
                deepTeal: "#234248",
                darkerTeal: "#437D88",
                quartzTeal: "#447D87",
                brightTeal: "#50FFC9",
                blue: "#6BABD5",
                blue2: "#588CAE",
                brightBlue: "#3C74F3",
                salesforceBlue: "#63C5ED",
                salesforceLight: "#65C6EC",
                salesforceOrange: "#FB8A74",
                salesforcePurple: "#9E96E7",
                salesforceDarkBlue: "#38618C",
                salesforceAccountPurple: "#7F8DE1",
                salesforceCampaignOrange: "#F49756",
                salesforceOpportunityYellow: "#FBC274",
                salesforceOpportunityBlue: "#024386",
                salesforceRelatedObjectsPink: "#df6184",
                signalsWarm: "#FEA757",
                border: "#E6E9EC",
                borderGray: "#DEDEDE",
                reportBorder: "#EFF1F3",
                fieldBorder: "#DFE3E7",
                quartzFieldBorder: "#D7DDE2",
                gray: "#888F91",
                lightTextGray: "#899093",
                lighterTextGray: "#C8CED0",
                iconGray: "#8A9394",
                lightGray: "#E6E9EC",
                lighterGray: "#F5F6F7",
                darkGray: "#B1B9BF",
                darkGrayIcon: "#7f7f7f",
                buttonGray: "#F5F6F7",
                panelGray: "#F6F9FC",
                buttonIconPrimary: "#58C2D5",
                buttonIconDisabled: "#D7DDE2",
                green: "#79DA8C",
                green2: "#62C776",
                green3: "#57AE68",
                lightGreen: "#55BC9E",
                darkGreen: "#6FC882",
                salesloftGreen: "#06492E",
                orange: "#FB8A74",
                darkOrange: "#FF8558",
                lightOrange: "rgba(255, 133, 88, 0.15)",
                yellow: "#FABF7D",
                darkYellow: "#c4853e",
                secondaryYellow: "#FFD258",
                purple: "#987FDF",
                darkPurple: "#52408A",
                mediumPurple: "#5242A7",
                brightPurple: "#6558FF",
                get lightPurple() {
                    return Object(i.h)(.9, this.brightPurple)
                },
                get lightPurpleBorder() {
                    return Object(i.h)(.7, this.brightPurple)
                },
                outreachPurple: "#5951FF",
                lightBackground: "#F4F5F8",
                lighterBackground: "#FAFAFA",
                lightestBackground: "#FCFCFC",
                darkBackground: "rgb(236, 238, 240)",
                primaryText: "#122124",
                placeholder: "#6E7879",
                backdrop: "#0c161d",
                disabledInput: "rgba(0, 0, 0, 0.06)",
                inputBackground: "#FFFFFF",
                microsoftRed: "#d83d00",
                microsoftTeamsBlue: "#5558AF",
                googleBlue: "#457ef4",
                sixsenseGreen: "#13bbb2",
                demandbaseGray: "#353944",
                marketo: "#563e94",
                hubspot: "#F8761F",
                blackPearl: "#152229",
                eloqua: "#F80000",
                white: "#FFFFFF",
                black: "#000000",
                secondaryText: "#6E7879",
                dangerRed: "#BE5652",
                offWhite: "#F7F7F7",
                loadingSpinner: "#58c1d5",
                metallicBlue: "#315E7C",
                darkCharcoal: "#333",
                emerald: "#5ec873",
                lightMagenta: "#FC58FF",
                skyMagenta: "#D56BB0",
                forest: "#10596E",
                appRed: "#AE5958",
                signalsBorder: "#C86799",
                googleSearchBorder: "#D7DDE2",
                g2: "#f04729",
                veryDarkGray: "#222222",
                transparent: "transparent",
                cyan: "#58C2D5",
                marketingDefault: "#008299",
                marketingHover: "#126C7C",
                marketingActive: "#125662",
                marketingText: "#395166",
                zoom: "#2D8CFF",
                labelGreen: "#CCFBE8",
                labelYellow: "#F9E6CF",
                labelBlue: "#E2F4F8"
            };

            function r(e) {
                return e.endsWith("px") ? e : e.endsWith("rem") ? Object(i.e)(e, "16px") : e
            }
            const s = {
                    paddingUnits: e => 4 * e + "px",
                    unsafePadding: e => e,
                    marginUnits: e => 4 * e + "px",
                    unsafeMargin: e => e,
                    gapUnits: e => 4 * e + "px",
                    unsafeGap: e => e,
                    size: e => e,
                    unsafeSize: e => e,
                    unsafeFontSize: e => e,
                    unsafeLineHeight: e => e,
                    legacyPadding: r,
                    legacyMargin: r,
                    legacyGap: r,
                    legacySize: r,
                    legacyFontSize: r,
                    legacyLineHeight: e => "string" === typeof e && (e.endsWith("px") || e.endsWith("rem")) ? r(e) : e,
                    unsafePxAsIs: e => e
                },
                l = { ...o,
                    selectedEntry: Object(i.d)(.3, o.teal),
                    darkRed: Object(i.d)(.2, o.red),
                    lightRed: Object(i.d)(.2, o.red)
                },
                d = (l.forest, l.cyan, l.green3, {
                    fontSize100: 10,
                    _deprecated_fontSize200: 11,
                    fontSize300: 12,
                    _deprecated_fontSize400: 13,
                    fontSize500: 14,
                    fontSize600: 16,
                    _deprecated_fontSize700: 18,
                    fontSize800: 20,
                    _deprecated_fontSize900: 24,
                    _deprecated_fontSize1000: 32,
                    headerHeight: 60,
                    headerHeightWithTabs: 117,
                    subheaderHeight: 61,
                    searchFilterHeaderHeight: 212,
                    inputHeight: 44,
                    inputBorderRadius: 4,
                    progressBarBorderRadius: 4,
                    zoomedInResolution: "2dppx",
                    searchBorderRadius: 100,
                    iconSmall: 24
                }),
                c = {
                    interactive100: "0 1px 3px rgba(0, 0, 0, 0.06)"
                },
                u = {
                    baseLineHeight: 1.5,
                    headingLarge: s.unsafeLineHeight("28px"),
                    headingMedium: s.unsafeLineHeight("24px"),
                    headingSmall: s.unsafeLineHeight("22px"),
                    headingXSmall: s.unsafeLineHeight("18px"),
                    labelPrimary: s.unsafeLineHeight("22px"),
                    labelSecondary: s.unsafeLineHeight("22px"),
                    body: s.unsafeLineHeight("22px"),
                    bodySmall: s.unsafeLineHeight("18px"),
                    tableHeader: s.unsafeLineHeight("16px")
                },
                m = {
                    size100: s.legacyFontSize(`${d.fontSize100}px`),
                    _deprecated_size200: s.legacyFontSize(`${d._deprecated_fontSize200}px`),
                    size300: s.legacyFontSize(`${d.fontSize300}px`),
                    _deprecated_size400: s.legacyFontSize(`${d._deprecated_fontSize400}px`),
                    size500: s.legacyFontSize(`${d.fontSize500}px`),
                    size600: s.legacyFontSize(`${d.fontSize600}px`),
                    _deprecated_size700: s.legacyFontSize(`${d._deprecated_fontSize700}px`),
                    size800: s.legacyFontSize(`${d.fontSize800}px`),
                    _deprecated_size900: s.legacyFontSize(`${d._deprecated_fontSize900}px`),
                    _deprecated_size1000: s.legacyFontSize(`${d._deprecated_fontSize1000}px`)
                },
                g = {
                    bold: 700,
                    semiBold: 600,
                    medium: 500,
                    normal: 400
                },
                p = {
                    primary: l.primaryText,
                    secondary: l.secondaryText,
                    white: l.white,
                    danger: l.quartzRed,
                    link: l.quartzTeal,
                    linkDanger: l.quartzRed
                },
                h = Object(a.b)({
                    name: "mqkfjv-baseTypographyPresetStyles",
                    styles: "margin:0;border:0;padding:0;;label:baseTypographyPresetStyles;"
                }),
                v = {
                    headingLarge: Object(a.b)(h, ";font-size:", m.size800, ";font-weight:", g.semiBold, ";color:", p.primary, ";line-height:", u.headingLarge, ";;label:headingLarge;"),
                    headingMedium: Object(a.b)(h, ";font-size:", m.size600, ";font-weight:", g.semiBold, ";color:", p.primary, ";line-height:", u.headingMedium, ";;label:headingMedium;"),
                    headingSmall: Object(a.b)(h, ";font-size:", m.size500, ";font-weight:", g.semiBold, ";color:", p.primary, ";line-height:", u.headingSmall, ";;label:headingSmall;"),
                    labelPrimary: Object(a.b)(h, ";font-size:", m.size500, ";font-weight:", g.semiBold, ";color:", p.primary, ";line-height:", u.labelPrimary, ";;label:labelPrimary;"),
                    labelSecondary: Object(a.b)(h, ";font-size:", m.size500, ";font-weight:", g.normal, ";color:", p.primary, ";line-height:", u.labelSecondary, ";;label:labelSecondary;"),
                    headingExtraSmall: Object(a.b)(h, ";font-size:", m.size300, ";font-weight:", g.semiBold, ";color:", p.primary, ";line-height:", u.headingXSmall, ";;label:headingExtraSmall;"),
                    inherit: Object(a.b)({
                        name: "1sxhmd3-inherit",
                        styles: "font:inherit;;label:inherit;"
                    }),
                    body: Object(a.b)(h, ";font-size:", m.size500, ";font-weight:", g.normal, ";color:", p.primary, ";line-height:", u.body, ";;label:body;"),
                    bodySecondary: Object(a.b)(h, ";font-size:", m.size500, ";font-weight:", g.normal, ";color:", p.secondary, ";line-height:", u.body, ";;label:bodySecondary;"),
                    bodySmall: Object(a.b)(h, ";font-size:", m.size300, ";font-weight:", g.normal, ";color:", p.secondary, ";line-height:", u.bodySmall, ";;label:bodySmall;"),
                    tableHeader: Object(a.b)(h, ";font-size:", m.size100, ";font-weight:", g.medium, ";color:", p.secondary, ";line-height:", u.tableHeader, ";;label:tableHeader;")
                },
                b = {
                    defaultFocusRingColor: l.darkTeal,
                    defaultQuartzFocusRingColor: l.quartzTeal
                },
                E = {
                    defaultFocusStyle: Object(a.b)("outline:2px solid ", b.defaultFocusRingColor, ";outline-offset:1px;;label:defaultFocusStyle;"),
                    insetFocusStyle: Object(a.b)("outline:none;box-shadow:inset 0 0 0 2px ", b.defaultFocusRingColor, ";;label:insetFocusStyle;"),
                    defaultQuartzFocusStyle: Object(a.b)("outline:2px solid ", b.defaultQuartzFocusRingColor, ";outline-offset:2px;;label:defaultQuartzFocusStyle;"),
                    quartzInsetFocusStyle: Object(a.b)("outline:none;box-shadow:inset 0 0 0 2px ", b.defaultQuartzFocusRingColor, ";;label:quartzInsetFocusStyle;")
                },
                _ = Object(a.b)("position:absolute;width:", s.unsafePxAsIs("1px"), ";height:", s.unsafePxAsIs("1px"), ";padding:0;margin:", s.unsafePxAsIs("-1px"), ";overflow:hidden;clip:rect(0,0,0,0);border:0;;label:visuallyHidden;"),
                f = Object(a.b)({
                    name: "u5spf3-fillArea",
                    styles: "position:absolute;top:0;left:0;right:0;bottom:0;;label:fillArea;"
                }),
                O = (l.selectedEntry, s.unsafePxAsIs("2px"), l.teal, g.semiBold, s.legacyPadding("18px"), s.legacyPadding("6px"), s.legacyPadding("10px"), Object(i.d)(.01, l.border), Object(a.b)("color:inherit;background-color:", l.disabledInput, ";cursor:not-allowed;;label:disabledInput;")),
                C = (l.fieldBorder, d.inputBorderRadius, s.paddingUnits(4), s.legacyLineHeight(`${d.fontSize500}px`), s.legacySize(`${d.inputHeight}px`), l.fieldBorder, d.inputBorderRadius, s.legacyPadding("14px"), s.paddingUnits(4), l.teal, l.primaryText, `\n  html {\n    \n    line-height: 1.15;\n  }\n\n  :root {\n    --theme-font-family: 'Inter';\n  }\n  @supports (font-variation-settings: normal) {\n    :root {\n      --theme-font-family: 'Inter var';\n    }\n  }\n\n  body {\n    font-family: var(--theme-font-family), sans-serif;\n    overflow: hidden;\n    font-size: ${m.size600}; /* 1rem */\n    color: ${l.primaryText};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  p {\n    line-height: ${u.baseLineHeight}em; /* TODO: Look into dropping the "em" here */\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  strong {\n    font-weight: ${g.semiBold};\n  }\n\n  .combo {\n    margin-right: 0;\n    border-radius: 3px 0 0 3px !important;\n    border-right: none !important;\n\n    &:focus {\n      border-right: none !important;\n    }\n\n    + button {\n      height: ${s.size(`${d.inputHeight}px`)};\n      border-radius: 0 3px 3px 0 !important;\n      vertical-align: top;\n    }\n  }\n\n  textarea {\n    letter-spacing: inherit;\n  }\n\n  input, textarea {\n    border: 0;\n    outline-width: 0;\n    background-color: transparent;\n  }\n\n  button {\n    border: none;\n    outline-width: 0;\n    background-color: transparent;\n    cursor: pointer;\n    padding: 0;\n    letter-spacing: inherit;\n  }\n\n  \n  :is(button, input, select, textarea) {\n    font-family: inherit;\n    font-size: inherit;\n    line-height: inherit;\n  }\n\n  button:focus-visible, a:focus-visible {\n    // For some reason using focusStyles.defaultFocusStyle here doesn't work so we need to manually set the global default\n    outline: 2px solid ${b.defaultQuartzFocusRingColor};\n    outline-offset: 2px;\n  }\n\n  button, input, textarea, a, .focusable {\n    .is-focus-visible & {\n      &:focus {\n        outline: 5px auto Highlight;\n        outline: 5px auto -webkit-focus-ring-color;\n      }\n    }\n  }\n\n  .dropdown__trigger {\n    cursor: pointer;\n  }\n\n  ::placeholder {\n    color: ${l.placeholder};\n    opacity: 1;\n  }\n\n  input:disabled, textarea:disabled {\n    ${O}\n  }\n\n  // Remove Firefox styling\n  input:invalid {\n    box-shadow: none;\n  }\n\n  .sr-only {\n    position: absolute;\n    width: ${s.unsafePxAsIs("1px")};\n    height: ${s.unsafePxAsIs("1px")};\n    padding: 0;\n    margin: ${s.unsafePxAsIs("-1px")};\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n`),
                S = Object(a.b)({
                    name: "17rog1c-monospace",
                    styles: "font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,Courier,monospace;;label:monospace;"
                })
        },
        100: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M11 4.456c-.485.61-1.03 1.548-1.813 2.899l-4.062 7.017c-.785 1.356-1.329 2.299-1.617 3.027-.286.722-.237 1.026-.122 1.225.115.2.353.395 1.121.509.775.115 1.864.117 3.43.117h8.125c1.567 0 2.656-.002 3.43-.117.768-.114 1.007-.31 1.122-.509.115-.199.164-.503-.122-1.225-.288-.728-.832-1.671-1.617-3.027l-4.062-7.017c-.783-1.351-1.328-2.289-1.814-2.9-.481-.605-.77-.713-.999-.713-.23 0-.518.108-1 .714zm-1.173-.934c.576-.724 1.25-1.28 2.173-1.28s1.597.556 2.173 1.28c.564.708 1.163 1.744 1.905 3.025l.033.057 4.062 7.016.033.057c.744 1.286 1.346 2.325 1.68 3.17.343.862.49 1.725.027 2.526-.462.802-1.282 1.107-2.2 1.244-.898.133-2.1.133-3.585.133H7.872c-1.486 0-2.687 0-3.585-.133-.918-.137-1.738-.442-2.2-1.244-.463-.801-.316-1.664.026-2.527.335-.844.937-1.883 1.681-3.17l.033-.056 4.062-7.016.033-.057c.742-1.281 1.341-2.317 1.905-3.025zM12 8.25a.75.75 0 01.75.75v4a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zM12 17a1 1 0 100-2 1 1 0 000 2z",
                fill: "#current"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "current"
                }, e), o)
            }
            n.p
        },
        101: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return i
            })), n.d(t, "c", (function() {
                return o
            })), n.d(t, "a", (function() {
                return r
            }));
            const a = () => {};

            function i(e) {
                return new Promise((t => setTimeout(t, e)))
            }

            function o(e, t) {
                if (t) {
                    const n = () => {
                        n.intervalID && (clearInterval(n.intervalID), n.intervalID = null)
                    };
                    return n.intervalID = window.setInterval(t, e), n
                }
                return a
            }

            function r(e, t) {
                if (t) {
                    const n = () => {
                        n.timeoutID && (clearTimeout(n.timeoutID), n.timeoutID = null)
                    };
                    return n.timeoutID = window.setTimeout(t, e), n
                }
                return a
            }
        },
        102: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "BrandingLink", (function() {
                return u
            })), n.d(t, "PrivacyPolicyLink", (function() {
                return m
            })), n.d(t, "MessengerFooter", (function() {
                return g
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(14),
                s = n(6),
                l = n(115),
                d = n(1);
            const c = {
                    root: Object(a.b)("color:", s.a.MESSENGER_FOOTER_TEXT_COLOR, ";font-weight:", d.j.normal, ";font-size:", d.i._deprecated_size200, ";line-height:", d.d.unsafeLineHeight("15px"), ";text-align:start;body.is-mobile.not-tablet &{opacity:0.7;};label:root;"),
                    dotSeparator: Object(a.b)("font-size:", d.i.size100, ";color:", d.c.iconGray, ";;label:dotSeparator;"),
                    link: Object(a.b)({
                        name: "1hbca90-link",
                        styles: "text-decoration:none;&:hover,&:focus-visible{text-decoration:underline;};label:link;"
                    }),
                    list: Object(a.b)("display:flex;gap:", d.d.gapUnits(1), ";align-items:center;justify-content:center;list-style:none;padding:0;margin:0;&.multiline{flex-direction:column;};label:list;")
                },
                u = ({
                    onClick: e
                }) => {
                    const t = Object(r.c)();
                    return o.a.createElement("a", {
                        href: "https://www.qualified.com/",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        onClick: e,
                        className: c.link
                    }, t.t("messenger.text.qualified_branding") || "Qualified Conversations")
                },
                m = ({
                    privacyPolicyUrl: e,
                    privacyPolicyText: t,
                    onClick: n
                }) => {
                    const a = Object(r.c)();
                    return o.a.createElement("a", {
                        href: e,
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: c.link,
                        onClick: n
                    }, t || a.t("messenger.text.privacy_policy") || "Privacy policy")
                },
                g = Object(i.forwardRef)((({
                    privacyPolicyUrl: e,
                    privacyPolicyText: t,
                    privacyDisclosures: n,
                    customizablePrivacyPolicyEnabled: i,
                    showBranding: s,
                    className: d,
                    dotSeparatorClassName: g,
                    onItemClick: p
                }, h) => {
                    var v;
                    const b = Object(r.c)(),
                        E = i ? null === n || void 0 === n || null === (v = n.find((e => e.locale === b.locale))) || void 0 === v ? void 0 : v.text : void 0;
                    return E || e || s ? o.a.createElement("footer", {
                        className: Object(a.c)(c.root, d),
                        "aria-label": "Messenger footer",
                        ref: h
                    }, o.a.createElement("ul", {
                        className: Object(a.c)(c.list, {
                            multiline: i
                        }),
                        role: "list"
                    }, E ? o.a.createElement("li", null, o.a.createElement(l.b, null, E)) : e ? o.a.createElement("li", null, o.a.createElement(m, {
                        privacyPolicyText: i ? t : void 0,
                        privacyPolicyUrl: e,
                        onClick: p
                    })) : null, !i && !!e && s && o.a.createElement("li", {
                        "aria-hidden": !0,
                        className: Object(a.c)(c.dotSeparator, g)
                    }, "\u2022"), s ? o.a.createElement("li", null, o.a.createElement(u, {
                        onClick: p
                    })) : null)) : null
                }))
        },
        103: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "CloseButton", (function() {
                return v
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(22),
                d = n(14),
                c = n(63),
                u = n(1);
            const m = s.isMobileOnly ? l.r : l.f,
                g = {
                    root: Object(a.b)({
                        name: "ojsnz0-root",
                        styles: "position:relative;;label:root;"
                    }),
                    button: Object(a.b)(l.o, ";position:absolute;height:", u.d.size("24px"), ";width:", u.d.size("24px"), ";font-size:", u.i.size300, ";text-align:center;border-radius:100%;background-color:", u.c.white, ";padding-bottom:", u.d.legacyPadding("1px"), ";;label:button;"),
                    svgIcon: Object(a.b)("fill:", u.c.gray, ";;label:svgIcon;")
                },
                p = {
                    root: Object(a.b)("width:", u.d.legacySize(`${l.e}px`), ";;label:root;"),
                    button: Object(a.b)({
                        name: "19n2i8i-button",
                        styles: "left:0.5rem;top:0.5rem;;label:button;"
                    })
                },
                h = {
                    root: Object(a.b)("height:", u.d.legacySize(`${l.s}px`), ";;label:root;"),
                    button: Object(a.b)("right:", m.buttonInsetPx, "px;;label:button;")
                },
                v = Object(i.a)((({
                    className: e,
                    showAsChatLike: t = !1,
                    style: n,
                    ...i
                }) => {
                    const o = Object(d.c)(),
                        s = t ? p : h;
                    return r.a.createElement("div", {
                        className: Object(a.c)(g.root, s.root, e),
                        "data-clickable": !0
                    }, r.a.createElement("button", {
                        "data-backend-test-id": "close-button",
                        "aria-label": o.t("messenger.text.close_messenger"),
                        className: Object(a.c)(g.button, s.button),
                        ...i
                    }, r.a.createElement(c.b.Times, {
                        height: 10,
                        className: g.svgIcon
                    })))
                }), {
                    target: "e1i8j7bj0",
                    label: "CloseButton"
                })()
        },
        104: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return j
            })), n.d(t, "c", (function() {
                return _e
            })), n.d(t, "b", (function() {
                return fe
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(966),
                l = n(70),
                d = n(35);
            const c = r.a.createContext(void 0),
                u = ({
                    children: e,
                    value: t
                }) => r.a.createElement(c.Provider, {
                    value: t
                }, e);
            var m = n(218),
                g = n(176),
                p = n(1);
            const h = e => ({
                    radioOptionRow: Object(a.b)("display:grid;grid-auto-flow:column;grid-auto-columns:minmax(0,1fr);align-items:center;padding:", p.d.paddingUnits(1), ";border:1px solid ", e.optionRowBorderColor, ";border-radius:4px;background:", e.optionRowBackgroundColor, ";color:", e.optionRowTextColor, ";height:", p.d.size("40px"), ";;label:radioOptionRow;"),
                    radioOptionRowFitContent: Object(a.b)({
                        name: "musnob-radioOptionRowFitContent",
                        styles: "display:inline-grid;;label:radioOptionRowFitContent;"
                    }),
                    radioOptionWrapper: Object(a.b)({
                        name: "1d0gwpp-radioOptionWrapper",
                        styles: "flex-basis:100%;height:100%;;label:radioOptionWrapper;"
                    }),
                    input: Object(a.b)(p.p, ";&:checked + label{background:", e.selectedOptionBackgroundColor, ";color:", e.selectedOptionTextColor, ";border-radius:2px;}&:focus-visible + label{", e.selectedOptionFocusStyle, ";}&:disabled + label{cursor:not-allowed;opacity:0.5;};label:input;"),
                    inputLabel: Object(a.b)(p.o.labelSecondary, ";cursor:pointer;display:flex;width:100%;align-items:center;justify-content:center;padding-inline:", p.d.paddingUnits(3), ";height:100%;overflow:hidden;gap:", p.d.gapUnits(2), ";;label:inputLabel;"),
                    innerLabelContent: Object(a.b)({
                        name: "bnc08x-innerLabelContent",
                        styles: "text-overflow:ellipsis;overflow:hidden;white-space:nowrap;;label:innerLabelContent;"
                    }),
                    slot: Object(a.b)({
                        name: "zxxlng-slot",
                        styles: "display:inline-flex;align-items:center;justify-content:center;flex-shrink:0;;label:slot;"
                    })
                }),
                v = r.a.forwardRef((({
                    label: e,
                    id: t,
                    _quartzInternal_className: n,
                    name: i,
                    startSlot: s,
                    endSlot: l,
                    ...d
                }, u) => {
                    const p = Object(g.a)(),
                        v = null !== t && void 0 !== t ? t : p,
                        b = (() => {
                            const e = Object(o.useContext)(c);
                            if (!e) throw new Error("useSplitRadioOptionGroupContext must be used within a SplitRadioOptionGroup");
                            return e
                        })(),
                        E = null !== i && void 0 !== i ? i : b.name,
                        _ = i && (null === b || void 0 === b ? void 0 : b.name);
                    Object(m.a)(!_, "Ensure to only define `name` on either the group or option level, not both.");
                    const {
                        theme: f
                    } = b, O = Object(o.useMemo)((() => h(f)), [f]);
                    return r.a.createElement("div", {
                        className: O.radioOptionWrapper
                    }, r.a.createElement("input", { ...d,
                        name: E,
                        id: v,
                        type: "radio",
                        className: O.input,
                        ref: u
                    }), r.a.createElement("label", {
                        htmlFor: v,
                        className: Object(a.c)(O.inputLabel, n)
                    }, s ? r.a.createElement("span", {
                        className: O.slot
                    }, s) : null, r.a.createElement("span", {
                        className: O.innerLabelContent
                    }, e), l ? r.a.createElement("span", {
                        className: O.slot
                    }, l) : null))
                })),
                b = {
                    root: Object(a.b)({
                        name: "y4ikky-root",
                        styles: "border:0;padding:0;margin:0;&:disabled{cursor:default;};label:root;"
                    })
                },
                E = r.a.forwardRef((({
                    children: e,
                    _quartzInternal_className: t,
                    ...n
                }, i) => r.a.createElement("fieldset", { ...n,
                    className: Object(a.c)(b.root, t),
                    ref: i
                }, e))),
                _ = r.a.forwardRef((({
                    _quartzInternal_className: e,
                    children: t,
                    screenReaderOnly: n = !1,
                    marginBottomUnits: i = 0,
                    ...o
                }, s) => {
                    const d = Object(l.b)({
                        marginBottomUnits: i
                    });
                    return r.a.createElement("legend", { ...o,
                        className: Object(a.c)(p.o.labelPrimary, d, {
                            [p.p]: n
                        }, e),
                        ref: s
                    }, t)
                }));
            var f = n(140);
            const O = ({
                label: e,
                screenReaderOnlyLabel: t = !1,
                children: n,
                _quartzInternal_className: i,
                name: s,
                disabled: l,
                fit: d = "container",
                theme: c
            }) => {
                const g = Object(f.b)().components.SplitRadioOption,
                    p = null !== c && void 0 !== c ? c : g,
                    v = Object(o.useMemo)((() => h(p)), [p]),
                    b = Object(o.useMemo)((() => ({
                        name: s,
                        theme: p
                    })), [s, p]);
                return Object(m.a)(e.trim(), "Ensure to provide a `label` so we can be accessible for screen readers."), r.a.createElement(u, {
                    value: b
                }, r.a.createElement(E, {
                    disabled: l,
                    _quartzInternal_className: i
                }, r.a.createElement(_, {
                    screenReaderOnly: t,
                    marginBottomUnits: 2
                }, e), r.a.createElement("div", {
                    className: Object(a.c)(v.radioOptionRow, {
                        [v.radioOptionRowFitContent]: "content" === d
                    })
                }, n)))
            };
            var C = n(337),
                S = n(84),
                y = n(230),
                k = n(341),
                T = n(240),
                A = n(179),
                N = n(1011),
                R = n(1012);
            var D = n(14),
                I = n(57),
                x = n(6),
                M = n(271),
                B = n(219),
                F = n(33),
                w = n(113),
                L = n(76),
                P = n(144),
                U = n(163);
            const j = 200,
                z = Object(i.a)("div", {
                    target: "e1914l3r0",
                    label: "OuterContainer"
                })("max-width:", p.d.size("528px"), ";padding-right:", (({
                    isMobile: e
                }) => e ? p.d.paddingUnits(8) : p.d.legacyPadding("80px")), ";padding-left:", (({
                    isMobile: e
                }) => e ? p.d.paddingUnits(8) : p.d.legacyPadding("80px")), ";margin-right:", (({
                    isMobile: e
                }) => e ? p.d.marginUnits(2) : 0), ";margin-left:", (({
                    isMobile: e
                }) => e ? p.d.marginUnits(2) : 0), ";padding-bottom:", p.d.paddingUnits(10), ";padding-top:", p.d.paddingUnits(6), ";overflow:hidden;border-radius:0.5rem;background-color:", p.c.white, ";text-align:center;position:relative;display:flex;flex-direction:column;animation:1ms opacifyOuter ", j, "ms forwards;opacity:0;@keyframes opacifyOuter{from{opacity:0;}to{opacity:1;}}"),
                V = Object(a.b)("max-width:", p.d.size("624px"), ";padding:0;;label:OuterContainerWithThemes;"),
                G = Object(a.b)({
                    name: "1ya9pes-OuterContainerMobileWithThemes",
                    styles: "margin:0;padding:0;align-items:center;;label:OuterContainerMobileWithThemes;"
                }),
                $ = Object(i.a)("div", {
                    target: "e1914l3r1",
                    label: "BackgroundContainer"
                })("pointer-events:none;animation:", 250, "ms opacify ", j, "ms ease-out forwards;animation-delay:1.5s;opacity:1;@keyframes opacify{from{opacity:1;}to{opacity:0.2;}}"),
                H = "0px 0px 16px 0px rgba(0, 0, 0, 0.04), 0px 3px 4px 0px rgba(35, 66, 72, 0.04), 0px 0px 0px 1px rgba(230, 233, 236, 0.50)",
                W = Object(i.a)("div", {
                    target: "e1914l3r2",
                    label: "DefaultCoverContainer"
                })("top:0;left:0;right:0;position:absolute;background-color:", p.c.white, ";border-bottom:1px solid ", p.c.border, ";border-radius:0.5rem 0.5rem 0rem 0rem;animation:250ms slidedown ", j + 250, "ms ease-out forwards;animation-delay:1.5s;transform:translateY(-100%);@keyframes slidedown{from{transform:translateY(-100%);}to{transform:translateY(0%);box-shadow:", H, ";}}@keyframes skeleton-loading{0%{opacity:0.3;}100%{opacity:1;}}"),
                K = Object(i.a)("div", {
                    target: "e1914l3r3",
                    label: "ThemesCoverContainer"
                })("position:absolute;max-width:", (({
                    isMobile: e
                }) => e ? p.d.size("328px") : p.d.size("484px")), ";background-color:", p.c.lighterBackground, ";animation:250ms slidedown ", j + 250, "ms ease-out forwards;animation-delay:1.5s;transform:translateY(-100%);@keyframes slidedown{from{transform:translateY(-100%);}to{transform:", (({
                    isMobile: e
                }) => e ? "translateY(100%)" : "translateY(30%)"), ";box-shadow:", H, ";}}@keyframes skeleton-loading{0%{opacity:0.3;}100%{opacity:1;}}"),
                q = Object(i.a)("div", {
                    target: "e1914l3r4",
                    label: "MainCoverSection"
                })("display:flex;flex-direction:column;align-items:center;justify-content:center;padding-block:", (({
                    isMobile: e
                }) => e ? p.d.paddingUnits(6) : p.d.paddingUnits(8)), ";padding-inline:", (({
                    isMobile: e
                }) => e ? p.d.paddingUnits(6) : p.d.paddingUnits(16)), ";"),
                Y = Object(i.a)("div", {
                    target: "e1914l3r5",
                    label: "SkeletonContainer"
                })("display:flex;flex-direction:column;align-items:center;margin-top:", p.d.marginUnits(8), ";"),
                X = Object(i.a)("div", {
                    target: "e1914l3r6",
                    label: "SkeletonAvatarImage"
                })("height:", p.d.size("92px"), ";width:", p.d.size("92px"), ";border-radius:50%;background-color:", p.c.lightGray, ";animation:skeleton-loading 1s linear infinite alternate;"),
                Q = Object(i.a)("div", {
                    target: "e1914l3r7",
                    label: "SkeletonTitle"
                })("height:", p.d.size("36px"), ";width:60%;margin-top:", p.d.marginUnits(6), ";margin-bottom:", p.d.marginUnits(4), ";border-radius:3px;background-color:", p.c.lightGray, ";animation:skeleton-loading 1s linear infinite alternate;"),
                Z = Object(i.a)("div", {
                    target: "e1914l3r8",
                    label: "SkeletonDescription"
                })("height:", p.d.size("16px"), ";width:", (({
                    percentWidth: e
                }) => e), "%;margin-bottom:", p.d.marginUnits(2), ";border-radius:3px;background-color:", p.c.lightGray, ";animation:skeleton-loading 1s linear infinite alternate;"),
                J = Object(i.a)("span", {
                    target: "e1914l3r9",
                    label: "TitleText"
                })("font-size:", p.i.size800, ";font-weight:", p.j.semiBold, ";line-height:", p.d.legacyLineHeight("30px"), ";"),
                ee = Object(i.a)("span", {
                    target: "e1914l3r10",
                    label: "DescriptionText"
                })("margin-top:", p.d.marginUnits(2), ";margin-bottom:", p.d.marginUnits(6), ";line-height:", p.d.legacyLineHeight("150%"), ";font-size:", p.i.size500, ";font-weight:", p.j.normal, ";text-align:", (({
                    meetingThemesEnabled: e
                }) => e ? "left" : "center"), ";"),
                te = Object(i.a)("div", {
                    target: "e1914l3r11",
                    label: "Container"
                })({
                    name: "1e56aol",
                    styles: "display:flex;flex-direction:column;width:100%;position:relative;&:focus-within{z-index:2147483647;}"
                }),
                ne = Object(i.a)("span", {
                    target: "e1914l3r12",
                    label: "InputFieldLabel"
                })("margin-bottom:", p.d.marginUnits(2), ";align-self:flex-start;font-weight:", p.j.semiBold, ";font-size:", p.i.size300, ";text-align:left;"),
                ae = Object(i.a)("div", {
                    target: "e1914l3r13",
                    label: "InputContainer"
                })({
                    name: "1xhj18k",
                    styles: "display:flex;flex-direction:row;"
                }),
                ie = Object(i.a)("input", {
                    target: "e1914l3r14",
                    label: "Input"
                })("padding:", p.d.paddingUnits(3), " ", p.d.paddingUnits(4), ";flex:", (({
                    meetingThemesEnabled: e,
                    isMobile: t
                }) => e && t ? "100%" : "auto"), ";border:1px solid ", p.c.buttonIconDisabled, ";", (({
                    multipleFields: e,
                    meetingThemesEnabled: t
                }) => !e && !t && "border-right: none;"), " border-top-left-radius:3px;border-bottom-left-radius:3px;", (({
                    multipleFields: e
                }) => e && "border-radius: 3px;"), " ", (({
                    disabled: e
                }) => e && "cursor: not-allowed;"), " font-size:", p.i.size500, ";font-weight:", p.j.normal, ";color:", p.c.blackPearl, ";background-color:", (({
                    meetingThemesEnabled: e
                }) => e ? p.c.white : "none"), ";&::placeholder{color:", p.c.placeholder, ";}&:focus{outline:none !important;border:1px solid ", x.a.MEETING_BOOKER_COLOR, ";}"),
                oe = Object(i.a)("textarea", {
                    target: "e1914l3r15",
                    label: "TextArea"
                })("padding:", p.d.paddingUnits(3), " ", p.d.paddingUnits(4), ";resize:none;flex:auto;border:1px solid ", p.c.buttonIconDisabled, ";border-radius:3px;", (({
                    disabled: e
                }) => e && "cursor: not-allowed;"), " font-size:", p.i.size500, ";font-weight:", p.j.normal, ";color:", p.c.blackPearl, ";&::placeholder{color:", p.c.placeholder, ";}&:focus{outline:none !important;border:1px solid ", x.a.MEETING_BOOKER_COLOR, ";}"),
                re = Object(i.a)("div", {
                    target: "e1914l3r16",
                    label: "PhoneInput"
                })("flex:auto;.selected-flag{", (({
                    disabled: e
                }) => e && "cursor: not-allowed;"), "}input{padding:", p.d.unsafePadding("11.5px"), " ", p.d.paddingUnits(4), ";border:1px solid ", p.c.buttonIconDisabled, ";", (({
                    multipleFields: e
                }) => !e && "border-right: none;"), " border-top-left-radius:3px;border-bottom-left-radius:3px;", (({
                    multipleFields: e
                }) => e && "border-radius: 3px;"), " ", (({
                    disabled: e
                }) => e && "cursor: not-allowed;"), " font-size:", p.i.size500, ";font-weight:", p.j.normal, ";color:", p.c.blackPearl, ";&::placeholder{color:", p.c.placeholder, ";}&:focus{outline:none !important;border:1px solid ", x.a.MEETING_BOOKER_COLOR, ";}}"),
                se = Object(i.a)("div", {
                    target: "e1914l3r17",
                    label: "SelectInputContainer"
                })({
                    name: "1jc3i5n",
                    styles: "flex:auto;text-align:left;"
                }),
                le = Object(i.a)("button", {
                    target: "e1914l3r18",
                    label: "ConfirmButton"
                })("padding:", p.d.paddingUnits(3), " ", p.d.paddingUnits(4), ";", (({
                    multipleFields: e
                }) => e && `margin-top: ${p.d.marginUnits(2)};`), " height:", p.d.legacySize("42px"), ";background-color:", x.a.MEETING_BOOKER_COLOR, ";color:", x.a.MEETING_BOOKER_TEXT_COLOR, ";border-top-right-radius:3px;border-bottom-right-radius:3px;", (({
                    multipleFields: e
                }) => e && "border-radius: 3px;"), " &:hover{background-color:", x.a.DARKENED_MEETING_BOOKER_COLOR, ";}&:focus{outline:1px solid ", x.a.MEETING_BOOKER_COLOR, ";}", (({
                    makeButtonsViewOnly: e
                }) => e && "pointer-events: none;")),
                de = Object(i.a)("span", {
                    target: "e1914l3r19",
                    label: "ValidationErrorsMessage"
                })("font-size:", p.i.size100, ";color:", p.c.dangerRed, ";text-align:left;margin-top:", p.d.marginUnits(1), ";height:", p.d.size("16px"), ";display:block;"),
                ce = ({
                    getStyles: e,
                    data: t,
                    isSelected: n,
                    isFocused: i,
                    innerProps: o,
                    ...s
                }) => r.a.createElement("div", {
                    className: Object(a.c)(Object(a.b)(e("option", s), ";label:SelectOptionComponent;"), n && Object(a.b)("background-color:", x.a.MEETING_BOOKER_COLOR, ";color:", x.a.MEETING_BOOKER_TEXT_COLOR, ";;label:SelectOptionComponent;"), i && Object(a.b)("background-color:", x.a.DARKENED_MEETING_BOOKER_COLOR, ";color:", x.a.MEETING_BOOKER_TEXT_COLOR, ";;label:SelectOptionComponent;"), Object(a.b)("&:active{background-color:", x.a.DARKENED_MEETING_BOOKER_COLOR, ";color:", x.a.MEETING_BOOKER_TEXT_COLOR, ";};label:SelectOptionComponent;")),
                    ...o
                }, t.label),
                ue = ({
                    disabled: e,
                    value: t,
                    field: n,
                    index: a,
                    fields: i,
                    setValue: o,
                    setValidationError: s,
                    onKeyPress: l,
                    meetingThemesEnabled: d,
                    isMobile: c
                }) => {
                    const u = {
                        picklist: ve,
                        text: ge,
                        phone: he,
                        boolean: pe
                    }[n.type] || me;
                    return r.a.createElement(u, {
                        disabled: e,
                        value: t,
                        field: n,
                        index: a,
                        fields: i,
                        setValue: o,
                        setValidationError: s,
                        onKeyPress: l,
                        meetingThemesEnabled: d,
                        isMobile: c
                    })
                },
                me = ({
                    disabled: e,
                    value: t,
                    field: n,
                    index: a,
                    fields: i,
                    setValue: o,
                    setValidationError: s,
                    onKeyPress: l,
                    meetingThemesEnabled: d,
                    isMobile: c
                }) => {
                    const u = r.a.useContext(D.a);
                    return r.a.createElement(ie, {
                        id: `input-field-${a}`,
                        type: {
                            decimal: "number"
                        }[n.type] || "text",
                        value: t,
                        onChange: e => {
                            o(e.target.value);
                            const t = ((e, t) => {
                                if (!t) return u.t("messenger.error.required");
                                if ("email" === e.type) {
                                    const [n, a] = Object(w.c)(t, !!e.validateEmailDomain);
                                    if (!n) return "personal" === a ? u.t("messenger.error.business_email") : u.t("messenger.error.email")
                                }
                                if ("name" === e.type && e.validateFullName && !Object(k.a)(t)) return u.t("messenger.error.name");
                                if (e.validation && e.validation.regex && !new RegExp(e.validation.regex).test(t)) return e.validation.error || "Invalid value";
                                return null
                            })(n, e.target.value);
                            s(t || null)
                        },
                        onKeyDown: l,
                        placeholder: d ? "Business email" : n.placeholder || "",
                        disabled: e,
                        multipleFields: i.filter((e => !e.hidden)).length > 1,
                        meetingThemesEnabled: d,
                        isMobile: c
                    })
                },
                ge = ({
                    disabled: e,
                    value: t,
                    field: n,
                    index: a,
                    setValue: i,
                    setValidationError: o
                }) => {
                    const s = r.a.useContext(D.a);
                    return r.a.createElement(oe, {
                        id: `input-field-${a}`,
                        value: t,
                        onChange: e => {
                            i(e.target.value), e.target.value ? o(null) : o(s.t("messenger.error.required"))
                        },
                        placeholder: n.placeholder || "",
                        disabled: e
                    })
                },
                pe = ({
                    disabled: e,
                    value: t,
                    setValue: n,
                    setValidationError: a,
                    field: i
                }) => {
                    const {
                        styleVariableValues: o
                    } = Object(I.c)(), s = Object(f.b)();
                    return r.a.createElement(l.a, {
                        width: "100%"
                    }, r.a.createElement(O, {
                        theme: Object(C.a)({
                            currentTheme: s.components.SplitRadioOption,
                            meetingBookerColor: o.MEETING_BOOKER_COLOR,
                            meetingBookerTextColor: o.MEETING_BOOKER_TEXT_COLOR
                        }),
                        disabled: e,
                        label: i.label,
                        name: i.fieldId,
                        screenReaderOnlyLabel: !0
                    }, r.a.createElement(v, {
                        label: "Yes",
                        value: "true",
                        checked: "true" === t,
                        onChange: () => {
                            a(null), n("true")
                        }
                    }), r.a.createElement(v, {
                        label: "No",
                        value: "false",
                        checked: "false" === t,
                        onChange: () => {
                            a(null), n("false")
                        }
                    })))
                },
                he = ({
                    disabled: e,
                    value: t,
                    index: n,
                    fields: a,
                    setValue: i,
                    setValidationError: o,
                    onKeyPress: s
                }) => {
                    const l = r.a.useContext(D.a),
                        d = r.a.createRef();
                    return r.a.createElement(re, {
                        id: `input-field-${n}`,
                        disabled: e,
                        multipleFields: a.filter((e => !e.hidden)).length > 1
                    }, r.a.createElement(B.a, {
                        ref: d,
                        value: t,
                        disabled: e,
                        onKeyDown: s,
                        onChange: ({
                            isValid: e,
                            value: t
                        }) => {
                            i(t), o(e ? null : l.t("messenger.error.phone"))
                        }
                    }))
                },
                ve = ({
                    disabled: e,
                    value: t,
                    field: n,
                    index: a,
                    fields: i,
                    setValue: o,
                    setValidationError: s
                }) => {
                    const l = r.a.useContext(D.a);
                    return r.a.createElement(se, null, r.a.createElement(M.a, {
                        id: `input-field-${a}`,
                        isDisabled: e,
                        value: t,
                        onChange: e => {
                            o(e.value), e.value ? s(null) : s(l.t("messenger.error.required"))
                        },
                        components: {
                            Option: ce
                        },
                        placeholder: n.placeholder || "",
                        options: n.fieldValues || [],
                        maxMenuHeight: 145,
                        menuPlacement: Ee(a, (n.fieldValues || []).length) ? "top" : "bottom",
                        inputControlStyle: {
                            height: 42,
                            minHeight: 42,
                            fontSize: p.d.unsafeFontSize(`${p.n.fontSize500}px`),
                            fontWeight: p.j.normal,
                            color: p.c.blackPearl,
                            ...1 === i.length ? {
                                borderRight: "none",
                                borderTopRightRadius: 0,
                                borderBottomRightRadius: 0
                            } : {},
                            focused: {
                                borderColor: x.a.MEETING_BOOKER_COLOR
                            },
                            disabled: {
                                cursor: "not-allowed",
                                backgroundColor: p.c.inputBackground
                            }
                        }
                    }))
                },
                be = ((e, t = 6, n = !1) => {
                    const a = [];
                    for (let i = 0; i < 7; i++) {
                        let o = Object(T.a)(Object(A.a)(new Date), {
                            days: i + 1,
                            hours: 8
                        });
                        if (!n || !Object(N.a)(o))
                            for (let n = 0; n < t; n++) {
                                const t = Object(T.a)(new Date(o.valueOf()), {
                                    seconds: e
                                });
                                Object(R.a)(t, Object(T.a)(Object(A.a)(new Date(o.valueOf())), {
                                    hours: 17,
                                    minutes: 5
                                })) && a.push({
                                    id: 0,
                                    startsAt: o.toISOString(),
                                    endsAt: t.toISOString()
                                }), o = t
                            }
                    }
                    return a
                })(1800, 16),
                Ee = (e, t) => 4 === e && t > 3;

            function _e(e = !1) {
                const t = Object(o.useContext)(D.a);
                return Object(s.a)(new Date, e ? "z" : "zzzz", {
                    locale: F.a[t.locale]
                })
            }
            const fe = ({
                title: e,
                subtitle: t,
                buttonText: n,
                onClick: i,
                onChangeIdentity: s,
                closeAction: l,
                hideCloseButton: c,
                isMobile: u = !1,
                makeButtonsViewOnly: m = !1,
                inputFields: g = [],
                inputFieldLabel: p,
                placeholder: h,
                validateEmailDomain: v = !1,
                visitorEmail: b,
                meetingThemesEnabled: E = !1,
                showBranding: _ = !1
            }) => {
                const f = r.a.useContext(D.a),
                    O = f.t("messenger.error.required"),
                    [C, k] = r.a.useState(new Array(g.length).fill("")),
                    [T, A] = r.a.useState(g.map((e => e.hidden ? null : O))),
                    [N, R] = r.a.useState(!1);
                Object(o.useEffect)((() => {
                    k(new Array(g.length).fill("")), A(g.map((e => e.hidden ? null : O)))
                }), [g, O]);
                let I = g;
                I && 0 !== I.length || !p || (I = [{
                    fieldId: "email-obsolete-field",
                    label: p,
                    placeholder: h,
                    type: "email",
                    validateEmailDomain: v
                }]);
                const x = () => {
                        T.some((e => e)) ? R(!0) : (R(!1), A(new Array(g.length).fill(null)), null === i || void 0 === i || i(C))
                    },
                    M = e => {
                        "Enter" === e.key && i && x()
                    },
                    B = I.filter((e => !e.hidden)),
                    F = 1 === B.length && "text" !== B[0].type && "boolean" !== B[0].type,
                    w = b && !I.some((e => "email" === e.type && !e.hidden)),
                    j = E ? K : W;
                return r.a.createElement(z, {
                    isMobile: u,
                    className: Object(a.c)({
                        [V]: E
                    }, {
                        [G]: u && E
                    })
                }, r.a.createElement($, null, I.length > 2 && r.a.createElement(Y, null, I.length > 3 && r.a.createElement(X, null), r.a.createElement(Q, null), r.a.createElement(Z, {
                    percentWidth: 100
                }), r.a.createElement(Z, {
                    percentWidth: 85
                })), u && E ? r.a.createElement(U.a, {
                    availableSlots: be,
                    confirmBookingForTimeSlot: () => {},
                    isSmallView: u,
                    showBookedRepPhoto: !0,
                    calendarEventAvatarUrls: [],
                    hideCloseButton: !0,
                    isTimeZoneAbbr: !0,
                    hideBoxShadow: !0,
                    isMobile: u,
                    showBranding: _
                }) : r.a.createElement(y.a, {
                    availableSlots: be,
                    confirmBookingForTimeSlot: () => {},
                    selectedSlot: null,
                    setSelectedSlot: e => {},
                    isSmallView: u,
                    isMobile: u,
                    isBackground: !0,
                    meetingThemesEnabled: E,
                    disableButtonFocus: !0
                })), r.a.createElement(j, {
                    isMobile: u
                }, w && r.a.createElement(P.b, null, f.t("messenger.text_sub.invite_sent", {
                    email: b
                }), " ", r.a.createElement(P.a, {
                    onClick: s
                }, f.t("messenger.text.not_you")), "?"), r.a.createElement(q, {
                    isMobile: u
                }, !m && !c && r.a.createElement("button", {
                    className: Object(a.c)(S.a, w && Object(a.b)({
                        name: "1c5abd3-InputFieldsCollection",
                        styles: "top:30px;;label:InputFieldsCollection;"
                    })),
                    onClick: l,
                    "data-backend-test-id": "close-lightbox-gather"
                }, r.a.createElement(L.a, null)), !E && r.a.createElement(J, null, e), r.a.createElement(ee, {
                    meetingThemesEnabled: E
                }, E ? "To proceed, please enter your business email so we can find time with the right member of our team." : t), I.map(((e, t) => !e.hidden && r.a.createElement(te, {
                    key: t,
                    className: Object(a.b)("z-index:", I.length - t, ";;label:InputFieldsCollection;")
                }, !E && r.a.createElement(ne, null, e.label), r.a.createElement(ae, null, r.a.createElement(d.a, {
                    flexGrow: 1,
                    wrap: "wrap",
                    gapUnits: E ? 4 : 0,
                    justify: "center"
                }, r.a.createElement(ue, {
                    disabled: m,
                    value: C[t],
                    field: e,
                    index: t,
                    fields: B,
                    setValue: e => {
                        C[t] = e, k([...C])
                    },
                    setValidationError: e => {
                        T[t] = e, A([...T])
                    },
                    onKeyPress: M,
                    meetingThemesEnabled: E,
                    isMobile: u
                }), F && r.a.createElement(le, {
                    makeButtonsViewOnly: m,
                    multipleFields: !1,
                    onClick: x
                }, n || (E ? "Send" : "Confirm")))), r.a.createElement(de, null, N && T[t])))), !F && r.a.createElement(le, {
                    makeButtonsViewOnly: m,
                    multipleFields: !0,
                    onClick: x
                }, n || "Confirm"))))
            }
        },
        113: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            })), n.d(t, "b", (function() {
                return o
            })), n.d(t, "c", (function() {
                return s
            }));
            const a = /^[!#-'*+\x2D-9=?A-Z\x5E-~]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
                i = /^(?:[\x20',-.A-Za-z\xA0\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2000-\u200A\u202F\u205F\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3000\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|[\uD800\uD802][\uDE80-\uDE9C]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|[\uD801\uD802][\uDF40-\uDF55]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF60-\uDF72\uDF80-\uDF91]|[\uD802\uD806]\uDE00|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|[\uD804\uD81B]\uDF50|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|[\uD807\uD835]\uDD46|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/,
                o = /^-?\d+(\.\d+)?$/,
                r = ["aol.com", "att.net", "comcast.net", "facebook.com", "gmail.com", "gmx.com", "googlemail.com", "hotmail.com", "hotmail.co.uk", "mac.com", "me.com", "mail.com", "msn.com", "live.com", "sbcglobal.net", "verizon.net", "yahoo.com", "yahoo.co.uk", "email.com", "fastmail.fm", "games.com", "gmx.net", "hush.com", "hushmail.com", "icloud.com", "iname.com", "inbox.com", "lavabit.com", "love.com", "outlook.com", "pobox.com", "protonmail.ch", "protonmail.com", "tutanota.de", "tutanota.com", "tutamail.com", "tuta.io", "keemail.me", "rocketmail.com", "safe-mail.net", "wow.com", "ygm.com", "ymail.com", "zoho.com", "yandex.com", "bellsouth.net", "charter.net", "cox.net", "earthlink.net", "juno.com", "btinternet.com", "virginmedia.com", "blueyonder.co.uk", "freeserve.co.uk", "live.co.uk", "ntlworld.com", "o2.co.uk", "orange.net", "sky.com", "talktalk.co.uk", "tiscali.co.uk", "virgin.net", "wanadoo.co.uk", "bt.com", "sina.com", "sina.cn", "qq.com", "naver.com", "hanmail.net", "daum.net", "nate.com", "yahoo.co.jp", "yahoo.co.kr", "yahoo.co.id", "yahoo.co.in", "yahoo.com.sg", "yahoo.com.ph", "163.com", "yeah.net", "126.com", "21cn.com", "aliyun.com", "foxmail.com", "hotmail.fr", "live.fr", "laposte.net", "yahoo.fr", "wanadoo.fr", "orange.fr", "gmx.fr", "sfr.fr", "neuf.fr", "free.fr", "gmx.de", "hotmail.de", "live.de", "online.de", "t-online.de", "web.de", "yahoo.de", "libero.it", "virgilio.it", "hotmail.it", "aol.it", "tiscali.it", "alice.it", "live.it", "yahoo.it", "email.it", "tin.it", "poste.it", "teletu.it", "mail.ru", "rambler.ru", "yandex.ru", "ya.ru", "list.ru", "hotmail.be", "live.be", "skynet.be", "voo.be", "tvcablenet.be", "telenet.be", "hotmail.com.ar", "live.com.ar", "yahoo.com.ar", "fibertel.com.ar", "speedy.com.ar", "arnet.com.ar", "yahoo.com.mx", "live.com.mx", "hotmail.es", "hotmail.com.mx", "prodigy.net.mx", "yahoo.ca", "hotmail.ca", "bell.net", "shaw.ca", "sympatico.ca", "rogers.com", "yahoo.com.br", "hotmail.com.br", "outlook.com.br", "uol.com.br", "bol.com.br", "terra.com.br", "ig.com.br", "itelefonica.com.br", "r7.com", "zipmail.com.br", "globo.com", "globomail.com", "oi.com.br", "mailinator.com", "gmai.com", "gmeil.com", "none.com"],
                s = (e, t = !1) => {
                    if (!a.test(e)) return [!1, "invalid"];
                    if (t) {
                        const t = e.split("@")[1];
                        if (r.includes(t.toLowerCase())) return [!1, "personal"]
                    }
                    return [!0]
                }
        },
        115: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return N
            }));
            var a = n(5),
                i = n(561),
                o = n.n(i),
                r = n(0),
                s = n.n(r),
                l = n(1017),
                d = n(574),
                c = n(2),
                u = n(562),
                m = n.n(u);
            const g = e => {
                const t = m()(e, {});
                return "http:" === t.protocol || "https:" === t.protocol
            };
            const p = ({
                href: e,
                ...t
            }) => {
                const n = g(e) ? e : void 0;
                return s.a.createElement("a", {
                    className: Object(c.b)({
                        name: "jdit0i-ExternalLink",
                        styles: "cursor:pointer;;label:ExternalLink;"
                    }),
                    target: "_blank",
                    rel: "noopener noreferrer",
                    href: n,
                    ...t
                })
            };
            var h = n(1),
                v = (n(908), n(563)),
                b = n.n(v),
                E = n(564),
                _ = n.n(E);

            function f(e, t, n) {
                if ("text" === e) return function(e) {
                    return {
                        type: "text",
                        value: e.value
                    }
                }(t);
                if ("link" === e) return function(e, t) {
                    return {
                        type: "link",
                        title: e.title ? e.title : null,
                        url: e.url,
                        children: t
                    }
                }(t, n);
                throw new Error(`mdast hyperscript not supported for type ${e}`)
            }

            function O(e, t) {
                const n = e.value,
                    a = function(e, t) {
                        return new RegExp(`${e.source}(?! *\\))(?! *])`, t || e.flags)
                    }(function(e, t) {
                        return new RegExp(e.source.replace(/^\^/, "").replace(/\$$/, ""), t || e.flags)
                    }(t), "g"),
                    i = [];
                let o, r = 0;
                for (; null !== (o = a.exec(n));) {
                    const e = o.index;
                    r !== e && i.push(f("text", {
                        value: n.slice(r, e)
                    }));
                    const t = o[0];
                    i.push(f("link", {
                        url: t
                    }, [f("text", {
                        value: t
                    })])), r = a.lastIndex
                }
                const s = n.slice(r);
                return s.length > 0 && i.push(f("text", {
                    value: s
                })), i
            }
            var C = function(e) {
                return () => t => (b()(t, "text", ((e, t) => {
                    t.length > 0 && "link" === t[t.length - 1].type && (e._ignoreMe = !0)
                })), _()(t, (t => "text" !== t.type ? [t] : t._ignoreMe ? (delete t._ignoreMe, [t]) : O(t, e))), t)
            };
            const S = ["a", "br", "code", "em", "h1", "img", "p", "strong"],
                y = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                k = [C(/(https?:\/\/)?([-a-zA-Z0-9@:%_+~#=]{1,256}\.)+[a-zA-Z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/), C(y), d.a];
            class T extends s.a.Component {
                shouldComponentUpdate(e) {
                    return e.children !== this.props.children
                }
                render() {
                    return this.parse(this.props.children) || null
                }
                sanitizeText(e) {
                    let t = e;
                    return t = t.replace(/[\u202E\u202D]/g, ""), t = t.replace(new RegExp("(_{1,2})\\s*([^_]+?)\\s*\\1", "g"), "$1$2$1"), t = t.replace(new RegExp("\\*([^*]*?)\\s*\\*", "g"), "*$1*"), t = t.replace(new RegExp("\\*\\*\\s*([^*]+?)\\s*\\*\\*", "g"), "**$1**"), t = t.replace(new RegExp("\\[([^\\]]+)\\]\\s+\\(([^)]+)\\)", "g"), "[$1]($2)"), t
                }
                parse(e) {
                    const {
                        disallowBracketLink: t,
                        disallowHeading: n,
                        disallowImage: a,
                        disallowLink: i,
                        emailDecorator: o
                    } = this.props;
                    return e ? s.a.createElement(R, null, s.a.createElement(l.a, {
                        linkTarget: "_blank",
                        allowedElements: S,
                        unwrapDisallowed: !0,
                        remarkPlugins: k,
                        components: {
                            a: n => A.a(e, n, {
                                disallowBracketLink: t,
                                disallowLink: i,
                                emailDecorator: o
                            }),
                            h1: e => A.h1(e, {
                                disallowHeading: n
                            }),
                            img: e => A.img(e, {
                                disallowImage: a
                            })
                        }
                    }, this.sanitizeText(e))) : e
                }
            }
            T.defaultProps = {
                emailDecorator: e => function({
                    email: e
                }) {
                    return s.a.createElement("a", {
                        href: `mailto:${e}`
                    }, e)
                }({
                    email: e
                })
            };
            const A = {
                a(e, t, n) {
                    const {
                        children: a,
                        href: i
                    } = t, {
                        disallowBracketLink: r,
                        disallowLink: l,
                        emailDecorator: d
                    } = n;
                    let c = i;
                    if (l) return y.test(c) ? c : "[link hidden]";
                    if (e.includes(`{{${c}`)) return a;
                    if (y.test(c)) return d(c);
                    if (/^https:\/\/media\.giphy\.com\/media\/.*\/giphy\.gif$/.test(c)) return s.a.createElement("img", {
                        alt: "",
                        src: g(c) ? c : null
                    });
                    /^(?!http|mailto).*/.test(c) && (c = `http://${c}`);
                    try {
                        const e = new URL(c);
                        if (e.host !== o.a.toUnicode(e.host)) {
                            const t = e.toString();
                            return s.a.createElement(p, {
                                href: t
                            }, t)
                        }
                    } catch (u) {}
                    if (r) {
                        const e = (null === a || void 0 === a ? void 0 : a[0]) || "";
                        if (!(1 === (null === a || void 0 === a ? void 0 : a.length) && e === i)) return `[${e}](${i})`
                    }
                    return s.a.createElement(p, {
                        href: c
                    }, a)
                },
                h1(e, t) {
                    const {
                        children: n
                    } = e, {
                        disallowHeading: a
                    } = t;
                    return a ? s.a.createElement("p", null, n) : s.a.createElement("span", {
                        className: "h1"
                    }, n)
                },
                img(e, t) {
                    const {
                        alt: n,
                        src: a,
                        title: i
                    } = e, {
                        disallowImage: o
                    } = t;
                    return o ? "[image hidden]" : /\.svg($|\??)/i.test(a) ? s.a.createElement("img", {
                        alt: n,
                        src: a,
                        title: i,
                        className: "svg-image"
                    }) : s.a.createElement("img", {
                        alt: n,
                        src: a,
                        title: i
                    })
                }
            };
            const N = 1.5,
                R = Object(a.a)("span", {
                    target: "etqy8j10",
                    label: "MarkdownStyleWrapper"
                })("p{line-height:", N, ";margin-top:1em;margin-bottom:1em;&:first-child{margin-top:0;}&:last-child{margin-bottom:0;}}strong{font-weight:", h.j.semiBold, ";}em{font-style:italic;}a{text-decoration:underline;}img{display:block;max-width:100%;margin:auto;&.svg-image{width:", h.d.legacySize("999px"), ";}}code{", h.l, "}span{&.h1{font-size:", h.i._deprecated_size700, ";text-align:center;font-weight:normal;line-height:", h.d.legacyLineHeight("26px"), ";display:block;margin:0.67em 0;}&.h1 ~ p{text-align:center;}}h1 ~ p{text-align:center;}");
            t.b = T
        },
        117: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            const a = e => e ? `url("${e}")` : e
        },
        118: function(e, t, n) {
            "use strict";

            function a(e, t) {
                try {
                    return function(e, t) {
                        return localStorage.setItem(e, JSON.stringify(t)), !0
                    }(e, t)
                } catch (n) {
                    return !1
                }
            }

            function i(e) {
                try {
                    return function(e) {
                        const t = localStorage.getItem(e);
                        return JSON.parse(t)
                    }(e)
                } catch (t) {
                    return null
                }
            }
            n.d(t, "b", (function() {
                return a
            })), n.d(t, "a", (function() {
                return i
            }))
        },
        128: function(e, t, n) {
            "use strict";
            n(2);
            var a = n(0),
                i = n.n(a),
                o = n(429);
            n(931), n(1);
            const r = i.a.forwardRef(((e, t) => {
                const {
                    children: n,
                    disabled: a,
                    disabledX: r,
                    disabledY: s,
                    disableScrollbars: l,
                    ...d
                } = e;
                return i.a.createElement(o.a, {
                    ref: t,
                    options: {
                        overflowBehavior: {
                            x: a || r ? "hidden" : "scroll",
                            y: a || s ? "hidden" : "scroll"
                        },
                        scrollbars: {
                            autoHide: "move",
                            visibility: l ? "hidden" : "visible"
                        }
                    },
                    ...d
                }, n)
            }));
            t.a = r
        },
        129: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(46),
                l = n(6),
                d = n(85),
                c = n(1);
            var u = n.p + "2a410f3f0114a53739643e61a2431439.svg";
            const m = {
                    teamAvailableContainer: Object(a.b)({
                        name: "1gynljh-teamAvailableContainer",
                        styles: "display:block;;label:teamAvailableContainer;"
                    }),
                    profileContainer: Object(a.b)({
                        name: "f9ncd-profileContainer",
                        styles: "display:flex;flex-direction:var(--flexDirection);justify-content:center;align-items:center;flex-direction:column;gap:0;;label:profileContainer;"
                    }),
                    profileContainerSmall: Object(a.b)("flex-direction:row;gap:", c.d.gapUnits(2), ";;label:profileContainerSmall;"),
                    profileContainerDefault: Object(a.b)("flex-direction:row;gap:", c.d.gapUnits(4), ";;label:profileContainerDefault;"),
                    profileAvatar: Object(a.b)({
                        name: "iplv3j-profileAvatar",
                        styles: "margin:0 auto;border-radius:50%;;label:profileAvatar;"
                    }),
                    profileAvatarContainer: Object(a.b)({
                        name: "12rljia-profileAvatarContainer",
                        styles: "position:relative;display:none;@media screen and (min-height:750px){display:inline-block;};label:profileAvatarContainer;"
                    }),
                    forceShowProfileAvatarContainer: Object(a.b)({
                        name: "k267da-forceShowProfileAvatarContainer",
                        styles: "display:inline-block;;label:forceShowProfileAvatarContainer;"
                    }),
                    scheduleWithLabel: Object(a.b)({
                        name: "1bbelud-scheduleWithLabel",
                        styles: "display:inline;@media screen and (min-height:750px){display:none;};label:scheduleWithLabel;"
                    }),
                    profileOverlay: Object(a.b)({
                        name: "1t5rof8-profileOverlay",
                        styles: "position:absolute;bottom:0;right:0;display:block;;label:profileOverlay;"
                    }),
                    profileName: Object(a.b)("margin-top:var(--marginTop);margin-bottom:0;font-weight:", c.j.semiBold, ";font-size:var(--fontSize);;label:profileName;"),
                    profileRole: Object(a.b)("margin-top:var(--marginTop);color:", c.c.secondaryText, ";font-weight:", c.j.normal, ";margin-bottom:0;font-size:var(--fontSize);;label:profileRole;"),
                    profileInfoRow: Object(a.b)({
                        name: "1kvf1wk-profileInfoRow",
                        styles: "text-align:left;;label:profileInfoRow;"
                    })
                },
                g = Object(i.a)("span", {
                    target: "es0rnvm0",
                    label: "ProfileInitial"
                })("width:var(--size);height:var(--size);display:flex;justify-content:center;align-items:center;background:", l.a.MEETING_BOOKER_COLOR, ";color:", l.a.MEETING_BOOKER_TEXT_COLOR, ";border-radius:50%;margin:0 auto;font-weight:", c.j.semiBold, ";font-size:var(--avatarFontSize);"),
                p = ({
                    avatarUrl: e,
                    avatarSize: t,
                    showGreenCheck: n
                }) => r.a.createElement(r.a.Fragment, null, r.a.createElement("img", {
                    className: m.profileAvatar,
                    src: e,
                    alt: "rep",
                    width: t,
                    height: t
                }), n && r.a.createElement("img", {
                    className: m.profileOverlay,
                    src: u,
                    alt: "",
                    height: t / 2.5
                })),
                h = ({
                    repName: e,
                    avatarSize: t,
                    avatarFontSize: n,
                    showGreenCheck: a
                }) => a ? r.a.createElement("img", {
                    className: m.profileAvatar,
                    src: u,
                    alt: "",
                    height: t
                }) : r.a.createElement(g, {
                    className: m.profileAvatar,
                    style: Object(s.a)({
                        size: `${t}px`,
                        avatarFontSize: `${n}px`
                    }),
                    "aria-hidden": !0
                }, e.charAt(0).toUpperCase());
            t.a = ({
                calendarEventAvatarUrls: e,
                repAvatarUrl: t,
                repName: n,
                repRole: i,
                showGreenCheck: o = !1,
                isSmallView: l,
                isThemesDefaultView: u,
                isLargeView: g,
                forceShowAvatars: v
            }) => {
                const b = {
                    themesDefaultView: {
                        avatarHeight: 64,
                        profileNameFontSize: `${c.n.fontSize600}px`,
                        profileRoleFontSize: `${c.n.fontSize500}px`,
                        avatarFontSize: c.n._deprecated_fontSize1000
                    },
                    default: {
                        avatarHeight: 64,
                        profileNameFontSize: `${c.n.fontSize500}px`,
                        profileRoleFontSize: `${c.n.fontSize300}px`,
                        avatarFontSize: c.n._deprecated_fontSize1000
                    },
                    smallView: {
                        avatarHeight: 40,
                        profileNameFontSize: `${c.n.fontSize300}px`,
                        profileRoleFontSize: `${c.n._deprecated_fontSize200}px`,
                        avatarFontSize: c.n.fontSize800
                    },
                    largeView: {
                        avatarHeight: 166,
                        profileNameFontSize: `${c.n.fontSize600}px`,
                        profileRoleFontSize: `${c.n.fontSize500}px`,
                        avatarFontSize: c.n._deprecated_fontSize1000
                    }
                };
                let E;
                E = l ? b.smallView : g ? b.largeView : u ? b.themesDefaultView : b.default;
                const _ = null != t;
                return null != n ? r.a.createElement("div", {
                    className: m.teamAvailableContainer
                }, r.a.createElement("div", {
                    className: Object(a.c)(m.profileContainer, {
                        [m.profileContainerSmall]: l,
                        [m.profileContainerDefault]: u
                    })
                }, r.a.createElement("div", {
                    className: Object(a.c)(m.profileAvatarContainer, {
                        [m.forceShowProfileAvatarContainer]: v
                    })
                }, _ ? r.a.createElement(p, {
                    avatarUrl: t,
                    avatarSize: E.avatarHeight,
                    showGreenCheck: o
                }) : r.a.createElement(h, {
                    repName: n,
                    showGreenCheck: o,
                    avatarSize: E.avatarHeight,
                    avatarFontSize: E.avatarFontSize
                })), r.a.createElement("div", null, r.a.createElement("p", {
                    className: Object(a.c)(m.profileName, {
                        [m.profileInfoRow]: l || u
                    }),
                    style: Object(s.a)({
                        fontSize: E.profileNameFontSize,
                        marginTop: l || u ? "0.25rem" : "0.5rem"
                    })
                }, r.a.createElement("span", {
                    className: m.scheduleWithLabel
                }, "Schedule with "), n), r.a.createElement("p", {
                    className: Object(a.c)(m.profileRole, {
                        [m.profileInfoRow]: l || u
                    }),
                    style: Object(s.a)({
                        fontSize: E.profileRoleFontSize,
                        marginTop: l || u ? "0" : "4px"
                    })
                }, i)))) : r.a.createElement("div", {
                    className: m.teamAvailableContainer
                }, r.a.createElement("div", {
                    className: Object(a.c)(m.profileAvatarContainer, {
                        [m.forceShowProfileAvatarContainer]: v
                    })
                }, e.length > 1 && r.a.createElement(d.a, {
                    avatarUrls: e.slice(0, 3),
                    avatarHeight: E.avatarHeight
                })))
            }
        },
        132: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return C
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(21),
                s = n(142),
                l = n(1);
            const d = l.d.marginUnits(2),
                c = Object(a.b)({
                    name: "1k6d6ac-UNSTYLED_BUTTON_CSS",
                    styles: "appearance:none;margin:0;border:0;padding:0;background:none;cursor:pointer;;label:UNSTYLED_BUTTON_CSS;"
                }),
                u = Object(a.b)(c, ";border-radius:4px;max-width:100%;&:focus-visible{", l.g.defaultQuartzFocusStyle, ";};label:allVariants;"),
                m = Object(a.b)(u, ";display:inline-flex;justify-content:center;align-items:center;position:relative;text-transform:none;font-size:", l.i.size500, ";font-weight:", l.j.semiBold, ";line-height:", l.k.baseLineHeight, ";min-width:", l.d.size(`${s.b}px`), ";user-select:none;vertical-align:middle;box-shadow:", l.m.interactive100, ';transition:scale 100ms ease-out,background-color 200ms ease-in-out,color 200ms;&::before{position:absolute;content:"";top:0;left:0;width:100%;height:100%;border:1px solid transparent;border-radius:4px;transition:border-color 250ms ease-in-out;};label:buttonAppearance;'),
                g = Object(a.b)(u, ";font:inherit;text-decoration:underline;text-underline-offset:1px;transition:color 200ms;;label:linkAppearance;"),
                p = Object(a.b)({
                    name: "ikvw06-buttonActiveState",
                    styles: "&:active:not(:disabled){scale:0.97;};label:buttonActiveState;"
                }),
                h = Object(a.b)(u, ";", m, ";", p, ";box-shadow:none;padding-inline:0;background-color:transparent;&:disabled{color:", l.c.iconGray, ";background-color:transparent;};label:textAppearance;"),
                v = {
                    buttonHtml: Object(a.b)({
                        name: "8sngu5-buttonHtml",
                        styles: "display:inline-flex;justify-content:center;align-items:center;position:relative;text-transform:none;white-space:nowrap;&:disabled{cursor:not-allowed;};label:buttonHtml;"
                    }),
                    buttonHtmlAndButtonAppearance: Object(a.b)(p, ";&:disabled{color:", l.h.secondary, ";background-color:", l.c.lightGray, ";box-shadow:none;&::before{border-color:transparent;}};label:buttonHtmlAndButtonAppearance;"),
                    buttonHtmlAndLinkAppearance: Object(a.b)({
                        name: "1ch9v7k-buttonHtmlAndLinkAppearance",
                        styles: "&:disabled{opacity:0.5;};label:buttonHtmlAndLinkAppearance;"
                    }),
                    buttonPrimary: Object(a.b)(m, ";background:", l.c.quartzTeal, ";color:", l.c.white, ";&:hover:not(:disabled){background:", l.c.darkTeal, ";};label:buttonPrimary;"),
                    buttonSecondary: Object(a.b)(m, ";background:", l.c.white, ";color:", l.c.quartzTeal, ";&::before{border-color:", l.c.quartzFieldBorder, ";}&:hover:not(:disabled){&::before{border-color:", l.c.quartzTeal, ";}};label:buttonSecondary;"),
                    buttonPrimaryDanger: Object(a.b)(m, ";background:", l.c.quartzRed, ";color:", l.c.white, ";&:hover:not(:disabled){background:", l.c.quartzLightRed, ";}&:focus-visible{outline-color:", l.c.quartzRed, ";};label:buttonPrimaryDanger;"),
                    buttonSecondaryDanger: Object(a.b)(m, ";background:", l.c.white, ";color:", l.c.quartzRed, ";&::before{border-color:", l.c.quartzFieldBorder, ";}&:hover:not(:disabled){&::before{border-color:", l.c.quartzRed, ";}}&:focus-visible{outline-color:", l.c.quartzRed, ";};label:buttonSecondaryDanger;"),
                    tertiary: Object(a.b)(h, ";color:", l.c.quartzTeal, ";&:hover:not(:disabled){color:", l.c.darkTeal, ";};label:tertiary;"),
                    tertiaryDanger: Object(a.b)(h, ";color:", l.c.quartzRed, ";&:hover:not(:disabled){color:", l.c.quartzLightRed, ";}&:focus-visible{outline-color:", l.c.quartzRed, ";};label:tertiaryDanger;"),
                    link: Object(a.b)(g, ";color:", l.h.link, ";&:hover:not(:disabled){color:", Object(r.a)(.15, l.h.link), ";};label:link;"),
                    linkInheritColor: Object(a.b)(g, ";color:inherit;;label:linkInheritColor;"),
                    linkDanger: Object(a.b)(g, ";color:", l.h.linkDanger, ";&:focus-visible{outline-color:currentColor;}&:hover:not(:disabled){color:", Object(r.a)(.15, l.h.linkDanger), ";};label:linkDanger;"),
                    sizes: {
                        small: Object(a.b)("height:", l.d.size("32px"), ";padding-inline:", l.d.paddingUnits(4), ";;label:small;"),
                        medium: Object(a.b)("height:", l.d.size("40px"), ";padding-inline:", l.d.paddingUnits(4), ";;label:medium;"),
                        large: Object(a.b)("height:", l.d.size("44px"), ";padding-inline:", l.d.paddingUnits(6), ";;label:large;")
                    }
                },
                b = {
                    contentLinkVariant: Object(a.b)({
                        name: "ntq9bl-contentLinkVariant",
                        styles: "text-decoration:underline;text-underline-offset:1px;line-height:inherit;overflow:hidden;text-overflow:ellipsis;;label:contentLinkVariant;"
                    }),
                    contentButtonVariant: Object(a.b)({
                        name: "g3ebnu-contentButtonVariant",
                        styles: "display:inline-flex;align-items:center;justify-content:center;overflow:hidden;;label:contentButtonVariant;"
                    }),
                    innerContentButtonVariant: Object(a.b)({
                        name: "nwygt1-innerContentButtonVariant",
                        styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:innerContentButtonVariant;"
                    }),
                    slotButtonVariant: Object(a.b)({
                        name: "8z5p6m-slotButtonVariant",
                        styles: "display:inline-flex;align-items:center;justify-content:center;flex-shrink:0;;label:slotButtonVariant;"
                    }),
                    startSlot: Object(a.b)("margin-right:", d, ";;label:startSlot;"),
                    endSlot: Object(a.b)("margin-left:", d, ";;label:endSlot;")
                },
                E = {
                    button: {
                        content: [b.contentButtonVariant],
                        innerContent: [b.innerContentButtonVariant],
                        startSlot: [b.slotButtonVariant, b.startSlot],
                        endSlot: [b.slotButtonVariant, b.endSlot]
                    },
                    text: {
                        content: [b.contentButtonVariant],
                        innerContent: [b.innerContentButtonVariant],
                        startSlot: [b.slotButtonVariant, b.startSlot],
                        endSlot: [b.slotButtonVariant, b.endSlot]
                    },
                    link: {
                        content: [b.contentLinkVariant],
                        innerContent: [],
                        startSlot: [b.startSlot],
                        endSlot: [b.endSlot]
                    }
                },
                _ = {
                    contentLoading: Object(a.b)({
                        name: "3dbmzs-contentLoading",
                        styles: "visibility:hidden;;label:contentLoading;"
                    }),
                    loading: Object(a.b)({
                        name: "1p58u71-loading",
                        styles: "position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);;label:loading;"
                    }),
                    spinnerSvg: Object(a.b)({
                        name: "6f8jo6-spinnerSvg",
                        styles: "width:1.25em;height:1.25em;transform-origin:center;animation:spinner 2s linear infinite;will-change:transform;@keyframes spinner{100%{transform:rotate(360deg);}};label:spinnerSvg;"
                    }),
                    circleSvg: Object(a.b)({
                        name: "iqwyvd-circleSvg",
                        styles: "stroke:currentColor;stroke-linecap:round;stroke-width:2px;animation:circleSpinnerAnimation 1.5s ease-in-out infinite;@keyframes circleSpinnerAnimation{0%{stroke-dasharray:0 150px;stroke-dashoffset:0;}47.5%{stroke-dasharray:42px 150px;stroke-dashoffset:-16px;}95%,100%{stroke-dasharray:42px 150px;stroke-dashoffset:-59px;}};label:circleSvg;"
                    })
                },
                f = {
                    primary: v.buttonPrimary,
                    secondary: v.buttonSecondary,
                    tertiary: v.tertiary,
                    tertiaryDanger: v.tertiaryDanger,
                    link: v.link,
                    linkInheritColor: v.linkInheritColor,
                    primaryDanger: v.buttonPrimaryDanger,
                    secondaryDanger: v.buttonSecondaryDanger,
                    linkDanger: v.linkDanger
                },
                O = {
                    small: v.sizes.small,
                    medium: v.sizes.medium,
                    large: v.sizes.large
                },
                C = o.a.forwardRef((({
                    _quartzInternal_className: e,
                    children: t,
                    type: n = "button",
                    variant: i = "secondary",
                    size: r = "medium",
                    startSlot: s,
                    endSlot: d,
                    loading: c,
                    disabled: u,
                    onClick: m,
                    ...g
                }, p) => {
                    const h = (e => e.startsWith("link") ? "link" : e.startsWith("text") ? "text" : "button")(i),
                        b = Object(a.c)(v.buttonHtml, {
                            [v.buttonHtmlAndButtonAppearance]: "button" === h
                        }, {
                            [v.buttonHtmlAndLinkAppearance]: "link" === h
                        }, f[i], {
                            [O[r]]: "button" === h
                        }, e),
                        C = E[h];
                    return o.a.createElement("button", { ...g,
                        type: n,
                        onClick: e => {
                            if (!c) return null === m || void 0 === m ? void 0 : m(e);
                            e.preventDefault()
                        },
                        className: b,
                        "data-variant": i,
                        "data-size": r,
                        disabled: u,
                        "aria-disabled": c,
                        ref: p
                    }, o.a.createElement("span", {
                        className: Object(a.c)(...C.content, {
                            [_.contentLoading]: c
                        }),
                        "data-loading": c
                    }, s ? o.a.createElement("span", {
                        className: Object(a.c)(...C.startSlot)
                    }, s) : null, o.a.createElement("span", {
                        className: Object(a.c)(...C.innerContent)
                    }, t), d ? o.a.createElement("span", {
                        className: Object(a.c)(...C.endSlot)
                    }, d) : null), c ? o.a.createElement("span", {
                        className: _.loading
                    }, o.a.createElement("svg", {
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-hidden": !0,
                        className: _.spinnerSvg,
                        "data-chromatic": "ignore"
                    }, o.a.createElement("circle", {
                        cx: "12",
                        cy: "12",
                        r: "9.5",
                        fill: "none",
                        className: _.circleSvg
                    })), o.a.createElement("span", {
                        "aria-live": "polite",
                        className: l.p
                    }, "Loading\u2026")) : null)
                }))
        },
        134: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MESSENGER_HEADER_BAR_HEIGHT", (function() {
                return r
            })), n.d(t, "classes", (function() {
                return s
            }));
            var a = n(2),
                i = n(6),
                o = n(1);
            const r = 48,
                s = {
                    root: Object(a.b)("margin:0;border-bottom:1px solid ", o.c.border, ";background-color:", i.a.HEADER_BACKGROUND_COLOR, ";background-image:", i.a.HEADER_BACKGROUND_IMAGE, ";background-size:100%;background-position:center;color:", i.a.HEADER_TEXT_COLOR, ";;label:root;"),
                    controls: {
                        root: Object(a.b)("height:", o.d.legacySize(`${r}px`), ";padding:", o.d.paddingUnits(2), " ", o.d.paddingUnits(4), " ", o.d.paddingUnits(2), " ", o.d.paddingUnits(2), ";display:flex;;label:root;"),
                        userDetails: Object(a.b)({
                            name: "1hqmpzd-userDetails",
                            styles: "flex-grow:1;height:100%;overflow:hidden;;label:userDetails;"
                        }),
                        buttons: Object(a.b)("height:100%;min-width:", o.d.size("80px"), ";margin-left:auto;display:inline-flex;justify-content:flex-end;;label:buttons;"),
                        button: Object(a.b)("text-align:right;height:100%;margin-left:", o.d.marginUnits(4), ";color:", i.a.HEADER_ICON_BUTTON_COLOR, ";;label:button;"),
                        closeButton: Object(a.b)("margin-left:", o.d.marginUnits(6), ";margin-top:", o.d.legacyMargin("-3px"), ";color:", i.a.HEADER_ICON_BUTTON_COLOR, ";;label:closeButton;")
                    }
                }
        },
        14: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return u
            })), n.d(t, "c", (function() {
                return m
            })), n.d(t, "b", (function() {
                return g
            }));
            var a = n(0),
                i = n.n(a);
            var o = {
                ACCOUNT_QUERY: {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "CurrentAccount"
                        },
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "account"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "firstName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "email"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "phoneNumber"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "jobTitle"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "avatarUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "timeZone"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "meetingConferenceDetails"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarInviteBody"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarMinimumNotice"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarBuffer"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarAvailability"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "day"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "start"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "end"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileNotificationSchedule"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "day"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "start"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "end"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableReturnVisitorAlerts"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableVoiceAlerts"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableBlurBackground"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "defaultNotificationSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "dismissedDesktopAnnouncement"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "waitingForRepNotificationSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "waitingForRepVoiceAlert"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "role"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsCsm"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsChat"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsMeeting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsViewAllVisitors"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAllTeamSettings"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditTeammates"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditGroups"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditTeamCalendar"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditBusinessHours"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSso"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMessenger"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditVsiitorFields"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSegments"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditLiveStreams"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditRouting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditExperiences"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMacros"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSalesforce"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditPardot"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMarketo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditHubspot"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditEloqua"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditOutreach"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditClearbit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSixsense"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditDemandbase"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSlack"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMicrosoft"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditZoominfo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSalesloft"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditLinkedin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditGoogle"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsViewAllStatistics"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAnalytics"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsExportReports"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotView"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotEdit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotPublish"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMeetingTypes"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMeetingRouting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAutoPounce"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "available"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "videoAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "autoPounceAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "snoozeEndsAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMobile"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileRequestForChatSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileMessageReceivedSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "salesforceConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "updatedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "username"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "CalendarConnection"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slackConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "microsoftConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalid"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "externalMeetingConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "updatedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "email"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalid"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalidAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scopes"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "macros"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "Macro"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "announcements"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "Announcement"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "team"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "allowlistedDomains"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "company"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "appexchangeCompanyName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "phoneNumber"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "countryCode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "features"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesSendGaEvents"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesSendFbEvents"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesShowIdleVisitorsDefault"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesShowSalesforceMatchSettings"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesSfdcOauthPromptSelectAccount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesDisableScimRoleSync"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "preferencesDisableDesktopAppAnnouncement"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "defaultSyncActionType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "samlEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "samlVerified"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scimEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scimToken"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "identityProvider"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "maximumExportRows"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "createdAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signalsToken"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "privacyPolicyMaxLength"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activeLinkedinAdAccounts"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "LinkedInAdAccount"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activeGoogleAdAccounts"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "GoogleAdAccount"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "salesforceConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "updatedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "username"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sandbox"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "instanceUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "matchSettings"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "__typename"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "contactExternalFieldId"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "leadExternalFieldId"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "pardotConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "email"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dynamicContentConfigured"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "activityTrackingConfigured"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "demo"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "businessUnitId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "username"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "zoomInfoConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "email"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "enterpriseEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "websightsEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "rateLimitedEnterprise"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "rateLimitedWebsights"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "marketoConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "munchkinId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "clearbitConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secretKeyMasked"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "revealEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "enrichmentEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "confidenceThreshold"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sixsenseConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secretKeyMasked"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "confidenceThreshold"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "productLines"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "slackConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "authorizedUserEmailScopes"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "microsoftConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "email"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "demandbaseConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secretKeyMasked"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hubspotConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "visitorAssociationConfigured"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasAllScopes"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "identifier"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "linkedinConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "LinkedInConnection"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "facebookConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "FacebookConnection"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "eloquaConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "visitorAssociationConfigured"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "outreachGalaxyConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "salesloftConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "invalid"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "googleConnection"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "GoogleConnection"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "users"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "TeamUser"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "inactiveUsers"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "TeamUser"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "groups"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "members"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "__typename"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "segments"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "SegmentMeta"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "calendarEventTypes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "duration"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sendReminder"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "eventTitle"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "eventBody"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "enableMeetingLink"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "enableCalendarEventTypeInChat"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "macros"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Macro"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "fields"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "apiName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hidden"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "listVisible"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "variables"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Variable"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "dashboards"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "settings"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "DashboardSettings"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "listGroupings"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "ListGrouping"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "businessHours"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "days"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "startHour"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "endHour"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timeZone"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "calendarEventExclusionDates"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "CalendarEventExclusionDate"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "activeMeeting"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "status"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "startedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "visitorId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TeamUser"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "User"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "email"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "avatarUrl"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "available"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "snoozeEndsAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "role"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "customAdminPermissions"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsAdmin"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsViewAllVisitors"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditAllTeamSettings"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditTeammates"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditGroups"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditTeamCalendar"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditBusinessHours"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSso"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMessenger"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditVsiitorFields"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSegments"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditLiveStreams"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditRouting"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditExperiences"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMacros"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSalesforce"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditPardot"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMarketo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditHubspot"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditEloqua"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditOutreach"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditClearbit"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSixsense"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditDemandbase"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSlack"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMicrosoft"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditZoominfo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditSalesloft"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditLinkedin"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditGoogle"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsViewAllStatistics"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditAnalytics"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsExportReports"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsBotView"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsBotEdit"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsBotPublish"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMeetingTypes"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditMeetingRouting"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissionsEditAutoPounce"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "status"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "lastOnlineAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "authenticationState"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "lastInviteSentAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "lastSamlBindingLinkSentAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "calendarReminderSentAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "groups"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "salesforceConnection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "updatedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "calendarInviteBody"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "meetingConferenceDetails"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "calendarConnection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "CalendarConnection"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slackConnection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "microsoftConnection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "invalid"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "externalMeetingConnection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "CalendarConnection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CalendarConnection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "updatedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "email"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalid"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalidAt"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Macro"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Macro"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "shared"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "steps"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "opcode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "operands"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "SegmentMeta"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Segment"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Announcement"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Announcement"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ctaText"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ctaUrl"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "startsAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "endsAt"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Variable"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Variable"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "key"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "category"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "group"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "source"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "label"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "require"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "DashboardSettings"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DashboardSettings"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "startDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "endDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "currencyField"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "conversationDateThreshold"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "opportunityTypes"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "status"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stages"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "attributedOpportunityTiles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "color"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "attributionModel"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "columns"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "expression"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "orderBy"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "orderReversed"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "matchTypes"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "leadSourceFieldValues"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ListGrouping"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ListGrouping"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "color"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "position"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bots"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "loadingDraftScript"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "segments"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "listGroupingSetting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "listGroupingId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settingsSendPushNotification"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settingsDisableConsoleNotification"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settingsEnableVoiceNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "autoPounce"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LinkedInConnection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LinkedInConnection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "firstName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "lastName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accountId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalid"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LinkedInAdAccount"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LinkedInAdAccount"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "externalId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GoogleConnection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "GoogleConnection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "email"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "loginCustomerId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalid"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GoogleAdAccount"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "GoogleAdAccount"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "externalId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FacebookConnection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FacebookConnection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "email"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "CalendarEventExclusionDate"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CalendarEventExclusionDate"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "startDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "endDate"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 12317,
                        source: {
                            body: "\n    query CurrentAccount {\n      account {\n        id\n        name\n        firstName\n        lastName\n        email\n        phoneNumber\n        jobTitle\n        avatarUrl\n        timeZone\n        meetingConferenceDetails\n        calendarInviteBody\n        calendarMinimumNotice\n        calendarBuffer\n        calendarAvailability {\n          day\n          start\n          end\n          __typename\n        }\n        mobileNotificationSchedule {\n          day\n          start\n          end\n          __typename\n        }\n        enableReturnVisitorAlerts\n        enableVoiceAlerts\n        enableBlurBackground\n        defaultNotificationSound\n        dismissedDesktopAnnouncement\n        waitingForRepNotificationSound\n        waitingForRepVoiceAlert\n        role\n        permissionsAdmin\n        permissionsCsm\n        permissionsChat\n        permissionsMeeting\n        permissionsViewAllVisitors\n        permissionsEditAllTeamSettings\n        permissionsEditTeammates\n        permissionsEditGroups\n        permissionsEditTeamCalendar\n        permissionsEditBusinessHours\n        permissionsEditSso\n        permissionsEditMessenger\n        permissionsEditVsiitorFields\n        permissionsEditSegments\n        permissionsEditLiveStreams\n        permissionsEditRouting\n        permissionsEditExperiences\n        permissionsEditMacros\n        permissionsEditSalesforce\n        permissionsEditPardot\n        permissionsEditMarketo\n        permissionsEditHubspot\n        permissionsEditEloqua\n        permissionsEditOutreach\n        permissionsEditClearbit\n        permissionsEditSixsense\n        permissionsEditDemandbase\n        permissionsEditSlack\n        permissionsEditMicrosoft\n        permissionsEditZoominfo\n        permissionsEditSalesloft\n        permissionsEditLinkedin\n        permissionsEditGoogle\n        permissionsViewAllStatistics\n        permissionsEditAnalytics\n        permissionsExportReports\n        permissionsBotView\n        permissionsBotEdit\n        permissionsBotPublish\n        permissionsEditMeetingTypes\n        permissionsEditMeetingRouting\n        permissionsEditAutoPounce\n        available\n        videoAvailable\n        autoPounceAvailable\n        snoozeEndsAt\n        hasMobile\n        mobileRequestForChatSound\n        mobileMessageReceivedSound\n        __typename\n        salesforceConnection {\n          id\n          __typename\n          updatedAt\n          username\n        }\n        calendarConnection {\n          ...CalendarConnection\n        }\n        slackConnection {\n          id\n          __typename\n        }\n        microsoftConnection {\n          id\n          __typename\n          invalid\n        }\n        externalMeetingConnection {\n          id\n          __typename\n          updatedAt\n          email\n          type\n          invalid\n          invalidAt\n          scopes\n        }\n        macros {\n          ...Macro\n        }\n        announcements {\n          ...Announcement\n        }\n        team {\n          id\n          allowlistedDomains\n          company\n          appexchangeCompanyName\n          token\n          phoneNumber\n          countryCode\n          features\n          preferencesSendGaEvents\n          preferencesSendFbEvents\n          preferencesShowIdleVisitorsDefault\n          preferencesShowSalesforceMatchSettings\n          preferencesSfdcOauthPromptSelectAccount\n          preferencesDisableScimRoleSync\n          preferencesDisableDesktopAppAnnouncement\n          defaultSyncActionType\n          samlEnabled\n          samlVerified\n          scimEnabled\n          scimToken\n          identityProvider\n          maximumExportRows\n          createdAt\n          signalsToken\n          privacyPolicyMaxLength\n          __typename\n          activeLinkedinAdAccounts {\n            ...LinkedInAdAccount\n          }\n          activeGoogleAdAccounts {\n            ...GoogleAdAccount\n          }\n          salesforceConnection {\n            id\n            __typename\n            updatedAt\n            username\n            invalid\n            sandbox\n            instanceUrl\n            matchSettings {\n              __typename\n              type\n              contactExternalFieldId\n              leadExternalFieldId\n            }\n          }\n          pardotConnection {\n            id\n            __typename\n            email\n            dynamicContentConfigured\n            activityTrackingConfigured\n            invalid\n            demo\n            businessUnitId\n            username\n          }\n          zoomInfoConnection {\n            id\n            __typename\n            email\n            invalid\n            enterpriseEnabled\n            websightsEnabled\n            rateLimitedEnterprise\n            rateLimitedWebsights\n          }\n          marketoConnection {\n            id\n            __typename\n            munchkinId\n            invalid\n          }\n          clearbitConnection {\n            id\n            __typename\n            secretKeyMasked\n            revealEnabled\n            enrichmentEnabled\n            confidenceThreshold\n          }\n          sixsenseConnection {\n            id\n            __typename\n            secretKeyMasked\n            confidenceThreshold\n            productLines\n          }\n          slackConnection {\n            id\n            __typename\n            invalid\n            authorizedUserEmailScopes\n          }\n          microsoftConnection {\n            id\n            __typename\n            invalid\n            email\n          }\n          demandbaseConnection {\n            id\n            __typename\n            secretKeyMasked\n          }\n          hubspotConnection {\n            id\n            __typename\n            visitorAssociationConfigured\n            hasAllScopes\n            invalid\n            identifier\n          }\n          linkedinConnection {\n            ...LinkedInConnection\n          }\n          facebookConnection {\n            ...FacebookConnection\n          }\n          eloquaConnection {\n            id\n            __typename\n            visitorAssociationConfigured\n            invalid\n          }\n          outreachGalaxyConnection {\n            id\n            __typename\n            invalid\n          }\n          salesloftConnection {\n            id\n            __typename\n            invalid\n          }\n          googleConnection {\n            ...GoogleConnection\n          }\n          users {\n            ...TeamUser\n          }\n          inactiveUsers {\n            ...TeamUser\n          }\n          groups {\n            id\n            __typename\n            name\n            members {\n              id\n              __typename\n            }\n          }\n          segments {\n            ...SegmentMeta\n          }\n          calendarEventTypes {\n            id\n            name\n            duration\n            sendReminder\n            eventTitle\n            eventBody\n            enableMeetingLink\n            enableCalendarEventTypeInChat\n            __typename\n          }\n          macros {\n            ...Macro\n          }\n          fields {\n            __typename\n            id\n            name\n            apiName\n            type\n            hidden\n            listVisible\n          }\n          variables {\n            ...Variable\n          }\n          dashboards {\n            __typename\n            id\n            type\n            settings {\n              ...DashboardSettings\n            }\n          }\n          listGroupings {\n            ...ListGrouping\n          }\n          businessHours {\n            __typename\n            days\n            startHour\n            endHour\n            timeZone\n          }\n          calendarEventExclusionDates {\n            ...CalendarEventExclusionDate\n          }\n        }\n        activeMeeting {\n          id\n          status\n          token\n          startedAt\n          visitorId\n          userId\n          __typename\n        }\n      }\n    }\n    fragment TeamUser on User {\n      __typename\n      id\n      email\n      name\n      avatarUrl\n      available\n      snoozeEndsAt\n      role\n      customAdminPermissions\n      permissionsAdmin\n      permissionsViewAllVisitors\n      permissionsEditAllTeamSettings\n      permissionsEditTeammates\n      permissionsEditGroups\n      permissionsEditTeamCalendar\n      permissionsEditBusinessHours\n      permissionsEditSso\n      permissionsEditMessenger\n      permissionsEditVsiitorFields\n      permissionsEditSegments\n      permissionsEditLiveStreams\n      permissionsEditRouting\n      permissionsEditExperiences\n      permissionsEditMacros\n      permissionsEditSalesforce\n      permissionsEditPardot\n      permissionsEditMarketo\n      permissionsEditHubspot\n      permissionsEditEloqua\n      permissionsEditOutreach\n      permissionsEditClearbit\n      permissionsEditSixsense\n      permissionsEditDemandbase\n      permissionsEditSlack\n      permissionsEditMicrosoft\n      permissionsEditZoominfo\n      permissionsEditSalesloft\n      permissionsEditLinkedin\n      permissionsEditGoogle\n      permissionsViewAllStatistics\n      permissionsEditAnalytics\n      permissionsExportReports\n      permissionsBotView\n      permissionsBotEdit\n      permissionsBotPublish\n      permissionsEditMeetingTypes\n      permissionsEditMeetingRouting\n      permissionsEditAutoPounce\n      status\n      lastOnlineAt\n      authenticationState\n      lastInviteSentAt\n      lastSamlBindingLinkSentAt\n      calendarReminderSentAt\n      groups {\n        name\n      }\n      salesforceConnection {\n        __typename\n        id\n        updatedAt\n        username\n      }\n      calendarInviteBody\n      meetingConferenceDetails\n      calendarConnection {\n        ...CalendarConnection\n      }\n      slackConnection {\n        id\n        __typename\n      }\n      microsoftConnection {\n        id\n        __typename\n        invalid\n      }\n      externalMeetingConnection {\n        id\n        type\n        __typename\n      }\n    }\n    fragment CalendarConnection on CalendarConnection {\n      id\n      __typename\n      updatedAt\n      email\n      type\n      invalid\n      invalidAt\n    }\n\n    fragment Macro on Macro {\n      __typename\n      id\n      shared\n      name\n      steps {\n        __typename\n        opcode\n        operands {\n          __typename\n          text\n        }\n      }\n    }\n\n    fragment SegmentMeta on Segment {\n      __typename\n      id\n      name\n    }\n\n    fragment Announcement on Announcement {\n      __typename\n      id\n      ctaText\n      ctaUrl\n      message\n      type\n      startsAt\n      endsAt\n    }\n\n    fragment Variable on Variable {\n      __typename\n      key\n      category\n      type\n      group\n      source\n      label\n      require\n    }\n\n    fragment DashboardSettings on DashboardSettings {\n      __typename\n      startDate\n      endDate\n      currencyField\n      conversationDateThreshold\n      opportunityTypes\n      status\n      stages\n      attributedOpportunityTiles {\n        title\n        color\n        attributionModel\n        columns {\n          expression\n          width\n        }\n        orderBy\n        orderReversed\n        matchTypes\n        leadSourceFieldValues\n      }\n    }\n\n    fragment ListGrouping on ListGrouping {\n      __typename\n      id\n      name\n      color\n      position\n      bots {\n        __typename\n        id\n        loadingDraftScript\n      }\n      segments {\n        __typename\n        id\n      }\n      listGroupingSetting {\n        __typename\n        id\n        listGroupingId\n        settingsSendPushNotification\n        settingsDisableConsoleNotification\n        settingsEnableVoiceNotifications\n        sound\n      }\n      autoPounce\n    }\n\n    fragment LinkedInConnection on LinkedInConnection {\n      id\n      __typename\n      firstName\n      lastName\n      displayName\n      accountId\n      invalid\n    }\n\n    fragment LinkedInAdAccount on LinkedInAdAccount {\n      id\n      __typename\n      externalId\n      name\n    }\n\n    fragment GoogleConnection on GoogleConnection {\n      id\n      __typename\n      email\n      loginCustomerId\n      invalid\n    }\n\n    fragment GoogleAdAccount on GoogleAdAccount {\n      id\n      __typename\n      externalId\n      name\n    }\n\n    fragment FacebookConnection on FacebookConnection {\n      id\n      __typename\n      name\n      email\n    }\n\n    fragment CalendarEventExclusionDate on CalendarEventExclusionDate {\n      __typename\n      id\n      startDate\n      endDate\n    }\n  ",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                MEETING_USER_ACCOUNT_QUERY: {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "CurrentMeetingUserAccount"
                        },
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "account"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "firstName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "email"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "phoneNumber"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "jobTitle"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "avatarUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "timeZone"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "meetingConferenceDetails"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarInviteBody"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarMinimumNotice"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarBuffer"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarAvailability"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "day"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "start"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "end"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileNotificationSchedule"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "day"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "start"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "end"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableReturnVisitorAlerts"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableVoiceAlerts"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableBlurBackground"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "defaultNotificationSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "dismissedDesktopAnnouncement"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "waitingForRepNotificationSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "waitingForRepVoiceAlert"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "role"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsCsm"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsChat"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsMeeting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsViewAllVisitors"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAllTeamSettings"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditTeammates"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditGroups"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditTeamCalendar"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditBusinessHours"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSso"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMessenger"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditVsiitorFields"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSegments"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditLiveStreams"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditRouting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditExperiences"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMacros"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSalesforce"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditPardot"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMarketo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditHubspot"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditEloqua"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditOutreach"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditClearbit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSixsense"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditDemandbase"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSlack"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMicrosoft"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditZoominfo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditSalesloft"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditLinkedin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditGoogle"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsViewAllStatistics"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAnalytics"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsExportReports"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotView"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotEdit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsBotPublish"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMeetingTypes"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditMeetingRouting"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissionsEditAutoPounce"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "available"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "videoAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "autoPounceAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "snoozeEndsAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMobile"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileRequestForChatSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mobileMessageReceivedSound"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "salesforceConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "updatedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "username"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "calendarConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "CalendarConnection"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slackConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "microsoftConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalid"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "externalMeetingConnection"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "updatedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "email"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalid"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "invalidAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scopes"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "announcements"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "Announcement"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "team"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "countryCode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "features"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "samlEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "samlVerified"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scimEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "identityProvider"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "users"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "email"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "avatarUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "calendarConnection"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "invalid"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "CalendarConnection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CalendarConnection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "updatedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "email"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalid"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "invalidAt"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Announcement"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Announcement"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ctaText"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ctaUrl"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "startsAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "endsAt"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 3637,
                        source: {
                            body: "\n    query CurrentMeetingUserAccount {\n      account {\n        id\n        name\n        firstName\n        lastName\n        email\n        phoneNumber\n        jobTitle\n        avatarUrl\n        timeZone\n        meetingConferenceDetails\n        calendarInviteBody\n        calendarMinimumNotice\n        calendarBuffer\n        calendarAvailability {\n          day\n          start\n          end\n          __typename\n        }\n        mobileNotificationSchedule {\n          day\n          start\n          end\n          __typename\n        }\n        enableReturnVisitorAlerts\n        enableVoiceAlerts\n        enableBlurBackground\n        defaultNotificationSound\n        dismissedDesktopAnnouncement\n        waitingForRepNotificationSound\n        waitingForRepVoiceAlert\n        role\n        permissionsAdmin\n        permissionsCsm\n        permissionsChat\n        permissionsMeeting\n        permissionsViewAllVisitors\n        permissionsEditAllTeamSettings\n        permissionsEditTeammates\n        permissionsEditGroups\n        permissionsEditTeamCalendar\n        permissionsEditBusinessHours\n        permissionsEditSso\n        permissionsEditMessenger\n        permissionsEditVsiitorFields\n        permissionsEditSegments\n        permissionsEditLiveStreams\n        permissionsEditRouting\n        permissionsEditExperiences\n        permissionsEditMacros\n        permissionsEditSalesforce\n        permissionsEditPardot\n        permissionsEditMarketo\n        permissionsEditHubspot\n        permissionsEditEloqua\n        permissionsEditOutreach\n        permissionsEditClearbit\n        permissionsEditSixsense\n        permissionsEditDemandbase\n        permissionsEditSlack\n        permissionsEditMicrosoft\n        permissionsEditZoominfo\n        permissionsEditSalesloft\n        permissionsEditLinkedin\n        permissionsEditGoogle\n        permissionsViewAllStatistics\n        permissionsEditAnalytics\n        permissionsExportReports\n        permissionsBotView\n        permissionsBotEdit\n        permissionsBotPublish\n        permissionsEditMeetingTypes\n        permissionsEditMeetingRouting\n        permissionsEditAutoPounce\n        available\n        videoAvailable\n        autoPounceAvailable\n        snoozeEndsAt\n        hasMobile\n        mobileRequestForChatSound\n        mobileMessageReceivedSound\n        __typename\n        salesforceConnection {\n          id\n          __typename\n          updatedAt\n          username\n        }\n        calendarConnection {\n          ...CalendarConnection\n        }\n        slackConnection {\n          id\n          __typename\n        }\n        microsoftConnection {\n          id\n          __typename\n          invalid\n        }\n        externalMeetingConnection {\n          id\n          __typename\n          updatedAt\n          email\n          type\n          invalid\n          invalidAt\n          scopes\n        }\n        announcements {\n          ...Announcement\n        }\n        team {\n          id\n          countryCode\n          features\n          samlEnabled\n          samlVerified\n          scimEnabled\n          identityProvider\n          users {\n            id\n            name\n            email\n            avatarUrl\n            calendarConnection {\n              id\n              invalid\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n    }\n    fragment CalendarConnection on CalendarConnection {\n      id\n      __typename\n      updatedAt\n      email\n      type\n      invalid\n      invalidAt\n    }\n\n    fragment Announcement on Announcement {\n      __typename\n      id\n      ctaText\n      ctaUrl\n      message\n      type\n      startsAt\n      endsAt\n    }\n  ",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                FRAGMENTS: {
                    calendarConnection: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "CalendarConnection"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CalendarConnection"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "updatedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "email"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalid"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalidAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 180,
                            source: {
                                body: "\n      fragment CalendarConnection on CalendarConnection {\n        id\n        __typename\n        updatedAt\n        email\n        type\n        invalid\n        invalidAt\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    meeting: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Meeting"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Meeting"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "token"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "status"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "twilioStatus"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "startedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "endedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "duration"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "OutboundVoiceMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "InboundVoiceMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "enqueuedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "OutboundVideoMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userAccessToken"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "InboundVideoMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userAccessToken"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 1253,
                            source: {
                                body: "\n      fragment Meeting on Meeting {\n        id\n        __typename\n        token\n        status\n        twilioStatus\n        startedAt\n        endedAt\n        duration\n\n        ... on OutboundVoiceMeeting {\n          visitorNumber\n          userNumber\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on InboundVoiceMeeting {\n          visitorNumber\n          userNumber\n          enqueuedAt\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on OutboundVideoMeeting {\n          userAccessToken\n          userTracksStatuses {\n            audio\n            video\n          }\n          visitorTracksStatuses {\n            audio\n            video\n          }\n          user {\n            id\n            name\n          }\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on InboundVideoMeeting {\n          userAccessToken\n          userTracksStatuses {\n            audio\n            video\n          }\n          visitorTracksStatuses {\n            audio\n            video\n          }\n          user {\n            id\n            name\n          }\n          visitor {\n            id\n            listName\n          }\n        }\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    externalList: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "ExternalList"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ExternalList"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "enabled"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 112,
                            source: {
                                body: "\n      fragment ExternalList on ExternalList {\n        id\n        type\n        name\n        enabled\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    teamUser: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "TeamUser"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "User"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "email"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "avatarUrl"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "available"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "snoozeEndsAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "role"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "customAdminPermissions"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsAdmin"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsViewAllVisitors"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditAllTeamSettings"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditTeammates"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditGroups"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditTeamCalendar"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditBusinessHours"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSso"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMessenger"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditVsiitorFields"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSegments"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditLiveStreams"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditRouting"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditExperiences"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMacros"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSalesforce"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditPardot"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMarketo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditHubspot"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditEloqua"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditOutreach"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditClearbit"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSixsense"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditDemandbase"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSlack"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMicrosoft"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditZoominfo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditSalesloft"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditLinkedin"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditGoogle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsViewAllStatistics"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditAnalytics"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsExportReports"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsBotView"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsBotEdit"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsBotPublish"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMeetingTypes"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditMeetingRouting"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "permissionsEditAutoPounce"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "status"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastOnlineAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "authenticationState"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastInviteSentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastSamlBindingLinkSentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "calendarReminderSentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "groups"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "salesforceConnection"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "updatedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "username"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "calendarInviteBody"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "meetingConferenceDetails"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "calendarConnection"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "CalendarConnection"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "slackConnection"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "microsoftConnection"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "invalid"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "externalMeetingConnection"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "CalendarConnection"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CalendarConnection"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "updatedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "email"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalid"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalidAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 2343,
                            source: {
                                body: "\n      fragment TeamUser on User {\n        __typename\n        id\n        email\n        name\n        avatarUrl\n        available\n        snoozeEndsAt\n        role\n        customAdminPermissions\n        permissionsAdmin\n        permissionsViewAllVisitors\n        permissionsEditAllTeamSettings\n        permissionsEditTeammates\n        permissionsEditGroups\n        permissionsEditTeamCalendar\n        permissionsEditBusinessHours\n        permissionsEditSso\n        permissionsEditMessenger\n        permissionsEditVsiitorFields\n        permissionsEditSegments\n        permissionsEditLiveStreams\n        permissionsEditRouting\n        permissionsEditExperiences\n        permissionsEditMacros\n        permissionsEditSalesforce\n        permissionsEditPardot\n        permissionsEditMarketo\n        permissionsEditHubspot\n        permissionsEditEloqua\n        permissionsEditOutreach\n        permissionsEditClearbit\n        permissionsEditSixsense\n        permissionsEditDemandbase\n        permissionsEditSlack\n        permissionsEditMicrosoft\n        permissionsEditZoominfo\n        permissionsEditSalesloft\n        permissionsEditLinkedin\n        permissionsEditGoogle\n        permissionsViewAllStatistics\n        permissionsEditAnalytics\n        permissionsExportReports\n        permissionsBotView\n        permissionsBotEdit\n        permissionsBotPublish\n        permissionsEditMeetingTypes\n        permissionsEditMeetingRouting\n        permissionsEditAutoPounce\n        status\n        lastOnlineAt\n        authenticationState\n        lastInviteSentAt\n        lastSamlBindingLinkSentAt\n        calendarReminderSentAt\n        groups {\n          name\n        }\n        salesforceConnection {\n          __typename\n          id\n          updatedAt\n          username\n        }\n        calendarInviteBody\n        meetingConferenceDetails\n        calendarConnection {\n          ...CalendarConnection\n        }\n        slackConnection {\n          id\n          __typename\n        }\n        microsoftConnection {\n          id\n          __typename\n          invalid\n        }\n        externalMeetingConnection {\n          id\n          type\n          __typename\n        }\n      }\n      fragment CalendarConnection on CalendarConnection {\n        id\n        __typename\n        updatedAt\n        email\n        type\n        invalid\n        invalidAt\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    macro: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Macro"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Macro"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "shared"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "steps"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "opcode"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "operands"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 240,
                            source: {
                                body: "\n      fragment Macro on Macro {\n        __typename\n        id\n        shared\n        name\n        steps {\n          __typename\n          opcode\n          operands {\n            __typename\n            text\n          }\n        }\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    segmentMeta: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "SegmentMeta"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Segment"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 96,
                            source: {
                                body: "\n      fragment SegmentMeta on Segment {\n        __typename\n        id\n        name\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    announcement: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Announcement"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Announcement"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ctaText"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ctaUrl"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "startsAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "endsAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 181,
                            source: {
                                body: "\n      fragment Announcement on Announcement {\n        __typename\n        id\n        ctaText\n        ctaUrl\n        message\n        type\n        startsAt\n        endsAt\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    variable: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Variable"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Variable"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "key"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "category"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "group"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "source"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "label"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "require"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 171,
                            source: {
                                body: "\n      fragment Variable on Variable {\n        __typename\n        key\n        category\n        type\n        group\n        source\n        label\n        require\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    dashboardSettings: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "DashboardSettings"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DashboardSettings"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "startDate"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "endDate"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currencyField"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "conversationDateThreshold"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "opportunityTypes"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "status"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stages"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "attributedOpportunityTiles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "color"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "attributionModel"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "columns"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "expression"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "orderBy"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "orderReversed"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "matchTypes"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "leadSourceFieldValues"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 507,
                            source: {
                                body: "\n      fragment DashboardSettings on DashboardSettings {\n        __typename\n        startDate\n        endDate\n        currencyField\n        conversationDateThreshold\n        opportunityTypes\n        status\n        stages\n        attributedOpportunityTiles {\n          title\n          color\n          attributionModel\n          columns {\n            expression\n            width\n          }\n          orderBy\n          orderReversed\n          matchTypes\n          leadSourceFieldValues\n        }\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    activeMeeting: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "ActiveMeeting"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Meeting"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "Meeting"
                                    },
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "visitorId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userId"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Meeting"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Meeting"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "token"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "status"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "twilioStatus"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "startedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "endedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "duration"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "OutboundVoiceMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "InboundVoiceMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "enqueuedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "OutboundVideoMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userAccessToken"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "InboundVideoMeeting"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userAccessToken"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "userTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorTracksStatuses"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "audio"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "video"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "listName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 1355,
                            source: {
                                body: "\n      fragment ActiveMeeting on Meeting {\n        ...Meeting\n        visitorId\n        userId\n      }\n      fragment Meeting on Meeting {\n        id\n        __typename\n        token\n        status\n        twilioStatus\n        startedAt\n        endedAt\n        duration\n\n        ... on OutboundVoiceMeeting {\n          visitorNumber\n          userNumber\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on InboundVoiceMeeting {\n          visitorNumber\n          userNumber\n          enqueuedAt\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on OutboundVideoMeeting {\n          userAccessToken\n          userTracksStatuses {\n            audio\n            video\n          }\n          visitorTracksStatuses {\n            audio\n            video\n          }\n          user {\n            id\n            name\n          }\n          visitor {\n            id\n            listName\n          }\n        }\n\n        ... on InboundVideoMeeting {\n          userAccessToken\n          userTracksStatuses {\n            audio\n            video\n          }\n          visitorTracksStatuses {\n            audio\n            video\n          }\n          user {\n            id\n            name\n          }\n          visitor {\n            id\n            listName\n          }\n        }\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    listGrouping: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "ListGrouping"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ListGrouping"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "color"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "position"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bots"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "loadingDraftScript"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "segments"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "listGroupingSetting"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "listGroupingId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settingsSendPushNotification"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settingsDisableConsoleNotification"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settingsEnableVoiceNotifications"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sound"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "autoPounce"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 545,
                            source: {
                                body: "\n      fragment ListGrouping on ListGrouping {\n        __typename\n        id\n        name\n        color\n        position\n        bots {\n          __typename\n          id\n          loadingDraftScript\n        }\n        segments {\n          __typename\n          id\n        }\n        listGroupingSetting {\n          __typename\n          id\n          listGroupingId\n          settingsSendPushNotification\n          settingsDisableConsoleNotification\n          settingsEnableVoiceNotifications\n          sound\n        }\n        autoPounce\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    calendarEventExclusionDate: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "CalendarEventExclusionDate"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CalendarEventExclusionDate"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "startDate"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "endDate"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 151,
                            source: {
                                body: "\n      fragment CalendarEventExclusionDate on CalendarEventExclusionDate {\n        __typename\n        id\n        startDate\n        endDate\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    linkedinConnection: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "LinkedInConnection"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "LinkedInConnection"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "firstName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "accountId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalid"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 190,
                            source: {
                                body: "\n      fragment LinkedInConnection on LinkedInConnection {\n        id\n        __typename\n        firstName\n        lastName\n        displayName\n        accountId\n        invalid\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    activeLinkedInAdAccount: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "LinkedInAdAccount"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "LinkedInAdAccount"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "externalId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 131,
                            source: {
                                body: "\n      fragment LinkedInAdAccount on LinkedInAdAccount {\n        id\n        __typename\n        externalId\n        name\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    googleConnection: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "GoogleConnection"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GoogleConnection"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "email"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "loginCustomerId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "invalid"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 151,
                            source: {
                                body: "\n      fragment GoogleConnection on GoogleConnection {\n        id\n        __typename\n        email\n        loginCustomerId\n        invalid\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    activeGoogleAdAccount: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "GoogleAdAccount"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GoogleAdAccount"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "externalId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 127,
                            source: {
                                body: "\n      fragment GoogleAdAccount on GoogleAdAccount {\n        id\n        __typename\n        externalId\n        name\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    facebookConnection: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "FacebookConnection"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "FacebookConnection"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "email"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 128,
                            source: {
                                body: "\n      fragment FacebookConnection on FacebookConnection {\n        id\n        __typename\n        name\n        email\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    },
                    cachedSummaryCartile: {
                        kind: "Document",
                        definitions: [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "CachedSummaryCartile"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SignalsSummaryCartile"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currentTrend"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "signalScore"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "signalScoreState"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "researchScore"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "interpolatedSignals"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "time"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "temperature"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "signalScore"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "activityWeight"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "highIntentAction"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sessionId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitorId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "archivedHighIntentSessions"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "endedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitNumber"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "activeElapsedTime"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "location"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "city"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "region"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "visitor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "signalVisitorName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "highIntentActions"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bomboraTopics"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "score"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }],
                        loc: {
                            start: 0,
                            end: 707,
                            source: {
                                body: "\n      fragment CachedSummaryCartile on SignalsSummaryCartile {\n        currentTrend\n        signalScore\n        signalScoreState\n        researchScore\n        interpolatedSignals {\n          time\n          temperature\n          signalScore\n          activityWeight\n          highIntentAction\n          sessionId\n          visitorId\n        }\n        archivedHighIntentSessions {\n          id\n          endedAt\n          visitNumber\n          activeElapsedTime\n          location {\n            city\n            region\n          }\n          visitor {\n            signalVisitorName\n          }\n          highIntentActions\n        }\n        bomboraTopics {\n          name\n          score\n        }\n      }\n    ",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }
                },
                CAPABILITY_TOKEN_PATH: "/meetings/capability_token",
                MEETING_REQUEST_PATH: "/meetings/request",
                MEETING_DEQUEUE_PATH: "/meetings/dequeue",
                MEETING_START_OUTBOUND_PATH: "/meetings/start_outbound",
                MEETING_END_OUTBOUND_PATH: "/meetings/end_outbound",
                JS_SNIPPET: "\x3c!-- Qualified --\x3e\n<script>\n(function(w,q){w['QualifiedObject']=q;w[q]=w[q]||function(){\n(w[q].q=w[q].q||[]).push(arguments)};})(window,'qualified')\n\n<\/script>\n<script async src=\"*BASE_URL*/qualified.js?token=*TOKEN*\"><\/script>\n\x3c!-- End Qualified --\x3e\n",
                JS_SYNC_SNIPPET: "\x3c!-- Qualified --\x3e\n<script>\n(function(w,q){w['QualifiedObject']=q;w[q]=w[q]||function(){\n(w[q].q=w[q].q||[]).push(arguments)};})(window,'qualified')\n\n<\/script>\n<script src=\"*BASE_URL*/qualified.js?token=*TOKEN*\"><\/script>\n\x3c!-- End Qualified --\x3e\n",
                POSSIBLE_TYPES: {
                    AdData: ["GoogleDisplayAd", "GoogleSearchAd", "GoogleTextAd", "GoogleVideoAd", "LinkedInPost", "MarketingData"],
                    ContentAnimation: ["ContentAnimationPushDown", "ContentAnimationSlideUp"],
                    ContentVariation: ["ContentVariationHeadlineBodyButton", "ContentVariationHeadlineButton", "ContentVariationHeadlineLink"],
                    DashboardTile: ["DashboardTileBar", "DashboardTileFunnel", "DashboardTileHeatmap", "DashboardTileLeaderboard", "DashboardTileLine", "DashboardTileNumeric", "DashboardTileUserAvailabilityTimeline"],
                    DashboardTileLeaderboardRowDataResult: ["BotLeaderboardRowDataResult", "InboundChatLeaderboardRowDataResult", "MeetingChannelLeaderboardRowDataResult", "PounceLeaderboardRowDataResult", "RepLeaderboardRowDataResult"],
                    DashboardTileResult: ["DashboardTileDatedResult", "DashboardTileFunnelResult", "DashboardTileLeaderboardResult", "DashboardTileNumericResult", "DashboardTileUserAvailabilityTimelineResult"],
                    Export: ["ReportExport", "SignalsListExport"],
                    ExternalField: ["BaseExternalField", "DemandbaseExternalField", "SalesforceExternalField"],
                    ExternalForm: ["HubSpotExternalForm", "MarketoExternalForm", "PardotExternalForm"],
                    ExternalObjectAction: ["BaseExternalObjectAction", "MarketoProgramMemberExternalObjectAction", "PardotProspectExternalObjectAction", "SalesforceCampaignMemberExternalObjectAction"],
                    Field: ["BooleanField", "CompanyField", "DecimalField", "EmailField", "NameField", "PhoneField", "PicklistField", "StringField", "TextField"],
                    Meeting: ["InboundVideoMeeting", "InboundVoiceMeeting", "OutboundVideoMeeting", "OutboundVoiceMeeting", "VideoMeeting"],
                    Message: ["CalendarEventConfirmation", "CalendarEventOffer", "CalendarEventPick", "Event", "FieldEntries", "FieldEntry", "FieldRequest", "GreetingMessage", "LightboxGather", "PromptMessage", "System", "Text"],
                    Multical: ["BotStepOperands", "CalendarEventOffer"],
                    OfferResult: ["OfferFailureResult", "OfferSuccessResult"],
                    RoutingRule: ["DefaultRoutingRule", "DynamicRoutingRule", "MeetingDefaultRoutingRule", "MeetingRoutingRule", "MeetingStaticRoutingRule", "StaticRoutingRule"],
                    RoutingRuleDestination: ["DirectRoutingRuleDestination", "OutreachOwnershipRoutingRuleDestination", "SalesforceOwnershipRoutingRuleDestination", "SalesloftOwnershipRoutingRuleDestination"],
                    TargetDuration: ["TargetDurationDateRange"],
                    TargetLocation: ["TargetLocationMultipleDomains", "TargetLocationMultiplePages"],
                    TargetTrigger: ["TargetTriggerAfterPageLoad"]
                },
                EXTERNAL_FIELD_TYPES_TO_FIELD_TYPES: {
                    email: ["EmailField"],
                    phone: ["PhoneField", "StringField"],
                    integer: ["DecimalField", "StringField"],
                    decimal: ["DecimalField", "StringField"],
                    picklist: ["PicklistField", "StringField"],
                    string: ["StringField", "TextField", "EmailField", "NameField", "PhoneField", "DecimalField", "PicklistField", "CompanyField"],
                    url: ["StringField"],
                    date: ["StringField"],
                    time: ["StringField"],
                    boolean: ["BooleanField"]
                },
                NOTIFICATION_ALERT_SOUNDS: {
                    normal: {
                        label: "Default",
                        file: "sounds/qualified-default.mp3"
                    },
                    urgent: {
                        label: "Urgent",
                        file: "sounds/qualified-urgent.mp3"
                    },
                    voice: {
                        label: "Voice"
                    }
                },
                NOTIFICATION_CONFIGURABLE_ALERT_SOUNDS: {
                    one_hundred_percent: {
                        label: "100 Percent",
                        file: "sounds/one_hundred_percent.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    anybody_home: {
                        label: "Anybody Home",
                        file: "sounds/anybody_home.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    blast: {
                        label: "Blast",
                        file: "sounds/blast.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    brighter: {
                        label: "Brighter",
                        file: "sounds/brighter.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    call_for_action: {
                        label: "Call for Action",
                        file: "sounds/call_for_action.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    crisp: {
                        label: "Crisp",
                        file: "sounds/crisp.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    drip: {
                        label: "Drip",
                        file: "sounds/drip.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    echoooo: {
                        label: "Echoooo",
                        file: "sounds/echoooo.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    fader: {
                        label: "Fader",
                        file: "sounds/fader.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    hurry: {
                        label: "Hurry",
                        file: "sounds/hurry.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    indoors: {
                        label: "Indoors",
                        file: "sounds/indoors.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    long_anybody_home: {
                        label: "Long Anybody Home",
                        file: "sounds/long_anybody_home.mp3",
                        length: 7e3,
                        isLong: !0
                    },
                    long_metro: {
                        label: "Long Metro",
                        file: "sounds/long_metro.mp3",
                        length: 7e3,
                        isLong: !0
                    },
                    long_progressive: {
                        label: "Long Progressive",
                        file: "sounds/long_progressive.mp3",
                        length: 8500,
                        isLong: !0
                    },
                    long_ringing_gently: {
                        label: "Long Ringing Gently",
                        file: "sounds/long_ringing_gently.mp3",
                        length: 7e3,
                        isLong: !0
                    },
                    morning_call: {
                        label: "Morning Call",
                        file: "sounds/morning_call.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    robo: {
                        label: "Robo",
                        file: "sounds/robo.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    rolling: {
                        label: "Rolling",
                        file: "sounds/rolling.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    shiny: {
                        label: "Shiny",
                        file: "sounds/shiny.mp3",
                        length: 1e3,
                        isLong: !1
                    },
                    the_pitch: {
                        label: "The Pitch",
                        file: "sounds/the_pitch.mp3",
                        length: 1e3,
                        isLong: !1
                    }
                },
                TIME_ZONES: [{
                    value: "Europe/Andorra",
                    label: "+01:00 - Europe - Andorra"
                }, {
                    value: "Asia/Dubai",
                    label: "+04:00 - Asia - Dubai"
                }, {
                    value: "Asia/Kabul",
                    label: "+04:30 - Kabul"
                }, {
                    value: "America/Port_of_Spain",
                    label: "-04:00 - America - Port of Spain"
                }, {
                    value: "Europe/Tirane",
                    label: "+01:00 - Europe - Tirane"
                }, {
                    value: "Asia/Yerevan",
                    label: "+04:00 - Yerevan"
                }, {
                    value: "Africa/Lagos",
                    label: "+01:00 - Africa - Lagos"
                }, {
                    value: "Antarctica/Casey",
                    label: "+11:00 - Antarctica - Casey"
                }, {
                    value: "Antarctica/Davis",
                    label: "+07:00 - Antarctica - Davis"
                }, {
                    value: "Antarctica/DumontDUrville",
                    label: "+10:00 - Antarctica - Dumont D'Urville"
                }, {
                    value: "Antarctica/Mawson",
                    label: "+05:00 - Antarctica - Mawson"
                }, {
                    value: "Antarctica/Palmer",
                    label: "-03:00 - Antarctica - Palmer"
                }, {
                    value: "Antarctica/Rothera",
                    label: "-03:00 - Antarctica - Rothera"
                }, {
                    value: "Antarctica/Syowa",
                    label: "+03:00 - Antarctica - Syowa"
                }, {
                    value: "Antarctica/Troll",
                    label: "+00:00 - Antarctica - Troll"
                }, {
                    value: "Antarctica/Vostok",
                    label: "+06:00 - Antarctica - Vostok"
                }, {
                    value: "Pacific/Auckland",
                    label: "+12:00 - Auckland"
                }, {
                    value: "America/Argentina/Buenos_Aires",
                    label: "-03:00 - Buenos Aires"
                }, {
                    value: "America/Argentina/Cordoba",
                    label: "-03:00 - America - Cordoba, Argentina"
                }, {
                    value: "America/Argentina/Salta",
                    label: "-03:00 - America - Salta, Argentina"
                }, {
                    value: "America/Argentina/Jujuy",
                    label: "-03:00 - America - Jujuy, Argentina"
                }, {
                    value: "America/Argentina/Tucuman",
                    label: "-03:00 - America - Tucuman, Argentina"
                }, {
                    value: "America/Argentina/Catamarca",
                    label: "-03:00 - America - Catamarca, Argentina"
                }, {
                    value: "America/Argentina/La_Rioja",
                    label: "-03:00 - America - La Rioja, Argentina"
                }, {
                    value: "America/Argentina/San_Juan",
                    label: "-03:00 - America - San Juan, Argentina"
                }, {
                    value: "America/Argentina/Mendoza",
                    label: "-03:00 - America - Mendoza, Argentina"
                }, {
                    value: "America/Argentina/San_Luis",
                    label: "-03:00 - America - San Luis, Argentina"
                }, {
                    value: "America/Argentina/Rio_Gallegos",
                    label: "-03:00 - America - Rio Gallegos, Argentina"
                }, {
                    value: "America/Argentina/Ushuaia",
                    label: "-03:00 - America - Ushuaia, Argentina"
                }, {
                    value: "Pacific/Pago_Pago",
                    label: "-11:00 - Pacific - Pago Pago"
                }, {
                    value: "Europe/Vienna",
                    label: "+01:00 - Vienna"
                }, {
                    value: "Australia/Lord_Howe",
                    label: "+10:30 - Australia - Lord Howe"
                }, {
                    value: "Antarctica/Macquarie",
                    label: "+10:00 - Antarctica - Macquarie"
                }, {
                    value: "Australia/Hobart",
                    label: "+10:00 - Hobart"
                }, {
                    value: "Australia/Currie",
                    label: "+10:00 - Australia - Currie"
                }, {
                    value: "Australia/Melbourne",
                    label: "+10:00 - Melbourne"
                }, {
                    value: "Australia/Sydney",
                    label: "+10:00 - Sydney"
                }, {
                    value: "Australia/Broken_Hill",
                    label: "+09:30 - Australia - Broken Hill"
                }, {
                    value: "Australia/Brisbane",
                    label: "+10:00 - Brisbane"
                }, {
                    value: "Australia/Lindeman",
                    label: "+10:00 - Australia - Lindeman"
                }, {
                    value: "Australia/Adelaide",
                    label: "+09:30 - Adelaide"
                }, {
                    value: "Australia/Darwin",
                    label: "+09:30 - Darwin"
                }, {
                    value: "Australia/Perth",
                    label: "+08:00 - Perth"
                }, {
                    value: "Australia/Eucla",
                    label: "+08:45 - Australia - Eucla"
                }, {
                    value: "America/Curacao",
                    label: "-04:00 - America - Curacao"
                }, {
                    value: "Europe/Helsinki",
                    label: "+02:00 - Helsinki"
                }, {
                    value: "Asia/Baku",
                    label: "+04:00 - Baku"
                }, {
                    value: "Europe/Belgrade",
                    label: "+01:00 - Belgrade"
                }, {
                    value: "America/Barbados",
                    label: "-04:00 - America - Barbados"
                }, {
                    value: "Asia/Dhaka",
                    label: "+06:00 - Dhaka"
                }, {
                    value: "Europe/Brussels",
                    label: "+01:00 - Brussels"
                }, {
                    value: "Africa/Abidjan",
                    label: "+00:00 - Africa - Abidjan"
                }, {
                    value: "Europe/Sofia",
                    label: "+02:00 - Sofia"
                }, {
                    value: "Asia/Qatar",
                    label: "+03:00 - Asia - Qatar"
                }, {
                    value: "Africa/Maputo",
                    label: "+02:00 - Harare"
                }, {
                    value: "Atlantic/Bermuda",
                    label: "-04:00 - Atlantic - Bermuda"
                }, {
                    value: "Asia/Brunei",
                    label: "+08:00 - Asia - Brunei"
                }, {
                    value: "America/La_Paz",
                    label: "-04:00 - La Paz"
                }, {
                    value: "America/Noronha",
                    label: "-02:00 - America - Noronha"
                }, {
                    value: "America/Belem",
                    label: "-03:00 - America - Belem"
                }, {
                    value: "America/Fortaleza",
                    label: "-03:00 - America - Fortaleza"
                }, {
                    value: "America/Recife",
                    label: "-03:00 - America - Recife"
                }, {
                    value: "America/Araguaina",
                    label: "-03:00 - America - Araguaina"
                }, {
                    value: "America/Maceio",
                    label: "-03:00 - America - Maceio"
                }, {
                    value: "America/Bahia",
                    label: "-03:00 - America - Bahia"
                }, {
                    value: "America/Sao_Paulo",
                    label: "-03:00 - Brasilia"
                }, {
                    value: "America/Campo_Grande",
                    label: "-04:00 - America - Campo Grande"
                }, {
                    value: "America/Cuiaba",
                    label: "-04:00 - America - Cuiaba"
                }, {
                    value: "America/Santarem",
                    label: "-03:00 - America - Santarem"
                }, {
                    value: "America/Porto_Velho",
                    label: "-04:00 - America - Porto Velho"
                }, {
                    value: "America/Boa_Vista",
                    label: "-04:00 - America - Boa Vista"
                }, {
                    value: "America/Manaus",
                    label: "-04:00 - America - Manaus"
                }, {
                    value: "America/Eirunepe",
                    label: "-05:00 - America - Eirunepe"
                }, {
                    value: "America/Rio_Branco",
                    label: "-05:00 - America - Rio Branco"
                }, {
                    value: "America/Nassau",
                    label: "-05:00 - America - Nassau"
                }, {
                    value: "Asia/Thimphu",
                    label: "+06:00 - Asia - Thimphu"
                }, {
                    value: "Europe/Minsk",
                    label: "+03:00 - Minsk"
                }, {
                    value: "America/Belize",
                    label: "-06:00 - America - Belize"
                }, {
                    value: "America/St_Johns",
                    label: "-03:30 - Newfoundland"
                }, {
                    value: "America/Halifax",
                    label: "-04:00 - Atlantic Time (Canada)"
                }, {
                    value: "America/Glace_Bay",
                    label: "-04:00 - America - Glace Bay"
                }, {
                    value: "America/Moncton",
                    label: "-04:00 - America - Moncton"
                }, {
                    value: "America/Goose_Bay",
                    label: "-04:00 - America - Goose Bay"
                }, {
                    value: "America/Blanc-Sablon",
                    label: "-04:00 - America - Blanc-Sablon"
                }, {
                    value: "America/Toronto",
                    label: "-05:00 - America - Toronto"
                }, {
                    value: "America/Nipigon",
                    label: "-05:00 - America - Nipigon"
                }, {
                    value: "America/Thunder_Bay",
                    label: "-05:00 - America - Thunder Bay"
                }, {
                    value: "America/Iqaluit",
                    label: "-05:00 - America - Iqaluit"
                }, {
                    value: "America/Pangnirtung",
                    label: "-05:00 - America - Pangnirtung"
                }, {
                    value: "America/Atikokan",
                    label: "-05:00 - America - Atikokan"
                }, {
                    value: "America/Winnipeg",
                    label: "-06:00 - America - Winnipeg"
                }, {
                    value: "America/Rainy_River",
                    label: "-06:00 - America - Rainy River"
                }, {
                    value: "America/Resolute",
                    label: "-06:00 - America - Resolute"
                }, {
                    value: "America/Rankin_Inlet",
                    label: "-06:00 - America - Rankin Inlet"
                }, {
                    value: "America/Regina",
                    label: "-06:00 - Saskatchewan"
                }, {
                    value: "America/Swift_Current",
                    label: "-06:00 - America - Swift Current"
                }, {
                    value: "America/Edmonton",
                    label: "-07:00 - America - Edmonton"
                }, {
                    value: "America/Cambridge_Bay",
                    label: "-07:00 - America - Cambridge Bay"
                }, {
                    value: "America/Yellowknife",
                    label: "-07:00 - America - Yellowknife"
                }, {
                    value: "America/Inuvik",
                    label: "-07:00 - America - Inuvik"
                }, {
                    value: "America/Creston",
                    label: "-07:00 - America - Creston"
                }, {
                    value: "America/Dawson_Creek",
                    label: "-07:00 - America - Dawson Creek"
                }, {
                    value: "America/Fort_Nelson",
                    label: "-07:00 - America - Fort Nelson"
                }, {
                    value: "America/Vancouver",
                    label: "-08:00 - America - Vancouver"
                }, {
                    value: "America/Whitehorse",
                    label: "-07:00 - America - Whitehorse"
                }, {
                    value: "America/Dawson",
                    label: "-07:00 - America - Dawson"
                }, {
                    value: "Indian/Cocos",
                    label: "+06:30 - Indian - Cocos"
                }, {
                    value: "Europe/Zurich",
                    label: "+01:00 - Zurich"
                }, {
                    value: "Pacific/Rarotonga",
                    label: "-10:00 - Pacific - Rarotonga"
                }, {
                    value: "America/Santiago",
                    label: "-04:00 - Santiago"
                }, {
                    value: "America/Punta_Arenas",
                    label: "-03:00 - America - Punta Arenas"
                }, {
                    value: "Pacific/Easter",
                    label: "-06:00 - Pacific - Easter"
                }, {
                    value: "Asia/Shanghai",
                    label: "+08:00 - Asia - Shanghai"
                }, {
                    value: "Asia/Urumqi",
                    label: "+06:00 - Urumqi"
                }, {
                    value: "America/Bogota",
                    label: "-05:00 - Bogota"
                }, {
                    value: "America/Costa_Rica",
                    label: "-06:00 - America - Costa Rica"
                }, {
                    value: "America/Havana",
                    label: "-05:00 - America - Havana"
                }, {
                    value: "Atlantic/Cape_Verde",
                    label: "-01:00 - Cape Verde Is."
                }, {
                    value: "Indian/Christmas",
                    label: "+07:00 - Indian - Christmas"
                }, {
                    value: "Asia/Nicosia",
                    label: "+02:00 - Asia - Nicosia"
                }, {
                    value: "Asia/Famagusta",
                    label: "+02:00 - Asia - Famagusta"
                }, {
                    value: "Europe/Prague",
                    label: "+01:00 - Prague"
                }, {
                    value: "Europe/Berlin",
                    label: "+01:00 - Berlin"
                }, {
                    value: "Africa/Nairobi",
                    label: "+03:00 - Nairobi"
                }, {
                    value: "Europe/Copenhagen",
                    label: "+01:00 - Copenhagen"
                }, {
                    value: "America/Santo_Domingo",
                    label: "-04:00 - America - Santo Domingo"
                }, {
                    value: "Africa/Algiers",
                    label: "+01:00 - West Central Africa"
                }, {
                    value: "America/Guayaquil",
                    label: "-05:00 - America - Guayaquil"
                }, {
                    value: "Pacific/Galapagos",
                    label: "-06:00 - Pacific - Galapagos"
                }, {
                    value: "Europe/Tallinn",
                    label: "+02:00 - Tallinn"
                }, {
                    value: "Africa/Cairo",
                    label: "+02:00 - Cairo"
                }, {
                    value: "Africa/El_Aaiun",
                    label: "+01:00 - Africa - El Aaiun"
                }, {
                    value: "Europe/Madrid",
                    label: "+01:00 - Madrid"
                }, {
                    value: "Africa/Ceuta",
                    label: "+01:00 - Africa - Ceuta"
                }, {
                    value: "Atlantic/Canary",
                    label: "+00:00 - Atlantic - Canary"
                }, {
                    value: "Pacific/Fiji",
                    label: "+12:00 - Fiji"
                }, {
                    value: "Atlantic/Stanley",
                    label: "-03:00 - Atlantic - Stanley"
                }, {
                    value: "Pacific/Chuuk",
                    label: "+10:00 - Pacific - Chuuk"
                }, {
                    value: "Pacific/Pohnpei",
                    label: "+11:00 - Pacific - Pohnpei"
                }, {
                    value: "Pacific/Kosrae",
                    label: "+11:00 - Pacific - Kosrae"
                }, {
                    value: "Atlantic/Faroe",
                    label: "+00:00 - Atlantic - Faroe"
                }, {
                    value: "Europe/Paris",
                    label: "+01:00 - Paris"
                }, {
                    value: "Europe/London",
                    label: "+00:00 - London"
                }, {
                    value: "Asia/Tbilisi",
                    label: "+04:00 - Tbilisi"
                }, {
                    value: "America/Cayenne",
                    label: "-03:00 - America - Cayenne"
                }, {
                    value: "Africa/Accra",
                    label: "+00:00 - Africa - Accra"
                }, {
                    value: "Europe/Gibraltar",
                    label: "+01:00 - Europe - Gibraltar"
                }, {
                    value: "America/Nuuk",
                    label: "-03:00 - Greenland"
                }, {
                    value: "America/Danmarkshavn",
                    label: "+00:00 - America - Danmarkshavn"
                }, {
                    value: "America/Scoresbysund",
                    label: "-01:00 - America - Scoresbysund"
                }, {
                    value: "America/Thule",
                    label: "-04:00 - America - Thule"
                }, {
                    value: "Europe/Athens",
                    label: "+02:00 - Athens"
                }, {
                    value: "Atlantic/South_Georgia",
                    label: "-02:00 - Mid-Atlantic"
                }, {
                    value: "America/Guatemala",
                    label: "-06:00 - Central America"
                }, {
                    value: "Pacific/Guam",
                    label: "+10:00 - Guam"
                }, {
                    value: "Africa/Bissau",
                    label: "+00:00 - Africa - Bissau"
                }, {
                    value: "America/Guyana",
                    label: "-04:00 - Georgetown"
                }, {
                    value: "Asia/Hong_Kong",
                    label: "+08:00 - Hong Kong"
                }, {
                    value: "America/Tegucigalpa",
                    label: "-06:00 - America - Tegucigalpa"
                }, {
                    value: "America/Port-au-Prince",
                    label: "-05:00 - America - Port-au-Prince"
                }, {
                    value: "Europe/Budapest",
                    label: "+01:00 - Budapest"
                }, {
                    value: "Asia/Jakarta",
                    label: "+07:00 - Jakarta"
                }, {
                    value: "Asia/Pontianak",
                    label: "+07:00 - Asia - Pontianak"
                }, {
                    value: "Asia/Makassar",
                    label: "+08:00 - Asia - Makassar"
                }, {
                    value: "Asia/Jayapura",
                    label: "+09:00 - Asia - Jayapura"
                }, {
                    value: "Europe/Dublin",
                    label: "+01:00 - Dublin"
                }, {
                    value: "Asia/Jerusalem",
                    label: "+02:00 - Jerusalem"
                }, {
                    value: "Asia/Kolkata",
                    label: "+05:30 - Kolkata"
                }, {
                    value: "Indian/Chagos",
                    label: "+06:00 - Indian - Chagos"
                }, {
                    value: "Asia/Baghdad",
                    label: "+03:00 - Baghdad"
                }, {
                    value: "Asia/Tehran",
                    label: "+03:30 - Tehran"
                }, {
                    value: "Atlantic/Reykjavik",
                    label: "+00:00 - Atlantic - Reykjavik"
                }, {
                    value: "Europe/Rome",
                    label: "+01:00 - Rome"
                }, {
                    value: "America/Jamaica",
                    label: "-05:00 - America - Jamaica"
                }, {
                    value: "Asia/Amman",
                    label: "+02:00 - Asia - Amman"
                }, {
                    value: "Asia/Tokyo",
                    label: "+09:00 - Tokyo"
                }, {
                    value: "Asia/Bishkek",
                    label: "+06:00 - Asia - Bishkek"
                }, {
                    value: "Asia/Bangkok",
                    label: "+07:00 - Bangkok"
                }, {
                    value: "Pacific/Tarawa",
                    label: "+12:00 - Pacific - Tarawa"
                }, {
                    value: "Pacific/Enderbury",
                    label: "+13:00 - Pacific - Enderbury"
                }, {
                    value: "Pacific/Kiritimati",
                    label: "+14:00 - Pacific - Kiritimati"
                }, {
                    value: "Asia/Pyongyang",
                    label: "+09:00 - Asia - Pyongyang"
                }, {
                    value: "Asia/Seoul",
                    label: "+09:00 - Seoul"
                }, {
                    value: "Asia/Riyadh",
                    label: "+03:00 - Riyadh"
                }, {
                    value: "America/Panama",
                    label: "-05:00 - America - Panama"
                }, {
                    value: "Asia/Almaty",
                    label: "+06:00 - Almaty"
                }, {
                    value: "Asia/Qyzylorda",
                    label: "+05:00 - Asia - Qyzylorda"
                }, {
                    value: "Asia/Qostanay",
                    label: "+06:00 - Asia - Qostanay"
                }, {
                    value: "Asia/Aqtobe",
                    label: "+05:00 - Asia - Aqtobe"
                }, {
                    value: "Asia/Aqtau",
                    label: "+05:00 - Asia - Aqtau"
                }, {
                    value: "Asia/Atyrau",
                    label: "+05:00 - Asia - Atyrau"
                }, {
                    value: "Asia/Oral",
                    label: "+05:00 - Asia - Oral"
                }, {
                    value: "Asia/Beirut",
                    label: "+02:00 - Asia - Beirut"
                }, {
                    value: "Asia/Colombo",
                    label: "+05:30 - Sri Jayawardenepura"
                }, {
                    value: "Africa/Monrovia",
                    label: "+00:00 - Monrovia"
                }, {
                    value: "Africa/Johannesburg",
                    label: "+02:00 - Pretoria"
                }, {
                    value: "Europe/Vilnius",
                    label: "+02:00 - Vilnius"
                }, {
                    value: "Europe/Luxembourg",
                    label: "+01:00 - Europe - Luxembourg"
                }, {
                    value: "Europe/Riga",
                    label: "+02:00 - Riga"
                }, {
                    value: "Africa/Tripoli",
                    label: "+02:00 - Africa - Tripoli"
                }, {
                    value: "Africa/Casablanca",
                    label: "+01:00 - Casablanca"
                }, {
                    value: "Europe/Monaco",
                    label: "+01:00 - Europe - Monaco"
                }, {
                    value: "Europe/Chisinau",
                    label: "+02:00 - Europe - Chisinau"
                }, {
                    value: "Pacific/Majuro",
                    label: "+12:00 - Marshall Is."
                }, {
                    value: "Pacific/Kwajalein",
                    label: "+12:00 - Pacific - Kwajalein"
                }, {
                    value: "Asia/Yangon",
                    label: "+06:30 - Rangoon"
                }, {
                    value: "Asia/Ulaanbaatar",
                    label: "+08:00 - Ulaanbaatar"
                }, {
                    value: "Asia/Hovd",
                    label: "+07:00 - Asia - Hovd"
                }, {
                    value: "Asia/Choibalsan",
                    label: "+08:00 - Asia - Choibalsan"
                }, {
                    value: "Asia/Macau",
                    label: "+08:00 - Asia - Macau"
                }, {
                    value: "America/Martinique",
                    label: "-04:00 - America - Martinique"
                }, {
                    value: "Europe/Malta",
                    label: "+01:00 - Europe - Malta"
                }, {
                    value: "Indian/Mauritius",
                    label: "+04:00 - Indian - Mauritius"
                }, {
                    value: "Indian/Maldives",
                    label: "+05:00 - Indian - Maldives"
                }, {
                    value: "America/Mexico_City",
                    label: "-06:00 - America - Mexico City"
                }, {
                    value: "America/Cancun",
                    label: "-05:00 - America - Cancun"
                }, {
                    value: "America/Merida",
                    label: "-06:00 - America - Merida"
                }, {
                    value: "America/Monterrey",
                    label: "-06:00 - Monterrey"
                }, {
                    value: "America/Matamoros",
                    label: "-06:00 - America - Matamoros"
                }, {
                    value: "America/Mazatlan",
                    label: "-07:00 - Mazatlan"
                }, {
                    value: "America/Chihuahua",
                    label: "-07:00 - Chihuahua"
                }, {
                    value: "America/Ojinaga",
                    label: "-07:00 - America - Ojinaga"
                }, {
                    value: "America/Hermosillo",
                    label: "-07:00 - America - Hermosillo"
                }, {
                    value: "America/Tijuana",
                    label: "-08:00 - Tijuana"
                }, {
                    value: "America/Bahia_Banderas",
                    label: "-06:00 - America - Bahia Banderas"
                }, {
                    value: "Asia/Kuala_Lumpur",
                    label: "+08:00 - Kuala Lumpur"
                }, {
                    value: "Asia/Kuching",
                    label: "+08:00 - Asia - Kuching"
                }, {
                    value: "Africa/Windhoek",
                    label: "+02:00 - Africa - Windhoek"
                }, {
                    value: "Pacific/Noumea",
                    label: "+11:00 - New Caledonia"
                }, {
                    value: "Pacific/Norfolk",
                    label: "+11:00 - Pacific - Norfolk"
                }, {
                    value: "America/Managua",
                    label: "-06:00 - America - Managua"
                }, {
                    value: "Europe/Amsterdam",
                    label: "+01:00 - Amsterdam"
                }, {
                    value: "Europe/Oslo",
                    label: "+01:00 - Europe - Oslo"
                }, {
                    value: "Asia/Kathmandu",
                    label: "+05:45 - Kathmandu"
                }, {
                    value: "Pacific/Nauru",
                    label: "+12:00 - Pacific - Nauru"
                }, {
                    value: "Pacific/Niue",
                    label: "-11:00 - Pacific - Niue"
                }, {
                    value: "Pacific/Chatham",
                    label: "+12:45 - Chatham Is."
                }, {
                    value: "America/Lima",
                    label: "-05:00 - Lima"
                }, {
                    value: "Pacific/Tahiti",
                    label: "-10:00 - Pacific - Tahiti"
                }, {
                    value: "Pacific/Marquesas",
                    label: "-09:30 - Pacific - Marquesas"
                }, {
                    value: "Pacific/Gambier",
                    label: "-09:00 - Pacific - Gambier"
                }, {
                    value: "Pacific/Port_Moresby",
                    label: "+10:00 - Port Moresby"
                }, {
                    value: "Pacific/Bougainville",
                    label: "+11:00 - Pacific - Bougainville"
                }, {
                    value: "Asia/Manila",
                    label: "+08:00 - Asia - Manila"
                }, {
                    value: "Asia/Karachi",
                    label: "+05:00 - Karachi"
                }, {
                    value: "Europe/Warsaw",
                    label: "+01:00 - Warsaw"
                }, {
                    value: "America/Miquelon",
                    label: "-03:00 - America - Miquelon"
                }, {
                    value: "Pacific/Pitcairn",
                    label: "-08:00 - Pacific - Pitcairn"
                }, {
                    value: "America/Puerto_Rico",
                    label: "-04:00 - Puerto Rico"
                }, {
                    value: "Asia/Gaza",
                    label: "+02:00 - Asia - Gaza"
                }, {
                    value: "Asia/Hebron",
                    label: "+02:00 - Asia - Hebron"
                }, {
                    value: "Europe/Lisbon",
                    label: "+00:00 - Lisbon"
                }, {
                    value: "Atlantic/Madeira",
                    label: "+00:00 - Atlantic - Madeira"
                }, {
                    value: "Atlantic/Azores",
                    label: "-01:00 - Azores"
                }, {
                    value: "Pacific/Palau",
                    label: "+09:00 - Pacific - Palau"
                }, {
                    value: "America/Asuncion",
                    label: "-04:00 - America - Asuncion"
                }, {
                    value: "Indian/Reunion",
                    label: "+04:00 - Indian - Reunion"
                }, {
                    value: "Europe/Bucharest",
                    label: "+02:00 - Bucharest"
                }, {
                    value: "Europe/Kaliningrad",
                    label: "+02:00 - Kaliningrad"
                }, {
                    value: "Europe/Moscow",
                    label: "+03:00 - Moscow"
                }, {
                    value: "Europe/Simferopol",
                    label: "+03:00 - Europe - Simferopol"
                }, {
                    value: "Europe/Kirov",
                    label: "+03:00 - Europe - Kirov"
                }, {
                    value: "Europe/Astrakhan",
                    label: "+04:00 - Europe - Astrakhan"
                }, {
                    value: "Europe/Volgograd",
                    label: "+04:00 - Volgograd"
                }, {
                    value: "Europe/Saratov",
                    label: "+04:00 - Europe - Saratov"
                }, {
                    value: "Europe/Ulyanovsk",
                    label: "+04:00 - Europe - Ulyanovsk"
                }, {
                    value: "Europe/Samara",
                    label: "+04:00 - Samara"
                }, {
                    value: "Asia/Yekaterinburg",
                    label: "+05:00 - Ekaterinburg"
                }, {
                    value: "Asia/Omsk",
                    label: "+06:00 - Asia - Omsk"
                }, {
                    value: "Asia/Novosibirsk",
                    label: "+07:00 - Novosibirsk"
                }, {
                    value: "Asia/Barnaul",
                    label: "+07:00 - Asia - Barnaul"
                }, {
                    value: "Asia/Tomsk",
                    label: "+07:00 - Asia - Tomsk"
                }, {
                    value: "Asia/Novokuznetsk",
                    label: "+07:00 - Asia - Novokuznetsk"
                }, {
                    value: "Asia/Krasnoyarsk",
                    label: "+07:00 - Krasnoyarsk"
                }, {
                    value: "Asia/Irkutsk",
                    label: "+08:00 - Irkutsk"
                }, {
                    value: "Asia/Chita",
                    label: "+09:00 - Asia - Chita"
                }, {
                    value: "Asia/Yakutsk",
                    label: "+09:00 - Yakutsk"
                }, {
                    value: "Asia/Khandyga",
                    label: "+09:00 - Asia - Khandyga"
                }, {
                    value: "Asia/Vladivostok",
                    label: "+10:00 - Vladivostok"
                }, {
                    value: "Asia/Ust-Nera",
                    label: "+10:00 - Asia - Ust-Nera"
                }, {
                    value: "Asia/Magadan",
                    label: "+11:00 - Magadan"
                }, {
                    value: "Asia/Sakhalin",
                    label: "+11:00 - Asia - Sakhalin"
                }, {
                    value: "Asia/Srednekolymsk",
                    label: "+11:00 - Srednekolymsk"
                }, {
                    value: "Asia/Kamchatka",
                    label: "+12:00 - Kamchatka"
                }, {
                    value: "Asia/Anadyr",
                    label: "+12:00 - Asia - Anadyr"
                }, {
                    value: "Pacific/Guadalcanal",
                    label: "+11:00 - Solomon Is."
                }, {
                    value: "Indian/Mahe",
                    label: "+04:00 - Indian - Mahe"
                }, {
                    value: "Africa/Khartoum",
                    label: "+02:00 - Africa - Khartoum"
                }, {
                    value: "Europe/Stockholm",
                    label: "+01:00 - Stockholm"
                }, {
                    value: "Asia/Singapore",
                    label: "+08:00 - Singapore"
                }, {
                    value: "America/Paramaribo",
                    label: "-03:00 - America - Paramaribo"
                }, {
                    value: "Africa/Juba",
                    label: "+03:00 - Africa - Juba"
                }, {
                    value: "Africa/Sao_Tome",
                    label: "+00:00 - Africa - Sao Tome"
                }, {
                    value: "America/El_Salvador",
                    label: "-06:00 - America - El Salvador"
                }, {
                    value: "Asia/Damascus",
                    label: "+02:00 - Asia - Damascus"
                }, {
                    value: "America/Grand_Turk",
                    label: "-05:00 - America - Grand Turk"
                }, {
                    value: "Africa/Ndjamena",
                    label: "+01:00 - Africa - Ndjamena"
                }, {
                    value: "Indian/Kerguelen",
                    label: "+05:00 - Indian - Kerguelen"
                }, {
                    value: "Asia/Dushanbe",
                    label: "+05:00 - Asia - Dushanbe"
                }, {
                    value: "Pacific/Fakaofo",
                    label: "+13:00 - Tokelau Is."
                }, {
                    value: "Asia/Dili",
                    label: "+09:00 - Asia - Dili"
                }, {
                    value: "Asia/Ashgabat",
                    label: "+05:00 - Asia - Ashgabat"
                }, {
                    value: "Africa/Tunis",
                    label: "+01:00 - Africa - Tunis"
                }, {
                    value: "Pacific/Tongatapu",
                    label: "+13:00 - Nuku'alofa"
                }, {
                    value: "Europe/Istanbul",
                    label: "+03:00 - Istanbul"
                }, {
                    value: "Pacific/Funafuti",
                    label: "+12:00 - Pacific - Funafuti"
                }, {
                    value: "Asia/Taipei",
                    label: "+08:00 - Taipei"
                }, {
                    value: "Europe/Kiev",
                    label: "+02:00 - Kyiv"
                }, {
                    value: "Europe/Uzhgorod",
                    label: "+02:00 - Europe - Uzhgorod"
                }, {
                    value: "Europe/Zaporozhye",
                    label: "+02:00 - Europe - Zaporozhye"
                }, {
                    value: "Pacific/Wake",
                    label: "+12:00 - Pacific - Wake"
                }, {
                    value: "Pacific/Honolulu",
                    label: "-10:00 - Hawaii"
                }, {
                    value: "America/New_York",
                    label: "-05:00 - Eastern Time (US & Canada)"
                }, {
                    value: "America/Detroit",
                    label: "-05:00 - America - Detroit"
                }, {
                    value: "America/Kentucky/Louisville",
                    label: "-05:00 - America - Louisville, Kentucky"
                }, {
                    value: "America/Kentucky/Monticello",
                    label: "-05:00 - America - Monticello, Kentucky"
                }, {
                    value: "America/Indiana/Indianapolis",
                    label: "-05:00 - Indiana (East)"
                }, {
                    value: "America/Indiana/Vincennes",
                    label: "-05:00 - America - Vincennes, Indiana"
                }, {
                    value: "America/Indiana/Winamac",
                    label: "-05:00 - America - Winamac, Indiana"
                }, {
                    value: "America/Indiana/Marengo",
                    label: "-05:00 - America - Marengo, Indiana"
                }, {
                    value: "America/Indiana/Petersburg",
                    label: "-05:00 - America - Petersburg, Indiana"
                }, {
                    value: "America/Indiana/Vevay",
                    label: "-05:00 - America - Vevay, Indiana"
                }, {
                    value: "America/Chicago",
                    label: "-06:00 - Central Time (US & Canada)"
                }, {
                    value: "America/Indiana/Tell_City",
                    label: "-06:00 - America - Tell City, Indiana"
                }, {
                    value: "America/Indiana/Knox",
                    label: "-06:00 - America - Knox, Indiana"
                }, {
                    value: "America/Menominee",
                    label: "-06:00 - America - Menominee"
                }, {
                    value: "America/North_Dakota/Center",
                    label: "-06:00 - America - Center, North Dakota"
                }, {
                    value: "America/North_Dakota/New_Salem",
                    label: "-06:00 - America - New Salem, North Dakota"
                }, {
                    value: "America/North_Dakota/Beulah",
                    label: "-06:00 - America - Beulah, North Dakota"
                }, {
                    value: "America/Denver",
                    label: "-07:00 - Mountain Time (US & Canada)"
                }, {
                    value: "America/Boise",
                    label: "-07:00 - America - Boise"
                }, {
                    value: "America/Phoenix",
                    label: "-07:00 - Arizona"
                }, {
                    value: "America/Los_Angeles",
                    label: "-08:00 - Pacific Time (US & Canada)"
                }, {
                    value: "America/Anchorage",
                    label: "-09:00 - America - Anchorage"
                }, {
                    value: "America/Juneau",
                    label: "-09:00 - Alaska"
                }, {
                    value: "America/Sitka",
                    label: "-09:00 - America - Sitka"
                }, {
                    value: "America/Metlakatla",
                    label: "-09:00 - America - Metlakatla"
                }, {
                    value: "America/Yakutat",
                    label: "-09:00 - America - Yakutat"
                }, {
                    value: "America/Nome",
                    label: "-09:00 - America - Nome"
                }, {
                    value: "America/Adak",
                    label: "-10:00 - America - Adak"
                }, {
                    value: "America/Montevideo",
                    label: "-03:00 - Montevideo"
                }, {
                    value: "Asia/Samarkand",
                    label: "+05:00 - Asia - Samarkand"
                }, {
                    value: "Asia/Tashkent",
                    label: "+05:00 - Tashkent"
                }, {
                    value: "America/Caracas",
                    label: "-04:00 - Caracas"
                }, {
                    value: "Asia/Ho_Chi_Minh",
                    label: "+07:00 - Asia - Ho Chi Minh"
                }, {
                    value: "Pacific/Efate",
                    label: "+11:00 - Pacific - Efate"
                }, {
                    value: "Pacific/Wallis",
                    label: "+12:00 - Pacific - Wallis"
                }, {
                    value: "Pacific/Apia",
                    label: "+13:00 - Samoa"
                }],
                FILTERABLE_COUNTRIES: [{
                    value: "AF",
                    label: "Afghanistan"
                }, {
                    value: "AL",
                    label: "Albania"
                }, {
                    value: "DZ",
                    label: "Algeria"
                }, {
                    value: "AS",
                    label: "American Samoa"
                }, {
                    value: "AD",
                    label: "Andorre"
                }, {
                    value: "AO",
                    label: "Angola"
                }, {
                    value: "AI",
                    label: "Anguilla"
                }, {
                    value: "AQ",
                    label: "Antarctica"
                }, {
                    value: "AG",
                    label: "Antigua and Barbuda"
                }, {
                    value: "AR",
                    label: "Argentina"
                }, {
                    value: "AM",
                    label: "Armenia"
                }, {
                    value: "AW",
                    label: "Aruba"
                }, {
                    value: "AU",
                    label: "Australia"
                }, {
                    value: "AT",
                    label: "Austria"
                }, {
                    value: "AZ",
                    label: "Azerbaijan"
                }, {
                    value: "BS",
                    label: "Bahamas"
                }, {
                    value: "BH",
                    label: "Bahrain"
                }, {
                    value: "BD",
                    label: "Bangladesh"
                }, {
                    value: "BB",
                    label: "Barbade"
                }, {
                    value: "BY",
                    label: "Belarus"
                }, {
                    value: "BE",
                    label: "Belgium"
                }, {
                    value: "BZ",
                    label: "Belize"
                }, {
                    value: "BJ",
                    label: "Benin"
                }, {
                    value: "BM",
                    label: "Bermuda"
                }, {
                    value: "BT",
                    label: "Bhutan"
                }, {
                    value: "BO",
                    label: "Bolivia"
                }, {
                    value: "BQ",
                    label: "Bonaire, Sint Eustatius and Saba"
                }, {
                    value: "BA",
                    label: "Bosnia and Herzegovina"
                }, {
                    value: "BW",
                    label: "Botswana"
                }, {
                    value: "BV",
                    label: "Bouvet Island"
                }, {
                    value: "BR",
                    label: "Brazil"
                }, {
                    value: "IO",
                    label: "British Indian Ocean Territory"
                }, {
                    value: "VG",
                    label: "British Virgin Islands"
                }, {
                    value: "BN",
                    label: "Brunei"
                }, {
                    value: "BG",
                    label: "Bulgaria"
                }, {
                    value: "BF",
                    label: "Burkina Faso"
                }, {
                    value: "BI",
                    label: "Burundi"
                }, {
                    value: "KH",
                    label: "Cambodia"
                }, {
                    value: "CM",
                    label: "Cameroon"
                }, {
                    value: "CA",
                    label: "Canada"
                }, {
                    value: "CV",
                    label: "Cape Verde"
                }, {
                    value: "KY",
                    label: "Cayman Islands"
                }, {
                    value: "CF",
                    label: "Central African Republic"
                }, {
                    value: "TD",
                    label: "Chad"
                }, {
                    value: "CL",
                    label: "Chile"
                }, {
                    value: "CN",
                    label: "China"
                }, {
                    value: "CX",
                    label: "Christmas Island"
                }, {
                    value: "CC",
                    label: "Cocos (Keeling) Islands"
                }, {
                    value: "CO",
                    label: "Colombia"
                }, {
                    value: "KM",
                    label: "Comoros"
                }, {
                    value: "CG",
                    label: "Congo"
                }, {
                    value: "CD",
                    label: "Congo (Dem. Rep.)"
                }, {
                    value: "CK",
                    label: "Cook Islands"
                }, {
                    value: "CR",
                    label: "Costa Rica"
                }, {
                    value: "ME",
                    label: "Crna Gora"
                }, {
                    value: "HR",
                    label: "Croatia"
                }, {
                    value: "CU",
                    label: "Cuba"
                }, {
                    value: "CW",
                    label: "Cura\xe7ao"
                }, {
                    value: "CY",
                    label: "Cyprus"
                }, {
                    value: "CZ",
                    label: "Czech Republic"
                }, {
                    value: "CI",
                    label: "C\xf4te D'Ivoire"
                }, {
                    value: "DK",
                    label: "Denmark"
                }, {
                    value: "DJ",
                    label: "Djibouti"
                }, {
                    value: "DM",
                    label: "Dominica"
                }, {
                    value: "DO",
                    label: "Dominican Republic"
                }, {
                    value: "TL",
                    label: "East Timor"
                }, {
                    value: "EC",
                    label: "Ecuador"
                }, {
                    value: "EG",
                    label: "Egypt"
                }, {
                    value: "SV",
                    label: "El Salvador"
                }, {
                    value: "GQ",
                    label: "Equatorial Guinea"
                }, {
                    value: "ER",
                    label: "Eritrea"
                }, {
                    value: "EE",
                    label: "Estonia"
                }, {
                    value: "ET",
                    label: "Ethiopia"
                }, {
                    value: "FK",
                    label: "Falkland Islands"
                }, {
                    value: "FO",
                    label: "Faroe Islands"
                }, {
                    value: "FJ",
                    label: "Fiji"
                }, {
                    value: "FI",
                    label: "Finland"
                }, {
                    value: "FR",
                    label: "France"
                }, {
                    value: "GF",
                    label: "French Guiana"
                }, {
                    value: "PF",
                    label: "French Polynesia"
                }, {
                    value: "TF",
                    label: "French Southern Territories"
                }, {
                    value: "GA",
                    label: "Gabon"
                }, {
                    value: "GM",
                    label: "Gambia"
                }, {
                    value: "GE",
                    label: "Georgia"
                }, {
                    value: "DE",
                    label: "Germany"
                }, {
                    value: "GH",
                    label: "Ghana"
                }, {
                    value: "GI",
                    label: "Gibraltar"
                }, {
                    value: "GR",
                    label: "Greece"
                }, {
                    value: "GL",
                    label: "Greenland"
                }, {
                    value: "GD",
                    label: "Grenada"
                }, {
                    value: "GP",
                    label: "Guadeloupe"
                }, {
                    value: "GU",
                    label: "Guam"
                }, {
                    value: "GT",
                    label: "Guatemala"
                }, {
                    value: "GG",
                    label: "Guernsey and Alderney"
                }, {
                    value: "GN",
                    label: "Guinea"
                }, {
                    value: "GW",
                    label: "Guinea-Bissau"
                }, {
                    value: "GY",
                    label: "Guyana"
                }, {
                    value: "HT",
                    label: "Haiti"
                }, {
                    value: "HM",
                    label: "Heard and McDonald Islands"
                }, {
                    value: "HN",
                    label: "Honduras"
                }, {
                    value: "HK",
                    label: "Hong Kong"
                }, {
                    value: "HU",
                    label: "Hungary"
                }, {
                    value: "IS",
                    label: "Iceland"
                }, {
                    value: "IN",
                    label: "India"
                }, {
                    value: "ID",
                    label: "Indonesia"
                }, {
                    value: "IR",
                    label: "Iran"
                }, {
                    value: "IQ",
                    label: "Iraq"
                }, {
                    value: "IE",
                    label: "Ireland"
                }, {
                    value: "IM",
                    label: "Isle of Man"
                }, {
                    value: "IL",
                    label: "Israel"
                }, {
                    value: "IT",
                    label: "Italy"
                }, {
                    value: "JM",
                    label: "Jamaica"
                }, {
                    value: "JP",
                    label: "Japan"
                }, {
                    value: "JE",
                    label: "Jersey"
                }, {
                    value: "JO",
                    label: "Jordan"
                }, {
                    value: "KZ",
                    label: "Kazakhstan"
                }, {
                    value: "KE",
                    label: "Kenya"
                }, {
                    value: "KI",
                    label: "Kiribati"
                }, {
                    value: "KP",
                    label: "Korea (North)"
                }, {
                    value: "KW",
                    label: "Kuwait"
                }, {
                    value: "KG",
                    label: "Kyrgyzstan"
                }, {
                    value: "LA",
                    label: "Laos"
                }, {
                    value: "LV",
                    label: "Latvia"
                }, {
                    value: "LB",
                    label: "Lebanon"
                }, {
                    value: "LS",
                    label: "Lesotho"
                }, {
                    value: "LR",
                    label: "Liberia"
                }, {
                    value: "LY",
                    label: "Libya"
                }, {
                    value: "LI",
                    label: "Liechtenstein"
                }, {
                    value: "LT",
                    label: "Lithuania"
                }, {
                    value: "LU",
                    label: "Luxembourg"
                }, {
                    value: "MO",
                    label: "Macao"
                }, {
                    value: "MK",
                    label: "Macedonia"
                }, {
                    value: "MG",
                    label: "Madagascar"
                }, {
                    value: "MW",
                    label: "Malawi"
                }, {
                    value: "MY",
                    label: "Malaysia"
                }, {
                    value: "MV",
                    label: "Maldives"
                }, {
                    value: "ML",
                    label: "Mali"
                }, {
                    value: "MT",
                    label: "Malta"
                }, {
                    value: "MH",
                    label: "Marshall Islands"
                }, {
                    value: "MQ",
                    label: "Martinique"
                }, {
                    value: "MR",
                    label: "Mauritania"
                }, {
                    value: "MU",
                    label: "Mauritius"
                }, {
                    value: "YT",
                    label: "Mayotte"
                }, {
                    value: "MX",
                    label: "Mexico"
                }, {
                    value: "FM",
                    label: "Micronesia"
                }, {
                    value: "MD",
                    label: "Moldova"
                }, {
                    value: "MC",
                    label: "Monaco"
                }, {
                    value: "MN",
                    label: "Mongolia"
                }, {
                    value: "MS",
                    label: "Montserrat"
                }, {
                    value: "MA",
                    label: "Morocco"
                }, {
                    value: "MZ",
                    label: "Mozambique"
                }, {
                    value: "MM",
                    label: "Myanmar"
                }, {
                    value: "NA",
                    label: "Namibia"
                }, {
                    value: "NR",
                    label: "Nauru"
                }, {
                    value: "NP",
                    label: "Nepal"
                }, {
                    value: "NL",
                    label: "Netherlands"
                }, {
                    value: "NC",
                    label: "New Caledonia"
                }, {
                    value: "NZ",
                    label: "New Zealand"
                }, {
                    value: "NI",
                    label: "Nicaragua"
                }, {
                    value: "NE",
                    label: "Niger"
                }, {
                    value: "NG",
                    label: "Nigeria"
                }, {
                    value: "NU",
                    label: "Niue"
                }, {
                    value: "NF",
                    label: "Norfolk Island"
                }, {
                    value: "MP",
                    label: "Northern Mariana Islands"
                }, {
                    value: "NO",
                    label: "Norway"
                }, {
                    value: "OM",
                    label: "Oman"
                }, {
                    value: "PK",
                    label: "Pakistan"
                }, {
                    value: "PW",
                    label: "Palau"
                }, {
                    value: "PS",
                    label: "Palestine"
                }, {
                    value: "PA",
                    label: "Panama"
                }, {
                    value: "PG",
                    label: "Papua New Guinea"
                }, {
                    value: "PY",
                    label: "Paraguay"
                }, {
                    value: "PE",
                    label: "Peru"
                }, {
                    value: "PH",
                    label: "Philippines"
                }, {
                    value: "PN",
                    label: "Pitcairn"
                }, {
                    value: "PL",
                    label: "Poland"
                }, {
                    value: "PT",
                    label: "Portugal"
                }, {
                    value: "PR",
                    label: "Puerto Rico"
                }, {
                    value: "QA",
                    label: "Qatar"
                }, {
                    value: "RO",
                    label: "Romania"
                }, {
                    value: "RU",
                    label: "Russia"
                }, {
                    value: "RW",
                    label: "Rwanda"
                }, {
                    value: "RE",
                    label: "R\xe9union"
                }, {
                    value: "BL",
                    label: "Saint Barth\xe9lemy"
                }, {
                    value: "SH",
                    label: "Saint Helena"
                }, {
                    value: "KN",
                    label: "Saint Kitts and Nevis"
                }, {
                    value: "LC",
                    label: "Saint Lucia"
                }, {
                    value: "MF",
                    label: "Saint Martin"
                }, {
                    value: "PM",
                    label: "Saint Pierre and Miquelon"
                }, {
                    value: "VC",
                    label: "Saint Vincent and the Grenadines"
                }, {
                    value: "WS",
                    label: "Samoa"
                }, {
                    value: "SM",
                    label: "San Marino"
                }, {
                    value: "SA",
                    label: "Saudi Arabia"
                }, {
                    value: "SN",
                    label: "Senegal"
                }, {
                    value: "RS",
                    label: "Serbia"
                }, {
                    value: "SC",
                    label: "Seychelles"
                }, {
                    value: "SL",
                    label: "Sierra Leone"
                }, {
                    value: "SG",
                    label: "Singapore"
                }, {
                    value: "SX",
                    label: "Sint Maarten"
                }, {
                    value: "SK",
                    label: "Slovakia"
                }, {
                    value: "SI",
                    label: "Slovenia"
                }, {
                    value: "SB",
                    label: "Solomon Islands"
                }, {
                    value: "SO",
                    label: "Somalia"
                }, {
                    value: "ZA",
                    label: "South Africa"
                }, {
                    value: "GS",
                    label: "South Georgia"
                }, {
                    value: "KR",
                    label: "South Korea"
                }, {
                    value: "SS",
                    label: "South Sudan"
                }, {
                    value: "ES",
                    label: "Spain"
                }, {
                    value: "LK",
                    label: "Sri Lanka"
                }, {
                    value: "SD",
                    label: "Sudan"
                }, {
                    value: "SR",
                    label: "Suriname"
                }, {
                    value: "SJ",
                    label: "Svalbard and Jan Mayen"
                }, {
                    value: "SZ",
                    label: "Swaziland"
                }, {
                    value: "SE",
                    label: "Sweden"
                }, {
                    value: "CH",
                    label: "Switzerland"
                }, {
                    value: "SY",
                    label: "Syria"
                }, {
                    value: "ST",
                    label: "S\xe3o Tom\xe9 and Pr\xedncipe"
                }, {
                    value: "TW",
                    label: "Taiwan"
                }, {
                    value: "TJ",
                    label: "Tajikistan"
                }, {
                    value: "TZ",
                    label: "Tanzania"
                }, {
                    value: "TH",
                    label: "Thailand"
                }, {
                    value: "TG",
                    label: "Togo"
                }, {
                    value: "TK",
                    label: "Tokelau"
                }, {
                    value: "TO",
                    label: "Tonga"
                }, {
                    value: "TT",
                    label: "Trinidad and Tobago"
                }, {
                    value: "TN",
                    label: "Tunisia"
                }, {
                    value: "TR",
                    label: "Turkey"
                }, {
                    value: "TM",
                    label: "Turkmenistan"
                }, {
                    value: "TC",
                    label: "Turks and Caicos Islands"
                }, {
                    value: "TV",
                    label: "Tuvalu"
                }, {
                    value: "UG",
                    label: "Uganda"
                }, {
                    value: "UA",
                    label: "Ukraine"
                }, {
                    value: "AE",
                    label: "United Arab Emirates"
                }, {
                    value: "GB",
                    label: "United Kingdom"
                }, {
                    value: "US",
                    label: "United States"
                }, {
                    value: "UM",
                    label: "United States Minor Outlying Islands"
                }, {
                    value: "UY",
                    label: "Uruguay"
                }, {
                    value: "UZ",
                    label: "Uzbekistan"
                }, {
                    value: "VU",
                    label: "Vanuatu"
                }, {
                    value: "VA",
                    label: "Vatican City"
                }, {
                    value: "VE",
                    label: "Venezuela"
                }, {
                    value: "VN",
                    label: "Vietnam"
                }, {
                    value: "VI",
                    label: "Virgin Islands of the United States"
                }, {
                    value: "WF",
                    label: "Wallis and Futuna"
                }, {
                    value: "EH",
                    label: "Western Sahara"
                }, {
                    value: "YE",
                    label: "Yemen"
                }, {
                    value: "ZM",
                    label: "Zambia"
                }, {
                    value: "ZW",
                    label: "Zimbabwe"
                }, {
                    value: "AX",
                    label: "\xc5land Islands"
                }],
                FILTERABLE_SUBDIVISIONS: {
                    us_state: {
                        label: "US State",
                        values: [{
                            value: "US-AK",
                            label: "Alaska"
                        }, {
                            value: "US-AL",
                            label: "Alabama"
                        }, {
                            value: "US-AR",
                            label: "Arkansas"
                        }, {
                            value: "US-AZ",
                            label: "Arizona"
                        }, {
                            value: "US-CA",
                            label: "California"
                        }, {
                            value: "US-CO",
                            label: "Colorado"
                        }, {
                            value: "US-CT",
                            label: "Connecticut"
                        }, {
                            value: "US-DC",
                            label: "District of Columbia"
                        }, {
                            value: "US-DE",
                            label: "Delaware"
                        }, {
                            value: "US-FL",
                            label: "Florida"
                        }, {
                            value: "US-GA",
                            label: "Georgia"
                        }, {
                            value: "US-HI",
                            label: "Hawaii"
                        }, {
                            value: "US-IA",
                            label: "Iowa"
                        }, {
                            value: "US-ID",
                            label: "Idaho"
                        }, {
                            value: "US-IL",
                            label: "Illinois"
                        }, {
                            value: "US-IN",
                            label: "Indiana"
                        }, {
                            value: "US-KS",
                            label: "Kansas"
                        }, {
                            value: "US-KY",
                            label: "Kentucky"
                        }, {
                            value: "US-LA",
                            label: "Louisiana"
                        }, {
                            value: "US-MA",
                            label: "Massachusetts"
                        }, {
                            value: "US-MD",
                            label: "Maryland"
                        }, {
                            value: "US-ME",
                            label: "Maine"
                        }, {
                            value: "US-MI",
                            label: "Michigan"
                        }, {
                            value: "US-MN",
                            label: "Minnesota"
                        }, {
                            value: "US-MO",
                            label: "Missouri"
                        }, {
                            value: "US-MS",
                            label: "Mississippi"
                        }, {
                            value: "US-MT",
                            label: "Montana"
                        }, {
                            value: "US-NC",
                            label: "North Carolina"
                        }, {
                            value: "US-ND",
                            label: "North Dakota"
                        }, {
                            value: "US-NE",
                            label: "Nebraska"
                        }, {
                            value: "US-NH",
                            label: "New Hampshire"
                        }, {
                            value: "US-NJ",
                            label: "New Jersey"
                        }, {
                            value: "US-NM",
                            label: "New Mexico"
                        }, {
                            value: "US-NV",
                            label: "Nevada"
                        }, {
                            value: "US-NY",
                            label: "New York"
                        }, {
                            value: "US-OH",
                            label: "Ohio"
                        }, {
                            value: "US-OK",
                            label: "Oklahoma"
                        }, {
                            value: "US-OR",
                            label: "Oregon"
                        }, {
                            value: "US-PA",
                            label: "Pennsylvania"
                        }, {
                            value: "US-RI",
                            label: "Rhode Island"
                        }, {
                            value: "US-SC",
                            label: "South Carolina"
                        }, {
                            value: "US-SD",
                            label: "South Dakota"
                        }, {
                            value: "US-TN",
                            label: "Tennessee"
                        }, {
                            value: "US-TX",
                            label: "Texas"
                        }, {
                            value: "US-UT",
                            label: "Utah"
                        }, {
                            value: "US-VA",
                            label: "Virginia"
                        }, {
                            value: "US-VT",
                            label: "Vermont"
                        }, {
                            value: "US-WA",
                            label: "Washington"
                        }, {
                            value: "US-WI",
                            label: "Wisconsin"
                        }, {
                            value: "US-WV",
                            label: "West Virginia"
                        }, {
                            value: "US-WY",
                            label: "Wyoming"
                        }]
                    }
                },
                FILTERABLE_DEVICES: [{
                    value: "mobile",
                    label: "Mobile"
                }, {
                    value: "tablet",
                    label: "Tablet"
                }, {
                    value: "desktop",
                    label: "Desktop"
                }],
                EXTERNAL_SOURCE_ENUM_LABELS: {
                    CLEARBIT_REVEAL: "Clearbit Reveal",
                    CLEARBIT_ENRICHMENT: "Clearbit Enrichment",
                    MARKETO_LEAD: "Marketo Lead",
                    PARDOT_PROSPECT: "Pardot Prospect",
                    PARDOT_VISITOR: "Pardot Visitor",
                    SALESFORCE_LEAD: "Salesforce Lead",
                    SALESFORCE_CONTACT: "Salesforce Contact",
                    SALESFORCE_ACCOUNT: "Salesforce Account",
                    SALESFORCE_OPPORTUNITY: "Salesforce Opportunity",
                    SALESFORCE_CAMPAIGN_MEMBER: "Salesforce Campaign Member",
                    SALESFORCE_EVENT: "Salesforce Event",
                    SALESFORCE_ACCOUNT_TEAM_MEMBER: "Salesforce AccountTeamMember",
                    SIXSENSE: "6sense",
                    DEMANDBASE: "Demandbase",
                    HUBSPOT_CONTACT: "HubSpot Contact",
                    ZOOMINFO_ENRICHMENT: "Zoom Info Enterprise",
                    ZOOMINFO_REVEAL: "Zoom Info WebSights",
                    ELOQUA_CONTACT: "Eloqua Contact",
                    ELOQUA_VISITOR: "Eloqua Visitor",
                    OUTREACH_PROSPECT: "Outreach Prospect",
                    SALESLOFT_PERSON: "Salesloft Person",
                    SALESFORCE_GENERIC_ENTITY: "Salesforce Generic Object"
                },
                SALESFORCE_ACCOUNTS_LIST_MAX_ACCOUNTS: 5e4,
                COBROWSE_PSEUDO_CLASSES: {
                    ":hover": ".__q__hover",
                    ":focus-within": ".__q__focus_within",
                    ":focus-visible": ".__q__focus_visible",
                    ":focus": ".__q__focus",
                    ":active": ".__q__active"
                },
                TRANSLATIONS: {
                    cs: {
                        language: "Czech",
                        translated_language: "\u010ce\u0161tina",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Povolit zvuk a video n\xe1v\u0161t\u011bvn\xedka",
                                allow_visitor_audio_only: "Povolit pouze zvuk",
                                allow_visitor_video: "Povolit video n\xe1v\u0161t\u011bvn\xedka",
                                close_full_screen: "Zav\u0159\xedt celou obrazovku",
                                enable_your_microphone: "Povolte sv\u016fj mikrofon a kameru v\xfd\u0161e",
                                expand_to_full_screen: "Roz\u0161\xed\u0159it na celou obrazovku",
                                face_mute: "Vypnout svou kameru",
                                face_unmute: "Zapnout svou kameru",
                                mute: "Vypnout sv\u016fj mikrofon",
                                select_a_camera: "Vyberte kameru",
                                select_a_microphone: "Vyberte mikrofon",
                                select_a_speaker: "Vyberte reproduktor",
                                tooltip_prompt_visitor_call_controls: "Povolte sv\u016fj mikrofon a video pro p\u0159ipojen\xed k {{name}}",
                                unmute: "Zapnout sv\u016fj mikrofon",
                                video_settings: "Nastaven\xed videa",
                                view_audio_inputs_sources: "Zobrazit zdroje zvukov\xfdch vstup\u016f",
                                view_video_sources: "Zobrazit zdroje videa"
                            },
                            call_invite: {
                                decline: "Odm\xedtnout",
                                inviting: "v\xe1s zve na \u017eiv\xe9 setk\xe1n\xed",
                                join: "P\u0159ipojit se pouze se zvukem",
                                sharing_video_audio: "Budou sd\xedlet sv\xe9 video a zvuk."
                            },
                            cta: {
                                back: "Zp\u011bt",
                                call_mobile: "Volat p\u0159es reproduktor nebo sluch\xe1tka",
                                call_web: "Volat p\u0159es web",
                                cancel: "Zru\u0161it",
                                confirm_meeting: "Potvrdit sch\u016fzku",
                                decline: "Odm\xedtnout",
                                done: "Hotovo",
                                input_fields_collection_time: "30 minut",
                                join_mobile: "P\u0159ipojit se p\u0159es reproduktor nebo sluch\xe1tka",
                                join_web: "P\u0159ipojit se p\u0159es web",
                                retry: "Nelze odeslat. Klikn\u011bte pro opakov\xe1n\xed pokusu.",
                                retry_message: "Nelze odeslat. Klepn\u011bte na zpr\xe1vu pro opakov\xe1n\xed pokusu\u2026",
                                send: "Odeslat",
                                settings: "Nastaven\xed"
                            },
                            dates: {
                                month_format: "dd.MM",
                                month_format_short: "d.M",
                                time_format_detail: "H:mm d.M.yyyy",
                                today: "Dnes",
                                tomorrow: "Z\xedtra",
                                year_format: "dd.MM.yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "V\u010dera"
                            },
                            error: {
                                business_email: "Zadejte pros\xedm platnou firemn\xed e-mailovou adresu",
                                default: "Zadejte pros\xedm odpov\u011b\u010f",
                                email: "Zadejte pros\xedm platnou e-mailovou adresu",
                                invalid_link_returning_text: "Detaily sch\u016fzky budou odesl\xe1ny samostatn\u011b",
                                name: "Zadejte pros\xedm jm\xe9no i p\u0159\xedjmen\xed",
                                number: "Zadejte pros\xedm platn\xe9 \u010d\xedslo",
                                phone: "Zadejte pros\xedm platn\xe9 telefonn\xed \u010d\xedslo",
                                required: "Povinn\xe9 pole",
                                valid_name: "Zadejte pros\xedm platn\xe9 jm\xe9no"
                            },
                            meeting_booker: {
                                calendar_next_month: "Dal\u0161\xed m\u011bs\xedc",
                                calendar_previous_month: "P\u0159edchoz\xed m\u011bs\xedc",
                                close_confirmation: "Zav\u0159\xedt",
                                confirm: "Potvrdit",
                                different_time: "Vyberte jin\xfd \u010das",
                                error: "Omlouv\xe1me se, sch\u016fzku nelze rezervovat. Zkuste znovu.",
                                find_availability: "Hled\xe1m dostupnost",
                                loading_message_1: "Po\u010dkejte, na\u010d\xedt\xe1 se...",
                                loading_message_2: "Jedna chv\xedle, skoro tam!",
                                loading_message_3: "Chvilku, pros\xedm...",
                                loading_message_4: "Po\u010dkejte, pracujeme na tom!",
                                loading_message_5: "Pracujeme na tom...",
                                loading_message_6: "Zpracov\xe1v\xe1me va\u0161i \u017e\xe1dost...",
                                loading_message_7: "Po\u010dkejte, u\u017e to skoro m\xe1me hotov\xe9!",
                                next_week: "Dal\u0161\xed t\xfdden",
                                no_availability: "Omlouv\xe1me se, nikoho jsme nena\u0161li. N\u011bkdo z na\u0161eho t\xfdmu se s v\xe1mi spoj\xed.",
                                no_available_slots: "Omlouv\xe1me se, nejsou k dispozici \u017e\xe1dn\xe9 \u010dasy.",
                                previous_week: "P\u0159edchoz\xed t\xfdden",
                                unavailable_alert: "Omlouv\xe1me se, vybran\xfd \u010das ji\u017e nen\xed k dispozici",
                                will_in_touch: "N\xe1\u0161 t\xfdm byl informov\xe1n a spoj\xed se s v\xe1mi."
                            },
                            microphone_request: {
                                decline: "Ne, d\u011bkuji, chci jen chatovat",
                                disabled_text: "Sv\u016fj mikrofon jste zak\xe1zali",
                                enable_instructions: {
                                    chrome: "Klikn\u011bte na mikrofon v adresn\xedm \u0159\xe1dku a vyberte 'Always allow', pot\xe9 obnovte str\xe1nku",
                                    safari: "Safari \xbb Preferences \xbb Websites \xbb Microphone \xbb {{domain}} a vyberte 'Allow', pot\xe9 obnovte str\xe1nku"
                                },
                                enable_it: {
                                    chrome: "Pro jeho povolen\xed",
                                    default: "Pros\xedm povolte ho",
                                    safari: "Pro jeho povolen\xed p\u0159ejd\u011bte na"
                                },
                                enable_text: "Povolte sv\u016fj mikrofon"
                            },
                            placeholder: {
                                email: "Zadejte e-mailovou adresu\u2026",
                                reply: "Zadejte odpov\u011b\u010f\u2026"
                            },
                            text: {
                                calendar_confirm_body: "Setk\xe1n\xed bude odesl\xe1no na",
                                calendar_confirm_title: "Potvr\u010fte pros\xedm sv\xe9 setk\xe1n\xed",
                                calendar_invite: "Kam m\xe1me poslat pozv\xe1nku?",
                                call_phone: "Nebo mi zavolejte",
                                call_started: "Hovor za\u010dal",
                                call_us: "Zavolejte n\xe1m",
                                chat_bot: "Chat Bot",
                                close_messenger: "Zav\u0159\xedt messenger",
                                composer_label: "Zadejte zpr\xe1vu",
                                confirming: "Potvrzuji...",
                                connecting: "P\u0159ipojuji\u2026",
                                connecting_to_rep: "Spojuji v\xe1s se z\xe1stupcem",
                                incoming_call: "P\u0159\xedchoz\xed hovor\u2026",
                                invalid_phone: "Neplatn\xe9 telefonn\xed \u010d\xedslo",
                                joined: "p\u0159ipojil se",
                                meeting_canceled: "Pl\xe1nova\u010d sch\u016fzek zru\u0161il. P\u0159ipojil se z\xe1stupce.",
                                meeting_scheduled: "Va\u0161e sch\u016fzka byla napl\xe1nov\xe1na",
                                meeting_settings: "Nastaven\xed sch\u016fzky",
                                microphone: "Mikrofon",
                                not_seen: "Nevid\u011bno",
                                not_you: "Ne ty",
                                offline: "V\u0161ichni na\u0161i z\xe1stupci jsou moment\xe1ln\u011b offline.",
                                privacy_policy: "Z\xe1sady ochrany osobn\xedch \xfadaj\u016f",
                                qualified_branding: "Qualified Conversations",
                                rate_conversation: "Ohodno\u0165te tento rozhovor",
                                rep_is_typing: "Z\xe1stupce p\xed\u0161e",
                                rep_joined: "P\u0159ipojil se z\xe1stupce",
                                seen: "Vid\u011bno",
                                sending: "Odes\xedl\xe1m\u2026",
                                speakers: "Reproduktory",
                                web_call_unavailable: "Webov\xe9 hovory nejsou na va\u0161em za\u0159\xedzen\xed dostupn\xe9"
                            },
                            text_sub: {
                                confirmation_sent_to: "Potvrzen\xed odesl\xe1no na {{text}}",
                                expect_call: "O\u010dek\xe1vejte hovor od {{text}}",
                                invite_sent: "Pozv\xe1nka bude odesl\xe1na na {{email}}.",
                                meeting_details_sent: "Detaily sch\u016fzky byly odesl\xe1ny na {{email}}",
                                meeting_timezone: "V\u0161echny \u010dasy jsou v {{text}}",
                                meeting_with: "Sch\u016fzka s {{text}}",
                                message_announcement_from_me: "V {{timestamp}} \u0159\xedk\xe1m",
                                message_announcement_from_them: "V {{timestamp}} {{subject}} \u0159\xedk\xe1",
                                missed_call: "Zme\u0161kan\xfd hovor \u2013 \u010dekal na {{text}}",
                                next_day: "Na\u010d\xedst \u010dasy pro dal\u0161\xed den {{date}}",
                                previous_day: "Na\u010d\xedst \u010dasy pro p\u0159edchoz\xed den {{date}}",
                                schedule_meeting: "Napl\xe1nujte sch\u016fzku na {{text}}",
                                will_receive_call: "Obdr\u017e\xedte hovor od {{text}}"
                            }
                        }
                    },
                    de: {
                        language: "German",
                        translated_language: "Deutsch",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Audio und Video f\xfcr Besucher zulassen",
                                allow_visitor_audio_only: "Nur Audio zulassen",
                                allow_visitor_video: "Besucher-Video zulassen",
                                close_full_screen: "Vollbild schlie\xdfen",
                                enable_your_microphone: "Aktivieren Sie Ihr Mikrofon und Ihre Kamera oben",
                                expand_to_full_screen: "Erweitern auf Vollbild",
                                face_mute: "Schalten Sie Ihre Kamera aus",
                                face_unmute: "Schalten Sie Ihre Kamera ein",
                                mute: "Schalten Sie Ihr Mikrofon aus",
                                select_a_camera: "W\xe4hlen Sie eine Kamera aus",
                                select_a_microphone: "W\xe4hlen Sie ein Mikrofon aus",
                                select_a_speaker: "W\xe4hlen Sie einen Lautsprecher aus",
                                tooltip_prompt_visitor_call_controls: "Aktivieren Sie Mikrofon und Video, um mit {{name}} zu sprechen",
                                unmute: "Schalten Sie Ihr Mikrofon ein",
                                video_settings: "Video-Einstellungen",
                                view_audio_inputs_sources: "Audioeing\xe4nge und -quellen anzeigen",
                                view_video_sources: "Videoquellen anzeigen"
                            },
                            call_invite: {
                                decline: "Ablehnen",
                                inviting: "l\xe4dt Sie zu einem Live-Meeting ein",
                                join: "Nur Audio beitreten",
                                sharing_video_audio: "Sie werden ihr Video und Audio teilen."
                            },
                            cta: {
                                back: "Zur\xfcck",
                                call_mobile: "\xdcber Freisprecheinrichtung / Headset anrufen",
                                call_web: "\xdcber das Internet anrufen",
                                cancel: "Abbrechen",
                                confirm_meeting: "Besprechung best\xe4tigen",
                                decline: "Ablehnen",
                                done: "Fertig",
                                input_fields_collection_time: "30 Minuten",
                                join_mobile: "\xdcber Freisprecheinrichtung / Headset beitreten",
                                join_web: "\xdcber das Internet beitreten",
                                retry: "Fehler beim Senden. Klicken Sie, um es erneut zu versuchen.",
                                retry_message: "Fehler beim Senden. Tippen Sie auf die Mitteilung, um es erneut zu versuchen\u2026",
                                send: "Senden",
                                settings: "Einstellungen"
                            },
                            dates: {
                                month_format: "MM-dd",
                                month_format_short: "M-d",
                                short_time_format: "HH:mm aaaa",
                                time_format_detail: "HH:mm PPPP",
                                today: "Heute",
                                tomorrow: "Morgen",
                                year_format: "yyyy-MM-dd",
                                year_month_format: "yyyy MMMM",
                                yesterday: "Gestern"
                            },
                            error: {
                                business_email: "Bitte geben Sie eine g\xfcltige Gesch\xe4fts-E-Mail-Adresse ein",
                                default: "Bitte geben Sie eine Antwort ein",
                                email: "Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein",
                                invalid_link_returning_text: "Einzelheiten zum Meeting werden separat gesendet",
                                name: "Bitte geben Sie sowohl den Vor- als auch den Nachnamen ein",
                                number: "Bitte geben Sie eine g\xfcltige Nummer ein",
                                phone: "Bitte geben Sie eine g\xfcltige Telefonnummer ein",
                                required: "Pflichtfeld",
                                valid_name: "Bitte geben Sie einen g\xfcltigen Namen ein"
                            },
                            meeting_booker: {
                                calendar_next_month: "N\xe4chster Monat",
                                calendar_previous_month: "Vorheriger Monat",
                                close_confirmation: "Schlie\xdfen",
                                confirm: "Best\xe4tigen",
                                different_time: "W\xe4hle eine andere Zeit",
                                error: "Entschuldigung, Buchung fehlgeschlagen. Bitte erneut versuchen.",
                                find_availability: "Verf\xfcgbarkeit wird gefunden",
                                loading_message_1: "Bitte warten, l\xe4dt...",
                                loading_message_2: "Eine Sekunde, gleich fertig!",
                                loading_message_3: "Einen Moment bitte...",
                                loading_message_4: "Warten Sie kurz, wir k\xfcmmern uns darum!",
                                loading_message_5: "Wir arbeiten daran...",
                                loading_message_6: "Ihre Anfrage wird bearbeitet...",
                                loading_message_7: "Warten Sie einen Moment, fast fertig!",
                                next_week: "N\xe4chste Woche",
                                no_availability: "Entschuldigung, wir konnten niemanden finden. Jemand aus unserem Team wird sich melden.",
                                no_available_slots: "Leider sind keine freien Termine verf\xfcgbar.",
                                previous_week: "Vorherige Woche",
                                unavailable_alert: "Leider ist die von Ihnen ausgew\xe4hlte Zeit nicht mehr verf\xfcgbar.",
                                will_in_touch: "Unser Team wurde benachrichtigt und wird sich mit Ihnen in Verbindung setzen."
                            },
                            microphone_request: {
                                decline: "Nein, danke, ich m\xf6chte nur chatten",
                                disabled_text: "Sie haben Ihr Mikrofon deaktiviert",
                                enable_instructions: {
                                    chrome: "klicken Sie auf das Mikrofon in der Adressleiste, w\xe4hlen Sie \u201eImmer zulassen\u201c und aktualisieren Sie dann die Seite",
                                    safari: "Safari \xbb Einstellungen \xbb Websites \xbb Mikrofon \xbb {{domain}} und w\xe4hlen Sie \u201eZulassen\u201c, aktualisieren Sie dann die Seite"
                                },
                                enable_it: {
                                    chrome: "Um es zu aktivieren",
                                    default: "Bitte aktivieren Sie es",
                                    safari: "Um es zu aktivieren, \xf6ffnen Sie"
                                },
                                enable_text: "Aktivieren Sie Ihr Mikrofon"
                            },
                            placeholder: {
                                email: "E-Mail-Adresse eingeben\u2026",
                                reply: "Eine Antwort eingeben\u2026"
                            },
                            text: {
                                calendar_confirm_body: "Das Treffen wird gesendet an",
                                calendar_confirm_title: "Bitte best\xe4tigen Sie Ihr Treffen",
                                calendar_invite: "Wohin sollen wir die Kalendereinladung senden?",
                                call_phone: "oder auf meinem Telefon anrufen",
                                call_started: "Anruf gestartet",
                                call_us: "Rufen Sie uns an.",
                                chat_bot: "Chatbot",
                                close_messenger: "Messenger schlie\xdfen",
                                composer_label: "Geben Sie eine Nachricht ein",
                                confirming: "Wird best\xe4tigt\u2026",
                                connecting: "Verbinden \u2026",
                                connecting_to_rep: "Sie werden mit einem Vertreter verbunden.",
                                incoming_call: "Eingehender Anruf \u2026",
                                invalid_phone: "Ung\xfcltige Telefonnummer",
                                joined: "ist hinzugekommen",
                                meeting_canceled: "Besprechungsplaner abgesagt. Ein Vertreter ist hinzugekommen.",
                                meeting_scheduled: "Ihr Treffen wurde geplant",
                                meeting_settings: "Meeting-Einstellungen",
                                microphone: "Mikrofon",
                                not_seen: "Nicht gesehen",
                                not_you: "Nicht du",
                                offline: "Alle unsere Vertreter sind derzeit offline.",
                                privacy_policy: "Datenschutzrichtlinie",
                                qualified_branding: "Qualified-Gespr\xe4che",
                                rate_conversation: "Bewerten Sie dieses Gespr\xe4ch.",
                                rep_is_typing: "Der Handelsvertreter tippt",
                                rep_joined: "Vertreter ist hinzugekommen",
                                seen: "Gesehen",
                                sending: "Wird gesendet\u2026",
                                speakers: "Lautsprecher",
                                web_call_unavailable: "Webanrufe sind auf Ihrem Ger\xe4t nicht verf\xfcgbar."
                            },
                            text_sub: {
                                confirmation_sent_to: "Best\xe4tigung an {{text}} gesendet",
                                expect_call: "Erwarten Sie einen Anruf von {{text}}",
                                invite_sent: "Die Einladung wird an {{email}} gesendet.",
                                meeting_details_sent: "Sitzungsdetails wurden an {{email}} gesendet",
                                meeting_timezone: "Alle Zeiten sind {{text}}",
                                meeting_with: "Besprechung mit {{text}}",
                                message_announcement_from_me: "Um {{timestamp}} sage ich",
                                message_announcement_from_them: "Um {{timestamp}} sagt {{subject}}",
                                missed_call: "Verpasster Anruf - {{text}} gewartet",
                                next_day: "Zeiten f\xfcr den n\xe4chsten Tag laden {{date}}",
                                previous_day: "Zeiten f\xfcr den vorherigen Tag laden {{date}}",
                                schedule_meeting: "Planen Sie eine {{text}} Besprechung",
                                will_receive_call: "Sie werden einen Anruf von {{text}} erhalten."
                            }
                        }
                    },
                    en: {
                        language: "English",
                        translated_language: "English",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Allow visitor audio and video",
                                allow_visitor_audio_only: "Allow audio only",
                                allow_visitor_video: "Allow visitor video",
                                close_full_screen: "Close full screen",
                                enable_your_microphone: "Enable your microphone and camera above",
                                expand_to_full_screen: "Expand to full screen",
                                face_mute: "Turn off your camera",
                                face_unmute: "Turn on your camera",
                                mute: "Turn off your microphone",
                                select_a_camera: "Select a camera",
                                select_a_microphone: "Select a microphone",
                                select_a_speaker: "Select a speaker",
                                tooltip_prompt_visitor_call_controls: "Enable your mic and video to join {{name}}",
                                unmute: "Turn on your microphone",
                                video_settings: "Video settings",
                                view_audio_inputs_sources: "View audio inputs and sources",
                                view_video_sources: "View video sources"
                            },
                            call_invite: {
                                decline: "Decline",
                                inviting: "is inviting you to a live meeting",
                                join: "Join with audio only",
                                sharing_video_audio: "They'll be sharing their video and audio."
                            },
                            cta: {
                                back: "Back",
                                call_mobile: "Call via speakerphone/headset",
                                call_web: "Call via web",
                                cancel: "Cancel",
                                confirm_meeting: "Confirm meeting",
                                decline: "Decline",
                                done: "Done",
                                input_fields_collection_time: "30 minutes",
                                join_mobile: "Join via speakerphone/headset",
                                join_web: "Join via web",
                                retry: "Unable to send. Click to retry.",
                                retry_message: "Unable to send. Tap the message to retry\u2026",
                                send: "Send",
                                settings: "Settings"
                            },
                            dates: {
                                month_format: "MM/dd",
                                month_format_short: "M/d",
                                short_time_format: "h:mm aaaa",
                                time_format_detail: "h:mm aaaa PPPP",
                                today: "Today",
                                tomorrow: "Tomorrow",
                                year_format: "MM/dd/yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Yesterday"
                            },
                            error: {
                                business_email: "Please enter a valid business email address",
                                default: "Please enter a reply",
                                email: "Please enter a valid email address",
                                invalid_link_returning_text: "Meeting details will be sent separately",
                                name: "Please enter both first and last name",
                                number: "Please enter a valid number",
                                phone: "Please enter a valid phone number",
                                required: "Required field",
                                valid_name: "Please enter a valid name"
                            },
                            meeting_booker: {
                                calendar_next_month: "Next month",
                                calendar_previous_month: "Previous month",
                                close_confirmation: "Close",
                                confirm: "Confirm",
                                different_time: "Select a different time",
                                error: "Sorry, this meeting could not be booked. Please try again.",
                                find_availability: "Finding availability",
                                loading_message_1: "Sit tight, loading...",
                                loading_message_2: "One sec, almost there!",
                                loading_message_3: "Just a moment, please...",
                                loading_message_4: "Hang on, we're on it!",
                                loading_message_5: "Working on it...",
                                loading_message_6: "Processing your request...",
                                loading_message_7: "Hold on, almost finished!",
                                next_week: "Next Week",
                                no_availability: "Sorry, we weren\u2019t able to find anyone. Someone from our team will be in touch.",
                                no_available_slots: "Sorry, there are no times available.",
                                previous_week: "Previous Week",
                                unavailable_alert: "Sorry, the time you selected is no longer available",
                                will_in_touch: "Our team has been notified and will be in touch with you."
                            },
                            microphone_request: {
                                decline: "No thanks, I just want to chat",
                                disabled_text: "You have disabled your microphone",
                                enable_instructions: {
                                    chrome: "Click the microphone in the address bar and select 'Always allow', then refresh the page",
                                    safari: "Safari \xbb Preferences \xbb Websites \xbb Microphone \xbb {{domain}} and select 'Allow', then refresh the page"
                                },
                                enable_it: {
                                    chrome: "To enable it",
                                    default: "Please enable it",
                                    safari: "To enable it go to"
                                },
                                enable_text: "Enable your microphone"
                            },
                            placeholder: {
                                email: "Enter email address\u2026",
                                reply: "Enter a reply\u2026"
                            },
                            text: {
                                calendar_confirm_body: "Meeting will be sent to",
                                calendar_confirm_title: "Please confirm your meeting",
                                calendar_invite: "Where should we send the invite?",
                                call_phone: "Or call my phone",
                                call_started: "Call started",
                                call_us: "Call us",
                                chat_bot: "Chat Bot",
                                close_messenger: "Close messenger",
                                composer_label: "Enter a message",
                                confirming: "Confirming...",
                                connecting: "Connecting\u2026",
                                connecting_to_rep: "Connecting you to a rep",
                                incoming_call: "Incoming call\u2026",
                                invalid_phone: "Invalid phone number",
                                joined: "joined",
                                meeting_canceled: "Meeting scheduler canceled. A representative has joined.",
                                meeting_scheduled: "Your meeting was scheduled",
                                meeting_settings: "Meeting Settings",
                                microphone: "Microphone",
                                not_seen: "Not seen",
                                not_you: "Not you",
                                offline: "All of our representatives are currently offline.",
                                privacy_policy: "Privacy policy",
                                qualified_branding: "Qualified Conversations",
                                rate_conversation: "Rate this conversation",
                                rep_is_typing: "The representative is typing",
                                rep_joined: "Representative has joined",
                                seen: "Seen",
                                sending: "Sending\u2026",
                                speakers: "Speakers",
                                web_call_unavailable: "Web calls are not available on your device"
                            },
                            text_sub: {
                                confirmation_sent_to: "Confirmation sent to {{text}}",
                                expect_call: "Expect a call from {{text}}",
                                invite_sent: "Invite will be sent to {{email}}.",
                                meeting_details_sent: "Meeting details have been sent to {{email}}",
                                meeting_timezone: "All times are {{text}}",
                                meeting_with: "Meeting with {{text}}",
                                message_announcement_from_me: "At {{timestamp}} I say",
                                message_announcement_from_them: "At {{timestamp}} {{subject}} says",
                                missed_call: "Missed call \u2013 waited for {{text}}",
                                next_day: "Load times for the next day {{date}}",
                                previous_day: "Load times for the previous day {{date}}",
                                schedule_meeting: "Schedule a {{text}} meeting",
                                will_receive_call: "You will receive a call from {{text}}"
                            }
                        }
                    },
                    es: {
                        language: "Spanish",
                        translated_language: "Espa\xf1ol",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Permitir audio y v\xeddeo de visitantes",
                                allow_visitor_audio_only: "Permitir audio solo",
                                allow_visitor_video: "Permitir el v\xeddeo de visitante",
                                close_full_screen: "Cerrar pantalla completa",
                                enable_your_microphone: "Habilita tu micr\xf3fono y c\xe1mara en la parte de arriba",
                                expand_to_full_screen: "Expandir a pantalla completa",
                                face_mute: "Apaga tu c\xe1mara",
                                face_unmute: "Enciende tu c\xe1mara",
                                mute: "Apaga tu micr\xf3fono",
                                select_a_camera: "Selecciona una c\xe1mara",
                                select_a_microphone: "Selecciona un micr\xf3fono",
                                select_a_speaker: "Selecciona un altavoz",
                                tooltip_prompt_visitor_call_controls: "Activa tu v\xeddeo y micr\xf3fono para unirte a {{name}}",
                                unmute: "Enciende tu micr\xf3fono",
                                video_settings: "Ajustes de v\xeddeo",
                                view_audio_inputs_sources: "Ver entradas y fuentes de audio",
                                view_video_sources: "Ver fuentes de v\xeddeo"
                            },
                            call_invite: {
                                decline: "Rechazar",
                                inviting: "Te est\xe1 invitando a una reuni\xf3n en vivo",
                                join: "Unirse solo con audio",
                                sharing_video_audio: "Compartir\xe1n su video y audio."
                            },
                            cta: {
                                back: "Atr\xe1s",
                                call_mobile: "Llamada a trav\xe9s de tel\xe9fono con altavoz o auricular",
                                call_web: "Llamada v\xeda web",
                                cancel: "Cancelar",
                                confirm_meeting: "Confirmar reuni\xf3n",
                                decline: "Rechazar",
                                done: "Hecho",
                                input_fields_collection_time: "30 minutos",
                                join_mobile: "Unirse a trav\xe9s de tel\xe9fono con altavoz o auricular",
                                join_web: "Unirse a trav\xe9s de la web",
                                retry: "No se pudo enviar. Haga clic para volver a intentarlo.",
                                retry_message: "No se pudo enviar. Toque el mensaje para volver a intentarlo\u2026",
                                send: "Enviar",
                                settings: "Ajustes"
                            },
                            dates: {
                                month_format: "dd-MM",
                                month_format_short: "d-M",
                                time_format_detail: "PPPP aaaa h:mm",
                                today: "Hoy",
                                tomorrow: "Ma\xf1ana",
                                year_format: "dd-MM-yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Ayer"
                            },
                            error: {
                                business_email: "Introduzca una direcci\xf3n de correo electr\xf3nico empresarial v\xe1lida",
                                default: "Introduzca una respuesta",
                                email: "Introduzca una direcci\xf3n de correo electr\xf3nico v\xe1lida",
                                invalid_link_returning_text: "La informaci\xf3n de la reuni\xf3n se enviar\xe1 por separado",
                                name: "Introduzca el nombre y el apellido",
                                number: "Introduzca un n\xfamero v\xe1lido",
                                phone: "Introduzca un n\xfamero de tel\xe9fono v\xe1lido",
                                required: "Campo obligatorio",
                                valid_name: "Introduce un nombre valido"
                            },
                            meeting_booker: {
                                calendar_next_month: "Mes siguiente",
                                calendar_previous_month: "Mes anterior",
                                close_confirmation: "Cerca",
                                confirm: "Confirmar",
                                different_time: "Selecciona un horario diferente",
                                error: "Lo siento, la reuni\xf3n no se reserv\xf3. Por favor, int\xe9ntelo de nuevo.",
                                find_availability: "Encontrar disponibilidad",
                                loading_message_1: "Espere un momento, cargando...",
                                loading_message_2: "Un segundo, casi estamos all\xed!",
                                loading_message_3: "Un momento, por favor...",
                                loading_message_4: "Espera, estamos en ello!",
                                loading_message_5: "Estamos trabajando en eso...",
                                loading_message_6: "Procesando su petici\xf3n...",
                                loading_message_7: "Espera un momento, casi hemos terminado!",
                                next_week: "Semana siguiente",
                                no_availability: "Lo sentimos, no pudimos encontrar a nadie. Alguien de nuestro equipo se pondr\xe1 en contacto.",
                                no_available_slots: "Lo sentimos, no hay horarios disponibles.",
                                previous_week: "Semana pasada",
                                unavailable_alert: "Lo sentimos, la hora seleccionada ya no est\xe1 disponible.",
                                will_in_touch: "Se lo hemos notificado a nuestro equipo, que se pondr\xe1 en contacto con usted."
                            },
                            microphone_request: {
                                decline: "No, gracias, solo quiero chatear",
                                disabled_text: "Has desactivado tu micr\xf3fono",
                                enable_instructions: {
                                    chrome: "Haz clic en el micr\xf3fono en la barra de direcciones y selecciona 'Permitir siempre', despu\xe9s actualiza la p\xe1gina",
                                    safari: "Safari \xbb Preferencias \xbb Sitios web \xbb Micr\xf3fono \xbb {{domain}} y selecciona 'Permitir', despu\xe9s actualiza la p\xe1gina"
                                },
                                enable_it: {
                                    chrome: "Para habilitarlo",
                                    default: "Habil\xedtalo",
                                    safari: "Para habilitarlo, dir\xedjete a"
                                },
                                enable_text: "Habilita tu micr\xf3fono"
                            },
                            placeholder: {
                                email: "Introduzca la direcci\xf3n de correo electr\xf3nico\u2026",
                                reply: "Introduzca una respuesta\u2026"
                            },
                            text: {
                                calendar_confirm_body: "La reuni\xf3n se enviar\xe1 a",
                                calendar_confirm_title: "Por favor, confirma tu reuni\xf3n",
                                calendar_invite: "\xbfA d\xf3nde debemos enviar la invitaci\xf3n de calendario?",
                                call_phone: "o llame a mi tel\xe9fono",
                                call_started: "Llamada iniciada",
                                call_us: "Ll\xe1menos",
                                chat_bot: "Robot de chat",
                                close_messenger: "Cerrar Messenger",
                                composer_label: "Introduce un mensaje",
                                confirming: "Confirmando\u2026",
                                connecting: "Conectando\u2026",
                                connecting_to_rep: "Conectando con un representante",
                                incoming_call: "Llamada entrante\u2026",
                                invalid_phone: "N\xfamero de tel\xe9fono incorrecto",
                                joined: "se uni\xf3",
                                meeting_canceled: "Programador de reuniones cancelado. Se ha unido un representante.",
                                meeting_scheduled: "Su reuni\xf3n fue programada",
                                meeting_settings: "Ajustes de la reuni\xf3n",
                                microphone: "Micr\xf3fono",
                                not_seen: "No se ha visto",
                                not_you: "\xbfNo eres t\xfa",
                                offline: "Todos nuestros representantes est\xe1n actualmente fuera de l\xednea.",
                                privacy_policy: "Pol\xedtica de privacidad",
                                qualified_branding: "Conversaciones Qualified",
                                rate_conversation: "Deje su valoraci\xf3n sobre esta conversaci\xf3n",
                                rep_is_typing: "El representante est\xe1 escribiendo",
                                rep_joined: "Se ha unido un representante",
                                seen: "Visto",
                                sending: "Enviando\u2026",
                                speakers: "Altavoces",
                                web_call_unavailable: "Las llamadas v\xeda web no est\xe1n disponibles en su dispositivo"
                            },
                            text_sub: {
                                confirmation_sent_to: "Confirmaci\xf3n enviada a {{text}}",
                                expect_call: "Recibir\xe1 una llamada del {{text}}",
                                invite_sent: "La invitaci\xf3n ser\xe1 enviada a {{email}}.",
                                meeting_details_sent: "Los detalles de la reuni\xf3n han sido enviados a {{email}}",
                                meeting_timezone: "Todos los horarios son {{text}}",
                                meeting_with: "Reuni\xf3n con {{text}}",
                                message_announcement_from_me: "A las {{timestamp}} digo",
                                message_announcement_from_them: "A las {{timestamp}} {{subject}} dice",
                                missed_call: "Llamada perdida: se esper\xf3 {{text}}",
                                next_day: "Cargar los tiempos para el d\xeda siguiente {{date}}",
                                previous_day: "Cargar los tiempos para el d\xeda anterior {{date}}",
                                schedule_meeting: "Programe una reuni\xf3n de {{text}}",
                                will_receive_call: "Recibir\xe1 una llamada del {{text}}"
                            }
                        }
                    },
                    es_LA: {
                        language: "Spanish (Latin America)",
                        translated_language: "Espa\xf1ol",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Permitir audio y video al visitante",
                                allow_visitor_audio_only: "Permitir audio solamente",
                                allow_visitor_video: "Permitir video de visitantes",
                                close_full_screen: "Cerrar la pantalla completa",
                                enable_your_microphone: "Activar el micr\xf3fono y la c\xe1mara arriba",
                                expand_to_full_screen: "Ampliar a pantalla completa",
                                face_mute: "Desactivar la c\xe1mara",
                                face_unmute: "Activar la c\xe1mara",
                                mute: "Desactivar el micr\xf3fono",
                                select_a_camera: "Seleccionar una c\xe1mara",
                                select_a_microphone: "Seleccionar un micr\xf3fono",
                                select_a_speaker: "Seleccionar un altavoz",
                                tooltip_prompt_visitor_call_controls: "Active su micr\xf3fono y video para unirse a {{name}}",
                                unmute: "Activar el micr\xf3fono",
                                video_settings: "Configuraci\xf3n de video",
                                view_audio_inputs_sources: "Ver entradas y fuentes de audio",
                                view_video_sources: "Ver las fuentes de video"
                            },
                            call_invite: {
                                decline: "Rechazar",
                                inviting: "te invita a una reuni\xf3n en vivo",
                                join: "Unirse solo con audio",
                                sharing_video_audio: "Compartir\xe1n su video y audio."
                            },
                            cta: {
                                back: "Atr\xe1s",
                                call_mobile: "Llamar con auriculares/altavoz",
                                call_web: "Llamar v\xeda web",
                                cancel: "Cancelar",
                                confirm_meeting: "Confirmar reuni\xf3n",
                                decline: "Rechazar",
                                done: "Aceptar",
                                input_fields_collection_time: "30 minutos",
                                join_mobile: "Unirse con auriculares/altavoz",
                                join_web: "Unirse v\xeda web",
                                retry: "No se pudo enviar. Haga clic para reintentarlo.",
                                retry_message: "No se pudo enviar. Toque el mensaje para volver a intentarlo\u2026",
                                send: "Enviar",
                                settings: "Configuraci\xf3n"
                            },
                            dates: {
                                month_format: "dd-MM",
                                month_format_short: "d-M",
                                time_format_detail: "k:mm 'h.' EEEE d MMMM  yyyy",
                                today: "Hoy",
                                tomorrow: "Ma\xf1ana",
                                year_format: "dd-MM-yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Ayer"
                            },
                            error: {
                                business_email: "Por favor, ingrese una direcci\xf3n v\xe1lida como su correo electr\xf3nico profesional",
                                default: "Por favor, escriba una respuesta",
                                email: "Por favor, ingrese una direcci\xf3n de correo electr\xf3nico v\xe1lida",
                                invalid_link_returning_text: "Los detalles de la reuni\xf3n se enviar\xe1n por separado",
                                name: "Por favor, escriba tanto el nombre de pila como el apellido",
                                number: "Por favor, escriba un n\xfamero v\xe1lido",
                                phone: "Por favor, escriba un n\xfamero de tel\xe9fono v\xe1lido",
                                required: "Campo obligatorio",
                                valid_name: "Introduzca un nombre v\xe1lido"
                            },
                            meeting_booker: {
                                calendar_next_month: "Mes siguiente",
                                calendar_previous_month: "Mes anterior",
                                close_confirmation: "Cerrar",
                                confirm: "Confirmar",
                                different_time: "Selecciona otra hora",
                                error: "Lo siento, no se reserv\xf3 la reuni\xf3n. Por favor, int\xe9ntalo de nuevo.",
                                find_availability: "Buscando disponibilidad",
                                loading_message_1: "Espere un momento, cargando...",
                                loading_message_2: "Un momento, casi listo!",
                                loading_message_3: "Un momento, por favor...",
                                loading_message_4: "Espera, estamos en eso!",
                                loading_message_5: "Estamos trabajando en ello...",
                                loading_message_6: "Procesando su solicitud...",
                                loading_message_7: "Espera un momento, casi terminamos!",
                                next_week: "Semana siguiente",
                                no_availability: "Lo sentimos, no pudimos encontrar a nadie. Alguien de nuestro equipo se pondr\xe1 en contacto.",
                                no_available_slots: "Lo sentimos, no hay ning\xfan horario disponible.",
                                previous_week: "Semana anterior",
                                unavailable_alert: "Seleccione a continuaci\xf3n un d\xeda y una hora para programar una reuni\xf3n.",
                                will_in_touch: "Nuestro equipo fue notificado y se pondr\xe1 en contacto con usted."
                            },
                            microphone_request: {
                                decline: "No gracias, solo quiero chatear",
                                disabled_text: "Ha desactivado su micr\xf3fono",
                                enable_instructions: {
                                    chrome: 'Haga clic en el micr\xf3fono en la barra de direcciones y seleccione "Permitir siempre", luego actualice la p\xe1gina',
                                    safari: 'Safari \xbb Preferencias \xbb Websites \xbb Micr\xf3fono \xbb {{domain}} y seleccione "Permitir", luego actualice la p\xe1gina'
                                },
                                enable_it: {
                                    chrome: "Para activarlo",
                                    default: "Por favor, act\xedvelo",
                                    safari: "Para activarlo vaya a"
                                },
                                enable_text: "Activar su micr\xf3fono"
                            },
                            placeholder: {
                                email: "Ingresar direcci\xf3n de correo electr\xf3nico\u2026",
                                reply: "Escribir una respuesta\u2026"
                            },
                            text: {
                                calendar_confirm_body: "La reuni\xf3n se enviar\xe1 a",
                                calendar_confirm_title: "Por favor, confirma tu reuni\xf3n",
                                calendar_invite: "\xbfAd\xf3nde deber\xedamos enviar la invitaci\xf3n al evento de calendario?",
                                call_phone: "o llamar a mi tel\xe9fono",
                                call_started: "Llamada empezada",
                                call_us: "Ll\xe1menos",
                                chat_bot: "Bot de chat",
                                close_messenger: "Cerrar el mensajero",
                                composer_label: "Introducir un mensaje",
                                confirming: "Confirmando\u2026",
                                connecting: "Conectando\u2026",
                                connecting_to_rep: "Lo estamos conectando con un representante",
                                incoming_call: "Llamada entrante\u2026",
                                invalid_phone: "N\xfamero de tel\xe9fono inv\xe1lido",
                                joined: "se uni\xf3",
                                meeting_canceled: "El organizador de la reuni\xf3n cancel\xf3. Se uni\xf3 un representante.",
                                meeting_scheduled: "Su reuni\xf3n fue programada",
                                meeting_settings: "Configuraci\xf3n de la reuni\xf3n",
                                microphone: "Micr\xf3fono",
                                not_seen: "No visto",
                                not_you: "\xbfNo eres t\xfa",
                                offline: "En este momento, todos nuestros representantes se encuentran desconectados.",
                                privacy_policy: "Pol\xedtica de privacidad",
                                qualified_branding: "Conversaciones Qualified",
                                rate_conversation: "Calificar esta conversaci\xf3n",
                                rep_is_typing: "El representante est\xe1 escribiendo",
                                rep_joined: "Se uni\xf3 un representante",
                                seen: "Visto",
                                sending: "Enviando\u2026",
                                speakers: "Altavoz",
                                web_call_unavailable: "Las llamadas web no est\xe1n disponibles en su dispositivo"
                            },
                            text_sub: {
                                confirmation_sent_to: "Confirmaci\xf3n enviada a {{text}}",
                                expect_call: "Espere una llamada del {{text}}",
                                invite_sent: "La invitaci\xf3n ser\xe1 enviada a {{email}}.",
                                meeting_details_sent: "Los detalles de la reuni\xf3n se han enviado a {{email}}",
                                meeting_timezone: "Todos los horarios est\xe1n en {{text}}",
                                meeting_with: "Reuni\xf3n con {{text}}",
                                message_announcement_from_me: "A las {{timestamp}} yo digo",
                                message_announcement_from_them: "A las {{timestamp}} {{subject}} dice",
                                missed_call: "Llamada perdida \u2013 se esper\xf3 durante {{text}}",
                                next_day: "Cargar horarios para el d\xeda siguiente {{date}}",
                                previous_day: "Cargar horarios para el d\xeda anterior {{date}}",
                                schedule_meeting: "Programar una reuni\xf3n de {{text}}",
                                will_receive_call: "Recibir\xe1 una llamada del {{text}}"
                            }
                        }
                    },
                    fr: {
                        language: "French",
                        translated_language: "Fran\xe7ais",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Autorisez l\u2019audio et la vid\xe9o des visiteurs",
                                allow_visitor_audio_only: "Autoriser uniquement l'audio",
                                allow_visitor_video: "Autoriser la vid\xe9o des visiteurs",
                                close_full_screen: "Fermez le plein \xe9cran",
                                enable_your_microphone: "Activez votre microphone et votre cam\xe9ra ci-dessus",
                                expand_to_full_screen: "Agrandissez en plein \xe9cran",
                                face_mute: "\xc9teignez votre cam\xe9ra",
                                face_unmute: "Allumez votre cam\xe9ra",
                                mute: "\xc9teignez votre microphone",
                                select_a_camera: "S\xe9lectionnez une cam\xe9ra",
                                select_a_microphone: "S\xe9lectionnez un microphone",
                                select_a_speaker: "S\xe9lectionnez un haut-parleur",
                                tooltip_prompt_visitor_call_controls: "Activez votre micro et votre vid\xe9o pour rejoindre {{name}}",
                                unmute: "Allumez votre microphone",
                                video_settings: "Param\xe8tres vid\xe9o",
                                view_audio_inputs_sources: "Voir les entr\xe9es et les sources audio",
                                view_video_sources: "Voir les sources vid\xe9o"
                            },
                            call_invite: {
                                decline: "D\xe9cliner",
                                inviting: "Vous invite \xe0 une r\xe9union en direct",
                                join: "Rejoindre avec audio seulement",
                                sharing_video_audio: "Ils partageront leur vid\xe9o et leur audio."
                            },
                            cta: {
                                back: "Retour",
                                call_mobile: "Appel via haut-parleur / casque",
                                call_web: "Appeler via le Web",
                                cancel: "Annuler",
                                confirm_meeting: "Confirmer la r\xe9union",
                                decline: "D\xe9cliner",
                                done: "Termin\xe9",
                                input_fields_collection_time: "30 minutes",
                                join_mobile: "Rejoindre via haut-parleur / casque",
                                join_web: "Rejoindre via le Web",
                                retry: "Envoi impossible. Cliquez pour r\xe9essayer.",
                                retry_message: "Envoi impossible. Appuyez sur le message pour r\xe9essayer\u2026",
                                send: "Envoyer",
                                settings: "Param\xe8tres"
                            },
                            dates: {
                                month_format: "dd/MM",
                                month_format_short: "d/M",
                                time_format_detail: "'Le' EEEE d MMMM yyyy k:mm",
                                today: "Aujourd'hui",
                                tomorrow: "Demain",
                                year_format: "dd/MM/yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Hier"
                            },
                            error: {
                                business_email: "Veuillez saisir une adresse e-mail professionnelle valide",
                                default: "Veuillez saisir une r\xe9ponse",
                                email: "Veuillez saisir une adresse e-mail valide",
                                invalid_link_returning_text: "Les d\xe9tails de la r\xe9union seront envoy\xe9s s\xe9par\xe9ment",
                                name: "Veuillez saisir le pr\xe9nom et le nom",
                                number: "Veuillez saisir un num\xe9ro valide",
                                phone: "Veuillez saisir un num\xe9ro de t\xe9l\xe9phone valide",
                                required: "Champ requis",
                                valid_name: "Veuillez saisir un nom valide"
                            },
                            meeting_booker: {
                                calendar_next_month: "Mois suivant",
                                calendar_previous_month: "Mois pr\xe9c\xe9dent",
                                close_confirmation: "Fermer",
                                confirm: "Confirmer pour",
                                different_time: "S\xe9lectionnez un autre moment",
                                error: "D\xe9sol\xe9, cette r\xe9union n'a pas pu \xeatre r\xe9serv\xe9e. Veuillez r\xe9essayer.",
                                find_availability: "Trouver la disponibilit\xe9",
                                loading_message_1: "Patientez, chargement...",
                                loading_message_2: "Une seconde, presque l\xe0 !",
                                loading_message_3: "Un instant, s'il vous pla\xeet...",
                                loading_message_4: "Attends, nous nous en occupons !",
                                loading_message_5: "Nous travaillons dessus...",
                                loading_message_6: "Traitement de votre demande en cours...",
                                loading_message_7: "Attendez, presque termin\xe9 !",
                                next_week: "Semaine suivante",
                                no_availability: "D\xe9sol\xe9, nous n'avons pas pu trouver quelqu'un. Une personne de notre \xe9quipe vous contactera.",
                                no_available_slots: "D\xe9sol\xe9, il n'y a pas de cr\xe9neau disponible.",
                                previous_week: "Semaine pr\xe9c\xe9dente",
                                unavailable_alert: "D\xe9sol\xe9, l'horaire que vous avez s\xe9lectionn\xe9 n'est plus disponible",
                                will_in_touch: "Notre \xe9quipe a \xe9t\xe9 pr\xe9venue et vous contactera."
                            },
                            microphone_request: {
                                decline: "Non merci, je veux juste discuter",
                                disabled_text: "Vous avez d\xe9sactiv\xe9 votre microphone",
                                enable_instructions: {
                                    chrome: "Cliquez sur le microphone dans la barre d\u2019adresse et s\xe9lectionnez \xab Toujours autoriser \xbb, puis actualisez la page",
                                    safari: "Safari > Pr\xe9f\xe9rences > Sites web > Microphone > {{domain}}et s\xe9lectionnez \xab Autoriser \xbb, puis actualisez la page"
                                },
                                enable_it: {
                                    chrome: "Pour l\u2019activer",
                                    default: "Veuillez l\u2019activer",
                                    safari: "Pour l\u2019activer, allez \xe0"
                                },
                                enable_text: "Activez votre microphone"
                            },
                            placeholder: {
                                email: "Saisissez l'adresse e-mail\u2026",
                                reply: "Saisissez une r\xe9ponse\u2026"
                            },
                            text: {
                                calendar_confirm_body: "La r\xe9union sera envoy\xe9e \xe0",
                                calendar_confirm_title: "Veuillez confirmer votre r\xe9union",
                                calendar_invite: "O\xf9 devons-nous envoyer l'invitation du calendrier ?",
                                call_phone: "Ou appeler mon t\xe9l\xe9phone",
                                call_started: "Appel lanc\xe9",
                                call_us: "Appelez-nous",
                                chat_bot: "Dialogueur",
                                close_messenger: "Fermez le messager",
                                composer_label: "Saisissez un message",
                                confirming: "Confirmation en cours\u2026",
                                connecting: "Connexion\u2026",
                                connecting_to_rep: "Vous connecter \xe0 un repr\xe9sentant",
                                incoming_call: "Appel entrant\u2026",
                                invalid_phone: "Num\xe9ro de t\xe9l\xe9phone invalide",
                                joined: "a rejoint la discussion",
                                meeting_canceled: "Annulation du planificateur de r\xe9unions. Un repr\xe9sentant a rejoint la discussion.",
                                meeting_scheduled: "Votre r\xe9union a \xe9t\xe9 planifi\xe9e",
                                meeting_settings: "Param\xe8tres de r\xe9union",
                                microphone: "Microphone",
                                not_seen: "Non lu",
                                not_you: "Pas toi",
                                offline: "Tous nos repr\xe9sentants sont actuellement hors ligne.",
                                privacy_policy: "Politique de confidentialit\xe9",
                                qualified_branding: "Conversations Qualified",
                                rate_conversation: "Donnez une note \xe0 cette conversation",
                                rep_is_typing: "Le repr\xe9sentant est en train de saisir",
                                rep_joined: "Un repr\xe9sentant a rejoint la discussion",
                                seen: "Lu",
                                sending: "Envoi en cours\u2026",
                                speakers: "Haut-parleurs",
                                web_call_unavailable: "Les appels Web ne sont pas disponibles sur votre appareil"
                            },
                            text_sub: {
                                confirmation_sent_to: "Confirmation envoy\xe9e \xe0 {{text}}",
                                expect_call: "Attendez-vous \xe0 un appel de {{text}}",
                                invite_sent: "L'invitation sera envoy\xe9e \xe0 {{email}}.",
                                meeting_details_sent: "Les d\xe9tails de la r\xe9union ont \xe9t\xe9 envoy\xe9s \xe0 {{email}}",
                                meeting_timezone: "Toutes les heures sont sur le fuseau horaire {{text}}",
                                meeting_with: "R\xe9union avec {{text}}",
                                message_announcement_from_me: "\xc0 {{timestamp}} je dis",
                                message_announcement_from_them: "\xc0 {{timestamp}} {{subject}} dit",
                                missed_call: "Appel manqu\xe9 ; dur\xe9e d'attente {{text}}",
                                next_day: "Charger les heures pour le jour suivant {{date}}",
                                previous_day: "Charger les heures pour le jour pr\xe9c\xe9dent {{date}}",
                                schedule_meeting: "Programmer une r\xe9union de {{text}}",
                                will_receive_call: "Vous recevrez un appel de {{text}}"
                            }
                        }
                    },
                    id: {
                        language: "Indonesian",
                        translated_language: "Bahasa Indonesia",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Izinkan audio dan video pengunjung",
                                allow_visitor_audio_only: "Hanya izinkan audio",
                                allow_visitor_video: "Izinkan video pengunjung",
                                close_full_screen: "Tutup layar penuh",
                                enable_your_microphone: "Aktifkan mikrofon dan kamera Anda di atas",
                                expand_to_full_screen: "Perluas ke layar penuh",
                                face_mute: "Matikan kamera Anda",
                                face_unmute: "Hidupkan kamera Anda",
                                mute: "Matikan mikrofon Anda",
                                select_a_camera: "Pilih kamera",
                                select_a_microphone: "Pilih mikrofon",
                                select_a_speaker: "Pilih speaker",
                                tooltip_prompt_visitor_call_controls: "Aktifkan mic dan video Anda untuk bergabung {{name}}",
                                unmute: "Hidupkan mikrofon Anda",
                                video_settings: "Pengaturan video",
                                view_audio_inputs_sources: "Lihat input dan sumber audio",
                                view_video_sources: "Lihat sumber video"
                            },
                            call_invite: {
                                decline: "Tolak",
                                inviting: "mengundang Anda ke pertemuan langsung",
                                join: "Gabung dengan audio saja",
                                sharing_video_audio: "Mereka akan membagikan video dan audio mereka."
                            },
                            cta: {
                                back: "Kembali",
                                call_mobile: "Panggil melalui speakerphone/headset",
                                call_web: "Panggil melalui web",
                                cancel: "Batal",
                                confirm_meeting: "Konfirmasi pertemuan",
                                decline: "Tolak",
                                done: "Selesai",
                                input_fields_collection_time: "30 menit",
                                join_mobile: "Gabung melalui speakerphone/headset",
                                join_web: "Gabung melalui web",
                                retry: "Tidak dapat mengirim. Klik untuk mencoba lagi.",
                                retry_message: "Tidak dapat mengirim. Ketuk pesan untuk mencoba lagi\u2026",
                                send: "Kirim",
                                settings: "Pengaturan"
                            },
                            dates: {
                                month_format: "dd/MM",
                                month_format_short: "d/M",
                                time_format_detail: "HH:mm PPPP",
                                today: "Hari ini",
                                tomorrow: "Besok",
                                year_format: "dd/MM/yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Kemarin"
                            },
                            error: {
                                business_email: "Silakan masukkan alamat email bisnis yang valid",
                                default: "Silakan masukkan balasan",
                                email: "Silakan masukkan alamat email yang valid",
                                invalid_link_returning_text: "Detail pertemuan akan dikirim secara terpisah",
                                name: "Silakan masukkan nama depan dan belakang",
                                number: "Silakan masukkan nomor yang valid",
                                phone: "Silakan masukkan nomor telepon yang valid",
                                required: "Kolom yang harus diisi",
                                valid_name: "Silakan masukkan nama yang valid"
                            },
                            meeting_booker: {
                                calendar_next_month: "Bulan depan",
                                calendar_previous_month: "Bulan sebelumnya",
                                close_confirmation: "Tutup",
                                confirm: "Konfirmasi",
                                different_time: "Pilih waktu yang berbeda",
                                error: "Maaf, pertemuan ini tidak dapat dipesan. Silakan coba lagi.",
                                find_availability: "Mencari ketersediaan",
                                loading_message_1: "Tunggu sebentar, sedang memuat...",
                                loading_message_2: "Sebentar, hampir selesai!",
                                loading_message_3: "Sebentar, tolong tunggu...",
                                loading_message_4: "Tunggu sebentar, kami sedang bekerja!",
                                loading_message_5: "Sedang bekerja...",
                                loading_message_6: "Memproses permintaan Anda...",
                                loading_message_7: "Tunggu sebentar, hampir selesai!",
                                next_week: "Minggu Berikutnya",
                                no_availability: "Maaf, kami tidak dapat menemukan siapa pun. Seseorang dari tim kami akan menghubungi Anda.",
                                no_available_slots: "Maaf, tidak ada waktu yang tersedia.",
                                previous_week: "Minggu Sebelumnya",
                                unavailable_alert: "Maaf, waktu yang Anda pilih tidak lagi tersedia",
                                will_in_touch: "Tim kami telah diberitahu dan akan menghubungi Anda."
                            },
                            microphone_request: {
                                decline: "Tidak, terima kasih, saya hanya ingin chat",
                                disabled_text: "Anda telah menonaktifkan mikrofon Anda",
                                enable_instructions: {
                                    chrome: "Klik mikrofon di address bar dan pilih 'Always allow', lalu refresh halaman",
                                    safari: "Safari \xbb Preferences \xbb Websites \xbb Microphone \xbb {{domain}} dan pilih 'Allow', lalu refresh halaman"
                                },
                                enable_it: {
                                    chrome: "Untuk mengaktifkannya",
                                    default: "Silakan aktifkan",
                                    safari: "Untuk mengaktifkannya, pergi ke"
                                },
                                enable_text: "Aktifkan mikrofon Anda"
                            },
                            placeholder: {
                                email: "Masukkan alamat email\u2026",
                                reply: "Masukkan balasan\u2026"
                            },
                            text: {
                                calendar_confirm_body: "Pertemuan akan dikirimkan ke",
                                calendar_confirm_title: "Silakan konfirmasi pertemuan Anda",
                                calendar_invite: "Kemana kami harus mengirim undangan?",
                                call_phone: "Atau panggil telepon saya",
                                call_started: "Panggilan dimulai",
                                call_us: "Hubungi kami",
                                chat_bot: "Chat Bot",
                                close_messenger: "Tutup messenger",
                                composer_label: "Masukkan pesan",
                                confirming: "Mengkonfirmasi...",
                                connecting: "Menghubungkan\u2026",
                                connecting_to_rep: "Menghubungkan Anda ke perwakilan",
                                incoming_call: "Panggilan masuk\u2026",
                                invalid_phone: "Nomor telepon tidak valid",
                                joined: "bergabung",
                                meeting_canceled: "Penjadwalan pertemuan dibatalkan. Seorang perwakilan telah bergabung.",
                                meeting_scheduled: "Pertemuan Anda telah dijadwalkan",
                                meeting_settings: "Pengaturan Pertemuan",
                                microphone: "Mikrofon",
                                not_seen: "Belum dilihat",
                                not_you: "Bukan kamu",
                                offline: "Semua perwakilan kami saat ini sedang offline.",
                                privacy_policy: "Kebijakan privasi",
                                qualified_branding: "Percakapan Qualified",
                                rate_conversation: "Beri penilaian untuk percakapan ini",
                                rep_is_typing: "Perwakilan sedang mengetik",
                                rep_joined: "Perwakilan telah bergabung",
                                seen: "Dilihat",
                                sending: "Mengirim\u2026",
                                speakers: "Speaker",
                                web_call_unavailable: "Panggilan web tidak tersedia di perangkat Anda"
                            },
                            text_sub: {
                                confirmation_sent_to: "Konfirmasi dikirim ke {{text}}",
                                expect_call: "Harapkan panggilan dari {{text}}",
                                invite_sent: "Undangan akan dikirim ke {{email}}.",
                                meeting_details_sent: "Detail pertemuan telah dikirim ke {{email}}",
                                meeting_timezone: "Semua waktu adalah {{text}}",
                                meeting_with: "Pertemuan dengan {{text}}",
                                message_announcement_from_me: "Pada {{timestamp}} saya berkata",
                                message_announcement_from_them: "Pada {{timestamp}} {{subject}} berkata",
                                missed_call: "Panggilan terlewat \u2013 menunggu selama {{text}}",
                                next_day: "Muat waktu untuk hari berikutnya {{date}}",
                                previous_day: "Muat waktu untuk hari sebelumnya {{date}}",
                                schedule_meeting: "Jadwalkan pertemuan {{text}}",
                                will_receive_call: "Anda akan menerima panggilan dari {{text}}"
                            }
                        }
                    },
                    it: {
                        language: "Italian",
                        translated_language: "Italiano",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Consenti audio e video del visitatore",
                                allow_visitor_audio_only: "Consenti solo audio",
                                allow_visitor_video: "Consenti video visitatore",
                                close_full_screen: "Chiudi schermo intero",
                                enable_your_microphone: "Abilita il microfono e la fotocamera sopra",
                                expand_to_full_screen: "Espandi a schermo intero",
                                face_mute: "Spegni la fotocamera",
                                face_unmute: "Accendi la fotocamera",
                                mute: "Spegni il microfono",
                                select_a_camera: "Seleziona una fotocamera",
                                select_a_microphone: "Seleziona un microfono",
                                select_a_speaker: "Seleziona un altoparlante",
                                tooltip_prompt_visitor_call_controls: "Abilita microfono e video per unirti a {{name}}",
                                unmute: "Accendi il microfono",
                                video_settings: "Impostazioni video",
                                view_audio_inputs_sources: "Visualizza ingressi e sorgenti audio",
                                view_video_sources: "Visualizza sorgenti video"
                            },
                            call_invite: {
                                decline: "Rifiuta",
                                inviting: "Ti sta invitando a una riunione in diretta",
                                join: "Unisciti solo con l'audio",
                                sharing_video_audio: "Condivideranno il loro video e audio."
                            },
                            cta: {
                                back: "Indietro",
                                call_mobile: "Chiama tramite vivavoce/cuffie",
                                call_web: "Chiama via web",
                                cancel: "Annulla",
                                confirm_meeting: "Conferma riunione",
                                decline: "Rifiuta",
                                done: "Salva",
                                input_fields_collection_time: "30 minuti",
                                join_mobile: "Collegati tramite vivavoce/cuffie",
                                join_web: "Collegati via web",
                                retry: "Impossibile inviare. Fai clic per riprovare.",
                                retry_message: "Impossibile inviare. Toccare il messaggio per riprovare\u2026",
                                send: "Invia",
                                settings: "Impostazioni"
                            },
                            dates: {
                                month_format: "dd.MM",
                                month_format_short: "d.M",
                                time_format_detail: "EEEE d MMMM yyyy, 'ore' k:mm",
                                today: "Oggi",
                                tomorrow: "Domani",
                                year_format: "dd.MM.yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Ieri"
                            },
                            error: {
                                business_email: "Inserire un indirizzo email aziendale valido",
                                default: "Inserire una risposta",
                                email: "Inserire un indirizzo email valido",
                                invalid_link_returning_text: "I dettagli della riunione verranno inviati separatamente",
                                name: "Inserire sia il nome che il cognome",
                                number: "Inserire un numero valido",
                                phone: "Inserire un numero di telefono valido",
                                required: "Campo obbligatorio",
                                valid_name: "Si prega di inserire un nome valido"
                            },
                            meeting_booker: {
                                calendar_next_month: "Mese successivo",
                                calendar_previous_month: "Mese precedente",
                                close_confirmation: "Chiudi",
                                confirm: "Conferma",
                                different_time: "Scegli un orario diverso",
                                error: "Spiacente, impossibile prenotare questa riunione. Riprova, per favore.",
                                find_availability: "Ricerca disponibilit\xe0",
                                loading_message_1: "Attendere, caricamento...",
                                loading_message_2: "Un attimo, quasi pronto!",
                                loading_message_3: "Un attimo, per favore...",
                                loading_message_4: "Aspetta, ci stiamo lavorando!",
                                loading_message_5: "Stiamo lavorando su questo...",
                                loading_message_6: "Elaborazione della tua richiesta...",
                                loading_message_7: "Aspetta un attimo, quasi finito!",
                                next_week: "Settimana Successiva",
                                no_availability: "Ci dispiace, non siamo riusciti a trovare nessuno. Qualcuno del nostro team sar\xe0 in contatto.",
                                no_available_slots: "Siamo spiacenti, non ci sono orari disponibili.",
                                previous_week: "Settimana Precedente",
                                unavailable_alert: "Siamo spiacenti, l'orario selezionato non \xe8 pi\xf9 disponibile",
                                will_in_touch: "Il nostro team ha ricevuto la notifica e ti contatter\xe0 tra breve."
                            },
                            microphone_request: {
                                decline: "No grazie, voglio solo chattare",
                                disabled_text: "Hai disabilitato il microfono",
                                enable_instructions: {
                                    chrome: 'Fai clic sul microfono nella barra degli indirizzi e seleziona "Consenti sempre", quindi aggiorna la pagina',
                                    safari: 'Safari \xbb Preferenze \xbb Siti Web \xbb Microfono \xbb {{domain}} e seleziona "Consenti", quindi aggiorna la pagina'
                                },
                                enable_it: {
                                    chrome: "Per abilitarlo",
                                    default: "Si prega di abilitarlo",
                                    safari: "Per abilitarlo vai su"
                                },
                                enable_text: "Abilita il microfono"
                            },
                            placeholder: {
                                email: "Inserire indirizzo email\u2026",
                                reply: "Inserire una risposta\u2026"
                            },
                            text: {
                                calendar_confirm_body: "La riunione verr\xe0 inviata a",
                                calendar_confirm_title: "Conferma la tua riunione, per favore",
                                calendar_invite: "Dove dovremmo inviare l'invito del calendario?",
                                call_phone: "O chiama il mio telefono",
                                call_started: "La chiamata \xe8 iniziata",
                                call_us: "Chiamaci",
                                chat_bot: "Chatbot",
                                close_messenger: "Chiudi messanger",
                                composer_label: "Inserisci un messaggio",
                                confirming: "Conferma in corso\u2026",
                                connecting: "Connessione in corso\u2026",
                                connecting_to_rep: "In connessione con un rappresentante",
                                incoming_call: "Chiamata in arrivo\u2026",
                                invalid_phone: "Numero di telefono non valido",
                                joined: "si \xe8 unito",
                                meeting_canceled: "Pianificatore riunioni annullato. Un rappresentante si \xe8 unito.",
                                meeting_scheduled: "Il tuo incontro \xe8 stato programmato",
                                meeting_settings: "Impostazioni Riunione",
                                microphone: "Microfono",
                                not_seen: "Non visualizzato",
                                not_you: "Non tu",
                                offline: "Tutti i nostri rappresentanti sono attualmente offline.",
                                privacy_policy: "Informativa sulla privacy",
                                qualified_branding: "Conversazioni Qualified",
                                rate_conversation: "Valuta questa conversazione",
                                rep_is_typing: "Il rappresentante sta scrivendo",
                                rep_joined: "Un rappresentante si \xe8 unito",
                                seen: "Visualizzato",
                                sending: "Invio in corso\u2026",
                                speakers: "Altoparlanti",
                                web_call_unavailable: "Le chiamate web non sono disponibili sul tuo dispositivo"
                            },
                            text_sub: {
                                confirmation_sent_to: "Conferma inviata a {{text}}",
                                expect_call: "Riceverai una chiamata da {{text}}",
                                invite_sent: "L'invito sar\xe0 inviato a {{email}}.",
                                meeting_details_sent: "I dettagli dell'incontro sono stati inviati a {{email}}",
                                meeting_timezone: "Tutti gli orari sono {{text}}",
                                meeting_with: "Riunione con {{text}}",
                                message_announcement_from_me: "Alle {{timestamp}} dico",
                                message_announcement_from_them: "Alle {{timestamp}} {{subject}} dice",
                                missed_call: "Chiamata persa: ha atteso {{text}}",
                                next_day: "Carica gli orari del giorno successivo {{date}}",
                                previous_day: "Carica gli orari del giorno precedente {{date}}",
                                schedule_meeting: "Pianifica una riunione di {{text}}",
                                will_receive_call: "Riceverai una chiamata da {{text}}"
                            }
                        }
                    },
                    ja: {
                        language: "Japanese",
                        translated_language: "\u65e5\u672c\u8a9e",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\u30d3\u30b8\u30bf\u30fc\u306b\u30aa\u30fc\u30c7\u30a3\u30aa\u3068\u30d3\u30c7\u30aa\u3092\u8a31\u53ef\u3059\u308b",
                                allow_visitor_audio_only: "\u97f3\u58f0\u306e\u307f\u8a31\u53ef",
                                allow_visitor_video: "\u8a2a\u554f\u8005\u306e\u52d5\u753b\u3092\u8a31\u53ef\u3059\u308b",
                                close_full_screen: "\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u8868\u793a\u3092\u7d42\u4e86\u3059\u308b",
                                enable_your_microphone: "\u4e0a\u306e\u30de\u30a4\u30af\u3068\u30ab\u30e1\u30e9\u3092\u6709\u52b9\u306b\u3059\u308b",
                                expand_to_full_screen: "\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306b\u62e1\u5927\u3059\u308b",
                                face_mute: "\u30ab\u30e1\u30e9\u3092\u30aa\u30d5\u306b\u3059\u308b",
                                face_unmute: "\u30ab\u30e1\u30e9\u3092\u30aa\u30f3\u306b\u3059\u308b",
                                mute: "\u30de\u30a4\u30af\u3092\u30aa\u30d5\u306b\u3059\u308b",
                                select_a_camera: "\u30ab\u30e1\u30e9\u3092\u9078\u629e\u3059\u308b",
                                select_a_microphone: "\u30de\u30a4\u30af\u3092\u9078\u629e\u3059\u308b",
                                select_a_speaker: "\u30b9\u30d4\u30fc\u30ab\u30fc\u3092\u9078\u629e\u3059\u308b",
                                tooltip_prompt_visitor_call_controls: "{{name}}\u306b\u52a0\u308f\u308b\u306b\u306f\u30de\u30a4\u30af\u3068\u30d3\u30c7\u30aa\u3092\u6709\u52b9\u306b\u3057\u3066\u4e0b\u3055\u3044\u3002",
                                unmute: "\u30de\u30a4\u30af\u3092\u30aa\u30f3\u306b\u3059\u308b",
                                video_settings: "\u8868\u793a\u306e\u8a2d\u5b9a",
                                view_audio_inputs_sources: "\u30aa\u30fc\u30c7\u30a3\u30aa\u5165\u529b\u3068\u30aa\u30fc\u30c7\u30a3\u30aa\u30bd\u30fc\u30b9\u3092\u8868\u793a\u3059\u308b",
                                view_video_sources: "\u30d3\u30c7\u30aa\u30bd\u30fc\u30b9\u3092\u8868\u793a\u3059\u308b"
                            },
                            call_invite: {
                                decline: "\u8f9e\u9000",
                                inviting: "\u30e9\u30a4\u30d6\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u62db\u5f85\u3057\u3066\u3044\u307e\u3059",
                                join: "\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u307f\u3067\u53c2\u52a0",
                                sharing_video_audio: "\u5f7c\u3089\u306f\u30d3\u30c7\u30aa\u3068\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u5171\u6709\u3057\u307e\u3059\u3002"
                            },
                            cta: {
                                back: "\u623b\u308b",
                                call_mobile: "\u30b9\u30d4\u30fc\u30ab\u30fc\u30db\u30f3/\u30d8\u30c3\u30c9\u30bb\u30c3\u30c8\u7d4c\u7531\u3067\u901a\u8a71",
                                call_web: "\u30a6\u30a7\u30d6\u7d4c\u7531\u3067\u901a\u8a71",
                                cancel: "\u30ad\u30e3\u30f3\u30bb\u30eb",
                                confirm_meeting: "\u4f1a\u5408\u3092\u78ba\u8a8d",
                                decline: "\u62d2\u5426",
                                done: "\u5b8c\u4e86",
                                input_fields_collection_time: "30\u5206",
                                join_mobile: "\u30b9\u30d4\u30fc\u30ab\u30fc\u30db\u30f3/\u30d8\u30c3\u30c9\u30bb\u30c3\u30c8\u7d4c\u7531\u3067\u53c2\u52a0",
                                join_web: "\u30a6\u30a7\u30d6\u7d4c\u7531\u3067\u53c2\u52a0",
                                retry: "\u9001\u4fe1\u3067\u304d\u307e\u305b\u3093\u3002\u30af\u30ea\u30c3\u30af\u3057\u3066\u518d\u8a66\u884c\u3057\u304f\u3060\u3055\u3044\u3002",
                                retry_message: "\u9001\u4fe1\u3067\u304d\u307e\u305b\u3093\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30bf\u30c3\u30d7\u3057\u3066\u518d\u8a66\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u2026",
                                send: "\u9001\u4fe1",
                                settings: "\u8a2d\u5b9a"
                            },
                            dates: {
                                month_format: "MM/dd",
                                month_format_short: "M/d",
                                time_format_detail: "yyyy MMMM d EEEE aaaa h:mm",
                                today: "\u4eca\u65e5",
                                tomorrow: "\u660e\u65e5",
                                year_format: "yyyy/MM/dd",
                                year_month_format: "yyyy MMMM",
                                yesterday: "\u6628\u65e5"
                            },
                            error: {
                                business_email: "\u6709\u52b9\u306a\u30d3\u30b8\u30cd\u30b9\u7528\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044",
                                default: "\u8fd4\u4fe1\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044",
                                email: "\u6709\u52b9\u306a\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044",
                                invalid_link_returning_text: "\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a73\u7d30\u306f\u5225\u9014\u9001\u4fe1\u3055\u308c\u307e\u3059",
                                name: "\u540d\u3068\u59d3\u306e\u4e21\u65b9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002",
                                number: "\u6709\u52b9\u306a\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044",
                                phone: "\u6709\u52b9\u306a\u96fb\u8a71\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044",
                                required: "\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9",
                                valid_name: "\u6709\u52b9\u306a\u540d\u524d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044"
                            },
                            meeting_booker: {
                                calendar_next_month: "\u6b21\u6708",
                                calendar_previous_month: "\u524d\u6708",
                                close_confirmation: "\u9589\u3058\u308b",
                                confirm: "\u78ba\u5b9a",
                                different_time: "\u5225\u306e\u6642\u9593\u3092\u9078\u629e",
                                error: "\u3059\u307f\u307e\u305b\u3093\u3001\u4f1a\u8b70\u306e\u4e88\u7d04\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3082\u3046\u4e00\u5ea6\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\u3002",
                                find_availability: "\u5229\u7528\u3067\u304d\u308b\u6642\u9593\u5e2f\u3092\u63a2\u3057\u3066\u3044\u307e\u3059",
                                loading_message_1: "\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3001\u8aad\u307f\u8fbc\u307f\u4e2d...",
                                loading_message_2: "\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u3001\u3082\u3046\u3059\u3050\u305d\u3053\u3067\u3059\uff01",
                                loading_message_3: "\u3061\u3087\u3063\u3068\u304a\u5f85\u3061\u304f\u3060\u3055\u3044...",
                                loading_message_4: "\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3001\u5bfe\u5fdc\u4e2d\u3067\u3059\uff01",
                                loading_message_5: "\u4f5c\u696d\u4e2d\u3067\u3059...",
                                loading_message_6: "\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u4e2d...",
                                loading_message_7: "\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3001\u3082\u3046\u3059\u3050\u7d42\u308f\u308a\u307e\u3059\uff01",
                                next_week: "\u6b21\u9031",
                                no_availability: "\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3001\u8ab0\u3082\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u79c1\u305f\u3061\u306e\u30c1\u30fc\u30e0\u304b\u3089\u9023\u7d61\u3092\u3044\u305f\u3057\u307e\u3059\u3002",
                                no_available_slots: "\u7533\u3057\u8a33\u3054\u3056\u3044\u307e\u305b\u3093\u304c\u3001\u3054\u5229\u7528\u3044\u305f\u3060\u3051\u308b\u6642\u9593\u5e2f\u304c\u3054\u3056\u3044\u307e\u305b\u3093\u3002",
                                previous_week: "\u524d\u9031",
                                unavailable_alert: "\u7533\u3057\u8a33\u3054\u3056\u3044\u307e\u305b\u3093\u3002\u9078\u629e\u3057\u305f\u6642\u9593\u306f\u3054\u5229\u7528\u3044\u305f\u3060\u3051\u307e\u305b\u3093\u3002",
                                will_in_touch: "\u5f0a\u793e\u30c1\u30fc\u30e0\u3088\u308a\u3001\u3054\u9023\u7d61\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002"
                            },
                            microphone_request: {
                                decline: "\u30c1\u30e3\u30c3\u30c8\u3057\u305f\u3044\u3060\u3051\u306a\u306e\u3067",
                                disabled_text: "\u30de\u30a4\u30af\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059",
                                enable_instructions: {
                                    chrome: "\u30a2\u30c9\u30ec\u30b9\u30d0\u30fc\u306e\u30de\u30a4\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3001\uff3b\u5e38\u306b\u8a31\u53ef\u3059\u308b\uff3d\u3092\u9078\u629e\u3057\u3066\u3001\u30da\u30fc\u30b8\u3092\u66f4\u65b0\u3057\u307e\u3059",
                                    safari: "Safari \xbb \u74b0\u5883\u8a2d\u5b9a \xbb \u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \xbb \u30de\u30a4\u30af \xbb {{domain}} \u306e\u9806\u306b\u30af\u30ea\u30c3\u30af\u3057\u3001\uff3b\u8a31\u53ef\u3059\u308b\uff3d\u3092\u9078\u629e\u3057\u305f\u5f8c\u3001\u30da\u30fc\u30b8\u3092\u66f4\u65b0\u3057\u307e\u3059"
                                },
                                enable_it: {
                                    chrome: "\u6709\u52b9\u306b\u3059\u308b\u306b\u306f",
                                    default: "\u6709\u52b9\u306b\u3057\u3066\u304f\u3060\u3055\u3044",
                                    safari: "\u30de\u30a4\u30af\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f"
                                },
                                enable_text: "\u30de\u30a4\u30af\u3092\u6709\u52b9\u306b\u3059\u308b"
                            },
                            placeholder: {
                                email: "\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u2026",
                                reply: "\u8fd4\u4fe1\u3092\u5165\u529b\u2026"
                            },
                            text: {
                                calendar_confirm_body: "\u4f1a\u8b70\u306f\u9001\u4fe1\u3055\u308c\u307e\u3059",
                                calendar_confirm_title: "\u4f1a\u8b70\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044",
                                calendar_invite: "\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u62db\u5f85\u72b6\u306f\u3069\u3061\u3089\u306b\u304a\u9001\u308a\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u304b\u3002",
                                call_phone: "\u307e\u305f\u306f\u79c1\u306e\u96fb\u8a71\u306b\u304b\u3051\u308b",
                                call_started: "\u901a\u8a71\u958b\u59cb",
                                call_us: "\u3054\u9023\u7d61\u304f\u3060\u3055\u3044",
                                chat_bot: "\u30c1\u30e3\u30c3\u30c8\u30dc\u30c3\u30c8",
                                close_messenger: "\u30e1\u30c3\u30bb\u30f3\u30b8\u30e3\u30fc\u3092\u9589\u3058\u308b",
                                composer_label: "\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5165\u529b\u3059\u308b",
                                confirming: "\u78ba\u8a8d\u4e2d\u2026",
                                connecting: "\u63a5\u7d9a\u4e2d\u2026",
                                connecting_to_rep: "\u62c5\u5f53\u8005\u306b\u304a\u3064\u306a\u304e\u3057\u3066\u3044\u307e\u3059",
                                incoming_call: "\u7740\u4fe1\u4e2d\u2026",
                                invalid_phone: "\u7121\u52b9\u306a\u96fb\u8a71\u756a\u53f7",
                                joined: "\u304c\u53c2\u52a0\u3057\u307e\u3057\u305f",
                                meeting_canceled: "\u4f1a\u5408\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3057\u305f\u3002\u62c5\u5f53\u8005\u304c\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002",
                                meeting_scheduled: "\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u4e88\u7d04\u3055\u308c\u307e\u3057\u305f",
                                meeting_settings: "\u4f1a\u5408\u306e\u8a2d\u5b9a",
                                microphone: "\u30de\u30a4\u30af",
                                not_seen: "\u672a\u8aad",
                                not_you: "\u3042\u306a\u305f\u3067\u306a\u3044",
                                offline: "\u73fe\u5728\u3001\u3059\u3079\u3066\u306e\u62c5\u5f53\u8005\u304c\u30aa\u30d5\u30e9\u30a4\u30f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002",
                                privacy_policy: "\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u30dd\u30ea\u30b7\u30fc",
                                qualified_branding: "Qualified\u306e\u4f1a\u8a71",
                                rate_conversation: "\u3053\u306e\u4f1a\u8a71\u3092\u8a55\u4fa1\u3059\u308b",
                                rep_is_typing: "\u62c5\u5f53\u8005\u304c\u5165\u529b\u4e2d\u3067\u3059",
                                rep_joined: "\u62c5\u5f53\u8005\u304c\u53c2\u52a0\u3057\u307e\u3057\u305f",
                                seen: "\u65e2\u8aad",
                                sending: "\u9001\u4fe1\u4e2d\u2026",
                                speakers: "\u30b9\u30d4\u30fc\u30ab\u30fc",
                                web_call_unavailable: "\u304a\u4f7f\u3044\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u306f\u30a6\u30a7\u30d6\u901a\u8a71\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093"
                            },
                            text_sub: {
                                confirmation_sent_to: "{{text}}\u3078\u78ba\u8a8d\u3092\u9001\u4fe1\u6e08\u307f",
                                expect_call: "{{text}}\u304b\u3089\u7740\u4fe1\u304c\u3042\u308a\u307e\u3059",
                                invite_sent: "{{email}} \u306b\u62db\u5f85\u72b6\u304c\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002",
                                meeting_details_sent: "\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a73\u7d30\u304c{{email}}\u306b\u9001\u4fe1\u3055\u308c\u307e\u3057\u305f",
                                meeting_timezone: "\u3059\u3079\u3066\u306e\u6642\u9593\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002{{text}}",
                                meeting_with: "{{text}}\u3068\u306e\u4f1a\u5408",
                                message_announcement_from_me: "{{timestamp}} \u306b\u79c1\u306f\u8a00\u3044\u307e\u3059",
                                message_announcement_from_them: "{{timestamp}} \u306b {{subject}} \u3088\u3046\u306b\u8ff0\u3079\u3066\u3044\u307e\u3059",
                                missed_call: "\u5fdc\u7b54\u3067\u304d\u306a\u304b\u3063\u305f\u7740\u4fe1 \u2013 \u5f85\u6a5f\u6642\u9593 {{text}}",
                                next_day: "\u7fcc\u65e5\u306e\u6642\u523b\u3092\u8aad\u307f\u8fbc\u3080 {{date}}",
                                previous_day: "\u524d\u65e5\u306e\u6642\u523b\u3092\u8aad\u307f\u8fbc\u3080 {{date}}",
                                schedule_meeting: "{{text}}\u306e\u4f1a\u5408\u3092\u8a08\u753b",
                                will_receive_call: "{{text}}\u304b\u3089\u7740\u4fe1\u304c\u3042\u308b\u3067\u3057\u3087\u3046"
                            }
                        }
                    },
                    ko: {
                        language: "Korean",
                        translated_language: "\ud55c\uad6d\uc5b4",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\ubc29\ubb38\uc790 \uc624\ub514\uc624 \ubc0f \ube44\ub514\uc624 \ud5c8\uc6a9",
                                allow_visitor_audio_only: "\uc624\ub514\uc624\ub9cc \ud5c8\uc6a9",
                                allow_visitor_video: "\ubc29\ubb38\uac1d \ube44\ub514\uc624 \ud5c8\uc6a9",
                                close_full_screen: "\uc804\uccb4 \ud654\uba74 \ub2eb\uae30",
                                enable_your_microphone: "\uc704\uc5d0\uc11c \ub9c8\uc774\ud06c\uc640 \uce74\uba54\ub77c\ub97c \ud65c\uc131\ud654",
                                expand_to_full_screen: "\uc804\uccb4 \ud654\uba74\uc73c\ub85c \ud655\ub300",
                                face_mute: "\uce74\uba54\ub77c \ub044\uae30",
                                face_unmute: "\uce74\uba54\ub77c \ucf1c\uae30",
                                mute: "\ub9c8\uc774\ud06c \ub044\uae30",
                                select_a_camera: "\uce74\uba54\ub77c \uc120\ud0dd",
                                select_a_microphone: "\ub9c8\uc774\ud06c \uc120\ud0dd",
                                select_a_speaker: "\uc2a4\ud53c\ucee4 \uc120\ud0dd",
                                tooltip_prompt_visitor_call_controls: "\ub9c8\uc774\ud06c\uc640 \ud654\uc0c1\uc744 \ud65c\uc131\ud654\ud574\uc11c {{name}}\ub2d8\uacfc\uc758 \ub300\ud654\uc5d0 \ucc38\uc5ec\ud558\uc138\uc694.",
                                unmute: "\ub9c8\uc774\ud06c \ucf1c\uae30",
                                video_settings: "\ube44\ub514\uc624 \uc124\uc815",
                                view_audio_inputs_sources: "\uc624\ub514\uc624 \uc785\ub825 \ubc0f \uc18c\uc2a4 \ubcf4\uae30",
                                view_video_sources: "\ube44\ub514\uc624 \uc18c\uc2a4 \ubcf4\uae30"
                            },
                            call_invite: {
                                decline: "\uac70\ubd80",
                                inviting: "\ub77c\uc774\ube0c \ubbf8\ud305\uc5d0 \ucd08\ub300 \uc911\uc785\ub2c8\ub2e4",
                                join: "\uc624\ub514\uc624\ub85c\ub9cc \ucc38\uac00",
                                sharing_video_audio: "\uadf8\ub4e4\uc740 \ube44\ub514\uc624\uc640 \uc624\ub514\uc624\ub97c \uacf5\uc720\ud560 \uac83\uc785\ub2c8\ub2e4."
                            },
                            cta: {
                                back: "\ub4a4\ub85c",
                                call_mobile: "\uc2a4\ud53c\ucee4\ud3f0/\ud5e4\ub4dc\uc14b\uc744 \ud1b5\ud574 \ud1b5\ud654",
                                call_web: "\uc6f9\uc744 \ud1b5\ud574 \ud1b5\ud654",
                                cancel: "\ucde8\uc18c",
                                confirm_meeting: "\ubbf8\ud305 \ud655\uc778",
                                decline: "\uac70\uc808",
                                done: "\uc644\ub8cc",
                                input_fields_collection_time: "30\ubd84",
                                join_mobile: "\uc2a4\ud53c\ucee4\ud3f0/\ud5e4\ub4dc\uc14b\uc744 \ud1b5\ud574 \ucc38\uac00",
                                join_web: "\uc6f9\uc744 \ud1b5\ud574 \ucc38\uac00",
                                retry: "\uc804\uc1a1\ud560 \uc218 \uc5c6\uc74c. \ud074\ub9ad\ud574\uc11c \ub2e4\uc2dc \uc2dc\ub3c4\ud558\uc2ed\uc2dc\uc624.",
                                retry_message: "\uc804\uc1a1\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uba54\uc2dc\uc9c0\ub97c \ud0ed \ud574\uc11c \ub2e4\uc2dc \uc2dc\ub3c4\ud558\uc138\uc694...",
                                send: "\uc804\uc1a1",
                                settings: "\uc124\uc815"
                            },
                            dates: {
                                month_format: "MM-dd",
                                month_format_short: "M-d",
                                time_format_detail: "yyyy MMMM d EEEE aaaa h:mm",
                                today: "\uc624\ub298",
                                tomorrow: "\ub0b4\uc77c",
                                year_format: "yyyy-MM-dd",
                                year_month_format: "yyyy MMMM",
                                yesterday: "\uc5b4\uc81c"
                            },
                            error: {
                                business_email: "\uc720\ud6a8\ud55c \uc5c5\ubb34\uc6a9 \uc774\uba54\uc77c \uc8fc\uc18c\ub97c \uc785\ub825\ud558\uc138\uc694",
                                default: "\uc751\ub2f5\uc744 \uc785\ub825\ud558\uc138\uc694",
                                email: "\uc720\ud6a8\ud55c \uc774\uba54\uc77c \uc8fc\uc18c\ub97c \uc785\ub825\ud558\uc138\uc694",
                                invalid_link_returning_text: "\ud68c\uc758 \uc138\ubd80 \uc0ac\ud56d\uc740 \ubcc4\ub3c4\ub85c \uc804\uc1a1\ud574 \ub4dc\ub9bd\ub2c8\ub2e4",
                                name: "\uc131\uacfc \uc774\ub984\uc744 \ubaa8\ub450 \uc785\ub825\ud558\uc138\uc694",
                                number: "\uc720\ud6a8\ud55c \ubc88\ud638\ub97c \uc785\ub825\ud558\uc138\uc694",
                                phone: "\uc720\ud6a8\ud55c \uc804\ud654\ubc88\ud638\ub97c \uc785\ub825\ud558\uc138\uc694",
                                required: "\ud544\uc218 \uc785\ub825\ub780",
                                valid_name: "\uc62c\ubc14\ub978 \uc774\ub984\uc744 \uc785\ub825\ud574 \uc8fc\uc2ed\uc2dc\uc624"
                            },
                            meeting_booker: {
                                calendar_next_month: "\ub2e4\uc74c \ub2ec",
                                calendar_previous_month: "\uc9c0\ub09c\ub2ec",
                                close_confirmation: "\ub2eb\uae30",
                                confirm: "\ud655\uc778",
                                different_time: "\ub2e4\ub978 \uc2dc\uac04\uc744 \uc120\ud0dd\ud558\uc138\uc694",
                                error: "\uc8c4\uc1a1\ud569\ub2c8\ub2e4, \uc774 \ud68c\uc758\ub97c \uc608\uc57d\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.",
                                find_availability: "\uac00\ub2a5\ud55c \uc2dc\uac04 \ucc3e\ub294 \uc911",
                                loading_message_1: "\uae30\ub2e4\ub824\uc8fc\uc138\uc694, \ub85c\ub529 \uc911...",
                                loading_message_2: "\uc7a0\uc2dc\ub9cc\uc694, \uac70\uc758 \ub2e4 \ub410\uc5b4\uc694!",
                                loading_message_3: "\uc7a0\uc2dc\ub9cc \uae30\ub2e4\ub824\uc8fc\uc138\uc694...",
                                loading_message_4: "\uae30\ub2e4\ub824\uc8fc\uc138\uc694, \ucc98\ub9ac \uc911\uc774\uc5d0\uc694!",
                                loading_message_5: "\uc791\uc5c5 \uc911\uc785\ub2c8\ub2e4...",
                                loading_message_6: "\uc694\uccad \ucc98\ub9ac \uc911...",
                                loading_message_7: "\uae30\ub2e4\ub824\uc8fc\uc138\uc694, \uac70\uc758 \ub05d\ub0ac\uc5b4\uc694!",
                                next_week: "\ub2e4\uc74c \uc8fc",
                                no_availability: "\uc8c4\uc1a1\ud569\ub2c8\ub2e4, \uc6b0\ub9ac\ub294 \uc544\ubb34\ub3c4 \ucc3e\uc744 \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac \ud300\uc758 \ub204\uad70\uac00\uac00 \uc5f0\ub77d\uc744 \ub4dc\ub9b4\uac83\uc785\ub2c8\ub2e4.",
                                no_available_slots: "\uc8c4\uc1a1\ud569\ub2c8\ub2e4. \uac00\ub2a5\ud55c \uc2dc\uac04\ub300\uac00 \uc5c6\ub124\uc694.",
                                previous_week: "\uc9c0\ub09c\uc8fc",
                                unavailable_alert: "\uc8c4\uc1a1\ud569\ub2c8\ub2e4. \uc120\ud0dd\ud558\uc2e0 \uc2dc\uac04\uc740 \ub354 \uc774\uc0c1 \uc774\uc6a9\ud558\uc2e4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4",
                                will_in_touch: "\uc800\ud76c \ud300\uc5d0\ub3c4 \ud1b5\ubcf4\ud558\uc600\uc73c\ub2c8, \uace7 \uc5f0\ub77d\uc744 \ub4dc\ub9b4 \uac83\uc785\ub2c8\ub2e4. "
                            },
                            microphone_request: {
                                decline: "\uc544\ub2c8\uc694, \uadf8\ub0e5 \ucc44\ud305\ub9cc \ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4",
                                disabled_text: "\ub9c8\uc774\ud06c\ub97c \ube44\ud65c\uc131\ud654\ud588\uc2b5\ub2c8\ub2e4",
                                enable_instructions: {
                                    chrome: "\uc8fc\uc18c \ud45c\uc2dc\uc904\uc5d0\uc11c \ub9c8\uc774\ud06c\ub97c \ud074\ub9ad\ud558\uace0 '\ud56d\uc0c1 \ud5c8\uc6a9'\uc744 \uc120\ud0dd\ud55c \ub2e4\uc74c \ud398\uc774\uc9c0\ub97c \uc0c8\ub85c \uace0\uce69\ub2c8\ub2e4",
                                    safari: "Safari \xbb \ud658\uacbd \uc124\uc815 \xbb \uc6f9\uc0ac\uc774\ud2b8 \xbb \ub9c8\uc774\ud06c \xbb {{domain}} \uc73c\ub85c \uc774\ub3d9\ud558\uc5ec '\ud5c8\uc6a9'\uc744 \uc120\ud0dd\ud55c \ub2e4\uc74c \ud398\uc774\uc9c0\ub97c \uc0c8\ub85c \uace0\uce69\ub2c8\ub2e4"
                                },
                                enable_it: {
                                    chrome: "\ud65c\uc131\ud654\ud558\ub824\uba74",
                                    default: "\ud65c\uc131\ud654\ud558\uc138\uc694",
                                    safari: "\ud65c\uc131\ud654\ud558\ub824\uba74 \ub85c \uac00\uc11c"
                                },
                                enable_text: "\ub9c8\uc774\ud06c \ud65c\uc131\ud654"
                            },
                            placeholder: {
                                email: "\uc774\uba54\uc77c \uc8fc\uc18c \uc785\ub825...",
                                reply: "\uc751\ub2f5 \uc785\ub825..."
                            },
                            text: {
                                calendar_confirm_body: "\ubbf8\ud305\uc774 \uc804\uc1a1\ub420 \uac83\uc785\ub2c8\ub2e4",
                                calendar_confirm_title: "\ubbf8\ud305\uc744 \ud655\uc778\ud574\uc8fc\uc138\uc694",
                                calendar_invite: "\uce98\ub9b0\ub354 \ucd08\ub300\uc7a5\uc740 \uc5b4\ub514\ub85c \ubcf4\ub0b4\uc57c \ud558\ub098\uc694?",
                                call_phone: "\ub610\ub294 \ub0b4 \uc804\ud654\uae30\ub85c \uc804\ud654",
                                call_started: "\ud1b5\ud654\uac00 \uc2dc\uc791\ub428",
                                call_us: "\uc5f0\ub77d\ucc98",
                                chat_bot: "\ucc44\ud305 \ubd07",
                                close_messenger: "\uba54\uc2e0\uc800 \ub2eb\uae30",
                                composer_label: "\uba54\uc2dc\uc9c0 \uc785\ub825",
                                confirming: "\ud655\uc778 \uc911...",
                                connecting: "\uc5f0\uacb0 \uc911...",
                                connecting_to_rep: "\ub2f4\ub2f9\uc790\uc5d0\uac8c \uc5f0\uacb0 \uc911\uc785\ub2c8\ub2e4",
                                incoming_call: "\uc804\ud654 \uc218\uc2e0 \uc911...",
                                invalid_phone: "\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc804\ud654\ubc88\ud638",
                                joined: "\ub2d8\uc774 \ucc38\uc5ec\ud588\uc2b5\ub2c8\ub2e4",
                                meeting_canceled: "\ud68c\uc758 \uc608\uc57d\uc790\uac00 \ucde8\uc18c\ud588\uc2b5\ub2c8\ub2e4. \ub300\ub9ac\uc778\uc774 \ucc38\uc5ec\ud588\uc2b5\ub2c8\ub2e4.",
                                meeting_scheduled: "\ubbf8\ud305\uc774 \uc608\uc57d\ub418\uc5c8\uc2b5\ub2c8\ub2e4",
                                meeting_settings: "\ubbf8\ud305 \uc124\uc815",
                                microphone: "\ub9c8\uc774\ud06c",
                                not_seen: "\uc77d\uc9c0 \uc54a\uc74c",
                                not_you: "\ub2f9\uc2e0\uc774 \uc544\ub2c8\uc5d0\uc694",
                                offline: "\ud604\uc7ac \ubaa8\ub4e0 \ub2f4\ub2f9\uc790\uac00 \uc624\ud504\ub77c\uc778 \uc0c1\ud0dc\uc785\ub2c8\ub2e4.",
                                privacy_policy: "\uac1c\uc778\uc815\ubcf4\ubcf4\ud638\uc815\ucc45",
                                qualified_branding: "Qualified\uc640 \ub300\ud654",
                                rate_conversation: "\ub300\ud654 \ud004\ub9ac\ud2f0 \ud3c9\uac00\ud558\uae30",
                                rep_is_typing: "\uc0c1\ub2f4\uc6d0\uc774 \uc785\ub825 \uc911\uc785\ub2c8\ub2e4.",
                                rep_joined: "\ub2f4\ub2f9\uc790\uac00 \ucc38\uac00\ud588\uc2b5\ub2c8\ub2e4",
                                seen: "\uc77d\uc74c",
                                sending: "\uc804\uc1a1 \uc911...",
                                speakers: "\uc2a4\ud53c\ucee4",
                                web_call_unavailable: "\ud574\ub2f9 \uc7a5\uce58\uc5d0\uc11c \uc6f9 \ud1b5\ud654\ub97c \uc774\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"
                            },
                            text_sub: {
                                confirmation_sent_to: "{{text}}\uc73c\ub85c \ud655\uc778 \uba54\uc2dc\uc9c0 \uc804\uc1a1 \uc644\ub8cc",
                                expect_call: "{{text}}\uc5d0\uc11c \uc804\ud654\uac00 \uac78\ub824\uc62c \uc608\uc815\uc785\ub2c8\ub2e4",
                                invite_sent: "{{email}}\ub85c \ucd08\ub300\uc7a5\uc774 \uc804\uc1a1\ub420 \uc608\uc815\uc785\ub2c8\ub2e4.",
                                meeting_details_sent: "\ubbf8\ud305 \uc138\ubd80 \uc815\ubcf4\uac00 {{email}}\uc5d0\uac8c \uc804\uc1a1\ub418\uc5c8\uc2b5\ub2c8\ub2e4",
                                meeting_timezone: "\uae30\uc900 \uc2dc\uac04: {{text}}",
                                meeting_with: "{{text}}\ub2d8\uacfc \ubbf8\ud305",
                                message_announcement_from_me: "{{timestamp}} \uc5d0 \ub0b4\uac00 \ub77c\uace0 \ud569\ub2c8\ub2e4",
                                message_announcement_from_them: "{{timestamp}} \uc5d0 {{subject}} \ub2d8\uc774",
                                missed_call: "\ubd80\uc7ac\uc911 \uc804\ud654 \u2013 {{text}} \ub300\uae30",
                                next_day: "\ub2e4\uc74c \ub0a0\uc758 \uc2dc\uac04 \ub85c\ub4dc {{date}}",
                                previous_day: "\uc804\ub0a0 \ub0a0\uc758 \uc2dc\uac04 \ub85c\ub4dc {{date}}",
                                schedule_meeting: "{{text}} \ubbf8\ud305 \uc608\uc57d",
                                will_receive_call: "{{text}}\uc5d0\uc11c \uc804\ud654\uac00 \uac78\ub824\uc62c \uc608\uc815\uc785\ub2c8\ub2e4"
                            }
                        }
                    },
                    nl: {
                        language: "Dutch",
                        translated_language: "Nederlands",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Audio en video van bezoekers toestaan",
                                allow_visitor_audio_only: "Alleen audio toestaan",
                                allow_visitor_video: "Video van bezoeker toestaan",
                                close_full_screen: "Volledig scherm sluiten",
                                enable_your_microphone: "Microfoon en camera hierboven inschakelen",
                                expand_to_full_screen: "Uitvouwen naar volledig scherm",
                                face_mute: "Zet uw camera uit",
                                face_unmute: "Zet uw camera aan",
                                mute: "Zet uw microfoon uit",
                                select_a_camera: "Selecteer een camera",
                                select_a_microphone: "Selecteer een microfoon",
                                select_a_speaker: "Selecteer een luidspreker",
                                tooltip_prompt_visitor_call_controls: "Schakel uw microfoon en video in om mee te doen met {{name}}",
                                unmute: "Zet uw microfoon aan",
                                video_settings: "Instellingen voor video",
                                view_audio_inputs_sources: "Audio-ingangen en -bronnen weergeven",
                                view_video_sources: "Videobronnen weergeven"
                            },
                            call_invite: {
                                decline: "Afwijzen",
                                inviting: "Nodigt je uit voor een live vergadering",
                                join: "Deelnemen met alleen audio",
                                sharing_video_audio: "Ze zullen hun video en audio delen."
                            },
                            cta: {
                                back: "Terug",
                                call_mobile: "Bel via luidspreker/headset",
                                call_web: "Bel via web",
                                cancel: "Annuleren",
                                confirm_meeting: "Vergadering bevestigen",
                                decline: "Negeren",
                                done: "Klaar",
                                input_fields_collection_time: "30 minuten",
                                join_mobile: "Neem deel via luidspreker/headset",
                                join_web: "Neem deel via web",
                                retry: "Niet in staat om te verzenden. Klik om opnieuw te proberen.",
                                retry_message: "Niet in staat om te verzenden. Tik op het bericht om opnieuw te proberen\u2026",
                                send: "Verzenden",
                                settings: "Instellingen"
                            },
                            dates: {
                                month_format: "dd.MM",
                                month_format_short: "d.M",
                                time_format_detail: "k:mm PPPP",
                                today: "Vandaag",
                                tomorrow: "Morgen",
                                year_format: "dd.MM.yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Gisteren"
                            },
                            error: {
                                business_email: "Gelieve een geldig zakelijk e-mailadres in te voeren",
                                default: "Gelieve een antwoord in te voeren",
                                email: "Gelieve een geldig e-mailadres in te voeren",
                                invalid_link_returning_text: "De details omtrent de vergadering worden afzonderlijk toegezonden",
                                name: "Gelieve voor- en achternaam in te voeren",
                                number: "Gelieve een geldig nummer in te voeren",
                                phone: "Gelieve een geldig telefoonnummer in te voeren",
                                required: "Verplicht veld",
                                valid_name: "Voer een geldige naam in"
                            },
                            meeting_booker: {
                                calendar_next_month: "Volgende maand",
                                calendar_previous_month: "Vorige maand",
                                close_confirmation: "Sluiten",
                                confirm: "Bevestig",
                                different_time: "Selecteer een ander tijdstip",
                                error: "Sorry, vergadering kon niet geboekt worden. Probeer opnieuw.",
                                find_availability: "Beschikbaarheid zoeken",
                                loading_message_1: "Even geduld, laden...",
                                loading_message_2: "Even wachten, bijna klaar!",
                                loading_message_3: "Even geduld, alstublieft...",
                                loading_message_4: "Wacht even, we zijn ermee bezig!",
                                loading_message_5: "We zijn ermee bezig...",
                                loading_message_6: "Uw verzoek wordt verwerkt...",
                                loading_message_7: "Nog even wachten, bijna klaar!",
                                next_week: "Volgende Week",
                                no_availability: "Onze excuses, we konden niemand vinden. Iemand van ons team zal contact opnemen.",
                                no_available_slots: "Sorry, er zijn geen tijden beschikbaar.",
                                previous_week: "Vorige Week",
                                unavailable_alert: "Sorry, de door u geselecteerde tijd is niet meer beschikbaar",
                                will_in_touch: "Ons team is op de hoogte gebracht en zal contact met u opnemen."
                            },
                            microphone_request: {
                                decline: "Nee bedankt, ik wil alleen chatten",
                                disabled_text: "U hebt uw microfoon uitgeschakeld",
                                enable_instructions: {
                                    chrome: 'Klik op de microfoon in de adresbalk en selecteer "Altijd toestaan", vernieuw dan de pagina',
                                    safari: 'Safari \xbb Voorkeuren \xbb Websites \xbb Microfoon \xbb {{domain}} en selecteert u "Toestaan", vernieuw dan de pagina'
                                },
                                enable_it: {
                                    chrome: "Om het in te schakelen",
                                    default: "Schakel het in",
                                    safari: "Om hem in te schakelen gaat u naar"
                                },
                                enable_text: "Uw microfoon inschakelen"
                            },
                            placeholder: {
                                email: "Voer het e-mailadres in\u2026",
                                reply: "Voer een antwoord in\u2026"
                            },
                            text: {
                                calendar_confirm_body: "De vergadering wordt verstuurd naar",
                                calendar_confirm_title: "Bevestig uw vergadering alstublieft",
                                calendar_invite: "Waar moeten we de agenda-uitnodiging naartoe sturen?",
                                call_phone: "of bel mijn telefoon",
                                call_started: "Oproep begonnen",
                                call_us: "Bel ons",
                                chat_bot: "Chat Bot",
                                close_messenger: "Messenger sluiten",
                                composer_label: "Een bericht invoeren",
                                confirming: "Bevestigen\u2026",
                                connecting: "Aan het verbinden\u2026",
                                connecting_to_rep: "We verbinden u door met een medewerker",
                                incoming_call: "Inkomende oproep\u2026",
                                invalid_phone: "Ongeldig telefoonnummer",
                                joined: "is toegetreden",
                                meeting_canceled: "Planner van de vergadering heeft geannuleerd. Een vertegenwoordiger is toegetreden.",
                                meeting_scheduled: "Uw vergadering is ingepland",
                                meeting_settings: "Instellingen voor vergadering",
                                microphone: "Microfoon",
                                not_seen: "Niet gezien",
                                not_you: "Niet jij",
                                offline: "Al onze vertegenwoordigers zijn momenteel offline.",
                                privacy_policy: "Privacybeleid",
                                qualified_branding: "Qualified Conversaties",
                                rate_conversation: "Beoordeel dit gesprek",
                                rep_is_typing: "De vertegenwoordiger is aan het typen",
                                rep_joined: "Vertegenwoordiger is toegetreden",
                                seen: "Gezien",
                                sending: "Verzenden\u2026",
                                speakers: "Luidsprekers",
                                web_call_unavailable: "Weboproepen zijn niet beschikbaar op uw apparaat"
                            },
                            text_sub: {
                                confirmation_sent_to: "Bevestiging verzonden naar {{text}}",
                                expect_call: "Verwacht een oproep van {{text}}",
                                invite_sent: "De uitnodiging wordt verstuurd naar {{email}}.",
                                meeting_details_sent: "Vergaderdetails zijn verzonden naar {{email}}",
                                meeting_timezone: "Alle tijden zijn in {{text}}",
                                meeting_with: "Vergadering met {{text}}",
                                message_announcement_from_me: "Op {{timestamp}} zeg ik",
                                message_announcement_from_them: "Op {{timestamp}} zegt {{subject}} ",
                                missed_call: "Gemiste oproep \u2013 {{text}} gewacht",
                                next_day: "Laad de tijden voor volgende dag {{date}}",
                                previous_day: "Laad de tijden voor vorige dag {{date}}",
                                schedule_meeting: "Plan een vergadering van {{text}}",
                                will_receive_call: "U zult een oproep van {{text}} ontvangen"
                            }
                        }
                    },
                    pl: {
                        language: "Polish",
                        translated_language: "Polski",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Zezw\xf3l na audio i wideo odwiedzaj\u0105cego",
                                allow_visitor_audio_only: "Zezw\xf3l tylko na audio",
                                allow_visitor_video: "Zezw\xf3l na wideo odwiedzaj\u0105cego",
                                close_full_screen: "Zamknij pe\u0142ny ekran",
                                enable_your_microphone: "W\u0142\u0105cz sw\xf3j mikrofon i kamer\u0119 powy\u017cej",
                                expand_to_full_screen: "Rozwi\u0144 na pe\u0142ny ekran",
                                face_mute: "Wy\u0142\u0105cz swoj\u0105 kamer\u0119",
                                face_unmute: "W\u0142\u0105cz swoj\u0105 kamer\u0119",
                                mute: "Wy\u0142\u0105cz sw\xf3j mikrofon",
                                select_a_camera: "Wybierz kamer\u0119",
                                select_a_microphone: "Wybierz mikrofon",
                                select_a_speaker: "Wybierz g\u0142o\u015bnik",
                                tooltip_prompt_visitor_call_controls: "W\u0142\u0105cz sw\xf3j mikrofon i wideo, aby do\u0142\u0105czy\u0107 do {{name}}",
                                unmute: "W\u0142\u0105cz sw\xf3j mikrofon",
                                video_settings: "Ustawienia wideo",
                                view_audio_inputs_sources: "Wy\u015bwietl \u017ar\xf3d\u0142a i wej\u015bcia audio",
                                view_video_sources: "Wy\u015bwietl \u017ar\xf3d\u0142a wideo"
                            },
                            call_invite: {
                                decline: "Odrzu\u0107",
                                inviting: "zaprasza Ci\u0119 na spotkanie na \u017cywo",
                                join: "Do\u0142\u0105cz tylko z d\u017awi\u0119kiem",
                                sharing_video_audio: "B\u0119d\u0105 udost\u0119pnia\u0107 swoje wideo i audio."
                            },
                            cta: {
                                back: "Wstecz",
                                call_mobile: "Zadzwo\u0144 przez g\u0142o\u015bnik/s\u0142uchawki",
                                call_web: "Zadzwo\u0144 przez stron\u0119 internetow\u0105",
                                cancel: "Anuluj",
                                confirm_meeting: "Potwierd\u017a spotkanie",
                                decline: "Odrzu\u0107",
                                done: "Gotowe",
                                input_fields_collection_time: "30 minut",
                                join_mobile: "Do\u0142\u0105cz przez g\u0142o\u015bnik/s\u0142uchawki",
                                join_web: "Do\u0142\u0105cz przez stron\u0119 internetow\u0105",
                                retry: "Nie uda\u0142o si\u0119 wys\u0142a\u0107. Kliknij, aby spr\xf3bowa\u0107 ponownie.",
                                retry_message: "Nie uda\u0142o si\u0119 wys\u0142a\u0107. Dotknij wiadomo\u015b\u0107, aby spr\xf3bowa\u0107 ponownie\u2026",
                                send: "Wy\u015blij",
                                settings: "Ustawienia"
                            },
                            dates: {
                                month_format: "dd.MM",
                                month_format_short: "d.M",
                                time_format_detail: "HH:mm, d MMMM yyyy",
                                today: "Dzisiaj",
                                tomorrow: "Jutro",
                                year_format: "dd.MM.yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Wczoraj"
                            },
                            error: {
                                business_email: "Prosz\u0119 wprowadzi\u0107 prawid\u0142owy adres e-mail firmy",
                                default: "Prosz\u0119 wprowadzi\u0107 odpowied\u017a",
                                email: "Prosz\u0119 wprowadzi\u0107 prawid\u0142owy adres e-mail",
                                invalid_link_returning_text: "Szczeg\xf3\u0142y spotkania zostan\u0105 wys\u0142ane oddzielnie",
                                name: "Prosz\u0119 wprowadzi\u0107 imi\u0119 i nazwisko",
                                number: "Prosz\u0119 wprowadzi\u0107 prawid\u0142owy numer",
                                phone: "Prosz\u0119 wprowadzi\u0107 prawid\u0142owy numer telefonu",
                                required: "Pole wymagane",
                                valid_name: "Prosz\u0119 wprowadzi\u0107 prawid\u0142owe imi\u0119"
                            },
                            meeting_booker: {
                                calendar_next_month: "Nast\u0119pny miesi\u0105c",
                                calendar_previous_month: "Poprzedni miesi\u0105c",
                                close_confirmation: "Zamknij",
                                confirm: "Potwierd\u017a",
                                different_time: "Wybierz inny czas",
                                error: "Przepraszamy, rezerwacja niemo\u017cliwa. Prosz\u0119 spr\xf3bowa\u0107 ponownie.",
                                find_availability: "Szukanie dost\u0119pno\u015bci",
                                loading_message_1: "Zaczekaj chwil\u0119, trwa \u0142adowanie...",
                                loading_message_2: "Chwila, prawie tam!",
                                loading_message_3: "Chwileczk\u0119, prosz\u0119...",
                                loading_message_4: "Zaczekaj, ju\u017c nad tym pracujemy!",
                                loading_message_5: "Pracujemy nad tym...",
                                loading_message_6: "Przetwarzamy Twoje \u017c\u0105danie...",
                                loading_message_7: "Trzymaj si\u0119, prawie sko\u0144czone!",
                                next_week: "Nast\u0119pny tydzie\u0144",
                                no_availability: "Przykro nam, nie uda\u0142o nam si\u0119 znale\u017a\u0107 nikogo. Kto\u015b z naszego zespo\u0142u skontaktuje si\u0119 z Tob\u0105.",
                                no_available_slots: "Przykro mi, nie ma dost\u0119pnych termin\xf3w.",
                                previous_week: "Poprzedni tydzie\u0144",
                                unavailable_alert: "Przykro mi, wybrany czas jest ju\u017c niedost\u0119pny",
                                will_in_touch: "Nasz zesp\xf3\u0142 zosta\u0142 powiadomiony i skontaktuje si\u0119 z Tob\u0105."
                            },
                            microphone_request: {
                                decline: "Nie, dzi\u0119kuj\u0119, chc\u0119 tylko czatowa\u0107",
                                disabled_text: "Wy\u0142\u0105czy\u0142e\u015b sw\xf3j mikrofon",
                                enable_instructions: {
                                    chrome: "Kliknij mikrofon na pasku adresu i wybierz 'Zawsze zezwalaj', a nast\u0119pnie od\u015bwie\u017c stron\u0119",
                                    safari: "Safari \xbb Preferencje \xbb Strony internetowe \xbb Mikrofon \xbb {{domain}} i wybierz 'Zezw\xf3l', a nast\u0119pnie od\u015bwie\u017c stron\u0119"
                                },
                                enable_it: {
                                    chrome: "Aby go w\u0142\u0105czy\u0107",
                                    default: "Prosz\u0119 go w\u0142\u0105czy\u0107",
                                    safari: "Aby go w\u0142\u0105czy\u0107, przejd\u017a do"
                                },
                                enable_text: "W\u0142\u0105cz sw\xf3j mikrofon"
                            },
                            placeholder: {
                                email: "Wpisz adres email\u2026",
                                reply: "Wpisz odpowied\u017a\u2026"
                            },
                            text: {
                                calendar_confirm_body: "Spotkanie zostanie wys\u0142ane na",
                                calendar_confirm_title: "Prosz\u0119 potwierd\u017a swoje spotkanie",
                                calendar_invite: "Gdzie powinni\u015bmy wys\u0142a\u0107 zaproszenie?",
                                call_phone: "Lub zadzwo\u0144 na m\xf3j telefon",
                                call_started: "Rozmowa rozpocz\u0119ta",
                                call_us: "Zadzwo\u0144 do nas",
                                chat_bot: "Chat Bot",
                                close_messenger: "Zamknij komunikator",
                                composer_label: "Wpisz wiadomo\u015b\u0107",
                                confirming: "Potwierdzanie...",
                                connecting: "\u0141\u0105czenie\u2026",
                                connecting_to_rep: "\u0141\u0105czenie Ci\u0119 z przedstawicielem",
                                incoming_call: "Przychodz\u0105ce po\u0142\u0105czenie\u2026",
                                invalid_phone: "Nieprawid\u0142owy numer telefonu",
                                joined: "do\u0142\u0105czy\u0142",
                                meeting_canceled: "Planer spotka\u0144 zosta\u0142 anulowany. Do\u0142\u0105czy\u0142 przedstawiciel.",
                                meeting_scheduled: "Twoje spotkanie zosta\u0142o zaplanowane",
                                meeting_settings: "Ustawienia spotkania",
                                microphone: "Mikrofon",
                                not_seen: "Nie widziane",
                                not_you: "Nie ty",
                                offline: "Wszyscy nasi przedstawiciele s\u0105 obecnie niedost\u0119pni.",
                                privacy_policy: "Polityka prywatno\u015bci",
                                qualified_branding: "Qualified Conversations",
                                rate_conversation: "Oce\u0144 t\u0119 rozmow\u0119",
                                rep_is_typing: "Przedstawiciel pisze",
                                rep_joined: "Do\u0142\u0105czy\u0142 przedstawiciel",
                                seen: "Widziane",
                                sending: "Wysy\u0142anie\u2026",
                                speakers: "G\u0142o\u015bniki",
                                web_call_unavailable: "Po\u0142\u0105czenia internetowe nie s\u0105 dost\u0119pne na Twoim urz\u0105dzeniu"
                            },
                            text_sub: {
                                confirmation_sent_to: "Potwierdzenie wys\u0142ane do {{text}}",
                                expect_call: "Spodziewaj si\u0119 po\u0142\u0105czenia od {{text}}",
                                invite_sent: "Zaproszenie zostanie wys\u0142ane na {{email}}.",
                                meeting_details_sent: "Szczeg\xf3\u0142y spotkania zosta\u0142y wys\u0142ane do {{email}}",
                                meeting_timezone: "Wszystkie godziny s\u0105 {{text}}",
                                meeting_with: "Spotkanie z {{text}}",
                                message_announcement_from_me: "O {{timestamp}} m\xf3wi\u0119",
                                message_announcement_from_them: "O {{timestamp}} {{subject}} m\xf3wi",
                                missed_call: "Nieodebrane po\u0142\u0105czenie \u2013 czeka\u0142em {{text}}",
                                next_day: "Czasy \u0142adowania na nast\u0119pny dzie\u0144 {{date}}",
                                previous_day: "Czasy \u0142adowania na poprzedni dzie\u0144 {{date}}",
                                schedule_meeting: "Zaplanuj spotkanie na {{text}}",
                                will_receive_call: "Otrzymasz po\u0142\u0105czenie od {{text}}"
                            }
                        }
                    },
                    pt_BR: {
                        language: "Portuguese (Brazil)",
                        translated_language: "portugu\xeas",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "Permitir \xe1udio e v\xeddeo do visitante",
                                allow_visitor_audio_only: "Permitir apenas \xe1udio",
                                allow_visitor_video: "Permitir v\xeddeo do visitante",
                                close_full_screen: "Fechar tela cheia",
                                enable_your_microphone: "Habilite o microfone e a c\xe2mera acima",
                                expand_to_full_screen: "Expandir para tela cheia",
                                face_mute: "Desligar sua c\xe2mera",
                                face_unmute: "Ligar sua c\xe2mera",
                                mute: "Desligar seu microfone",
                                select_a_camera: "Selecionar uma c\xe2mera",
                                select_a_microphone: "Selecionar um microfone",
                                select_a_speaker: "Selecionar um alto-falante",
                                tooltip_prompt_visitor_call_controls: "Ative o seu microfone e v\xeddeo para se reunir com {{name}}",
                                unmute: "Ligar seu microfone",
                                video_settings: "Configura\xe7\xf5es de v\xeddeo",
                                view_audio_inputs_sources: "Ver entradas e fontes de \xe1udio",
                                view_video_sources: "Ver fontes de v\xeddeo"
                            },
                            call_invite: {
                                decline: "Recusar",
                                inviting: "Est\xe1 convidando voc\xea para uma reuni\xe3o ao vivo",
                                join: "Participar apenas com \xe1udio",
                                sharing_video_audio: "Eles v\xe3o compartilhar seu v\xeddeo e \xe1udio."
                            },
                            cta: {
                                back: "volte",
                                call_mobile: "Ligar via viva-voz/fone de ouvido",
                                call_web: "Ligar via web",
                                cancel: "Cancelar",
                                confirm_meeting: "Confirmar reuni\xe3o",
                                decline: "Rejeitar",
                                done: "Conclu\xeddo",
                                input_fields_collection_time: "30 minutos",
                                join_mobile: "Participar via viva-voz/fone de ouvido",
                                join_web: "Participar via web",
                                retry: "Imposs\xedvel enviar. Clique para tentar novamente.",
                                retry_message: "Imposs\xedvel enviar. Toque na mensagem para tentar novamente\u2026",
                                send: "Enviar",
                                settings: "Configura\xe7\xf5es"
                            },
                            dates: {
                                month_format: "dd/MM",
                                month_format_short: "d/M",
                                time_format_detail: "k:mm EEEE d MMMM yyyy",
                                today: "Hoje",
                                tomorrow: "Amanh\xe3",
                                year_format: "dd/MM/yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "Ontem"
                            },
                            error: {
                                business_email: "Por favor, insira um endere\xe7o de e-mail comercial v\xe1lido",
                                default: "Por favor, insira uma resposta",
                                email: "Por favor, insira um endere\xe7o de e-mail v\xe1lido",
                                invalid_link_returning_text: "Os detalhes da reuni\xe3o ser\xe3o enviados separadamente",
                                name: "Por favor, insira o nome e o sobrenome",
                                number: "Por favor, insira um n\xfamero v\xe1lido",
                                phone: "Por favor, insira um n\xfamero de telefone v\xe1lido",
                                required: "Campo obrigat\xf3rio",
                                valid_name: "Insira um nome v\xe1lido"
                            },
                            meeting_booker: {
                                calendar_next_month: "Pr\xf3ximo m\xeas",
                                calendar_previous_month: "M\xeas anterior",
                                close_confirmation: "Fechar",
                                confirm: "Confirmar",
                                different_time: "Selecione outro hor\xe1rio",
                                error: "Desculpe, n\xe3o foi poss\xedvel agendar a reuni\xe3o. Tente novamente.",
                                find_availability: "Procurando disponibilidade",
                                loading_message_1: "Aguarde, carregando...",
                                loading_message_2: "Um segundo, quase l\xe1!",
                                loading_message_3: "Apenas um momento, por favor...",
                                loading_message_4: "Aguarde, estamos trabalhando nisso!",
                                loading_message_5: "Estamos trabalhando nisso...",
                                loading_message_6: "Processando sua solicita\xe7\xe3o...",
                                loading_message_7: "Aguarde, quase terminando!",
                                next_week: "Pr\xf3xima Semana",
                                no_availability: "Desculpe, n\xe3o conseguimos encontrar ningu\xe9m. Algu\xe9m da nossa equipe entrar\xe1 em contato.",
                                no_available_slots: "Desculpe, n\xe3o h\xe1 hor\xe1rios dispon\xedveis.",
                                previous_week: "Semana anterior",
                                unavailable_alert: "Desculpe, o hor\xe1rio selecionado n\xe3o est\xe1 mais dispon\xedvel",
                                will_in_touch: "Nossa equipe foi notificada e entrar\xe1 em contato com voc\xea."
                            },
                            microphone_request: {
                                decline: "N\xe3o, obrigado, s\xf3 quero conversar",
                                disabled_text: "Voc\xea desabilitou seu microfone",
                                enable_instructions: {
                                    chrome: 'Clique no microfone na barra de endere\xe7os e selecione "Sempre permitir"; depois, atualize a p\xe1gina',
                                    safari: 'Safari \xbb Prefer\xeancias \xbb Sites \xbb Microfone \xbb {{domain}} e selecione "Permitir"; depois, atualize a p\xe1gina'
                                },
                                enable_it: {
                                    chrome: "Para habilit\xe1-lo",
                                    default: "Por favor, habilite-o",
                                    safari: "Para habilit\xe1-lo, v\xe1 at\xe9"
                                },
                                enable_text: "Habilite seu microfone"
                            },
                            placeholder: {
                                email: "Insira o endere\xe7o de e-mail\u2026",
                                reply: "Insira uma resposta\u2026"
                            },
                            text: {
                                calendar_confirm_body: "A reuni\xe3o ser\xe1 enviada para",
                                calendar_confirm_title: "Por favor, confirme sua reuni\xe3o",
                                calendar_invite: "Para onde devemos enviar o convite do calend\xe1rio?",
                                call_phone: "Ou ligue para o meu telefone",
                                call_started: "Chamada iniciada",
                                call_us: "Ligue para n\xf3s",
                                chat_bot: "Chat Bot",
                                close_messenger: "Fechar mensageiro",
                                composer_label: "Digite uma mensagem",
                                confirming: "Confirmando\u2026",
                                connecting: "Conectando\u2026",
                                connecting_to_rep: "Conectando voc\xea a um representante",
                                incoming_call: "Chamada recebida\u2026",
                                invalid_phone: "N\xfamero de telefone inv\xe1lido",
                                joined: "se juntou",
                                meeting_canceled: "O agendador da reuni\xe3o foi cancelado. Um representante se juntou.",
                                meeting_scheduled: "Sua reuni\xe3o foi agendada",
                                meeting_settings: "Configura\xe7\xf5es de reuni\xe3o",
                                microphone: "Microfone",
                                not_seen: "N\xe3o visto",
                                not_you: "N\xe3o \xe9 voc\xea",
                                offline: "Todos os nossos representantes est\xe3o off-line no momento.",
                                privacy_policy: "Pol\xedtica de privacidade",
                                qualified_branding: "Conversas com a Qualified",
                                rate_conversation: "Avalie esta conversa",
                                rep_is_typing: "O representante est\xe1 digitando",
                                rep_joined: "O representante se juntou",
                                seen: "Visto",
                                sending: "Enviando\u2026",
                                speakers: "Alto-falantes",
                                web_call_unavailable: "As chamadas pela web n\xe3o est\xe3o dispon\xedveis em seu dispositivo"
                            },
                            text_sub: {
                                confirmation_sent_to: "Confirma\xe7\xe3o enviada para {{text}}",
                                expect_call: "Espere uma chamada de {{text}}",
                                invite_sent: "O convite ser\xe1 enviado para {{email}}.",
                                meeting_details_sent: "Os detalhes da reuni\xe3o foram enviados para {{email}}",
                                meeting_timezone: "Todos os hor\xe1rios s\xe3o {{text}}",
                                meeting_with: "Reuni\xe3o com {{text}}",
                                message_announcement_from_me: "\xc0s {{timestamp}} eu digo",
                                message_announcement_from_them: "\xc0s {{timestamp}} {{subject}} diz",
                                missed_call: "Chamada perdida \u2014 esperada por {{text}}",
                                next_day: "Carregar hor\xe1rios do dia seguinte {{date}}",
                                previous_day: "Carregar hor\xe1rios do dia anterio {{date}}r",
                                schedule_meeting: "Agende uma reuni\xe3o de {{text}}",
                                will_receive_call: "Voc\xea receber\xe1 uma liga\xe7\xe3o de {{text}}"
                            }
                        }
                    },
                    ru: {
                        language: "Russian",
                        translated_language: "\u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0432\u0443\u043a \u0438 \u0432\u0438\u0434\u0435\u043e \u043e\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f",
                                allow_visitor_audio_only: "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0432\u0443\u043a",
                                allow_visitor_video: "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f",
                                close_full_screen: "\u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u043f\u043e\u043b\u043d\u043e\u044d\u043a\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430",
                                enable_your_microphone: "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d \u0438 \u043a\u0430\u043c\u0435\u0440\u0443 \u0432\u044b\u0448\u0435",
                                expand_to_full_screen: "\u0420\u0430\u0441\u0442\u044f\u043d\u0443\u0442\u044c \u043d\u0430 \u043f\u043e\u043b\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d",
                                face_mute: "\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u0430\u043c\u0435\u0440\u0443",
                                face_unmute: "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u0430\u043c\u0435\u0440\u0443",
                                mute: "\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d",
                                select_a_camera: "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u0430\u043c\u0435\u0440\u0443a",
                                select_a_microphone: "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d",
                                select_a_speaker: "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u043a",
                                tooltip_prompt_visitor_call_controls: "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d \u0438 \u0432\u0438\u0434\u0435\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a {{name}}",
                                unmute: "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d",
                                video_settings: "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u0438\u0434\u0435\u043e",
                                view_audio_inputs_sources: "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0445\u043e\u0434\u044b \u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0437\u0432\u0443\u043a\u0430",
                                view_video_sources: "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0432\u0438\u0434\u0435\u043e"
                            },
                            call_invite: {
                                decline: "\u041e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c",
                                inviting: "\u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0435\u0442 \u0432\u0430\u0441 \u043d\u0430 \u0436\u0438\u0432\u043e\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u0438\u0435",
                                join: "\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0430\u0443\u0434\u0438\u043e",
                                sharing_video_audio: "\u041e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u043e\u0438\u043c \u0432\u0438\u0434\u0435\u043e \u0438 \u0430\u0443\u0434\u0438\u043e."
                            },
                            cta: {
                                back: "\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f",
                                call_mobile: "\u041f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u043a/\u0433\u0430\u0440\u043d\u0438\u0442\u0443\u0440\u0443",
                                call_web: "\u041f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c \u043f\u043e \u0441\u0435\u0442\u0438",
                                cancel: "\u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c",
                                confirm_meeting: "\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0443",
                                decline: "\u041e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c",
                                done: "\u0413\u043e\u0442\u043e\u0432\u043e",
                                input_fields_collection_time: "30 \u043c\u0438\u043d\u0443\u0442",
                                join_mobile: "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u043a/\u0433\u0430\u0440\u043d\u0438\u0442\u0443\u0440\u0443",
                                join_web: "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u0435\u0442\u0438",
                                retry: "\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438. \u041d\u0430\u0436\u043c\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c.",
                                retry_message: "\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438. \u041a\u043e\u0441\u043d\u0438\u0442\u0435\u0441\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0435\u0449\u0435 \u0440\u0430\u0437\u2026",
                                send: "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c",
                                settings: "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
                            },
                            dates: {
                                month_format: "dd.MM",
                                month_format_short: "d.M",
                                time_format_detail: "k:mm EEEE d MMMM yyyy '\u0433\u043e\u0434\u0430'",
                                today: "\u0421\u0435\u0433\u043e\u0434\u043d\u044f",
                                tomorrow: "\u0437\u0430\u0432\u0442\u0440\u0430",
                                year_format: "dd.MM.yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "\u0412\u0447\u0435\u0440\u0430"
                            },
                            error: {
                                business_email: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 email-\u0430\u0434\u0440\u0435\u0441",
                                default: "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442",
                                email: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 email-\u0430\u0434\u0440\u0435\u0441",
                                invalid_link_returning_text: "\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0441\u043b\u0430\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e",
                                name: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e",
                                number: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440",
                                phone: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430",
                                required: "\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435",
                                valid_name: "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0435 \u0438\u043c\u044f"
                            },
                            meeting_booker: {
                                calendar_next_month: "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446",
                                calendar_previous_month: "\u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446",
                                close_confirmation: "\u0417\u0430\u043a\u0440\u044b\u0442\u044c",
                                confirm: "\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c",
                                different_time: "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u0432\u0440\u0435\u043c\u044f",
                                error: "\u0418\u0437\u0432\u0438\u043d\u0438\u0442\u0435, \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u0440\u0430\u043d\u0438\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430.",
                                find_availability: "\u041f\u043e\u0438\u0441\u043a \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u0441\u043b\u043e\u0442\u043e\u0432",
                                loading_message_1: "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430...",
                                loading_message_2: "\u0421\u0435\u043a\u0443\u043d\u0434\u0443, \u043f\u043e\u0447\u0442\u0438 \u0433\u043e\u0442\u043e\u0432\u043e!",
                                loading_message_3: "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430...",
                                loading_message_4: "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u043c\u044b \u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c!",
                                loading_message_5: "\u041c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430\u0434 \u044d\u0442\u0438\u043c...",
                                loading_message_6: "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0430\u0448 \u0437\u0430\u043f\u0440\u043e\u0441...",
                                loading_message_7: "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u043f\u043e\u0447\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438!",
                                next_week: "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043d\u0435\u0434\u0435\u043b\u044f",
                                no_availability: "\u0418\u0437\u0432\u0438\u043d\u0438\u0442\u0435, \u043d\u0430\u043c \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u043d\u0438\u043a\u043e\u0433\u043e. \u041a\u0442\u043e-\u0442\u043e \u0438\u0437 \u043d\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441\u0432\u044f\u0436\u0435\u0442\u0441\u044f \u0441 \u0432\u0430\u043c\u0438.",
                                no_available_slots: "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.",
                                previous_week: "\u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0430\u044f \u043d\u0435\u0434\u0435\u043b\u044f",
                                unavailable_alert: "\u0418\u0437\u0432\u0438\u043d\u0438\u0442\u0435, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e",
                                will_in_touch: "\u041d\u0430\u0448\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0431\u044b\u043b\u0430 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0430 \u043e\u0431 \u044d\u0442\u043e\u043c \u0438 \u0441\u0432\u044f\u0436\u0435\u0442\u0441\u044f \u0441 \u0432\u0430\u043c\u0438."
                            },
                            microphone_request: {
                                decline: "\u041d\u0435\u0442, \u0441\u043f\u0430\u0441\u0438\u0431\u043e. \u0425\u043e\u0447\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f",
                                disabled_text: "\u0412\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0441\u0432\u043e\u0439 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d",
                                enable_instructions: {
                                    chrome: "\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d \u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \xab\u0412\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044c\xbb, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443",
                                    safari: "Safari > \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 > \u0412\u0435\u0431-\u0441\u0430\u0439\u0442\u044b > \u041c\u0438\u043a\u0440\u043e\u0444\u043e\u043d > {{domain}} \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \xab\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c\xbb, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443"
                                },
                                enable_it: {
                                    chrome: "\u0427\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0435\u0433\u043e",
                                    default: "\u041f\u0440\u043e\u0441\u0438\u043c \u0435\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c",
                                    safari: "\u0427\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0435\u0433\u043e, \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u0432"
                                },
                                enable_text: "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d"
                            },
                            placeholder: {
                                email: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 email-\u0430\u0434\u0440\u0435\u0441\u2026",
                                reply: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442\u2026"
                            },
                            text: {
                                calendar_confirm_body: "\u0412\u0441\u0442\u0440\u0435\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430",
                                calendar_confirm_title: "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u0432\u0441\u0442\u0440\u0435\u0447\u0443",
                                calendar_invite: "\u041a\u0443\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044f?",
                                call_phone: "\u0438\u043b\u0438 \u043f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c \u043f\u043e \u043c\u043e\u0435\u043c\u0443 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443",
                                call_started: "\u0417\u0432\u043e\u043d\u043e\u043a \u043d\u0430\u0447\u0430\u0442",
                                call_us: "\u041f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u0435 \u043d\u0430\u043c",
                                chat_bot: "\u0427\u0430\u0442-\u0431\u043e\u0442",
                                close_messenger: "\u0417\u0430\u043a\u0440\u044b\u0442\u044c \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440",
                                composer_label: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
                                confirming: "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\u2026",
                                connecting: "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u2026",
                                connecting_to_rep: "\u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0430\u0441 \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c",
                                incoming_call: "\u0412\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0432\u043e\u043d\u043e\u043a\u2026",
                                invalid_phone: "\u041d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430",
                                joined: "\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f(-\u043b\u0430\u0441\u044c)",
                                meeting_canceled: "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0432\u0441\u0442\u0440\u0435\u0447\u0438 \u043e\u0442\u043c\u0435\u043d\u0435\u043d. \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c.",
                                meeting_scheduled: "\u0412\u0430\u0448\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430 \u0437\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430",
                                meeting_settings: "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0438",
                                microphone: "\u041c\u0438\u043a\u0440\u043e\u0444\u043e\u043d",
                                not_seen: "\u041d\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e",
                                not_you: "\u041d\u0435 \u0432\u044b",
                                offline: "\u0412\u0441\u0435 \u043d\u0430\u0448\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b.",
                                privacy_policy: "\u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438",
                                qualified_branding: "\u0420\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u044b Qualified",
                                rate_conversation: "\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440",
                                rep_is_typing: "\u0422\u043e\u0440\u0433\u043e\u0432\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442",
                                rep_joined: "\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f",
                                seen: "\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e",
                                sending: "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430\u2026",
                                speakers: "\u0414\u0438\u043d\u0430\u043c\u0438\u043a\u0438",
                                web_call_unavailable: "\u0417\u0432\u043e\u043d\u043a\u0438 \u043f\u043e \u0441\u0435\u0442\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435"
                            },
                            text_sub: {
                                confirmation_sent_to: "B\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 {{text}}",
                                expect_call: "\u041e\u0436\u0438\u0434\u0430\u0439\u0442\u0435 \u0437\u0432\u043e\u043d\u043a\u0430 \u043e\u0442 {{text}}",
                                invite_sent: "\u041f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 {{email}}.",
                                meeting_details_sent: "\u0414\u0435\u0442\u0430\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 {{email}}",
                                meeting_timezone: "\u0412\u0441\u0451 \u0432\u0440\u0435\u043c\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0434\u043b\u044f {{text}}",
                                meeting_with: "\u0412\u0441\u0442\u0440\u0435\u0447\u0430 \u0441 {{text}}",
                                message_announcement_from_me: "\u0412 {{timestamp}} \u044f \u0433\u043e\u0432\u043e\u0440\u044e",
                                message_announcement_from_them: "\u0412 {{timestamp}} {{subject}} \u0433\u043e\u0432\u043e\u0440\u0438\u0442",
                                missed_call: "\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0439 \u0437\u0432\u043e\u043d\u043e\u043a \u2013 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 {{text}}",
                                next_day: "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0434\u043d\u044f {{date}}",
                                previous_day: "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0434\u043d\u044f {{date}}",
                                schedule_meeting: "\u0417\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u043d\u0430 {{text}}",
                                will_receive_call: "\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0437\u0432\u043e\u043d\u043e\u043a \u0441 \u043d\u043e\u043c\u0435\u0440\u0430 {{text}}"
                            }
                        }
                    },
                    th: {
                        language: "Thai",
                        translated_language: "\u0e44\u0e17\u0e22",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e43\u0e2b\u0e49\u0e1c\u0e39\u0e49\u0e40\u0e22\u0e35\u0e48\u0e22\u0e21\u0e0a\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e35\u0e22\u0e07\u0e41\u0e25\u0e30\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d",
                                allow_visitor_audio_only: "\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e35\u0e22\u0e07\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19",
                                allow_visitor_video: "\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e43\u0e2b\u0e49\u0e1c\u0e39\u0e49\u0e40\u0e22\u0e35\u0e48\u0e22\u0e21\u0e0a\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d",
                                close_full_screen: "\u0e1b\u0e34\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e08\u0e2d\u0e40\u0e15\u0e47\u0e21",
                                enable_your_microphone: "\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e41\u0e25\u0e30\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19",
                                expand_to_full_screen: "\u0e02\u0e22\u0e32\u0e22\u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e08\u0e2d\u0e40\u0e15\u0e47\u0e21",
                                face_mute: "\u0e1b\u0e34\u0e14\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                face_unmute: "\u0e40\u0e1b\u0e34\u0e14\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                mute: "\u0e1b\u0e34\u0e14\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                select_a_camera: "\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e01\u0e25\u0e49\u0e2d\u0e07",
                                select_a_microphone: "\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19",
                                select_a_speaker: "\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e25\u0e33\u0e42\u0e1e\u0e07",
                                tooltip_prompt_visitor_call_controls: "\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e04\u0e4c\u0e41\u0e25\u0e30\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21 {{name}}",
                                unmute: "\u0e40\u0e1b\u0e34\u0e14\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                video_settings: "\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d",
                                view_audio_inputs_sources: "\u0e14\u0e39\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e25\u0e30\u0e2d\u0e34\u0e19\u0e1e\u0e38\u0e15\u0e40\u0e2a\u0e35\u0e22\u0e07",
                                view_video_sources: "\u0e14\u0e39\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d"
                            },
                            call_invite: {
                                decline: "\u0e1b\u0e0f\u0e34\u0e40\u0e2a\u0e18",
                                inviting: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e40\u0e0a\u0e34\u0e0d\u0e04\u0e38\u0e13\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e2a\u0e14",
                                join: "\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e14\u0e49\u0e27\u0e22\u0e40\u0e2a\u0e35\u0e22\u0e07\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19",
                                sharing_video_audio: "\u0e1e\u0e27\u0e01\u0e40\u0e02\u0e32\u0e08\u0e30\u0e41\u0e0a\u0e23\u0e4c\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d\u0e41\u0e25\u0e30\u0e40\u0e2a\u0e35\u0e22\u0e07\u0e02\u0e2d\u0e07\u0e1e\u0e27\u0e01\u0e40\u0e02\u0e32"
                            },
                            cta: {
                                back: "\u0e01\u0e25\u0e31\u0e1a",
                                call_mobile: "\u0e42\u0e17\u0e23\u0e1c\u0e48\u0e32\u0e19\u0e2a\u0e40\u0e1b\u0e01\u0e40\u0e01\u0e2d\u0e23\u0e4c\u0e42\u0e1f\u0e19/\u0e2b\u0e39\u0e1f\u0e31\u0e07",
                                call_web: "\u0e42\u0e17\u0e23\u0e1c\u0e48\u0e32\u0e19\u0e40\u0e27\u0e47\u0e1a",
                                cancel: "\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01",
                                confirm_meeting: "\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21",
                                decline: "\u0e1b\u0e0f\u0e34\u0e40\u0e2a\u0e18",
                                done: "\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19",
                                input_fields_collection_time: "30 \u0e19\u0e32\u0e17\u0e35",
                                join_mobile: "\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e1c\u0e48\u0e32\u0e19\u0e2a\u0e40\u0e1b\u0e01\u0e40\u0e01\u0e2d\u0e23\u0e4c\u0e42\u0e1f\u0e19/\u0e2b\u0e39\u0e1f\u0e31\u0e07",
                                join_web: "\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e1c\u0e48\u0e32\u0e19\u0e40\u0e27\u0e47\u0e1a",
                                retry: "\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e48\u0e07\u0e44\u0e14\u0e49 \u0e04\u0e25\u0e34\u0e01\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e25\u0e2d\u0e07\u0e43\u0e2b\u0e21\u0e48",
                                retry_message: "\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e48\u0e07\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e30\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e25\u0e2d\u0e07\u0e43\u0e2b\u0e21\u0e48\u2026",
                                send: "\u0e2a\u0e48\u0e07",
                                settings: "\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32"
                            },
                            dates: {
                                month_format: "dd/MM",
                                month_format_short: "d/M",
                                time_format_detail: "HH:mm, d MMMM yyyy",
                                today: "\u0e27\u0e31\u0e19\u0e19\u0e35\u0e49",
                                tomorrow: "\u0e1e\u0e23\u0e38\u0e48\u0e07\u0e19\u0e35\u0e49",
                                year_format: "dd/MM/yyyy",
                                year_month_format: "MMMM yyyy",
                                yesterday: "\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e27\u0e32\u0e19"
                            },
                            error: {
                                business_email: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e18\u0e38\u0e23\u0e01\u0e34\u0e08\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07",
                                default: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e15\u0e2d\u0e1a\u0e01\u0e25\u0e31\u0e1a",
                                email: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07",
                                invalid_link_returning_text: "\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e08\u0e30\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e41\u0e22\u0e01\u0e15\u0e48\u0e32\u0e07\u0e2b\u0e32\u0e01",
                                name: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e41\u0e25\u0e30\u0e19\u0e32\u0e21\u0e2a\u0e01\u0e38\u0e25",
                                number: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07",
                                phone: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07",
                                required: "\u0e1f\u0e34\u0e25\u0e14\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01",
                                valid_name: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e1b\u0e49\u0e2d\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07"
                            },
                            meeting_booker: {
                                calendar_next_month: "\u0e40\u0e14\u0e37\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b",
                                calendar_previous_month: "\u0e40\u0e14\u0e37\u0e2d\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32",
                                close_confirmation: "\u0e1b\u0e34\u0e14",
                                confirm: "\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19",
                                different_time: "\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19",
                                error: "\u0e02\u0e2d\u0e42\u0e17\u0e29 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e08\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49 \u0e42\u0e1b\u0e23\u0e14\u0e25\u0e2d\u0e07\u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07",
                                find_availability: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e2b\u0e32\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49",
                                loading_message_1: "\u0e23\u0e2d\u0e2a\u0e31\u0e01\u0e04\u0e23\u0e39\u0e48, \u0e01\u0e33\u0e25\u0e31\u0e07\u0e42\u0e2b\u0e25\u0e14...",
                                loading_message_2: "\u0e23\u0e2d\u0e2a\u0e31\u0e01\u0e04\u0e23\u0e39\u0e48,\u0e40\u0e23\u0e47\u0e27\u0e46\u0e19\u0e35\u0e49\u0e41\u0e25\u0e49\u0e27!",
                                loading_message_3: "\u0e23\u0e2d\u0e41\u0e1b\u0e4a\u0e1a\u0e19\u0e30\u0e04\u0e30, \u0e01\u0e23\u0e38\u0e13\u0e32\u0e23\u0e2d\u0e2a\u0e31\u0e01\u0e04\u0e23\u0e39\u0e48...",
                                loading_message_4: "\u0e23\u0e2d\u0e2a\u0e31\u0e01\u0e04\u0e23\u0e39\u0e48, \u0e40\u0e23\u0e32\u0e01\u0e33\u0e25\u0e31\u0e07\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23!",
                                loading_message_5: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e17\u0e33\u0e2d\u0e22\u0e39\u0e48...",
                                loading_message_6: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13...",
                                loading_message_7: "\u0e23\u0e2d\u0e41\u0e1b\u0e4a\u0e1a\u0e19\u0e30\u0e04\u0e30, \u0e40\u0e23\u0e47\u0e27\u0e46\u0e19\u0e35\u0e49\u0e41\u0e25\u0e49\u0e27!",
                                next_week: "\u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c\u0e16\u0e31\u0e14\u0e44\u0e1b",
                                no_availability: "\u0e02\u0e2d\u0e2d\u0e20\u0e31\u0e22, \u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2b\u0e32\u0e04\u0e19\u0e43\u0e14\u0e46 \u0e04\u0e19\u0e08\u0e32\u0e01\u0e17\u0e35\u0e21\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e04\u0e38\u0e13",
                                no_available_slots: "\u0e02\u0e2d\u0e2d\u0e20\u0e31\u0e22, \u0e44\u0e21\u0e48\u0e21\u0e35\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49",
                                previous_week: "\u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27",
                                unavailable_alert: "\u0e02\u0e2d\u0e2d\u0e20\u0e31\u0e22, \u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e04\u0e38\u0e13\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49",
                                will_in_touch: "\u0e17\u0e35\u0e21\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e08\u0e49\u0e07\u0e41\u0e25\u0e49\u0e27\u0e41\u0e25\u0e30\u0e08\u0e30\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e04\u0e38\u0e13"
                            },
                            microphone_request: {
                                decline: "\u0e44\u0e21\u0e48, \u0e09\u0e31\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e0a\u0e17\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19",
                                disabled_text: "\u0e04\u0e38\u0e13\u0e44\u0e14\u0e49\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                enable_instructions: {
                                    chrome: "\u0e04\u0e25\u0e34\u0e01\u0e17\u0e35\u0e48\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e43\u0e19\u0e41\u0e16\u0e1a\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e49\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01 'Always allow', \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e35\u0e40\u0e1f\u0e23\u0e0a\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a",
                                    safari: "Safari \xbb Preferences \xbb Websites \xbb Microphone \xbb {{domain}} \u0e41\u0e25\u0e49\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01 'Allow', \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e35\u0e40\u0e1f\u0e23\u0e0a\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a"
                                },
                                enable_it: {
                                    chrome: "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19",
                                    default: "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19",
                                    safari: "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e1b\u0e17\u0e35\u0e48"
                                },
                                enable_text: "\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13"
                            },
                            placeholder: {
                                email: "\u0e1b\u0e49\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e2d\u0e35\u0e40\u0e21\u0e25\u2026",
                                reply: "\u0e1b\u0e49\u0e2d\u0e19\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e15\u0e2d\u0e1a\u0e01\u0e25\u0e31\u0e1a\u2026"
                            },
                            text: {
                                calendar_confirm_body: "\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e08\u0e30\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e22\u0e31\u0e07",
                                calendar_confirm_title: "\u0e42\u0e1b\u0e23\u0e14\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13",
                                calendar_invite: "\u0e40\u0e23\u0e32\u0e04\u0e27\u0e23\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e40\u0e0a\u0e34\u0e0d\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e44\u0e2b\u0e19?",
                                call_phone: "\u0e2b\u0e23\u0e37\u0e2d\u0e42\u0e17\u0e23\u0e2b\u0e32\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e02\u0e2d\u0e07\u0e09\u0e31\u0e19",
                                call_started: "\u0e40\u0e23\u0e34\u0e48\u0e21\u0e01\u0e32\u0e23\u0e42\u0e17\u0e23",
                                call_us: "\u0e42\u0e17\u0e23\u0e2b\u0e32\u0e40\u0e23\u0e32",
                                chat_bot: "\u0e1a\u0e2d\u0e17\u0e41\u0e0a\u0e17",
                                close_messenger: "\u0e1b\u0e34\u0e14 messenger",
                                composer_label: "\u0e1b\u0e49\u0e2d\u0e19\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21",
                                confirming: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19...",
                                connecting: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u2026",
                                connecting_to_rep: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e04\u0e38\u0e13\u0e01\u0e31\u0e1a\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19",
                                incoming_call: "\u0e21\u0e35\u0e2a\u0e32\u0e22\u0e40\u0e23\u0e35\u0e22\u0e01\u0e40\u0e02\u0e49\u0e32\u2026",
                                invalid_phone: "\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e44\u0e21\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07",
                                joined: "\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e41\u0e25\u0e49\u0e27",
                                meeting_canceled: "\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e15\u0e32\u0e23\u0e32\u0e07\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e16\u0e39\u0e01\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01 \u0e21\u0e35\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e41\u0e25\u0e49\u0e27",
                                meeting_scheduled: "\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e27\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07\u0e40\u0e27\u0e25\u0e32\u0e41\u0e25\u0e49\u0e27",
                                meeting_settings: "\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21",
                                microphone: "\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1f\u0e19",
                                not_seen: "\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e40\u0e2b\u0e47\u0e19",
                                not_you: "\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e04\u0e38\u0e13\u0e2b\u0e23\u0e37\u0e2d",
                                offline: "\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e2d\u0e2d\u0e1f\u0e44\u0e25\u0e19\u0e4c\u0e43\u0e19\u0e02\u0e13\u0e30\u0e19\u0e35\u0e49",
                                privacy_policy: "\u0e19\u0e42\u0e22\u0e1a\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e15\u0e31\u0e27",
                                qualified_branding: "\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e17\u0e19\u0e32\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34",
                                rate_conversation: "\u0e43\u0e2b\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e17\u0e19\u0e32\u0e19\u0e35\u0e49",
                                rep_is_typing: "\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e01\u0e33\u0e25\u0e31\u0e07\u0e1e\u0e34\u0e21\u0e1e\u0e4c",
                                rep_joined: "\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21\u0e41\u0e25\u0e49\u0e27",
                                seen: "\u0e40\u0e2b\u0e47\u0e19\u0e41\u0e25\u0e49\u0e27",
                                sending: "\u0e01\u0e33\u0e25\u0e31\u0e07\u0e2a\u0e48\u0e07\u2026",
                                speakers: "\u0e25\u0e33\u0e42\u0e1e\u0e07",
                                web_call_unavailable: "\u0e01\u0e32\u0e23\u0e42\u0e17\u0e23\u0e1c\u0e48\u0e32\u0e19\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13"
                            },
                            text_sub: {
                                confirmation_sent_to: "\u0e01\u0e32\u0e23\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e22\u0e31\u0e07 {{text}}",
                                expect_call: "\u0e04\u0e32\u0e14\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e32\u0e22\u0e08\u0e32\u0e01 {{text}}",
                                invite_sent: "\u0e02\u0e2d\u0e40\u0e0a\u0e34\u0e0d\u0e08\u0e30\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e22\u0e31\u0e07 {{email}}.",
                                meeting_details_sent: "\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e22\u0e31\u0e07 {{email}}",
                                meeting_timezone: "\u0e40\u0e27\u0e25\u0e32\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e1b\u0e47\u0e19 {{text}}",
                                meeting_with: "\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21\u0e01\u0e31\u0e1a {{text}}",
                                message_announcement_from_me: "\u0e40\u0e27\u0e25\u0e32 {{timestamp}} \u0e09\u0e31\u0e19\u0e1e\u0e39\u0e14\u0e27\u0e48\u0e32",
                                message_announcement_from_them: "\u0e40\u0e27\u0e25\u0e32 {{timestamp}} {{subject}} \u0e1e\u0e39\u0e14\u0e27\u0e48\u0e32",
                                missed_call: "\u0e2a\u0e32\u0e22\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a - \u0e23\u0e2d\u0e40\u0e27\u0e25\u0e32 {{text}}",
                                next_day: "\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e27\u0e25\u0e32\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e27\u0e31\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b {{date}}",
                                previous_day: "\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e27\u0e25\u0e32\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e27\u0e31\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32 {{date}}",
                                schedule_meeting: "\u0e27\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07\u0e40\u0e27\u0e25\u0e32\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e0a\u0e38\u0e21 {{text}}",
                                will_receive_call: "\u0e04\u0e38\u0e13\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e32\u0e22\u0e08\u0e32\u0e01 {{text}}"
                            }
                        }
                    },
                    zh_CN: {
                        language: "Chinese (Simplified)",
                        translated_language: "\u6c49\u8bed",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\u5141\u8bb8\u8bbf\u5ba2\u97f3\u9891\u548c\u89c6\u9891",
                                allow_visitor_audio_only: "\u4ec5\u5141\u8bb8\u97f3\u9891",
                                allow_visitor_video: "\u5141\u8bb8\u8bbf\u5ba2\u5f55\u89c6\u9891",
                                close_full_screen: "\u5173\u95ed\u5168\u5c4f",
                                enable_your_microphone: "\u8bf7\u5728\u4e0a\u65b9\u542f\u7528\u60a8\u7684\u9ea6\u514b\u98ce\u548c\u6444\u50cf\u5934",
                                expand_to_full_screen: "\u6253\u5f00\u5168\u5c4f",
                                face_mute: "\u5173\u95ed\u60a8\u7684\u6444\u50cf\u5934",
                                face_unmute: "\u6253\u5f00\u60a8\u7684\u6444\u50cf\u5934",
                                mute: "\u5173\u95ed\u60a8\u7684\u9ea6\u514b\u98ce",
                                select_a_camera: "\u9009\u62e9\u6444\u50cf\u5934",
                                select_a_microphone: "\u9009\u62e9\u9ea6\u514b\u98ce",
                                select_a_speaker: "\u9009\u62e9\u626c\u58f0\u5668",
                                tooltip_prompt_visitor_call_controls: "\u542f\u7528\u60a8\u7684\u9ea6\u514b\u98ce\u548c\u6444\u50cf\u5934\uff0c\u52a0\u5165 {{name}}",
                                unmute: "\u6253\u5f00\u60a8\u7684\u9ea6\u514b\u98ce",
                                video_settings: "\u89c6\u9891\u8bbe\u7f6e",
                                view_audio_inputs_sources: "\u67e5\u770b\u97f3\u9891\u8f93\u5165\u548c\u6e90",
                                view_video_sources: "\u67e5\u770b\u89c6\u9891\u6e90"
                            },
                            call_invite: {
                                decline: "\u62d2\u7edd",
                                inviting: "\u9080\u8bf7\u60a8\u53c2\u52a0\u73b0\u573a\u4f1a\u8bae",
                                join: "\u4ec5\u4f7f\u7528\u97f3\u9891\u52a0\u5165",
                                sharing_video_audio: "\u4ed6\u4eec\u5c06\u5206\u4eab\u4ed6\u4eec\u7684\u89c6\u9891\u548c\u97f3\u9891\u3002"
                            },
                            cta: {
                                back: "\u56de\u53bb",
                                call_mobile: "\u901a\u8fc7\u514d\u63d0\u7535\u8bdd/\u8033\u673a\u901a\u8bdd",
                                call_web: "\u901a\u8fc7\u7f51\u9875\u901a\u8bdd",
                                cancel: "\u53d6\u6d88",
                                confirm_meeting: "\u786e\u8ba4\u4f1a\u8bae",
                                decline: "\u62d2\u7edd",
                                done: "\u5b8c\u6210",
                                input_fields_collection_time: "30\u5206\u949f",
                                join_mobile: "\u901a\u8fc7\u514d\u63d0\u7535\u8bdd/\u8033\u673a\u52a0\u5165",
                                join_web: "\u901a\u8fc7\u7f51\u9875\u52a0\u5165",
                                retry: "\u65e0\u6cd5\u53d1\u9001\u3002\u70b9\u51fb\u91cd\u8bd5\u3002",
                                retry_message: "\u65e0\u6cd5\u53d1\u9001\u3002\u70b9\u51fb\u6d88\u606f\u91cd\u8bd5\u2026\u2026",
                                send: "\u53d1\u9001",
                                settings: "\u8bbe\u7f6e"
                            },
                            dates: {
                                month_format: "MM-dd",
                                month_format_short: "M-d",
                                time_format_detail: "PPPP aaaa h:mm",
                                today: "\u4eca\u65e5",
                                tomorrow: "\u660e\u5929",
                                year_format: "yyyy-MM-dd",
                                year_month_format: "yyyy MMMM",
                                yesterday: "\u6628\u65e5"
                            },
                            error: {
                                business_email: "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u5546\u52a1\u7535\u5b50\u90ae\u4ef6\u5730\u5740",
                                default: "\u8bf7\u8f93\u5165\u56de\u590d",
                                email: "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740",
                                invalid_link_returning_text: "\u4f1a\u8bae\u8be6\u60c5\u5c06\u53e6\u884c\u53d1\u9001",
                                name: "\u8bf7\u8f93\u5165\u59d3\u6c0f\u548c\u540d\u5b57",
                                number: "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u53f7\u7801",
                                phone: "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7535\u8bdd\u53f7\u7801",
                                required: "\u5fc5\u586b\u5b57\u6bb5",
                                valid_name: "\u8bf7\u8f93\u5165\u6709\u6548\u540d\u79f0"
                            },
                            meeting_booker: {
                                calendar_next_month: "\u4e0b\u4e2a\u6708",
                                calendar_previous_month: "\u4e0a\u4e2a\u6708",
                                close_confirmation: "\u5173\u95ed",
                                confirm: "\u786e\u8ba4",
                                different_time: "\u9009\u62e9\u5176\u4ed6\u65f6\u95f4",
                                error: "\u62b1\u6b49\uff0c\u65e0\u6cd5\u9884\u8ba2\u6b64\u4f1a\u8bae\u3002\u8bf7\u518d\u8bd5\u4e00\u6b21\u3002",
                                find_availability: "\u6b63\u5728\u67e5\u627e\u7a7a\u6863",
                                loading_message_1: "\u8bf7\u7a0d\u5019\uff0c\u52a0\u8f7d\u4e2d...",
                                loading_message_2: "\u7a0d\u7b49\u7247\u523b\uff0c\u5c31\u5feb\u597d\u4e86\uff01",
                                loading_message_3: "\u8bf7\u7a0d\u7b49\u7247\u523b...",
                                loading_message_4: "\u7a0d\u7b49\uff0c\u6211\u4eec\u6b63\u5728\u5904\u7406\uff01",
                                loading_message_5: "\u6b63\u5728\u5904\u7406\u4e2d...",
                                loading_message_6: "\u5904\u7406\u60a8\u7684\u8bf7\u6c42\u4e2d...",
                                loading_message_7: "\u7a0d\u7b49\u7247\u523b\uff0c\u5373\u5c06\u5b8c\u6210\uff01",
                                next_week: "\u4e0b\u5468",
                                no_availability: "\u62b1\u6b49\uff0c\u6211\u4eec\u672a\u80fd\u627e\u5230\u4efb\u4f55\u4eba\u3002\u6211\u4eec\u7684\u56e2\u961f\u4f1a\u6709\u4eba\u4e0e\u60a8\u8054\u7cfb\u3002",
                                no_available_slots: "\u62b1\u6b49\uff0c\u5f53\u524d\u6ca1\u6709\u53ef\u9009\u7684\u65f6\u95f4\u3002",
                                previous_week: "\u4e0a\u5468",
                                unavailable_alert: "\u62b1\u6b49\uff0c\u60a8\u9009\u62e9\u7684\u65f6\u95f4\u5df2\u7ecf\u6709\u5176\u4ed6\u5b89\u6392 ",
                                will_in_touch: "\u6211\u4eec\u7684\u56e2\u961f\u5df2\u7ecf\u6536\u5230\u901a\u77e5\uff0c\u5c06\u4e0e\u60a8\u8054\u7cfb\u3002 "
                            },
                            microphone_request: {
                                decline: "\u4e0d\uff0c\u8c22\u8c22\u3002\u6211\u53ea\u60f3\u804a\u5929",
                                disabled_text: "\u60a8\u5df2\u7981\u7528\u9ea6\u514b\u98ce",
                                enable_instructions: {
                                    chrome: "\u8bf7\u70b9\u51fb\u5730\u5740\u680f\u4e2d\u7684\u9ea6\u514b\u98ce\u5e76\u9009\u62e9\u201c\u59cb\u7ec8\u5141\u8bb8\u201d\uff0c\u7136\u540e\u5237\u65b0\u9875\u9762",
                                    safari: "Safari \xbb \u504f\u597d\u8bbe\u5b9a \xbb \u7f51\u9875 \xbb \u9ea6\u514b\u98ce \xbb {{domain}} \u5e76\u9009\u62e9\u201c\u5141\u8bb8\u201d\uff0c\u7136\u540e\u5237\u65b0\u9875\u9762"
                                },
                                enable_it: {
                                    chrome: "\u542f\u7528\u9ea6\u514b\u98ce",
                                    default: "\u8bf7\u542f\u7528",
                                    safari: "\u542f\u7528\u9ea6\u514b\u98ce\u8bf7\u8f6c\u5230"
                                },
                                enable_text: "\u542f\u7528\u60a8\u7684\u9ea6\u514b\u98ce"
                            },
                            placeholder: {
                                email: "\u8f93\u5165\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u2026\u2026",
                                reply: "\u8f93\u5165\u56de\u590d\u2026\u2026"
                            },
                            text: {
                                calendar_confirm_body: "\u4f1a\u8bae\u5c06\u53d1\u9001\u81f3",
                                calendar_confirm_title: "\u8bf7\u786e\u8ba4\u60a8\u7684\u4f1a\u8bae",
                                calendar_invite: "\u6211\u4eec\u8be5\u5c06\u65e5\u5386\u9080\u8bf7\u53d1\u5f80\u4f55\u65b9\uff1f",
                                call_phone: "\u6216\u7ed9\u6211\u81f4\u7535",
                                call_started: "\u901a\u8bdd\u5df2\u5f00\u59cb",
                                call_us: "\u8054\u7cfb\u6211\u4eec",
                                chat_bot: "\u804a\u5929\u673a\u5668\u4eba",
                                close_messenger: "\u5173\u95ed\u4fe1\u4f7f",
                                composer_label: "\u8f93\u5165\u4fe1\u606f",
                                confirming: "\u786e\u8ba4\u4e2d\u2026\u2026",
                                connecting: "\u6b63\u5728\u63a5\u901a\u2026\u2026",
                                connecting_to_rep: "\u6b63\u5728\u5e2e\u60a8\u63a5\u901a\u4e00\u4f4d\u4ee3\u8868",
                                incoming_call: "\u6765\u7535\u2026\u2026",
                                invalid_phone: "\u65e0\u6548\u7684\u7535\u8bdd\u53f7\u7801",
                                joined: "\u5df2\u52a0\u5165",
                                meeting_canceled: "\u4f1a\u8bae\u8c03\u5ea6\u8005\u5df2\u7ecf\u53d6\u6d88\u3002\u4e00\u4f4d\u4ee3\u8868\u5df2\u7ecf\u52a0\u5165\u3002",
                                meeting_scheduled: "\u60a8\u7684\u4f1a\u8bae\u5df2\u5b89\u6392",
                                meeting_settings: "\u4f1a\u8bae\u8bbe\u7f6e",
                                microphone: "\u9ea6\u514b\u98ce",
                                not_seen: "\u672a\u8bfb",
                                not_you: "\u4e0d\u662f\u4f60\u5417",
                                offline: "\u6240\u6709\u4ee3\u8868\u76ee\u524d\u5904\u4e8e\u79bb\u7ebf\u72b6\u6001\u3002",
                                privacy_policy: "\u9690\u79c1\u653f\u7b56",
                                qualified_branding: "\u4e0eQualified\u5bf9\u8bdd",
                                rate_conversation: "\u8bc4\u4ef7\u8fd9\u573a\u5bf9\u8bdd",
                                rep_is_typing: "\u4ee3\u8868\u6b63\u5728\u8f93\u5165",
                                rep_joined: "\u4ee3\u8868\u5df2\u52a0\u5165",
                                seen: "\u5df2\u8bfb",
                                sending: "\u53d1\u9001\u4e2d\u2026\u2026",
                                speakers: "\u626c\u58f0\u5668",
                                web_call_unavailable: "\u7f51\u9875\u901a\u8bdd\u5728\u60a8\u7684\u8bbe\u5907\u4e0a\u4e0d\u53ef\u7528"
                            },
                            text_sub: {
                                confirmation_sent_to: "\u786e\u8ba4\u5df2\u53d1\u9001\u81f3{{text}}",
                                expect_call: "\u51c6\u5907\u63a5\u542c\u6765\u81ea{{text}}\u7684\u901a\u8bdd",
                                invite_sent: "\u9080\u8bf7\u5c06\u53d1\u9001\u81f3 {{email}}\u3002",
                                meeting_details_sent: "\u4f1a\u8bae\u8be6\u60c5\u5df2\u53d1\u9001\u81f3{{email}}",
                                meeting_timezone: "\u6240\u6709\u65f6\u95f4\u4e3a{{text}}",
                                meeting_with: "\u4e0e{{text}}\u5f00\u4f1a",
                                message_announcement_from_me: "\u5728 {{timestamp}} \u6211\u8bf4",
                                message_announcement_from_them: "\u5728 {{timestamp}} {{subject}} \u8bf4",
                                missed_call: "\u672a\u63a5\u6765\u7535 \u2013 \u5df2\u7ecf\u7b49\u5f85{{text}}",
                                next_day: "\u52a0\u8f7d\u540e\u4e00\u5929\u7684\u65f6\u95f4\u6bb5 {{date}}",
                                previous_day: "\u52a0\u8f7d\u524d\u4e00\u5929\u7684\u65f6\u95f4\u6bb5 {{date}}",
                                schedule_meeting: "\u5b89\u6392\u4e00\u573a\u957f\u8fbe{{text}}\u7684\u4f1a\u8bae",
                                will_receive_call: "\u60a8\u5c06\u63a5\u5230\u6765\u81ea{{text}}\u7684\u901a\u8bdd"
                            }
                        }
                    },
                    zh_TW: {
                        language: "Chinese (Traditional)",
                        translated_language: "\u6f22\u8a9e",
                        messenger: {
                            call_box: {
                                allow_visitor_audio_and_video: "\u5141\u8a31\u8a2a\u5ba2\u97f3\u8a0a\u548c\u8996\u8a0a",
                                allow_visitor_audio_only: "\u50c5\u5141\u8a31\u97f3\u8a0a",
                                allow_visitor_video: "\u5141\u8a31\u8a2a\u5ba2\u8996\u8a0a",
                                close_full_screen: "\u95dc\u9589\u5168\u87a2\u5e55",
                                enable_your_microphone: "\u8acb\u5728\u4e0a\u65b9\u555f\u7528\u60a8\u7684\u9ea5\u514b\u98a8\u548c\u8996\u8a0a\u651d\u5f71\u6a5f",
                                expand_to_full_screen: "\u5c55\u958b\u81f3\u5168\u87a2\u5e55",
                                face_mute: "\u95dc\u9589\u60a8\u7684\u8996\u8a0a\u651d\u5f71\u6a5f",
                                face_unmute: "\u958b\u555f\u60a8\u7684\u8996\u8a0a\u651d\u5f71\u6a5f",
                                mute: "\u95dc\u9589\u60a8\u7684\u9ea5\u514b\u98a8",
                                select_a_camera: "\u9078\u53d6\u8996\u8a0a\u651d\u5f71\u6a5f",
                                select_a_microphone: "\u9078\u53d6\u9ea5\u514b\u98a8",
                                select_a_speaker: "\u9078\u53d6\u5587\u53ed",
                                tooltip_prompt_visitor_call_controls: "\u555f\u7528\u60a8\u7684\u9ea5\u514b\u98a8\u8207\u5f71\u50cf\u52a0\u5165 {{name}}",
                                unmute: "\u958b\u555f\u60a8\u7684\u9ea5\u514b\u98a8",
                                video_settings: "\u8996\u8a0a\u8a2d\u5b9a",
                                view_audio_inputs_sources: "\u67e5\u770b\u97f3\u8a0a\u8f38\u5165\u8207\u4f86\u6e90",
                                view_video_sources: "\u67e5\u770b\u8996\u8a0a\u4f86\u6e90"
                            },
                            call_invite: {
                                decline: "\u62d2\u7d55",
                                inviting: "\u9080\u8acb\u60a8\u53c3\u52a0\u73fe\u5834\u6703\u8b70",
                                join: "\u50c5\u4f7f\u7528\u97f3\u983b\u52a0\u5165",
                                sharing_video_audio: "\u4ed6\u5011\u5c07\u5206\u4eab\u4ed6\u5011\u7684\u8996\u983b\u548c\u97f3\u983b\u3002"
                            },
                            cta: {
                                back: "\u56de\u53bb",
                                call_mobile: "\u7d93\u7531\u5587\u53ed\u64f4\u97f3\u5668/\u8033\u9ea5\u901a\u8a71",
                                call_web: "\u7d93\u7531\u7db2\u9801\u901a\u8a71",
                                cancel: "\u53d6\u6d88",
                                confirm_meeting: "\u78ba\u8a8d\u6703\u8b70",
                                decline: "\u62d2\u7d55",
                                done: "\u5b8c\u6210",
                                input_fields_collection_time: "30\u5206\u9418",
                                join_mobile: "\u7d93\u7531\u5587\u53ed\u64f4\u97f3\u5668/\u8033\u9ea5\u52a0\u5165",
                                join_web: "\u7d93\u7531\u7db2\u9801\u52a0\u5165",
                                retry: "\u7121\u6cd5\u767c\u9001\u3002\u9ede\u64ca\u91cd\u8a66\u3002",
                                retry_message: "\u7121\u6cd5\u767c\u9001\u3002\u9ede\u64ca\u8a0a\u606f\u4ee5\u91cd\u8a66\u2026\u2026",
                                send: "\u767c\u9001",
                                settings: "\u8a2d\u5b9a"
                            },
                            dates: {
                                month_format: "MM-dd",
                                month_format_short: "M-d",
                                time_format_detail: "PPPP aaaa h:mm",
                                today: "\u4eca\u5929",
                                tomorrow: "\u660e\u5929",
                                year_format: "yyyy-MM-dd",
                                year_month_format: "yyyy MMMM",
                                yesterday: "\u6628\u5929"
                            },
                            error: {
                                business_email: "\u8acb\u8f38\u5165\u6709\u6548\u7684\u696d\u52d9\u96fb\u5b50\u90f5\u4ef6\u5730\u5740",
                                default: "\u8acb\u8f38\u5165\u56de\u8986",
                                email: "\u8acb\u8f38\u5165\u6709\u6548\u7684\u96fb\u5b50\u90f5\u4ef6\u5730\u5740",
                                invalid_link_returning_text: "\u6703\u8b70\u8a73\u60c5\u5c07\u500b\u5225\u5bc4\u51fa",
                                name: "\u8acb\u8f38\u5165\u540d\u5b57\u548c\u59d3\u6c0f",
                                number: "\u8acb\u8f38\u5165\u6709\u6548\u865f\u78bc",
                                phone: "\u8acb\u8f38\u5165\u6709\u6548\u96fb\u8a71\u865f\u78bc",
                                required: "\u5fc5\u586b\u6b04\u4f4d",
                                valid_name: "\u8acb\u8f38\u5165\u6709\u6548\u540d\u5b57"
                            },
                            meeting_booker: {
                                calendar_next_month: "\u4e0b\u500b\u6708",
                                calendar_previous_month: "\u4e0a\u500b\u6708",
                                close_confirmation: "\u95dc\u9589",
                                confirm: "\u78ba\u8a8d",
                                different_time: "\u9078\u64c7\u5176\u4ed6\u6642\u9593",
                                error: "\u5c0d\u4e0d\u8d77\uff0c\u7121\u6cd5\u9810\u8a02\u6b64\u6703\u8b70\u3002\u8acb\u518d\u8a66\u4e00\u6b21\u3002",
                                find_availability: "\u6b63\u5728\u641c\u5c0b\u53ef\u9810\u7d04\u7684\u6642\u9593",
                                loading_message_1: "\u8acb\u7a0d\u5019\uff0c\u8f09\u5165\u4e2d...",
                                loading_message_2: "\u7a0d\u7b49\u7247\u523b\uff0c\u5c31\u5feb\u597d\u4e86\uff01",
                                loading_message_3: "\u8acb\u7a0d\u7b49\u7247\u523b...",
                                loading_message_4: "\u7a0d\u7b49\uff0c\u6211\u5011\u6b63\u5728\u8655\u7406\uff01",
                                loading_message_5: "\u6b63\u5728\u8655\u7406\u4e2d...",
                                loading_message_6: "\u8655\u7406\u60a8\u7684\u8acb\u6c42\u4e2d...",
                                loading_message_7: "\u7a0d\u7b49\u7247\u523b\uff0c\u5373\u5c07\u5b8c\u6210\uff01",
                                next_week: "\u4e0b\u500b\u661f\u671f",
                                no_availability: "\u62b1\u6b49\uff0c\u6211\u5011\u672a\u80fd\u627e\u5230\u4efb\u4f55\u4eba\u3002\u6211\u5011\u7684\u5718\u968a\u6703\u6709\u4eba\u8207\u60a8\u806f\u7e6b\u3002",
                                no_available_slots: "\u5f88\u62b1\u6b49\uff0c\u76ee\u524d\u6c92\u6709\u958b\u653e\u7684\u6642\u6bb5\u3002",
                                previous_week: "\u4e0a\u500b\u661f\u671f",
                                unavailable_alert: "\u62b1\u6b49\uff0c\u60a8\u9078\u64c7\u7684\u6642\u9593\u5df2\u7d93\u7121\u6cd5\u4f7f\u7528\u4e86",
                                will_in_touch: "\u6211\u5011\u7684\u5718\u968a\u5df2\u6536\u5230\u901a\u77e5\uff0c\u6703\u8207\u60a8\u53d6\u5f97\u806f\u7e6b\u3002"
                            },
                            microphone_request: {
                                decline: "\u4e0d\uff0c\u8b1d\u8b1d\uff0c\u6211\u53ea\u60f3\u804a\u5929",
                                disabled_text: "\u60a8\u5df2\u7981\u7528\u9ea5\u514b\u98a8",
                                enable_instructions: {
                                    chrome: "\u8acb\u9ede\u9078\u7db2\u5740\u5217\u4e0a\u7684\u9ea5\u514b\u98a8\uff0c\u4e26\u9078\u53d6\u300c\u4e00\u5f8b\u5141\u8a31\u300d\uff0c\u7136\u5f8c\u91cd\u65b0\u6574\u7406\u9801\u9762",
                                    safari: "Safari \xbb \u504f\u597d\u8a2d\u5b9a \xbb \u7db2\u7ad9 \xbb \u9ea5\u514b\u98a8 \xbb {{domain}} \u4e26\u9078\u53d6\u300c\u5141\u8a31\u300d\uff0c\u7136\u5f8c\u91cd\u65b0\u6574\u7406\u9801\u9762"
                                },
                                enable_it: {
                                    chrome: "\u82e5\u8981\u555f\u7528",
                                    default: "\u8acb\u555f\u7528",
                                    safari: "\u82e5\u8981\u555f\u7528\uff0c\u8acb\u524d\u5f80"
                                },
                                enable_text: "\u555f\u7528\u60a8\u7684\u9ea5\u514b\u98a8"
                            },
                            placeholder: {
                                email: "\u8f38\u5165\u96fb\u5b50\u90f5\u4ef6\u5730\u5740\u2026\u2026",
                                reply: "\u8f38\u5165\u56de\u8986\u2026\u2026"
                            },
                            text: {
                                calendar_confirm_body: "\u6703\u8b70\u5c07\u88ab\u5bc4\u9001\u81f3",
                                calendar_confirm_title: "\u8acb\u78ba\u8a8d\u60a8\u7684\u6703\u8b70",
                                calendar_invite: "\u6211\u5011\u61c9\u5c07\u884c\u4e8b\u66c6\u9080\u8acb\u767c\u9001\u81f3\u4f55\u8655\uff1f",
                                call_phone: "\u6216\u64a5\u6253\u6211\u7684\u96fb\u8a71",
                                call_started: "\u901a\u8a71\u5df2\u958b\u59cb",
                                call_us: "\u6253\u96fb\u8a71\u7d66\u6211\u5011",
                                chat_bot: "\u804a\u5929\u6a5f\u5668\u4eba",
                                close_messenger: "\u95dc\u9589\u5373\u6642\u901a\u8a0a",
                                composer_label: "\u8f38\u5165\u8a0a\u606f",
                                confirming: "\u78ba\u8a8d\u4e2d\u2026\u2026",
                                connecting: "\u9023\u63a5\u4e2d\u2026\u2026",
                                connecting_to_rep: "\u5c07\u60a8\u9023\u63a5\u81f3\u5c08\u54e1",
                                incoming_call: "\u4f86\u96fb\u2026\u2026",
                                invalid_phone: "\u7121\u6548\u7684\u96fb\u8a71\u865f\u78bc",
                                joined: "\u5df2\u52a0\u5165",
                                meeting_canceled: "\u6703\u8b70\u6392\u7a0b\u5668\u5df2\u53d6\u6d88\u3002\u4e00\u4f4d\u5c08\u54e1\u5df2\u52a0\u5165\u3002",
                                meeting_scheduled: "\u60a8\u7684\u6703\u8b70\u5df2\u5b89\u6392",
                                meeting_settings: "\u6703\u8b70\u8a2d\u5b9a",
                                microphone: "\u9ea5\u514b\u98a8",
                                not_seen: "\u672a\u8b80",
                                not_you: "\u4e0d\u662f\u4f60\u55ce",
                                offline: "\u6211\u5011\u6240\u6709\u7684\u5c08\u54e1\u76ee\u524d\u5747\u70ba\u96e2\u7dda\u72c0\u614b\u3002",
                                privacy_policy: "\u96b1\u79c1\u6b0a\u653f\u7b56",
                                qualified_branding: "Qualified \u5c0d\u8a71",
                                rate_conversation: "\u8acb\u70ba\u9019\u6b21\u7684\u5c0d\u8a71\u8a55\u5206",
                                rep_is_typing: "\u5c08\u54e1\u6b63\u5728\u6253\u5b57",
                                rep_joined: "\u5c08\u54e1\u5df2\u52a0\u5165",
                                seen: "\u5df2\u8b80",
                                sending: "\u767c\u9001\u4e2d\u2026\u2026",
                                speakers: "\u5587\u53ed",
                                web_call_unavailable: "\u60a8\u7684\u88dd\u7f6e\u4e0a\u7121\u6cd5\u4f7f\u7528\u7db2\u8def\u901a\u8a71"
                            },
                            text_sub: {
                                confirmation_sent_to: "\u78ba\u8a8d\u5df2\u767c\u9001\u81f3 {{text}}",
                                expect_call: "\u9810\u671f\u5c07\u6536\u5230 {{text}} \u7684\u4f86\u96fb",
                                invite_sent: "\u9080\u8acb\u5c07\u767c\u9001\u81f3 {{email}}\u3002",
                                meeting_details_sent: "\u6703\u8b70\u8a73\u60c5\u5df2\u767c\u9001\u81f3{{email}}",
                                meeting_timezone: "\u6240\u6709\u6642\u9593\u5747\u70ba {{text}} \u6642\u9593",
                                meeting_with: "\u8207 {{text}} \u958b\u6703",
                                message_announcement_from_me: "\u5728 {{timestamp}} \u6211\u8aaa",
                                message_announcement_from_them: "\u5728 {{timestamp}} {{subject}} \u8aaa",
                                missed_call: "\u6f0f\u63a5\u901a\u8a71 \u2013 \u7b49\u5019 {{text}}",
                                next_day: "\u52a0\u8f09\u9694\u5929\u7684\u6642\u9593 {{date}}",
                                previous_day: "\u52a0\u8f09\u524d\u4e00\u5929\u7684\u6642\u9593 {{date}}",
                                schedule_meeting: "\u5b89\u6392\u4e00\u5834 {{text}} \u7684\u6703\u8b70",
                                will_receive_call: "\u60a8\u5c07\u6536\u5230 {{text}} \u7684\u4f86\u96fb"
                            }
                        }
                    }
                },
                IDENTITY_PROVIDER_ENUM: [{
                    value: "NONE",
                    label: "None"
                }, {
                    value: "OKTA_SAML",
                    label: "Okta (SAML 2.0)"
                }, {
                    value: "ONELOGIN_SAML",
                    label: "OneLogin (SAML 2.0)"
                }, {
                    value: "ADFS_SAML",
                    label: "Active Directory Federation Services (SAML 2.0)"
                }, {
                    value: "AZURE_AD_SAML",
                    label: "Azure AD (SAML 2.0)"
                }],
                FREQUENCY_ENUM: [{
                    value: "DAILY",
                    label: "Daily"
                }, {
                    value: "WEEKLY",
                    label: "Weekly"
                }, {
                    value: "MONTHLY",
                    label: "Monthly"
                }],
                GRAPHQL_ERROR_STRINGS: {
                    no_visitor_permission: "User missing permissions to view visitor"
                },
                REPORTING_CUTOFFS: {
                    "session.conversations.available_at_inbound_chat_user_ids": "2020-07-01",
                    "session.conversations.wait_time_before_rep_response": "2020-07-01",
                    "session.conversations.wait_time_expired": "2020-07-01",
                    "session.conversations.widget_showing": "2020-11-28",
                    "session.has_ad_clickthrough": "2021-04-26",
                    "session.linkedin_clickthrough": "2021-04-26",
                    "session.google_clickthrough": "2021-04-26",
                    "session.facebook_clickthrough": "2021-04-26",
                    "session.conversations.call_duration": "2022-07-20",
                    "session.conversations.visitor_initiated_call": "2022-07-20",
                    "session.conversations.reps_who_initiated_call": "2022-07-20",
                    "session.conversations.successful_call_user_ids": "2022-07-20",
                    "session.conversations.successful_call_bot_ids": "2022-07-20",
                    "session.conversations.calendar_event_offers_calendar_event_type_duration": "2024-01-17",
                    "session.conversations.calendar_event_offers_calendar_event_type_id": "2024-01-17"
                },
                POINT_IN_TIME_CUTOFF: "2021-07-01",
                SIGNALS_LIST_VERSION: 1,
                DEFAULT_REMINDER_TITLE: "Reminder: Upcoming meeting with {{calendar_event.rep.name}}",
                DEFAULT_REMINDER_BODY: "We look forward to meeting with you soon! Here\u2019s a quick reminder with your meeting details:\n\n{{calendar_event.starts_at}}\n\nJoin the meeting here:\n{{calendar_event.conference_details}}\n",
                DEFAULT_REMINDER_CADENCE: "1 hour before",
                MIN_ROUTING_WEIGHT: 0,
                MAX_ROUTING_WEIGHT: 200,
                SMART_WEBSITE_USER_AGENTS: {
                    desktop: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/113.0.1774.57",
                    tablet: "Mozilla/5.0 (iPad; CPU OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
                    mobile: "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36"
                },
                CALENDAR_EVENT_TYPE_DURATIONS: {
                    600: {
                        label: "10 minutes"
                    },
                    900: {
                        label: "15 minutes"
                    },
                    1800: {
                        label: "30 minutes"
                    },
                    2700: {
                        label: "45 minutes"
                    },
                    3600: {
                        label: "1 hour"
                    },
                    5400: {
                        label: "1.5 hour"
                    },
                    7200: {
                        label: "2 hours"
                    },
                    10800: {
                        label: "3 hours"
                    },
                    14400: {
                        label: "4 hours"
                    }
                },
                MEETING_OFFER_CHANNELS: {
                    FORM: "Smart Form Experiences",
                    SMART_CTA: "Smart Button Experiences",
                    MANUAL: "Manual Experiences",
                    AUTOMATIC: "Automatic Experiences",
                    MEETING_LINK: "Direct Meeting Links",
                    MEETING_LINK_ROUTED: "Routed Meeting Links",
                    CHAT: "Conversation with Rep"
                },
                MAP_FORM_FIELD_SIZE_LIMIT: 100,
                MAP_FORM_DATA_OBJECT_SIZE_LIMIT: 3072,
                MAP_FORM_FIELD_DENY_LIST: {
                    hubspot: ["hs_context"],
                    marketo: [],
                    pardot: []
                }
            };
            const r = document.querySelectorAll("meta[name^='app-constant-']"),
                s = Array.from(r).reduce(((e, t) => {
                    if (t) {
                        e[t.getAttribute("name").match(/^app-constant-(.*)/)[1].toUpperCase().replace(/-/g, "_")] = JSON.parse(t.getAttribute("content"))
                    }
                    return e
                }), {});
            Object.assign(s, o);
            var l = s;
            class d {
                constructor(e) {
                    this.locale = void 0, this.t = (e, t = {}) => {
                        const n = e.split(".");
                        let {
                            translations: a
                        } = this;
                        for (; n.length && (a = a[n.shift()], void 0 !== a && null !== a););
                        if (void 0 !== a && null !== a) {
                            return Object.keys(t).forEach((e => {
                                const n = new RegExp(`\\{\\{${e}\\}\\}`, "g");
                                a = a.replace(n, t[e])
                            })), a
                        }
                        return ""
                    }, this.locale = e
                }
            }
            class c extends d {
                get translations() {
                    return l.TRANSLATIONS[this.locale]
                }
            }
            const u = i.a.createContext(new c("en")),
                m = () => Object(a.useContext)(u),
                g = ({
                    locale: e,
                    children: t
                }) => {
                    const n = Object(a.useMemo)((() => new c(e)), [e]);
                    return i.a.createElement(u.Provider, {
                        value: n
                    }, t)
                }
        },
        140: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return h
            })), n.d(t, "a", (function() {
                return v
            }));
            var a = n(0),
                i = n.n(a),
                o = n(1);
            const r = e => ({
                    inProgressBackgroundColor: e.inProgressColor,
                    inProgressIconColor: o.c.brightPurple,
                    successBackgroundColor: e.successColor,
                    successIconColor: o.c.green3,
                    warningBackgroundColor: e.warningColor,
                    warningIconColor: o.c.darkOrange,
                    errorBackgroundColor: e.errorColor,
                    errorIconColor: o.c.quartzRed
                }),
                s = e => ({
                    checkboxDotColor: e.primaryColor,
                    checkboxFocusStyle: o.g.defaultQuartzFocusStyle,
                    checkboxBorderColor: e.fieldBorderColor
                }),
                l = e => ({
                    radioDotColor: e.primaryColor,
                    radioFocusStyle: o.g.defaultQuartzFocusStyle,
                    radioBorderColor: e.fieldBorderColor
                });
            var d = n(337);
            const c = {
                primaryColor: o.c.quartzTeal,
                dangerColor: o.c.quartzRed,
                fieldBorderColor: o.c.quartzFieldBorder,
                primaryTextColor: o.c.primaryText,
                secondaryTextColor: o.c.secondaryText,
                linkTextColor: o.c.quartzTeal,
                successColor: o.c.quartzSuccessBackground,
                warningColor: o.c.quartzWarningBackground,
                errorColor: o.c.quartzErrorBackground,
                inProgressColor: o.c.quartzInProgressBackground,
                focusStyle: o.g.defaultQuartzFocusStyle
            };
            var u = n(338);
            const m = (g = e => ({
                components: {
                    Alert: r(e),
                    Checkbox: s(e),
                    Radio: l(e),
                    SplitRadioOption: Object(d.b)(e),
                    LoadingProgress: Object(u.b)(e)
                }
            }), e => ({
                brand: e,
                ...g(e)
            }))(c);
            var g;
            const p = i.a.createContext(m),
                h = () => Object(a.useContext)(p),
                v = ({
                    children: e,
                    value: t
                }) => i.a.createElement(p.Provider, {
                    value: t
                }, e)
        },
        142: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            })), n.d(t, "b", (function() {
                return o
            })), n.d(t, "c", (function() {
                return r
            })), n.d(t, "d", (function() {
                return s
            }));
            var a = n(21);
            const i = {
                    MINIMUM_ICON_CONTRAST_RATIO: 3,
                    MINIMUM_BODY_TEXT_CONTRAST_RATIO: 4.5,
                    MINIMUM_BUTTON_CONTRAST_RATIO: 4.5,
                    MINIMUM_BUTTON_HOVER_CONTRAST_RATIO: 3
                },
                o = 44,
                r = (e, t, n) => Object(a.c)(e, t) > Object(a.c)(e, n) ? t : n,
                s = (e, t, n) => Object(a.c)(e, t) < Object(a.c)(e, n) ? t : n
        },
        144: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return o
            })), n.d(t, "a", (function() {
                return r
            }));
            var a = n(5),
                i = n(1);
            const o = Object(a.a)("div", {
                    target: "e14rh4nj0",
                    label: "ChangeIdentitySection"
                })("width:100%;color:", i.c.primaryText, ";background-color:", i.c.lighterBackground, ";border-bottom:1px solid ", i.c.border, ";font-size:", i.i.size300, ";text-align:center;padding:", i.d.paddingUnits(2), ";border-radius:0.5rem 0.5rem 0 0;"),
                r = Object(a.a)("button", {
                    target: "e14rh4nj1",
                    label: "ChangeIdentityButton"
                })("text-decoration:underline;text-underline-offset:1px;color:", i.c.primaryText, ";")
        },
        145: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return ae
            })), n.d(t, "b", (function() {
                return ue
            }));
            var a = n(3);
            n(15), n(17), n(18), n(357);
            let i, o, r, s, l, d, c, u, m, g, p, h, v, b, E, _, f, O, C, S, y, k, T, A, N, R, D, I, x, M, B, F, w, L, P, U, j, z, V, G, $, H, W, K, q, Y, X, Q, Z, J, ee, te, ne, ae, ie, oe, re, se, le, de, ce, ue, me, ge, pe, he, ve, be, Ee, _e, fe, Oe, Ce, Se, ye, ke, Te, Ae;
            ! function(e) {
                e.Google = "GOOGLE", e.Linkedin = "LINKEDIN"
            }(i || (i = {})),
            function(e) {
                e.Incorrect = "INCORRECT", e.Other = "OTHER", e.Unhelpful = "UNHELPFUL", e.WrongTone = "WRONG_TONE"
            }(o || (o = {})),
            function(e) {
                e.Bad = "BAD", e.Good = "GOOD"
            }(r || (r = {})),
            function(e) {
                e.AutoCorrect = "AUTO_CORRECT", e.AutoExpand = "AUTO_EXPAND", e.AutoRespond = "AUTO_RESPOND", e.AutoSuggest = "AUTO_SUGGEST", e.AutoTranslate = "AUTO_TRANSLATE", e.AutoTune = "AUTO_TUNE", e.FirstAutoPounce = "FIRST_AUTO_POUNCE", e.Playground = "PLAYGROUND", e.SecondAutoPounce = "SECOND_AUTO_POUNCE"
            }(s || (s = {})),
            function(e) {
                e.Casual = "CASUAL", e.Friendly = "FRIENDLY", e.Professional = "PROFESSIONAL"
            }(l || (l = {})),
            function(e) {
                e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Messenger = "MESSENGER", e.Tuning = "TUNING", e.TuningSeed = "TUNING_SEED"
            }(d || (d = {})),
            function(e) {
                e.Dismissed = "DISMISSED", e.Shown = "SHOWN"
            }(c || (c = {})),
            function(e) {
                e.Feature = "FEATURE", e.Maintenance = "MAINTENANCE"
            }(u || (u = {})),
            function(e) {
                e.Google = "GOOGLE", e.Microsoft = "MICROSOFT", e.Password = "PASSWORD", e.PendingInvitation = "PENDING_INVITATION", e.SsoBound = "SSO_BOUND", e.SsoUnbound = "SSO_UNBOUND"
            }(m || (m = {})),
            function(e) {
                e.Action = "ACTION", e.Automatic = "AUTOMATIC", e.Block = "BLOCK", e.Form = "FORM", e.Manual = "MANUAL", e.SmartCta = "SMART_CTA", e.Workflow = "WORKFLOW"
            }(g || (g = {})),
            function(e) {
                e.Friday = "FRIDAY", e.Monday = "MONDAY", e.Saturday = "SATURDAY", e.Sunday = "SUNDAY", e.Thursday = "THURSDAY", e.Tuesday = "TUESDAY", e.Wednesday = "WEDNESDAY"
            }(p || (p = {})),
            function(e) {
                e.Pill = "PILL", e.Rectangle = "RECTANGLE"
            }(h || (h = {})),
            function(e) {
                e.Outline = "OUTLINE", e.Shade = "SHADE", e.Solid = "SOLID"
            }(v || (v = {})),
            function(e) {
                e.Fixed = "FIXED", e.Rolling = "ROLLING"
            }(b || (b = {})),
            function(e) {
                e.SmartRouting = "SMART_ROUTING", e.StrictRoundRobin = "STRICT_ROUND_ROBIN"
            }(E || (E = {})),
            function(e) {
                e.Days = "DAYS", e.Weeks = "WEEKS"
            }(_ || (_ = {})),
            function(e) {
                e.Color = "COLOR", e.Image = "IMAGE"
            }(f || (f = {})),
            function(e) {
                e.PushDown = "PUSH_DOWN", e.SlideUp = "SLIDE_UP"
            }(O || (O = {})),
            function(e) {
                e.Aborted = "ABORTED", e.Completed = "COMPLETED", e.Enqueued = "ENQUEUED", e.Processing = "PROCESSING", e.Skipped = "SKIPPED"
            }(C || (C = {})),
            function(e) {
                e.Pdf = "PDF"
            }(S || (S = {})),
            function(e) {
                e.File = "FILE", e.Text = "TEXT", e.Url = "URL", e.UrlPrefix = "URL_PREFIX"
            }(y || (y = {})),
            function(e) {
                e.HeadlineBodyButton = "HEADLINE_BODY_BUTTON", e.HeadlineButton = "HEADLINE_BUTTON", e.HeadlineForm = "HEADLINE_FORM", e.HeadlineLink = "HEADLINE_LINK"
            }(k || (k = {})),
            function(e) {
                e.IgnoredDismissed = "IGNORED_DISMISSED", e.IgnoredNoResponseNeeded = "IGNORED_NO_RESPONSE_NEEDED", e.IgnoredSpam = "IGNORED_SPAM"
            }(T || (T = {})),
            function(e) {
                e.Chat = "CHAT", e.Element = "ELEMENT", e.MeetingLink = "MEETING_LINK", e.MeetingLinkRouted = "MEETING_LINK_ROUTED"
            }(A || (A = {})),
            function(e) {
                e.All = "ALL", e.BotConversation = "BOT_CONVERSATION", e.FormFill = "FORM_FILL", e.Meeting = "MEETING", e.RepConversation = "REP_CONVERSATION"
            }(N || (N = {})),
            function(e) {
                e.Button = "BUTTON", e.Form = "FORM", e.Link = "LINK"
            }(R || (R = {})),
            function(e) {
                e.AutoPounceAttempts = "AUTO_POUNCE_ATTEMPTS", e.AutoPounceAvgRepResponseTime = "AUTO_POUNCE_AVG_REP_RESPONSE_TIME", e.AutoPounceDeflections = "AUTO_POUNCE_DEFLECTIONS", e.AutoPounceEngagedConversation = "AUTO_POUNCE_ENGAGED_CONVERSATION", e.AutoPounceMissedConnections = "AUTO_POUNCE_MISSED_CONNECTIONS", e.AverageRepAvailableHours = "AVERAGE_REP_AVAILABLE_HOURS", e.AvgRepResponseTime = "AVG_REP_RESPONSE_TIME", e.CallsFromExperience = "CALLS_FROM_EXPERIENCE", e.CallsFromInboundChat = "CALLS_FROM_INBOUND_CHAT", e.CallsFromPounce = "CALLS_FROM_POUNCE", e.CallsFromRep = "CALLS_FROM_REP", e.CallsTotal = "CALLS_TOTAL", e.EloquaContactEngagement = "ELOQUA_CONTACT_ENGAGEMENT", e.EloquaContactEngagementConversations = "ELOQUA_CONTACT_ENGAGEMENT_CONVERSATIONS", e.EloquaContactEngagementExperiences = "ELOQUA_CONTACT_ENGAGEMENT_EXPERIENCES", e.EloquaContactSessions = "ELOQUA_CONTACT_SESSIONS", e.EngagementConversations = "ENGAGEMENT_CONVERSATIONS", e.EngagementExperiences = "ENGAGEMENT_EXPERIENCES", e.EngagementExperiencesOrConversations = "ENGAGEMENT_EXPERIENCES_OR_CONVERSATIONS", e.HubspotContactEngagement = "HUBSPOT_CONTACT_ENGAGEMENT", e.HubspotContactEngagementConversations = "HUBSPOT_CONTACT_ENGAGEMENT_CONVERSATIONS", e.HubspotContactEngagementExperiences = "HUBSPOT_CONTACT_ENGAGEMENT_EXPERIENCES", e.HubspotContactSessions = "HUBSPOT_CONTACT_SESSIONS", e.InboundChatRepsAvailable = "INBOUND_CHAT_REPS_AVAILABLE", e.InboundChatRepsUnavailable = "INBOUND_CHAT_REPS_UNAVAILABLE", e.InboundChatRepJoinedNoConversation = "INBOUND_CHAT_REP_JOINED_NO_CONVERSATION", e.InboundChatRepNotStartConvo = "INBOUND_CHAT_REP_NOT_START_CONVO", e.InboundChatRepStartedConversation = "INBOUND_CHAT_REP_STARTED_CONVERSATION", e.InboundChatRepStartedConversationInTime = "INBOUND_CHAT_REP_STARTED_CONVERSATION_IN_TIME", e.InboundChatRepStartedConversationLate = "INBOUND_CHAT_REP_STARTED_CONVERSATION_LATE", e.InboundChatVisitorEngagedConversation = "INBOUND_CHAT_VISITOR_ENGAGED_CONVERSATION", e.InboundChatWaitTimeExpired = "INBOUND_CHAT_WAIT_TIME_EXPIRED", e.LeadsAndProspectsCreated = "LEADS_AND_PROSPECTS_CREATED", e.LeadCaptureEloqua = "LEAD_CAPTURE_ELOQUA", e.LeadCaptureEloquaByExperience = "LEAD_CAPTURE_ELOQUA_BY_EXPERIENCE", e.LeadCaptureEloquaByRep = "LEAD_CAPTURE_ELOQUA_BY_REP", e.LeadCaptureEloquaByRepAfterInboundChat = "LEAD_CAPTURE_ELOQUA_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureEloquaByRepAfterPounce = "LEAD_CAPTURE_ELOQUA_BY_REP_AFTER_POUNCE", e.LeadCaptureHubspot = "LEAD_CAPTURE_HUBSPOT", e.LeadCaptureHubspotByExperience = "LEAD_CAPTURE_HUBSPOT_BY_EXPERIENCE", e.LeadCaptureHubspotByRep = "LEAD_CAPTURE_HUBSPOT_BY_REP", e.LeadCaptureHubspotByRepAfterInboundChat = "LEAD_CAPTURE_HUBSPOT_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureHubspotByRepAfterPounce = "LEAD_CAPTURE_HUBSPOT_BY_REP_AFTER_POUNCE", e.LeadCaptureMarketo = "LEAD_CAPTURE_MARKETO", e.LeadCaptureMarketoByExperience = "LEAD_CAPTURE_MARKETO_BY_EXPERIENCE", e.LeadCaptureMarketoByRep = "LEAD_CAPTURE_MARKETO_BY_REP", e.LeadCaptureMarketoByRepAfterInboundChat = "LEAD_CAPTURE_MARKETO_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureMarketoByRepAfterPounce = "LEAD_CAPTURE_MARKETO_BY_REP_AFTER_POUNCE", e.LeadCapturePardot = "LEAD_CAPTURE_PARDOT", e.LeadCapturePardotByExperience = "LEAD_CAPTURE_PARDOT_BY_EXPERIENCE", e.LeadCapturePardotByRep = "LEAD_CAPTURE_PARDOT_BY_REP", e.LeadCapturePardotByRepAfterInboundChat = "LEAD_CAPTURE_PARDOT_BY_REP_AFTER_INBOUND_CHAT", e.LeadCapturePardotByRepAfterPounce = "LEAD_CAPTURE_PARDOT_BY_REP_AFTER_POUNCE", e.LeadCaptureSalesforce = "LEAD_CAPTURE_SALESFORCE", e.LeadCaptureSalesforceByExperience = "LEAD_CAPTURE_SALESFORCE_BY_EXPERIENCE", e.LeadCaptureSalesforceByRep = "LEAD_CAPTURE_SALESFORCE_BY_REP", e.LeadCaptureSalesforceByRepAfterInboundChat = "LEAD_CAPTURE_SALESFORCE_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureSalesforceByRepAfterPounce = "LEAD_CAPTURE_SALESFORCE_BY_REP_AFTER_POUNCE", e.MarketoLeadEngagement = "MARKETO_LEAD_ENGAGEMENT", e.MarketoLeadEngagementConversations = "MARKETO_LEAD_ENGAGEMENT_CONVERSATIONS", e.MarketoLeadEngagementExperiences = "MARKETO_LEAD_ENGAGEMENT_EXPERIENCES", e.MarketoLeadSessions = "MARKETO_LEAD_SESSIONS", e.MeetingsBookedAfterAutoPounce = "MEETINGS_BOOKED_AFTER_AUTO_POUNCE", e.MeetingsBookedAfterInboundChat = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT", e.MeetingsBookedAfterInboundChatGotCanceled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_GOT_CANCELED", e.MeetingsBookedAfterInboundChatGotRescheduled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_GOT_RESCHEDULED", e.MeetingsBookedAfterInboundChatUnanswered = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsBookedAfterInboundChatUnansweredGotCanceled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED_GOT_CANCELED", e.MeetingsBookedAfterInboundChatUnansweredGotRescheduled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED_GOT_RESCHEDULED", e.MeetingsBookedAfterPouncing = "MEETINGS_BOOKED_AFTER_POUNCING", e.MeetingsBookedAfterPouncingGotCanceled = "MEETINGS_BOOKED_AFTER_POUNCING_GOT_CANCELED", e.MeetingsBookedAfterPouncingGotRescheduled = "MEETINGS_BOOKED_AFTER_POUNCING_GOT_RESCHEDULED", e.MeetingsBookedByBotWithoutInboundChat = "MEETINGS_BOOKED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsBookedByExperience = "MEETINGS_BOOKED_BY_EXPERIENCE", e.MeetingsBookedByExperienceGotCanceled = "MEETINGS_BOOKED_BY_EXPERIENCE_GOT_CANCELED", e.MeetingsBookedByExperienceGotRescheduled = "MEETINGS_BOOKED_BY_EXPERIENCE_GOT_RESCHEDULED", e.MeetingsBookedByRep = "MEETINGS_BOOKED_BY_REP", e.MeetingsBookedByRepGotCanceled = "MEETINGS_BOOKED_BY_REP_GOT_CANCELED", e.MeetingsBookedByRepGotRescheduled = "MEETINGS_BOOKED_BY_REP_GOT_RESCHEDULED", e.MeetingsBookedForRep = "MEETINGS_BOOKED_FOR_REP", e.MeetingsBookedGotCanceledTotal = "MEETINGS_BOOKED_GOT_CANCELED_TOTAL", e.MeetingsBookedGotRescheduledTotal = "MEETINGS_BOOKED_GOT_RESCHEDULED_TOTAL", e.MeetingsBookedTotal = "MEETINGS_BOOKED_TOTAL", e.MeetingsNotBookedByBotAfterInboundChatUnanswered = "MEETINGS_NOT_BOOKED_BY_BOT_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsNotBookedByBotWithoutInboundChat = "MEETINGS_NOT_BOOKED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsOfferedAfterInboundChat = "MEETINGS_OFFERED_AFTER_INBOUND_CHAT", e.MeetingsOfferedAfterInboundChatUnanswered = "MEETINGS_OFFERED_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsOfferedAfterPouncing = "MEETINGS_OFFERED_AFTER_POUNCING", e.MeetingsOfferedByBotNotBooked = "MEETINGS_OFFERED_BY_BOT_NOT_BOOKED", e.MeetingsOfferedByBotWithoutInboundChat = "MEETINGS_OFFERED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsOfferedByExperience = "MEETINGS_OFFERED_BY_EXPERIENCE", e.MeetingsOfferedByRep = "MEETINGS_OFFERED_BY_REP", e.MeetingsOfferedByRepAfterInboundChatNotBooked = "MEETINGS_OFFERED_BY_REP_AFTER_INBOUND_CHAT_NOT_BOOKED", e.MeetingsOfferedByRepAfterPouncingNotBooked = "MEETINGS_OFFERED_BY_REP_AFTER_POUNCING_NOT_BOOKED", e.MeetingsOfferedByRepNotBooked = "MEETINGS_OFFERED_BY_REP_NOT_BOOKED", e.MeetingsOfferedNotBooked = "MEETINGS_OFFERED_NOT_BOOKED", e.MeetingsOfferedTotal = "MEETINGS_OFFERED_TOTAL", e.MeetingCancelledByChannel = "MEETING_CANCELLED_BY_CHANNEL", e.MeetingLeadCaptureEloquaByChannel = "MEETING_LEAD_CAPTURE_ELOQUA_BY_CHANNEL", e.MeetingLeadCaptureHubspotByChannel = "MEETING_LEAD_CAPTURE_HUBSPOT_BY_CHANNEL", e.MeetingLeadCaptureMarketoByChannel = "MEETING_LEAD_CAPTURE_MARKETO_BY_CHANNEL", e.MeetingLeadCapturePardotByChannel = "MEETING_LEAD_CAPTURE_PARDOT_BY_CHANNEL", e.MeetingLeadCaptureSalesforceByChannel = "MEETING_LEAD_CAPTURE_SALESFORCE_BY_CHANNEL", e.MeetingOfferedByChannel = "MEETING_OFFERED_BY_CHANNEL", e.MeetingPickedByChannel = "MEETING_PICKED_BY_CHANNEL", e.MeetingRescheduledByChannel = "MEETING_RESCHEDULED_BY_CHANNEL", e.OpensAfterPounce = "OPENS_AFTER_POUNCE", e.OpensBeforePounce = "OPENS_BEFORE_POUNCE", e.PardotProspectEngagement = "PARDOT_PROSPECT_ENGAGEMENT", e.PardotProspectEngagementConversations = "PARDOT_PROSPECT_ENGAGEMENT_CONVERSATIONS", e.PardotProspectEngagementExperiences = "PARDOT_PROSPECT_ENGAGEMENT_EXPERIENCES", e.PardotProspectSessions = "PARDOT_PROSPECT_SESSIONS", e.PounceAttempts = "POUNCE_ATTEMPTS", e.PounceEngagedConversation = "POUNCE_ENGAGED_CONVERSATION", e.PounceRoutings = "POUNCE_ROUTINGS", e.RepAvailability = "REP_AVAILABILITY", e.RepCallAttempts = "REP_CALL_ATTEMPTS", e.SalesforceAccountEngagement = "SALESFORCE_ACCOUNT_ENGAGEMENT", e.SalesforceAccountEngagementConversations = "SALESFORCE_ACCOUNT_ENGAGEMENT_CONVERSATIONS", e.SalesforceAccountEngagementExperiences = "SALESFORCE_ACCOUNT_ENGAGEMENT_EXPERIENCES", e.SalesforceAccountSessions = "SALESFORCE_ACCOUNT_SESSIONS", e.SalesforceContactEngagement = "SALESFORCE_CONTACT_ENGAGEMENT", e.SalesforceContactEngagementConversations = "SALESFORCE_CONTACT_ENGAGEMENT_CONVERSATIONS", e.SalesforceContactEngagementExperiences = "SALESFORCE_CONTACT_ENGAGEMENT_EXPERIENCES", e.SalesforceContactSessions = "SALESFORCE_CONTACT_SESSIONS", e.SalesforceLeadEngagement = "SALESFORCE_LEAD_ENGAGEMENT", e.SalesforceLeadEngagementConversations = "SALESFORCE_LEAD_ENGAGEMENT_CONVERSATIONS", e.SalesforceLeadEngagementExperiences = "SALESFORCE_LEAD_ENGAGEMENT_EXPERIENCES", e.SalesforceLeadSessions = "SALESFORCE_LEAD_SESSIONS", e.SessionExperience = "SESSION_EXPERIENCE", e.SessionExperienceNotShown = "SESSION_EXPERIENCE_NOT_SHOWN", e.SessionExperienceShown = "SESSION_EXPERIENCE_SHOWN", e.SessionExperienceTriggered = "SESSION_EXPERIENCE_TRIGGERED", e.SessionInboundChat = "SESSION_INBOUND_CHAT", e.SessionTotal = "SESSION_TOTAL", e.SessionWidgetNotShowing = "SESSION_WIDGET_NOT_SHOWING", e.SessionWidgetShowing = "SESSION_WIDGET_SHOWING", e.SmartCtaExperienceShown = "SMART_CTA_EXPERIENCE_SHOWN", e.SmartCtaExperienceTriggered = "SMART_CTA_EXPERIENCE_TRIGGERED", e.SmartCtaMeetingsBooked = "SMART_CTA_MEETINGS_BOOKED", e.SmartCtaMeetingsOffered = "SMART_CTA_MEETINGS_OFFERED", e.SmartFormExperienceShown = "SMART_FORM_EXPERIENCE_SHOWN", e.SmartFormExperienceTriggered = "SMART_FORM_EXPERIENCE_TRIGGERED", e.SmartFormMeetingsBooked = "SMART_FORM_MEETINGS_BOOKED", e.SmartFormMeetingsOffered = "SMART_FORM_MEETINGS_OFFERED", e.SuccessfulCallsFromExperience = "SUCCESSFUL_CALLS_FROM_EXPERIENCE", e.SuccessfulCallsFromInboundChat = "SUCCESSFUL_CALLS_FROM_INBOUND_CHAT", e.SuccessfulCallsFromPounce = "SUCCESSFUL_CALLS_FROM_POUNCE", e.SuccessfulCallsFromRep = "SUCCESSFUL_CALLS_FROM_REP", e.SuccessfulCallsTotal = "SUCCESSFUL_CALLS_TOTAL", e.TotalRepAvailableHours = "TOTAL_REP_AVAILABLE_HOURS", e.UserAvailabilityTimeline = "USER_AVAILABILITY_TIMELINE", e.VisitorCallAttempts = "VISITOR_CALL_ATTEMPTS"
            }(D || (D = {})),
            function(e) {
                e.AutoPounceConversionRate = "AUTO_POUNCE_CONVERSION_RATE", e.Engagement = "ENGAGEMENT", e.InboundChatHealth = "INBOUND_CHAT_HEALTH", e.PounceConversationRate = "POUNCE_CONVERSATION_RATE", e.SmartButtonHealth = "SMART_BUTTON_HEALTH", e.SmartFormHealth = "SMART_FORM_HEALTH"
            }(I || (I = {})),
            function(e) {
                e.Bar = "BAR", e.Funnel = "FUNNEL", e.Heatmap = "HEATMAP", e.Leaderboard = "LEADERBOARD", e.Line = "LINE", e.Numeric = "NUMERIC", e.UserAvailabilityTimeline = "USER_AVAILABILITY_TIMELINE"
            }(x || (x = {})),
            function(e) {
                e.Hidden = "HIDDEN", e.Parent = "PARENT", e.Top = "TOP"
            }(M || (M = {})),
            function(e) {
                e.Daily = "DAILY", e.Monthly = "MONTHLY", e.Weekly = "WEEKLY"
            }(B || (B = {})),
            function(e) {
                e.Full = "FULL", e.Half = "HALF", e.Quarter = "QUARTER", e.Third = "THIRD"
            }(F || (F = {})),
            function(e) {
                e.Eloqua = "ELOQUA", e.Hubspot = "HUBSPOT", e.Marketo = "MARKETO", e.Pardot = "PARDOT", e.Salesforce = "SALESFORCE"
            }(w || (w = {})),
            function(e) {
                e.Desktop = "DESKTOP", e.Mobile = "MOBILE", e.Tablet = "TABLET"
            }(L || (L = {})),
            function(e) {
                e.Failed = "FAILED", e.Finished = "FINISHED", e.InProgress = "IN_PROGRESS", e.Queued = "QUEUED"
            }(P || (P = {})),
            function(e) {
                e.Completed = "COMPLETED", e.Created = "CREATED", e.Failed = "FAILED"
            }(U || (U = {})),
            function(e) {
                e.Report = "REPORT", e.SignalsList = "SIGNALS_LIST"
            }(j || (j = {})),
            function(e) {
                e.MarketoProgram = "MARKETO_PROGRAM", e.MarketoSmart = "MARKETO_SMART", e.MarketoStatic = "MARKETO_STATIC"
            }(z || (z = {})),
            function(e) {
                e.Outreach = "OUTREACH", e.Salesloft = "SALESLOFT"
            }(V || (V = {})),
            function(e) {
                e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.EloquaVisitor = "ELOQUA_VISITOR", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.OutreachProspect = "OUTREACH_PROSPECT", e.PardotProspect = "PARDOT_PROSPECT", e.PardotVisitor = "PARDOT_VISITOR", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceAccountTeamMember = "SALESFORCE_ACCOUNT_TEAM_MEMBER", e.SalesforceCampaignMember = "SALESFORCE_CAMPAIGN_MEMBER", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceEvent = "SALESFORCE_EVENT", e.SalesforceGenericEntity = "SALESFORCE_GENERIC_ENTITY", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesforceOpportunity = "SALESFORCE_OPPORTUNITY", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
            }(G || (G = {})),
            function(e) {
                e.Daily = "DAILY", e.Monthly = "MONTHLY", e.Weekly = "WEEKLY"
            }($ || ($ = {})),
            function(e) {
                e.Framed = "FRAMED", e.Full = "FULL"
            }(H || (H = {})),
            function(e) {
                e.Faces = "FACES", e.Image = "IMAGE", e.Logo = "LOGO", e.None = "NONE"
            }(W || (W = {})),
            function(e) {
                e.Color = "COLOR", e.Image = "IMAGE"
            }(K || (K = {})),
            function(e) {
                e.AdfsSaml = "ADFS_SAML", e.AzureAdSaml = "AZURE_AD_SAML", e.None = "NONE", e.OktaSaml = "OKTA_SAML", e.OneloginSaml = "ONELOGIN_SAML"
            }(q || (q = {})),
            function(e) {
                e.Circle = "CIRCLE", e.Square = "SQUARE"
            }(Y || (Y = {})),
            function(e) {
                e.Icon = "ICON", e.Image = "IMAGE"
            }(X || (X = {})),
            function(e) {
                e.Chat = "CHAT", e.DoubleChat = "DOUBLE_CHAT", e.Messenger = "MESSENGER", e.Phone = "PHONE", e.Question = "QUESTION"
            }(Q || (Q = {})),
            function(e) {
                e.Embed = "EMBED", e.Footer = "FOOTER", e.Header = "HEADER", e.Popup = "POPUP", e.Sidebar = "SIDEBAR"
            }(Z || (Z = {})),
            function(e) {
                e.Facebook = "FACEBOOK", e.Google = "GOOGLE", e.Linkedin = "LINKEDIN", e.Unknown = "UNKNOWN"
            }(J || (J = {})),
            function(e) {
                e.Personal = "PERSONAL", e.Routed = "ROUTED"
            }(ee || (ee = {})),
            function(e) {
                e.Automatic = "AUTOMATIC", e.Chat = "CHAT", e.Form = "FORM", e.Manual = "MANUAL", e.MeetingLink = "MEETING_LINK", e.MeetingLinkRouted = "MEETING_LINK_ROUTED", e.SmartCta = "SMART_CTA"
            }(te || (te = {})),
            function(e) {
                e.Autopounce = "AUTOPOUNCE", e.Corrected = "CORRECTED", e.Expanded = "EXPANDED", e.Playground = "PLAYGROUND", e.Submit = "SUBMIT", e.Suggested = "SUGGESTED", e.Transform = "TRANSFORM", e.Translated = "TRANSLATED", e.Tuned = "TUNED"
            }(ne || (ne = {})),
            function(e) {
                e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Standard = "STANDARD"
            }(ae || (ae = {})),
            function(e) {
                e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Messenger = "MESSENGER", e.Playground = "PLAYGROUND"
            }(ie || (ie = {})),
            function(e) {
                e.Casual = "CASUAL", e.Friendly = "FRIENDLY", e.Professional = "PROFESSIONAL"
            }(oe || (oe = {})),
            function(e) {
                e.AutoCorrect = "AUTO_CORRECT", e.AutoExpand = "AUTO_EXPAND", e.AutoSuggest = "AUTO_SUGGEST", e.AutoTranslate = "AUTO_TRANSLATE", e.AutoTune = "AUTO_TUNE", e.FirstAutoPounce = "FIRST_AUTO_POUNCE", e.Playground = "PLAYGROUND"
            }(re || (re = {})),
            function(e) {
                e.LeadsConverted = "LEADS_CONVERTED", e.LeadsCreated = "LEADS_CREATED", e.LeadsIdentified = "LEADS_IDENTIFIED"
            }(se || (se = {})),
            function(e) {
                e.Pipeline = "PIPELINE", e.Revenue = "REVENUE"
            }(le || (le = {})),
            function(e) {
                e.Account = "ACCOUNT", e.OpportunityContactRole = "OPPORTUNITY_CONTACT_ROLE"
            }(de || (de = {})),
            function(e) {
                e.Golden = "GOLDEN", e.Ignore = "IGNORE"
            }(ce || (ce = {})),
            function(e) {
                e.BackupFromPounce = "BACKUP_FROM_POUNCE", e.BackupFromRepAvailability = "BACKUP_FROM_REP_AVAILABILITY", e.RoutingDestination = "ROUTING_DESTINATION"
            }(ue || (ue = {})),
            function(e) {
                e.Active = "ACTIVE", e.Inactive = "INACTIVE", e.Invited = "INVITED", e.NotInvited = "NOT_INVITED"
            }(me || (me = {})),
            function(e) {
                e.Company = "COMPANY", e.Visitor = "VISITOR"
            }(ge || (ge = {})),
            function(e) {
                e.Active = "ACTIVE", e.Archived = "ARCHIVED", e.Dead = "DEAD", e.Idle = "IDLE"
            }(pe || (pe = {})),
            function(e) {
                e.BotConversation = "BOT_CONVERSATION", e.EngagedRep = "ENGAGED_REP", e.Outreach = "OUTREACH", e.RepConversation = "REP_CONVERSATION", e.Salesloft = "SALESLOFT", e.TopContent = "TOP_CONTENT", e.Visitor = "VISITOR"
            }(he || (he = {})),
            function(e) {
                e.BotConversation = "BOT_CONVERSATION", e.CalendarEvent = "CALENDAR_EVENT", e.FacebookAd = "FACEBOOK_AD", e.G2Clickthrough = "G2_CLICKTHROUGH", e.GoldenPage = "GOLDEN_PAGE", e.GoogleAd = "GOOGLE_AD", e.LinkedinAd = "LINKEDIN_AD", e.Marketing = "MARKETING", e.Outreach = "OUTREACH", e.RepAndBotConversation = "REP_AND_BOT_CONVERSATION", e.RepConversation = "REP_CONVERSATION", e.Salesloft = "SALESLOFT", e.VoiceChat = "VOICE_CHAT"
            }(ve || (ve = {})),
            function(e) {
                e.NonSfdc = "NON_SFDC", e.Sfdc = "SFDC"
            }(be || (be = {})),
            function(e) {
                e.DateRange = "DATE_RANGE"
            }(Ee || (Ee = {})),
            function(e) {
                e.MultipleDomains = "MULTIPLE_DOMAINS", e.MultiplePages = "MULTIPLE_PAGES"
            }(_e || (_e = {})),
            function(e) {
                e.AfterPageLoad = "AFTER_PAGE_LOAD"
            }(fe || (fe = {})),
            function(e) {
                e.High = "HIGH", e.Low = "LOW", e.Medium = "MEDIUM"
            }(Oe || (Oe = {})),
            function(e) {
                e.BotEdit = "BOT_EDIT", e.BotPublish = "BOT_PUBLISH", e.BotView = "BOT_VIEW", e.EditAllTeamSettings = "EDIT_ALL_TEAM_SETTINGS", e.EditAnalytics = "EDIT_ANALYTICS", e.EditAutoPounce = "EDIT_AUTO_POUNCE", e.EditBusinessHours = "EDIT_BUSINESS_HOURS", e.EditClearbit = "EDIT_CLEARBIT", e.EditDemandbase = "EDIT_DEMANDBASE", e.EditEloqua = "EDIT_ELOQUA", e.EditExperiences = "EDIT_EXPERIENCES", e.EditFacebook = "EDIT_FACEBOOK", e.EditGoogle = "EDIT_GOOGLE", e.EditGroups = "EDIT_GROUPS", e.EditHubspot = "EDIT_HUBSPOT", e.EditLinkedin = "EDIT_LINKEDIN", e.EditLiveStreams = "EDIT_LIVE_STREAMS", e.EditMacros = "EDIT_MACROS", e.EditMarketo = "EDIT_MARKETO", e.EditMeetingRouting = "EDIT_MEETING_ROUTING", e.EditMeetingTypes = "EDIT_MEETING_TYPES", e.EditMessenger = "EDIT_MESSENGER", e.EditMicrosoft = "EDIT_MICROSOFT", e.EditOutreach = "EDIT_OUTREACH", e.EditPardot = "EDIT_PARDOT", e.EditRouting = "EDIT_ROUTING", e.EditSalesforce = "EDIT_SALESFORCE", e.EditSalesloft = "EDIT_SALESLOFT", e.EditSegments = "EDIT_SEGMENTS", e.EditSixsense = "EDIT_SIXSENSE", e.EditSlack = "EDIT_SLACK", e.EditSso = "EDIT_SSO", e.EditTeammates = "EDIT_TEAMMATES", e.EditTeamCalendar = "EDIT_TEAM_CALENDAR", e.EditVsiitorFields = "EDIT_VSIITOR_FIELDS", e.EditZoominfo = "EDIT_ZOOMINFO", e.ExportReports = "EXPORT_REPORTS", e.ViewAllStatistics = "VIEW_ALL_STATISTICS", e.ViewAllVisitors = "VIEW_ALL_VISITORS"
            }(Ce || (Ce = {})),
            function(e) {
                e.Api = "API", e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Deleted = "DELETED", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.Experience = "EXPERIENCE", e.Form = "FORM", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.None = "NONE", e.OutreachProspect = "OUTREACH_PROSPECT", e.Param = "PARAM", e.PardotProspect = "PARDOT_PROSPECT", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.System = "SYSTEM", e.User = "USER", e.Visitor = "VISITOR", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
            }(Se || (Se = {})),
            function(e) {
                e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.EloquaVisitor = "ELOQUA_VISITOR", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.OutreachProspect = "OUTREACH_PROSPECT", e.PardotProspect = "PARDOT_PROSPECT", e.PardotVisitor = "PARDOT_VISITOR", e.QualifiedDemographic = "QUALIFIED_DEMOGRAPHIC", e.QualifiedGeneral = "QUALIFIED_GENERAL", e.QualifiedVisitorFields = "QUALIFIED_VISITOR_FIELDS", e.QualifiedVisitData = "QUALIFIED_VISIT_DATA", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceAccountTeamMember = "SALESFORCE_ACCOUNT_TEAM_MEMBER", e.SalesforceCampaignMember = "SALESFORCE_CAMPAIGN_MEMBER", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceEvent = "SALESFORCE_EVENT", e.SalesforceGenericEntity = "SALESFORCE_GENERIC_ENTITY", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesforceOpportunity = "SALESFORCE_OPPORTUNITY", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
            }(ye || (ye = {})),
            function(e) {
                e.CalendarEvent = "CALENDAR_EVENT", e.CalendarEventType = "CALENDAR_EVENT_TYPE", e.CalendarEventUser = "CALENDAR_EVENT_USER"
            }(ke || (ke = {})),
            function(e) {
                e.AfterExperienceEnds = "AFTER_EXPERIENCE_ENDS", e.AfterLeadCaptured = "AFTER_LEAD_CAPTURED", e.Immediately = "IMMEDIATELY"
            }(Te || (Te = {})),
            function(e) {
                e.HasAutopilotConversation = "HAS_AUTOPILOT_CONVERSATION", e.HasAutoPounceReply = "HAS_AUTO_POUNCE_REPLY", e.HasAutoPounceSent = "HAS_AUTO_POUNCE_SENT", e.HasCalendarEventOffer = "HAS_CALENDAR_EVENT_OFFER", e.HasCalendarEventOfferBooked = "HAS_CALENDAR_EVENT_OFFER_BOOKED", e.HasCalendarEventOfferNotBooked = "HAS_CALENDAR_EVENT_OFFER_NOT_BOOKED", e.HasEmailCaptured = "HAS_EMAIL_CAPTURED", e.HasEngaged = "HAS_ENGAGED", e.HasEngagedWithBot = "HAS_ENGAGED_WITH_BOT", e.HasEngagedWithRep = "HAS_ENGAGED_WITH_REP", e.HasInboundRouting = "HAS_INBOUND_ROUTING", e.HasRepPounce = "HAS_REP_POUNCE", e.WaitTimeExpired = "WAIT_TIME_EXPIRED"
            }(Ae || (Ae = {}));
            const Ne = a.a `
  fragment ExternalObject on ExternalObject {
    id
    apiName
    label
  }
`,
                Re = (a.a `
  fragment SalesforceField on SalesforceField {
    name
    label
    type
    required
    isName
    picklistValues {
      value
      label
    }
    restrictedPicklist
    externalFieldId
    externalFieldSource
    externalFieldControllerName
    isDisabled
    isStateCode
    isCountryCode
  }
`, a.a `
  fragment Prompt on PromptMessage {
    heading
    body
    ctaChat
    ctaVoice
    avatarUrls
  }
`, a.a `
  fragment Greeting on GreetingMessage {
    style
    heading
    body
    fieldType
    fieldValues {
      label
      value
    }
    avatarUrls
    layout
  }
`, a.a `
  fragment TeamCalendarEventType on CalendarEventType {
    id
    name
    duration
    eventTitle
  }
`),
                De = (a.a `
  fragment CalendarEventType on CalendarEventType {
    __typename
    id
    clientId @client
    name
    duration
    sendReminder
    eventTitle
    eventBody
    enableMeetingLink
    enableMeetingLinkRouted
    meetingLinkDescription
  }
`, a.a `
  fragment CalendarEventReminder on CalendarEventReminder {
    id
    cadence
    title
    body
  }
`),
                Ie = a.a `
  fragment ExternalObjectAction on ExternalObjectAction {
    id
    type
    method
    externalObjectName
    ... on PardotProspectExternalObjectAction {
      sourceCampaignId
    }
  }
`,
                xe = a.a `
  fragment ExternalObjectActionDetail on ExternalObjectAction {
    ...ExternalObjectAction
    externalObjectFields {
      id
      externalFieldName
      value
      fieldId
      required
      type
      externalFieldId
      overwrite
    }
  }
  ${Ie}
`,
                Me = (a.a `
  fragment SalesforceCampaignExternalObjectActionDetail on ExternalObjectAction {
    ...ExternalObjectActionDetail
    ... on SalesforceCampaignMemberExternalObjectAction {
      campaignId
      campaignName
    }
  }
  ${xe}
`, a.a `
  fragment Group on Group {
    id
    clientId @client
    name
    members {
      id
    }
  }
`, a.a `
  fragment CompanyExternalIdentifier on CompanyExternalIdentifier {
    source
    value
  }
`),
                Be = a.a `
  fragment Routing on Routing {
    id
    alertSound
    reason
    createdAt
    waiting
    startWaitForRepAt
    waitForRepSeconds
    active
    userIds
    rerouted
  }
`,
                Fe = a.a `
  fragment FieldValue on FieldValue {
    value
    source
    fieldId
    picklistOptionId
  }
`,
                we = a.a `
  fragment Visitor on Visitor {
    id
    ownerId
    uuid
    createdAt
    updatedAt
    userReadMessageId
    listGroupingId
    appexchange
    lastInboundVideoMeeting {
      id
      startedAt
      endedAt
    }
    lastOutboundVideoMeeting {
      id
      startedAt
      endedAt
    }
    activeOrLastConversation {
      id
      endedAt
      routings {
        ...Routing
      }
      bot {
        id
        name
        loadingDraftScript
      }
      user {
        id
        available
        snoozeEndsAt
        hasMobile
      }
      userRepliedToAutoPounce
      isAutoPounce
      visitorRepliedToAutoPounce
      visitorFirstAutoPounceReplyAt
      autoPounceRepResponseTimeLimitSeconds
    }
    fieldValues {
      ...FieldValue
    }
    listName
    blocked
    simulated
  }
  ${Be}
  ${Fe}
`,
                Le = a.a `
  fragment PageInfo on PageInfo {
    startCursor
    endCursor
    hasNextPage
    hasPreviousPage
  }
`,
                Pe = a.a `
  fragment ExternalMailing on ExternalMailing {
    id
    type
    prospectEmail
    userEmail
    userName
    sequenceName
    sequenceState
    subject
    body
  }
`,
                Ue = a.a `
  fragment AdData on AdData {
    __typename
    ... on LinkedInPost {
      iframeUrl
    }
    ... on GoogleDisplayAd {
      optionalDisplayedMarketingImage {
        height
        width
        url
        logo
      }
      optionalDisplayedLogoImage {
        height
        width
        url
        logo
      }
      optionalDisplayedVideo {
        youtubeId
        youtubeTitle
      }
    }
    ... on GoogleSearchAd {
      optionalDisplayedHeadline
      optionalDisplayedDescription
      optionalDisplayedTerm
    }
    ... on GoogleTextAd {
      displayedHeadline
      displayedDescription
      optionalDisplayedTerm
    }
    ... on GoogleVideoAd {
      displayedVideo {
        youtubeId
        youtubeTitle
      }
    }
    ... on MarketingData {
      type
      referrer
      campaign
      source
      medium
      term
    }
  }
`,
                je = a.a `
  fragment PageView on PageView {
    id
    sessionId
    url
    thumbnailUrl
    timeElapsed
    createdAt
    widgetId
    externalMailing {
      ...ExternalMailing
    }
    adData {
      ...AdData
    }
    g2Clickthrough
  }
  ${Pe}
  ${Ue}
`,
                ze = a.a `
  fragment Session on Session {
    id
    startedAt
    endedAt
    location {
      longitude
      latitude
      description
      shortDescription
    }
    status
    idle
    becameActiveAt
  }
`,
                Ve = a.a `
  fragment SessionDetail on Session {
    ...Session
    userAgent
    lastPageViewWithOutreachData {
      externalMailing {
        prospectEmail
        userEmail
        sequenceName
        sequenceState
        subject
      }
    }
    lastPageViewWithSalesloftData {
      externalMailing {
        prospectEmail
        userEmail
        sequenceName
        subject
      }
    }
  }
  ${ze}
`,
                Ge = a.a `
  fragment Meeting on Meeting {
    id
    __typename
    token
    status
    twilioStatus
    startedAt
    endedAt
    duration
    ... on OutboundVoiceMeeting {
      visitorNumber
      userNumber
      visitor {
        id
        listName
      }
    }
    ... on InboundVoiceMeeting {
      visitorNumber
      userNumber
      enqueuedAt
      visitor {
        id
        listName
      }
    }
    ... on OutboundVideoMeeting {
      userAccessToken
      userTracksStatuses {
        audio
        video
      }
      visitorTracksStatuses {
        audio
        video
      }
      user {
        id
        name
      }
      visitor {
        id
        listName
      }
    }
    ... on InboundVideoMeeting {
      userAccessToken
      userTracksStatuses {
        audio
        video
      }
      visitorTracksStatuses {
        audio
        video
      }
      user {
        id
        name
      }
      visitor {
        id
        listName
      }
    }
  }
`,
                $e = a.a `
  fragment ExternalVisitorIdentifier on ExternalVisitorIdentifier {
    source
    value
  }
`,
                He = a.a `
  fragment ExternalField on ExternalField {
    id
    name
    label
    type
    display
    source
    position
    values
    externalId
    externalType
    createdAt
    discarded
    fuzzyMatchRank
    externalObjectId
    referenceTo
    picklistValues {
      value
      label
    }
    ... on SalesforceExternalField {
      lookupName
      filterable
      canReferenceUser
      isFormula
      lookupLabel
    }
    ... on DemandbaseExternalField {
      customizable
    }
  }
`,
                We = a.a `
  fragment ExternalFieldValue on ExternalFieldValue {
    value
    externalField {
      ...ExternalField
    }
  }
  ${He}
`,
                Ke = a.a `
  fragment CompanyExternalFieldValue on CompanyExternalFieldValue {
    value
    externalField {
      ...ExternalField
    }
  }
  ${He}
`,
                qe = a.a `
  fragment VisitorCompanyExternalIdentifier on CompanyExternalIdentifier {
    id
    source
    value
    displayedExternalFieldValues: externalFieldValues(scope: "displayed") {
      ...CompanyExternalFieldValue
    }
    targetLists {
      id
      name
      enabled
    }
    targetListExternalFieldValues: externalFieldValues(scope: "targetList") {
      ...CompanyExternalFieldValue
    }
  }
  ${Ke}
`,
                Ye = a.a `
  fragment RoutingRuleDestinationAttendeeGroup on RoutingRuleDestinationAttendeeGroup {
    position
    userIds
    groupIds
    ownerId
    isOwnerGroup
    pickCount
  }
`,
                Xe = a.a `
  fragment RoutingRuleDestinationAttendees on RoutingRuleDestinationAttendees {
    combineGroups
    groups {
      ...RoutingRuleDestinationAttendeeGroup
    }
  }
  ${Ye}
`,
                Qe = a.a `
  fragment SalesforceExternalFieldIdGroup on SalesforceExternalFieldIdGroup {
    relationship
    externalFieldIds
    accountTeamMemberRoles
    scheduleAll
    meetingOwnerExternalFieldId
    attendees {
      ...RoutingRuleDestinationAttendees
    }
  }
  ${Xe}
`,
                Ze = a.a `
  fragment RoutingRuleDestination on RoutingRuleDestination {
    id
    clientId @client
    type
    position
    primary
    alwaysFallback
    ... on DirectRoutingRuleDestination {
      userIds
      groupIds
      attendees {
        ...RoutingRuleDestinationAttendees
      }
      scheduling
      scheduleAll
      meetingOwnerUserId
      excludedUserIds
      clientId @client
    }
    ... on OutreachOwnershipRoutingRuleDestination {
      reroute
      emailSender
      prospectOwner
      clientId @client
    }
    ... on SalesloftOwnershipRoutingRuleDestination {
      reroute
      emailSender
      prospectOwner
      clientId @client
    }
    ... on SalesforceOwnershipRoutingRuleDestination {
      reroute
      externalFieldIdGroups {
        ...SalesforceExternalFieldIdGroup
      }
      clientId @client
    }
  }
  ${Xe}
  ${Qe}
`,
                Je = a.a `
  fragment RoutingDetail on Routing {
    ...Routing
    botName
    routingLogEntries {
      id
      availableUserIds
      unavailableUserIds
      type
      destination {
        ...RoutingRuleDestination
      }
    }
    routingRule {
      id
      name
    }
    userId
    medium
    fromRepAvailability
  }
  ${Be}
  ${Ze}
`,
                et = a.a `
  fragment Field on Field {
    id
    name
    __typename
    apiName
    apiSend
    sources
    type
    hidden
    listVisible
    discarded
    ignoreEmptyMappedSources
    ... on EmailField {
      blacklistDomains
    }
    ... on PicklistField {
      picklistOptions {
        id
        value
        label
        controllingPicklistOptionIds
        controllingBooleanValues
      }
      controllingFieldId
    }
    ... on StringField {
      validation {
        type
        error
        regex
        caseSensitive
      }
    }
  }
`,
                tt = a.a `
  fragment CalendarEventPickMessage on CalendarEventPick {
    replyToId
    createdAt
    calendarEvent {
      startsAt
      user {
        firstName
        avatarUrl
        name
        email
      }
      calendarEventType {
        name
      }
      meetingRouting {
        id
        routingRule {
          name
        }
        meetingRoutingLogEntries {
          id
          entryType
          scheduleAll
          userIds
          calendarUnavailableUserIds
          destination {
            id
            type
          }
          matched
          excludedUserIds
          numWithoutAccount
          strictOrderUserIds
          strictUnavailableUserIds
          logVersion
          attendeesLog
        }
      }
      discardedAt
    }
    conversation {
      bot {
        id
        name
        deleted
        loadingDraftScript
        type
      }
      user {
        name
        email
      }
      type
      scriptAsUserId
    }
    userId
  }
`,
                nt = a.a `
  fragment CalendarEventOfferMessage on CalendarEventOffer {
    id
    meetingRouting {
      id
      routingRule {
        name
      }
      meetingRoutingLogEntries {
        id
        entryType
        scheduleAll
        userIds
        calendarUnavailableUserIds
        destination {
          id
          type
        }
        matched
        excludedUserIds
        numWithoutAccount
        strictOrderUserIds
        strictUnavailableUserIds
        logVersion
        attendeesLog
      }
    }
    createdAt
    calendarEventTypeName
    conversation {
      bot {
        id
        name
        deleted
        loadingDraftScript
        type
      }
      user {
        id
        name
        firstName
        avatarUrl
        email
      }
      type
      scriptAsUserId
    }
    scriptId
    userId
  }
`,
                at = a.a `
  fragment BaseVisitorDetail on Visitor {
    ...Visitor
    companyDomain
    referrerUrl
    referrerThumbnailUrl
    recentPageViews(first: 10) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...PageView
        }
      }
    }
    readReceipt {
      readMessageId
      readAt
    }
    lastSession {
      ...SessionDetail
    }
    sessions {
      ...Session
    }
    meetings {
      ...Meeting
    }
    externalIdentifiers {
      ...ExternalVisitorIdentifier
    }
    displayedExternalFieldValues {
      ...ExternalFieldValue
    }
    companyExternalIdentifiers {
      ...VisitorCompanyExternalIdentifier
    }
    salesforceAccountMatchSource
    lastInboundMeeting {
      ...Meeting
    }
    activeOrLastConversation {
      id
      hasVisitorReplied
      routings {
        ...RoutingDetail
      }
    }
    syncAction {
      ...ExternalObjectActionDetail
    }
    visibleFields {
      ...Field
    }
    calendarEventPickMessages {
      ...CalendarEventPickMessage
    }
    calendarEventOfferMessages {
      ...CalendarEventOfferMessage
    }
  }
  ${we}
  ${Le}
  ${je}
  ${Ve}
  ${ze}
  ${Ge}
  ${$e}
  ${We}
  ${qe}
  ${Je}
  ${xe}
  ${et}
  ${tt}
  ${nt}
`,
                it = a.a `
  fragment Message on Message {
    id
    clientId
    __typename
    replyToId
    conversationId
    userId
    visitorId
    scriptId
    createdAt
    botStep
    executionStep
    isOwn
    type
    source
    ... on Text {
      text
      pendingStatus @client
    }
    ... on FieldRequest {
      text
      fieldType
      fieldValues {
        label
        value
      }
      fieldName
      layout
    }
    ... on FieldEntry {
      text
      value
    }
    ... on CalendarEventOffer {
      calendarEventTypeId
      calendarEventTypeName
      calendarEventTypeDuration
      calendarEventAvatarUrls
      calendarEventScheduleAll
      calendarEventOwnerId
      availableSlots
    }
    ... on CalendarEventPick {
      calendarEventStartsAt
      calendarEvent {
        id
        startsAt
        endsAt
        email
        calendarEventUsers {
          user {
            id
            name
            avatarUrl
          }
          eventOwner
        }
      }
    }
    ... on PromptMessage {
      heading
      body
      ctaChat
      ctaVoice
    }
    ... on GreetingMessage {
      style
      heading
      body
      fieldType
      fieldValues {
        label
        value
      }
      layout
    }
    ... on Event {
      eventType
    }
    ... on System {
      text
      eventType
    }
  }
`,
                ot = a.a `
  fragment Conversation on Conversation {
    id
    createdAt
    endedAt
    hasVisitorReplied
    user {
      id
      name
      avatarUrl
    }
    bot {
      id
      name
      loadingDraftScript
    }
    type
    scriptAsUserId
  }
`,
                rt = a.a `
  fragment ConsoleVisitorDetail on Visitor {
    ...BaseVisitorDetail
    messages {
      ...Message
    }
    conversations {
      ...Conversation
      routings {
        ...RoutingDetail
      }
    }
  }
  ${at}
  ${it}
  ${ot}
  ${Je}
`,
                st = (a.a `
  fragment reportTimelineVisitorDetail on Visitor {
    ...BaseVisitorDetail
    conversations(displayedFor: "report_timeline") {
      ...Conversation
      routings {
        ...RoutingDetail
      }
    }
    messages(displayedFor: "report_timeline") {
      ...Message
    }
  }
  ${at}
  ${ot}
  ${Je}
  ${it}
`, a.a `
  fragment VisitorsDataContainerVisitor on Visitor {
    ...Visitor
    lastSession {
      ...Session
    }
    lastInboundMeeting {
      ...Meeting
    }
    lastPageView {
      id
      url
    }
    lastMessages {
      ...Message
    }
  }
  ${we}
  ${ze}
  ${Ge}
  ${it}
`, a.a `
  fragment VisitorCurrentSession on Visitor {
    latestClientActivityAt
    hasVisiblePage
    isEngagedWithBotInActiveConvo
  }
`),
                lt = a.a `
  fragment VisitorsDataContainerVisitorV2 on Visitor {
    ...Visitor
    ...VisitorCurrentSession
    companyDomain
    lastSession {
      ...Session
    }
    lastInboundMeeting {
      ...Meeting
    }
    lastPageView {
      id
      url
      thumbnailUrl
    }
    lastMessages {
      ...Message
    }
    messages {
      ...Message
    }
    displayedExternalSource
  }
  ${we}
  ${st}
  ${ze}
  ${Ge}
  ${it}
`,
                dt = a.a `
  fragment NotificationVisitor on Visitor {
    id
    ownerId
    listGroupingId
    listName
    fieldValues {
      ...FieldValue
    }
    lastSession {
      ...Session
    }
    activeOrLastConversation {
      id
      endedAt
      routings {
        ...Routing
      }
      bot {
        id
        name
        loadingDraftScript
      }
      user {
        id
        available
        snoozeEndsAt
      }
    }
  }
  ${Fe}
  ${ze}
  ${Be}
`,
                ct = a.a `
  fragment Notification on Notification {
    id
    type
    createdAt
    conversation {
      id
      endedAt
      bot {
        id
        loadingDraftScript
      }
    }
    visitor {
      ...NotificationVisitor
    }
    seenByIds
    readByIds
    routing {
      reason
      alertSound
      user {
        id
        name
        email
      }
    }
    message {
      text
    }
    meeting {
      id
      endedAt
      ... on InboundVoiceMeeting {
        enqueuedAt
      }
    }
    sessionId
    reason
    alertSound
  }
  ${dt}
`,
                ut = a.a `
  fragment Expression on Expression {
    type
    operator
    relationship
    parentObjectId
    parentFieldId
    childObjectId
    childFieldId
    conditions {
      lhs
      operator
      rhs
      rhsArray
    }
  }
`,
                mt = a.a `
  fragment Filter on Filter {
    id
    expression {
      ...Expression
      expressions {
        ...Expression
        expressions {
          ...Expression
          expressions {
            ...Expression
            expressions {
              ...Expression
              expressions {
                ...Expression
              }
            }
          }
        }
      }
    }
  }
  ${ut}
`,
                gt = a.a `
  fragment RoutingRule on RoutingRule {
    __typename
    id
    name
    enabled
    destinations {
      ...RoutingRuleDestination
    }
    ... on DynamicRoutingRule {
      clientId @client
      position
      filter {
        ...Filter
      }
    }
    ... on MeetingRoutingRule {
      clientId @client
      position
      meetingRoutingRuleSetId
      filter {
        ...Filter
      }
    }
    ... on MeetingDefaultRoutingRule {
      clientId @client
      meetingRoutingRuleSetId
    }
  }
  ${Ze}
  ${mt}
`,
                pt = a.a `
  fragment Experiment on Experiment {
    id
    segmentIds
    personalizedProps {
      textContent
      backgroundColor
      borderColor
      textColor
    }
    originalProps {
      textContent
      backgroundColor
      borderColor
      textColor
    }
  }
`,
                ht = a.a `
  fragment DomTrigger on DomTrigger {
    url
    selector
    textContent
    href
    global
    experiments {
      ...Experiment
    }
  }
  ${pt}
`,
                vt = a.a `
  fragment BotMeta on Bot {
    id
    clientId @client
    type
    name
    workflowTriggerType
    workflowTiming
    apiName
    enabled
    archived
    position
    invalidTrigger
    stepsVersion
    currentScriptId
    draftScriptId
    loadingDraftScript
    experimental
    notes
    proactiveRoutingEnabled
    formTriggerExternalId
    formTriggerExternalType
    waitForSalesforce
    isCustomForm
    integrationsToWaitFor
    hasConversationStep
    updatedAt
    updatedByUser {
      name
      email
      status
    }
    domTriggers {
      ...DomTrigger
    }
  }
  ${ht}
`,
                bt = a.a `
  fragment BotStep on BotStep {
    opcode
    operands {
      text
      placeholder
      fieldId
      fieldType
      fieldValues {
        label
        value
      }
      inputFields {
        fieldId
        label
        placeholder
        type
        validateEmailDomain
        validateFullName
        fieldValues {
          label
          value
        }
        picklistOptionIds
        customPicklistOptionsEnabled
      }
      mappings {
        fieldId
        input {
          step
          index
        }
      }
      lhs
      rhs
      jump
      scriptId
      filter {
        ...Filter
      }
      input
      command
      calendarEventTypeId
      calendarEventTitle
      calendarEventScheduleAll
      calendarEventOwnerId
      groupId
      userId
      style
      heading
      headerStyle
      headerImageSize
      showMinimalToMobileVisitors
      showOptionsAfterMessengerIsOpened
      headerImageUrl
      logoImageUrl
      useThemeLogo
      body
      ctaChat
      ctaVoice
      showFacepile
      reason
      alertSound
      eventType
      timeout
      scrollPercentage
      notProcessing
      forRep
      externalObjectActionId
      externalObjectType
      allowUntrustedUpdate
      customPardotCampaignId
      customSalesforceCampaignMemberAction {
        ...ExternalObjectActionDetail
      }
      customMarketoProgramMemberAction {
        ...ExternalObjectActionDetail
      }
      customExternalObjectAction {
        ...ExternalObjectActionDetail
      }
      routingRule {
        destinations {
          ...RoutingRuleDestination
        }
      }
      hasAfterHours
      layout {
        card
        stacked
        expand
      }
      includeRoutedReps
      groupIds
      userIds
      sendSlackDm
      slackChannels
      slackUsers
      slackMessage
      microsoftTeamsChannels
      microsoftTeamsMessage
      validateEmailDomain
      validateFullName
      emailAddresses
      emailSubject
      emailBody
      includeVisitorDetails
      routingBackup
      clientEventName
      alertRoutedReps
      alertMeetingReps
      alertOutreachSender
      alertSalesloftSender
      emailOwnerRecipientSources
      alertRecipientExternalFieldIds
      assignToRoutedRep
      picklistOptionIds
      endExperience
      disableClose
      url
      create
      update
      deferredCreate
      deferredUpdate
      defaultCountryCode
      locale
      onlyShowMessage
      startWaitForRep
      inputFieldLabel
      title
      subtitle
      buttonText
      showFollowUpQuestions
      reassignToMeetingOwner
      emailOptional
      shouldProactivelyEngage
      shouldRouteToUser
      shouldBookMeetings
    }
    meta {
      group
      campaignName
      programName
      controllingValue
    }
  }
  ${mt}
  ${xe}
  ${Ze}
`,
                Et = (a.a `
  fragment Bot on Bot {
    ...BotMeta
    workflowTriggerType
    workflowTiming
    blockDependentBotIds
    allBlockDependentBotIds
    scriptsDependentOnMe {
      id
      botId
      startedAt
    }
    triggerFilter {
      ...Filter
    }
    steps {
      ...BotStep
    }
    triggerQuerySelectors
    domTriggers {
      ...DomTrigger
    }
    scriptVersions {
      id
      startedAt
      endedAt
      stepsVersion
      notes
      updatedByUser {
        id
        name
      }
    }
  }
  ${vt}
  ${mt}
  ${bt}
  ${ht}
`, a.a `
  fragment DashboardTile on DashboardTile {
    id
    __typename
    clientId @client
    title
    graphType
    xPosition
    yPosition
    width
    color
    iconName
    filter
    ... on DashboardTileNumeric {
      metricTileName
      comparisonMetrics {
        metricName
        customLabel
      }
    }
    ... on DashboardTileBar {
      metricTileName
      comparisonMetrics {
        metricName
        customLabel
        color
      }
      subset
      timescale
    }
    ... on DashboardTileLine {
      metricTileName
      comparisonMetrics {
        metricName
        customLabel
        color
      }
      timescale
    }
    ... on DashboardTileFunnel {
      metricTileName
      funnelType
      hideTitle
      hideIcon
      percentageBasis
      comparisonMetrics {
        metricName
        customLabel
        color
        conversionCustomLabel
      }
    }
    ... on DashboardTileHeatmap {
      metricTileName
    }
    ... on DashboardTileLeaderboard {
      entityIds
      metricNames
      entityType
      leaderboardType
      groupIds
    }
    ... on DashboardTileUserAvailabilityTimeline {
      metricTileName
      userIds
      startDate
      endDate
      groupIds
    }
  }
`),
                _t = (a.a `
  fragment CustomDashboard on Dashboard {
    id
    clientId @client
    type
    title
    filter {
      dateFilter
      businessHoursFilter
      globalFilter
    }
    position
    shared
    tiles {
      ...DashboardTile
    }
  }
  ${Et}
`, a.a `
  fragment Segment on Segment {
    id
    clientId @client
    name
    type
    filter {
      ...Filter
    }
  }
  ${mt}
`),
                ft = a.a `
  fragment ReportSchedule on ReportSchedule {
    id
    frequency
    recipientIds
    createdAt
    lastSentAt
  }
`,
                Ot = (a.a `
  fragment Report on Report {
    id
    clientId @client
    name
    position
    object
    filter
    order
    columns {
      expression
      width
    }
    shared
    schedules {
      ...ReportSchedule
    }
  }
  ${ft}
`, a.a `
  fragment Export on Export {
    __typename
    id
    status
    fileName
    createdAt
    updatedAt
    ... on ReportExport {
      object
      filter
      order
      columns
    }
    ... on SignalsListExport {
      object
      filter
      order
      columns
    }
  }
`, a.a `
  fragment TargetListMeta on TargetList {
    id
    name
    enabled
    clientId @client
  }
`),
                Ct = a.a `
  fragment TargetListDefinition on TargetListDefinition {
    id
    filter {
      ...Filter
    }
    lastSyncedAt
    nextSyncAt
    pending
    truncated
  }
  ${mt}
`,
                St = a.a `
  fragment TargetListCompanyExternalIdentifier on CompanyExternalIdentifier {
    id
    value
    source
    externalFieldValues(scope: "targetList") {
      ...CompanyExternalFieldValue
    }
    company {
      id
      domain
    }
  }
  ${Ke}
`,
                yt = (a.a `
  fragment TargetList on TargetList {
    ...TargetListMeta
    currentDefinition {
      ...TargetListDefinition
    }
    companyExternalIdentifiers(first: 50) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...TargetListCompanyExternalIdentifier
        }
      }
      totalCount
    }
    unmatchableCompanyExternalIdentifiers: companyExternalIdentifiers(
      first: 50
      unmatchable: true
    ) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...TargetListCompanyExternalIdentifier
        }
      }
      totalCount
    }
  }
  ${Ot}
  ${Ct}
  ${Le}
  ${St}
`, a.a `
  fragment BulkExternalPush on BulkExternalPush {
    id
    status
    processedCount
    failedCount
    pushErrors {
      domain
      errors
    }
  }
`),
                kt = (a.a `
  fragment SignalsList on SignalsList {
    id
    clientId @client
    editable
    name
    type
    order
    states
    trends
    shared
    version
    columns {
      expression
      width
    }
    targetList {
      id
      currentDefinition {
        ...TargetListDefinition
      }
    }
    filter {
      ...Filter
    }
    hasPendingBulkPushes
    lastBulkPush {
      ...BulkExternalPush
    }
  }
  ${Ct}
  ${mt}
  ${yt}
`, a.a `
  fragment CachedInterpolatedSignals on SignalScore {
    time
    temperature
    signalScore
    activityWeight
    highIntentAction
    sessionId
    visitorId
  }
`, a.a `
  fragment ArchivedHighIntentSession on ArchivedHighIntentSession {
    __typename
    id
    endedAt
    visitNumber
    activeElapsedTime
    location {
      city
      region
    }
    visitor {
      __typename
      id
      signalVisitorName
    }
    highIntentActions
  }
`),
                Tt = a.a `
  fragment CachedSignalsSummaryCartile on SignalsSummaryCartile {
    currentTrend
    signalScore
    signalScoreState
    researchScore
    interpolatedSignals {
      time
      temperature
      signalScore
      activityWeight
      highIntentAction
      sessionId
      visitorId
    }
    archivedHighIntentSessions {
      ...ArchivedHighIntentSession
    }
    bomboraTopics {
      name
      score
    }
  }
  ${kt}
`,
                At = (a.a `
  fragment teamSSOSettings on Team {
    id
    samlEnabled
    samlVerified
    samlEntityId
    samlMetadataUrl
    scimEnabled
    scimToken
    identityProvider
  }
`, a.a `
  fragment FieldWithSalesforceBindings on Field {
    ...Field
    salesforceBindingExternalFields {
      id
      source
      ... on SalesforceExternalField {
        isStateCode
        isCountryCode
      }
    }
  }
  ${et}
`),
                Nt = (a.a `
  fragment FlowAnalytics on FlowAnalytics {
    fromStep {
      scriptId
      index
    }
    toStep {
      scriptId
      index
    }
    continuedCount
    droppedOffCount
    pouncedCount
    repJoinedCount
    jumpedCount
    repUnavailableCount
    supportDeflectedCount
    stepExecutionCount
  }
`, a.a `
  fragment ArchivedSessionActivity on ArchivedSessionConnection {
    pageInfo {
      ...PageInfo
    }
    nodes {
      __typename
      id
      endedAt
      visitNumber
      activeElapsedTime
      hasGoldenPageViews
      location {
        city
        region
      }
      visitor {
        __typename
        id
        createdAt
        signalVisitorName
        salesforceIdentifierId
        email
        listName
        owner {
          id
          name
        }
      }
      thumbnailPageViews {
        __typename
        id
        endedAt
        pageView {
          id
          thumbnailUrl
          adData {
            ...AdData
          }
          externalMailing {
            ...ExternalMailing
          }
          g2Clickthrough
        }
        activeTimeElapsed
        url
      }
      engagedConversations {
        __typename
        id
        createdAt
        endedAt
      }
      calendarEvent {
        __typename
        id
        startsAt
        calendarEventUsers {
          user {
            id
            name
            avatarUrl
          }
          eventOwner
        }
        visitor {
          id
          signalVisitorName
        }
      }
      completedMeetings {
        __typename
        id
        userId
        duration
        visitor {
          id
          signalVisitorName
        }
      }
    }
  }
  ${Le}
  ${Ue}
  ${Pe}
`),
                Rt = (a.a `
  fragment VisitorCard on VisitorCard {
    id
    visitor {
      id
      signalVisitorName
    }
    repConversationCount
    sessionCount
    pageCount
    activeElapsedTime
  }
`, a.a `
  fragment SalesforceOpportunity on SalesforceOpportunity {
    name
    stage
    closeDate
    amount
  }
`),
                Dt = a.a `
  fragment CompanyHeaders on Company {
    id
    currentTrend
    domain
    signalScore
    signalScoreState
    buyerIntentState
    researchScore
    companyVisitorsSummary {
      count
      lastVisitedAt
      totalActiveElapsedTime
      botConversationCount
      repConversationCount
      meetingsBooked
      sessionsCount
    }
    companyExternalIdentifiers {
      id
      source
      value
      externalFieldValues {
        ...CompanyExternalFieldValue
      }
    }
    relatedOpportunities {
      userId
      ownerName
      externalLink
      isClosed
      history {
        createdDate
        stageName
      }
      ...SalesforceOpportunity
    }
  }
  ${Ke}
  ${Rt}
`,
                It = (a.a `
  fragment CompanyExternalIdentifierHeaders on CompanyExternalIdentifier {
    id
    source
    value
    company {
      ...CompanyHeaders
    }
  }
  ${Dt}
`, a.a `
  fragment CompanyExternalIdentifierHeadersForIntegrations on CompanyExternalIdentifier {
    id
    source
    value
    company {
      id
      currentTrend
      domain
      signalScore
      signalScoreState
      buyerIntentState
      researchScore
      companyVisitorsSummary: cachedCompanyVisitorsSummary {
        count
        lastVisitedAt
        totalActiveElapsedTime
        botConversationCount
        repConversationCount
        meetingsBooked
        sessionsCount
      }
      companyExternalIdentifiers {
        id
        source
        value
        externalFieldValues {
          ...CompanyExternalFieldValue
        }
      }
      relatedOpportunities {
        userId
        ownerName
        externalLink
        isClosed
        history {
          createdDate
          stageName
        }
        ...SalesforceOpportunity
      }
    }
  }
  ${Ke}
  ${Rt}
`),
                xt = (a.a `
  fragment MaskedAPIToken on MaskedAPIToken {
    id
    name
    tokenMasked
    lastUsedAt
  }
`, a.a `
  fragment UnmaskedAPIToken on UnmaskedAPIToken {
    id
    name
    tokenMasked
    token
    lastUsedAt
  }
`, a.a `
  fragment SixsenseConnection on SixsenseConnection {
    id
    confidenceThreshold
    createdAt
    productLines
    secretKeyMasked
    updatedAt
  }
`, a.a `
  fragment WebsiteExperimentProps on WebsiteExperimentProps {
    textContent
    backgroundColor
    borderColor
    textColor
  }
`),
                Mt = a.a `
  fragment WebsiteExperimentPersonalization on WebsiteExperimentPersonalization {
    name
    url
    originalFullUrl
    selector
    global
    props {
      ...WebsiteExperimentProps
    }
  }
  ${xt}
`,
                Bt = a.a `
  fragment WebsiteExperimentVariation on WebsiteExperimentVariation {
    id
    control
    data {
      ...WebsiteExperimentPersonalization
    }
  }
  ${Mt}
`,
                Ft = a.a `
  fragment WebsiteExperiment on WebsiteExperiment {
    id
    audience {
      id
      name
    }
    audienceVersion {
      id
      filter {
        ...Filter
      }
    }
    variations {
      ...WebsiteExperimentVariation
    }
  }
  ${mt}
  ${Bt}
`,
                wt = a.a `
  fragment WebsiteExperience on WebsiteExperience {
    id
    name
    enabled
    position
    currentExperiment {
      ...WebsiteExperiment
    }
  }
  ${Ft}
`,
                Lt = a.a `
  fragment SmartCtaBot on SmartCtaBot {
    url
    selector
    global
    bot {
      id
      name
    }
  }
`,
                Pt = a.a `
  fragment AutoPounceSettings on AutoPounceSettings {
    firstPounceTiming
    includeEmojis
    includeCompanyName
    tone
    includeVisitorName
    repCompany
    excludeSegments
    excludedSegmentIds
    priorPounceExclusion {
      exclude
      pounceCount
      pastDays
    }
    includeAdClickthroughTerms
  }
`,
                Ut = a.a `
  fragment StyleProperties on StyleProperties {
    fontFamily
    backgroundColor
    color
    borderColor
    borderTopColor
    borderRadius
  }
`,
                jt = a.a `
  fragment OfferVersion on OfferVersion {
    id
    location
    ctaType
    filter {
      ...Filter
    }
    target {
      devices {
        name
      }
      location {
        ... on TargetLocationMultiplePages {
          type
          urls
        }
        ... on TargetLocationMultipleDomains {
          type
          domains
        }
      }
      trigger {
        ... on TargetTriggerAfterPageLoad {
          type
          delay
        }
      }
      duration {
        ... on TargetDurationDateRange {
          type
          startedAt
          endedAt
        }
      }
    }
    content {
      variation {
        ... on ContentVariationHeadlineButton {
          type
          headlineText
          buttonText
          buttonUrl
          headlineStyle {
            ...StyleProperties
          }
          buttonStyle {
            ...StyleProperties
          }
        }
        ... on ContentVariationHeadlineLink {
          type
          headlineText
          buttonText
          buttonUrl
          headlineStyle {
            ...StyleProperties
          }
          buttonStyle {
            ...StyleProperties
          }
        }
        ... on ContentVariationHeadlineBodyButton {
          type
          headlineText
          bodyText
          buttonText
          buttonUrl
          headlineStyle {
            ...StyleProperties
          }
          bodyStyle {
            ...StyleProperties
          }
          buttonStyle {
            ...StyleProperties
          }
        }
      }
      animation {
        ... on ContentAnimationSlideUp {
          type
        }
        ... on ContentAnimationPushDown {
          type
        }
      }
      dismissOptions {
        allowDismiss
        saveVisitorDismiss
      }
    }
  }
  ${mt}
  ${Ut}
`,
                zt = a.a `
  fragment Offer on Offer {
    id
    name
    enabled
    position
    currentVersion {
      ...OfferVersion
    }
  }
  ${jt}
`,
                Vt = a.a `
  fragment AiCitationSource on AiCitationSource {
    chunkId
    locationId
    locationEnabled
    sourceId
    sourceEnabled
    sourceType
    name
    url
  }
`,
                Gt = a.a `
  fragment AiInteraction on AiInteraction {
    id
    createdAt
    updatedAt
    embeddingCrawlId
    teamId
    userId
    visitorId
    source
    messageComposer
    messageTone
    feedbackRating
    feedbackRatingCategory
    feedbackContent
    userInput
    message
    version
    citationSources {
      ...AiCitationSource
    }
    aiInteractionPromptId
  }
  ${Vt}
`,
                $t = a.a `
  fragment CalendarConnection on CalendarConnection {
    id
    __typename
    updatedAt
    email
    type
    invalid
    invalidAt
  }
`,
                Ht = a.a `
  fragment TeamUser on User {
    __typename
    id
    email
    name
    avatarUrl
    available
    snoozeEndsAt
    role
    customAdminPermissions
    permissionsAdmin
    permissionsViewAllVisitors
    permissionsEditAllTeamSettings
    permissionsEditTeammates
    permissionsEditGroups
    permissionsEditTeamCalendar
    permissionsEditBusinessHours
    permissionsEditSso
    permissionsEditMessenger
    permissionsEditVsiitorFields
    permissionsEditSegments
    permissionsEditLiveStreams
    permissionsEditRouting
    permissionsEditExperiences
    permissionsEditMacros
    permissionsEditSalesforce
    permissionsEditPardot
    permissionsEditMarketo
    permissionsEditHubspot
    permissionsEditEloqua
    permissionsEditOutreach
    permissionsEditClearbit
    permissionsEditSixsense
    permissionsEditDemandbase
    permissionsEditSlack
    permissionsEditMicrosoft
    permissionsEditZoominfo
    permissionsEditSalesloft
    permissionsEditLinkedin
    permissionsEditGoogle
    permissionsViewAllStatistics
    permissionsEditAnalytics
    permissionsExportReports
    permissionsBotView
    permissionsBotEdit
    permissionsBotPublish
    permissionsEditMeetingTypes
    permissionsEditMeetingRouting
    permissionsEditAutoPounce
    status
    lastOnlineAt
    authenticationState
    lastInviteSentAt
    lastSamlBindingLinkSentAt
    calendarReminderSentAt
    groups {
      name
    }
    salesforceConnection {
      __typename
      id
      updatedAt
      username
    }
    calendarInviteBody
    meetingConferenceDetails
    calendarConnection {
      ...CalendarConnection
    }
    slackConnection {
      id
      __typename
    }
    microsoftConnection {
      id
      __typename
      invalid
    }
    externalMeetingConnection {
      id
      type
      __typename
    }
  }
  ${$t}
`,
                Wt = a.a `
  fragment Macro on Macro {
    __typename
    id
    shared
    name
    steps {
      __typename
      opcode
      operands {
        __typename
        text
      }
    }
  }
`,
                Kt = a.a `
  fragment SegmentMeta on Segment {
    __typename
    id
    name
  }
`,
                qt = a.a `
  fragment Announcement on Announcement {
    __typename
    id
    ctaText
    ctaUrl
    message
    type
    startsAt
    endsAt
  }
`,
                Yt = a.a `
  fragment Variable on Variable {
    __typename
    key
    category
    type
    group
    source
    label
    require
  }
`,
                Xt = a.a `
  fragment DashboardSettings on DashboardSettings {
    __typename
    startDate
    endDate
    currencyField
    conversationDateThreshold
    opportunityTypes
    status
    stages
    attributedOpportunityTiles {
      title
      color
      attributionModel
      columns {
        expression
        width
      }
      orderBy
      orderReversed
      matchTypes
      leadSourceFieldValues
    }
  }
`,
                Qt = a.a `
  fragment ListGrouping on ListGrouping {
    __typename
    id
    name
    color
    position
    bots {
      __typename
      id
      loadingDraftScript
    }
    segments {
      __typename
      id
    }
    listGroupingSetting {
      __typename
      id
      listGroupingId
      settingsSendPushNotification
      settingsDisableConsoleNotification
      settingsEnableVoiceNotifications
      sound
    }
    autoPounce
  }
`,
                Zt = a.a `
  fragment LinkedInConnection on LinkedInConnection {
    id
    __typename
    firstName
    lastName
    displayName
    accountId
    invalid
  }
`,
                Jt = a.a `
  fragment LinkedInAdAccount on LinkedInAdAccount {
    id
    __typename
    externalId
    name
  }
`,
                en = a.a `
  fragment GoogleConnection on GoogleConnection {
    id
    __typename
    email
    loginCustomerId
    invalid
  }
`,
                tn = a.a `
  fragment GoogleAdAccount on GoogleAdAccount {
    id
    __typename
    externalId
    name
  }
`,
                nn = a.a `
  fragment FacebookConnection on FacebookConnection {
    id
    __typename
    name
    email
  }
`,
                an = a.a `
  fragment CalendarEventExclusionDate on CalendarEventExclusionDate {
    __typename
    id
    startDate
    endDate
  }
`,
                on = a.a `
  fragment ExternalList on ExternalList {
    id
    type
    name
    enabled
  }
`,
                rn = a.a `
  fragment ActiveMeeting on Meeting {
    ...Meeting
    visitorId
    userId
  }
  ${Ge}
`,
                sn = (a.a `
  fragment CachedSummaryCartile on SignalsSummaryCartile {
    currentTrend
    signalScore
    signalScoreState
    researchScore
    interpolatedSignals {
      time
      temperature
      signalScore
      activityWeight
      highIntentAction
      sessionId
      visitorId
    }
    archivedHighIntentSessions {
      id
      endedAt
      visitNumber
      activeElapsedTime
      location {
        city
        region
      }
      visitor {
        signalVisitorName
      }
      highIntentActions
    }
    bomboraTopics {
      name
      score
    }
  }
`, a.a `
  fragment InterpolatedSignals on SignalScore {
    time
    temperature
    signalScore
    activityWeight
    highIntentAction
    sessionId
    visitorId
    filtered
  }
`);
            a.a `
  mutation AcquireAdminLock($force: Boolean!, $path: String) {
    acquireAdminLock(force: $force, path: $path) {
      team {
        adminLockUser(path: $path) {
          id
          name
          email
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation ReleaseAdminLock {
    releaseAdminLock {
      errors
    }
  }
`;
            a.a `
  mutation UpdateUserBackgroundPreference($enableBlurBackground: Boolean) {
    updateUserProfile(enableBlurBackground: $enableBlurBackground) {
      errors
      user {
        id
        enableBlurBackground
      }
    }
  }
`;
            a.a `
  query HubSpotConnection {
    fields {
      ...Field
    }
    externalFields(sources: [HUBSPOT_CONTACT], validForMapping: true) {
      ...ExternalField
    }
    team {
      id
      hubspotContactExternalObjectAction {
        ...ExternalObjectActionDetail
      }
    }
    hubspotConnection {
      id
      createdAt
      updatedAt
      invalid
    }
  }
  ${et}
  ${He}
  ${xe}
`;
            a.a `
  query MarketoLists($type: ExternalListTypeEnum!) {
    externalLists(type: $type) {
      id
      type
      name
      enabled
      externalIdentifier
      lastSyncedAt
    }
    marketoRemoteLists(type: $type) {
      label
      value
    }
  }
`;
            a.a `
  mutation CreateExternalList($type: ExternalListTypeEnum!, $externalIdentifier: String!) {
    createExternalList(type: $type, externalIdentifier: $externalIdentifier) {
      externalList {
        id
        type
        name
        enabled
        externalIdentifier
        lastSyncedAt
      }
      errors
    }
  }
`;
            a.a `
  mutation UpdateExternalList($id: ID!, $enabled: Boolean!) {
    updateExternalList(id: $id, enabled: $enabled) {
      externalList {
        id
        enabled
      }
      errors
    }
  }
`;
            a.a `
  mutation DeleteExternalList($id: ID!) {
    deleteExternalList(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation SyncExternalList($id: ID!) {
    syncExternalList(id: $id) {
      errors
    }
  }
`;
            a.a `
  query MarketoConnection {
    fields {
      ...Field
    }
    externalFields(sources: [MARKETO_LEAD], validForMapping: true) {
      ...ExternalField
    }
    team {
      id
      marketoLeadExternalObjectAction {
        ...ExternalObjectActionDetail
      }
    }
    marketoConnection {
      id
      createdAt
      updatedAt
      invalid
    }
  }
  ${et}
  ${He}
  ${xe}
`;
            a.a `
  query GetMarketoConnection {
    account {
      id
      team {
        id
        marketoConnection {
          id
          munchkinId
          invalid
        }
        marketoCustomActivitiesEnabled
      }
    }
  }
`;
            a.a `
  mutation ConnectMarketo($munchkinId: String!, $clientId: String!, $clientSecret: String!) {
    connectTeamMarketo(munchkinId: $munchkinId, clientId: $clientId, clientSecret: $clientSecret) {
      marketoConnection {
        id
        munchkinId
        invalid
      }
      errors
      team {
        id
        variables {
          ...Variable
        }
      }
    }
  }
  ${Yt}
`;
            a.a `
  mutation DisconnectMarketo {
    disconnectTeamMarketo {
      errors
      team {
        id
        variables {
          ...Variable
        }
      }
    }
  }
  ${Yt}
`;
            a.a `
  mutation SyncMarketoFields {
    syncMarketoFields {
      errors
      team {
        id
        variables {
          ...Variable
        }
      }
    }
  }
  ${Yt}
`;
            a.a `
  mutation ToggleMarketoActivities($enable: Boolean!) {
    toggleMarketoActivities(enable: $enable) {
      errors
      team {
        id
        marketoCustomActivitiesEnabled
      }
    }
  }
`;
            a.a `
  query PardotConnection {
    fields {
      ...Field
    }
    team {
      id
      pardotProspectExternalObjectAction {
        ...ExternalObjectActionDetail
      }
    }
    pardotConnection {
      id
      createdAt
      updatedAt
      invalid
      campaigns {
        label
        value
        extra
      }
      prospectFields {
        name
        label
        type
        externalFieldId
        isDisabled
      }
    }
  }
  ${et}
  ${xe}
`;
            a.a `
  query GetExternalFormFields($formType: String!, $formId: ID!) {
    externalFormFields(formType: $formType, formId: $formId) {
      id
      label
      type
    }
  }
`;
            a.a `
  query GetExternalForms($formType: String!) {
    externalForms(formType: $formType) {
      id
      name
      type
    }
  }
`;
            a.a `
  query GetAllExternalForms {
    allExternalForms {
      id
      name
      type
      ... on PardotExternalForm {
        href
      }
    }
  }
`;
            a.a `
  mutation SendCustomFormInstruction(
    $email: String!
    $register_form_snippet: String!
    $show_form_experience_snippet: String!
    $form_should_trigger: String!
    $user_id: String!
  ) {
    sendCustomFormInstruction(
      email: $email
      registerFormSnippet: $register_form_snippet
      showFormExperienceSnippet: $show_form_experience_snippet
      formShouldTrigger: $form_should_trigger
      userId: $user_id
    ) {
      errors
    }
  }
`;
            a.a `
  query GetExternalObject($system: String!, $apiName: String!) {
    externalObjects(system: $system, apiName: $apiName) {
      id
      apiName
      label
    }
  }
`;
            a.a `
  query GetAllExternalObjects($system: String!) {
    externalObjects(system: $system) {
      id
      apiName
      label
    }
  }
`;
            a.a `
  query GetAllObjectFields($externalObjectId: ID!, $creatable: Boolean!) {
    externalFields(externalObjectId: $externalObjectId, creatable: $creatable) {
      id
      name
      label
      type
      externalType
      nillable
      defaultedOnCreate
      length
      precision
      scale
      highScaleNumber
      picklistValues {
        value
      }
    }
  }
`;
            a.a `
  query CompanySmartSummaryAndCachedDataQuery($companyDomain: String!) {
    company(domain: $companyDomain) {
      id
      domain
      identifiedName
      companyVisitorsSummary: cachedCompanyVisitorsSummary {
        sessionsCount
      }
      cachedSignalsSummaryCartile {
        ...CachedSignalsSummaryCartile
      }
    }
  }
  ${Tt}
`;
            a.a `
  query GetCampaigns {
    salesforceConnection {
      id
      campaigns {
        value
        label
      }
    }
  }
`;
            a.a `
  query GetCampaignsPaginated($offset: Int, $limit: Int) {
    salesforceConnection {
      id
      campaignsPaginated(offset: $offset, limit: $limit) {
        value
        label
      }
    }
  }
`;
            a.a `
  query Available {
    account {
      id
      available
      snoozeEndsAt
      videoAvailable
      autoPounceAvailable
    }
  }
`;
            a.a `
  mutation UpdateAutoPounceAvailability($autoPounceAvailable: Boolean!) {
    updateUserAutoPounceAvailability(autoPounceAvailable: $autoPounceAvailable) {
      user {
        id
        autoPounceAvailable
      }
    }
  }
`;
            a.a `
  mutation UpdateAvailability($available: Boolean!) {
    updateUserAvailability(available: $available) {
      user {
        id
        available
        videoAvailable
      }
    }
  }
`;
            a.a `
  mutation UpdateSnooze($snoozeDuration: Int) {
    updateUserSnooze(snoozeDuration: $snoozeDuration) {
      user {
        id
        snoozeEndsAt
      }
    }
  }
`;
            a.a `
  mutation UpdateVideoAvailability($videoAvailable: Boolean!) {
    updateUserVideoAvailability(videoAvailable: $videoAvailable) {
      user {
        id
        videoAvailable
      }
    }
  }
`;
            a.a `
  mutation UpdateLinkedinAdAccounts($externalIds: [ID!]!) {
    updateLinkedinAdAccounts(externalIds: $externalIds) {
      team {
        id
        __typename
        activeLinkedinAdAccounts {
          ...LinkedInAdAccount
        }
        linkedinConnection {
          id
          __typename
          availableAdAccounts {
            id
            __typename
            name
          }
        }
      }
      errors
    }
  }
  ${Jt}
`;
            a.a `
  query GetLinkedinAdAccountsData {
    team {
      id
      __typename
      activeLinkedinAdAccounts {
        ...LinkedInAdAccount
      }
      linkedinConnection {
        id
        __typename
        availableAdAccounts {
          id
          __typename
          name
        }
      }
    }
  }
  ${Jt}
`;
            a.a `
  mutation UpdateGoogleAdAccounts($externalIds: [ID!]!) {
    updateGoogleAdAccounts(externalIds: $externalIds) {
      team {
        id
        __typename
        activeGoogleAdAccounts {
          ...GoogleAdAccount
        }
        googleConnection {
          id
          __typename
          availableAdAccounts {
            id
            __typename
            name
          }
        }
      }
      errors
    }
  }
  ${tn}
`;
            a.a `
  query GetGoogleAdAccountsData {
    team {
      id
      __typename
      activeGoogleAdAccounts {
        ...GoogleAdAccount
      }
      googleConnection {
        id
        __typename
        availableAdAccounts {
          id
          __typename
          name
        }
      }
    }
  }
  ${tn}
`;
            a.a `
  query LinkedinConnection {
    account {
      id
      team {
        id
        linkedinConnection {
          ...LinkedInConnection
        }
      }
    }
  }
  ${Zt}
`;
            a.a `
  query GoogleConnection {
    account {
      id
      team {
        id
        googleConnection {
          ...GoogleConnection
        }
      }
    }
  }
  ${en}
`;
            a.a `
  query FacebookConnection {
    account {
      id
      team {
        id
        facebookConnection {
          ...FacebookConnection
        }
      }
    }
  }
  ${nn}
`;
            a.a `
  mutation DisconnectTeamGoogle {
    disconnectTeamGoogle {
      team {
        id
        __typename
        googleConnection {
          id
          __typename
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation DisconnectTeamLinkedin {
    disconnectTeamLinkedin {
      team {
        id
        __typename
        linkedinConnection {
          id
          __typename
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation DisconnectTeamFacebook {
    disconnectTeamFacebook {
      team {
        id
        __typename
        facebookConnection {
          id
          __typename
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation UpdateTopicMappings($topicMappings: [BomboraTopicMappingInput!]!) {
    updateBomboraTopicMappings(topicMappings: $topicMappings) {
      team {
        id
        bomboraTopicMappings {
          id
          name
        }
      }
      errors
    }
  }
`;
            a.a `
  query GetTopicNames {
    bomboraTopics
    team {
      id
      bomboraTopicLimit
      bomboraTopicMappings {
        id
        name
      }
    }
  }
`;
            a.a `
  query GetInvitableSalesforceUsers {
    team {
      id
      salesforceUserInvitationCandidates {
        externalId
        name
        username
        email
        createdAt
        profileName
        status
      }
    }
  }
`;
            a.a `
  mutation CreateUsers($users: [UserInput!]!, $connectSalesforce: Boolean!) {
    createUsers(users: $users, connectSalesforce: $connectSalesforce) {
      errors
    }
  }
`;
            a.a `
  query GetAllowListedDomains {
    team {
      id
      allowlistedDomains
    }
  }
`;
            a.a `
  mutation UpdateAllowListedDomains($domains: [String!]!) {
    updateAllowlistedDomains(domains: $domains) {
      team {
        id
        allowlistedDomains
      }
      errors
    }
  }
`;
            a.a `
  mutation UpdateUser($user: UserInput!) {
    updateUser(user: $user) {
      errors
      user {
        ...TeamUser
      }
    }
  }
  ${Ht}
`;
            a.a `
  query TeamQuery {
    team {
      id
      company
      users {
        ...TeamUser
      }
      scimEnabled
      identityProvider
      inactiveUsers {
        id
        email
        name
        avatarUrl
        available
        permissionsAdmin
        status
      }
      groups {
        name
        id
      }
    }
  }
  ${Ht}
`;
            a.a `
  mutation ReinviteUser($user: UserInput!) {
    reinviteUser(user: $user) {
      errors
    }
  }
`;
            a.a `
  mutation UpdateAnotherUserUnavailable($user: UserInput!) {
    updateAnotherUserUnavailable(user: $user) {
      user {
        id
        available
      }
      errors
    }
  }
`;
            a.a `
  mutation SendCalendarReminderEmail($user: UserInput!) {
    sendCalendarReminderEmail(user: $user) {
      errors
    }
  }
`;
            a.a `
  mutation SendSAMLBindingLinkToUser($user: UserInput!) {
    sendSamlBindingLinkToUser(user: $user) {
      errors
    }
  }
`;
            a.a `
  query GetAiInteractionPrompts {
    team {
      currentContentSnapshot {
        id
      }
      aiInteractionPrompts {
        nodes {
          id
          prompt
          aiInteractions(last: 5) {
            nodes {
              ...AiInteraction
            }
          }
        }
      }
    }
  }
  ${Gt}
`;
            a.a `
  query GetAiInteractions(
    $count: Int
    $source: [AiInteractionSourceEnum!]
    $hasFeedbackRating: Boolean
  ) {
    team {
      aiInteractions(last: $count, source: $source, hasFeedbackRating: $hasFeedbackRating) {
        nodes {
          ...AiInteraction
        }
      }
    }
  }
  ${Gt}
`;
            a.a `
  mutation CreateAiInteractionPrompt($interactionId: ID!) {
    createAiInteractionPrompt(interactionId: $interactionId) {
      interactionId
      promptId
      errors
    }
  }
`;
            a.a `
  mutation DeleteAiInteractionPrompt($promptId: ID!) {
    deleteAiInteractionPrompt(promptId: $promptId) {
      promptId
      errors
    }
  }
`;
            a.a `
  mutation RefreshAiInteractionPrompts($ids: [ID!]!) {
    refreshAiInteractionPrompts(ids: $ids) {
      ids
      errors
    }
  }
`;
            a.a `
  mutation SubmitAiInteractionFeedback(
    $aiInteractionId: ID!
    $rating: AiInteractionFeedbackRatingEnum
    $ratingCategory: AiInteractionFeedbackRatingCategoryEnum
    $content: String
  ) {
    submitAiInteractionFeedback(
      aiInteractionId: $aiInteractionId
      rating: $rating
      ratingCategory: $ratingCategory
      content: $content
    ) {
      aiInteractionId
      errors
    }
  }
`;
            a.a `
  subscription AiInteractions {
    aiInteractions {
      ...AiInteraction
    }
  }
  ${Gt}
`;
            a.a `
  query GetAutoPounceSettings {
    team {
      autoPounceSettings {
        ...AutoPounceSettings
      }
      segments {
        id
        name
      }
    }
  }
  ${Pt}
`;
            a.a `
  mutation UpdateTeamAutoPounceSettings(
    $firstPounceTiming: Int!
    $includeEmojis: Boolean!
    $includeCompanyName: Boolean!
    $tone: MessageTransformationToneEnum!
    $listGroupings: [ListGroupingInput!]!
    $includeVisitorName: Boolean!
    $repCompany: String
    $excludeSegments: Boolean!
    $excludedSegmentIds: [ID!]
    $priorPounceExclusion: AutoPouncePriorPounceExclusionInput!
    $missedConnections: AutoPounceMissedConnectionSettingsInput!
    $includeAdClickthroughTerms: Boolean!
  ) {
    updateTeamAutoPounceSettings(
      firstPounceTiming: $firstPounceTiming
      includeEmojis: $includeEmojis
      includeCompanyName: $includeCompanyName
      tone: $tone
      listGroupings: $listGroupings
      includeVisitorName: $includeVisitorName
      repCompany: $repCompany
      excludeSegments: $excludeSegments
      excludedSegmentIds: $excludedSegmentIds
      priorPounceExclusion: $priorPounceExclusion
      missedConnections: $missedConnections
      includeAdClickthroughTerms: $includeAdClickthroughTerms
    ) {
      team {
        autoPounceSettings {
          ...AutoPounceSettings
        }
      }
      errors
    }
  }
  ${Pt}
`;
            a.a `
  query GetCompanySignals($companyDomain: String!) {
    company(domain: $companyDomain) {
      id
      cachedCurrentTrend
      cachedSignalScore
      cachedSignalScoreState
    }
  }
`;
            a.a `
  query GetInterpolatedSignals(
    $companyId: ID!
    $companyExternalIdentifierId: ID
    $startDate: DateTime!
    $endDate: DateTime!
    $filter: SignalsFilterInput
  ) {
    company(id: $companyId, companyExternalIdentifierId: $companyExternalIdentifierId) {
      id
      interpolatedSignals(startDate: $startDate, endDate: $endDate, filter: $filter) {
        ...InterpolatedSignals
      }
      researchScores(startDate: $startDate, endDate: $endDate) {
        time
        score
      }
    }
  }
  ${sn}
`;
            a.a `
  query GetCachedInterpolatedSignals($companyId: ID!) {
    company(id: $companyId) {
      id
      cachedInterpolatedSignals {
        time
        temperature
        signalScore
        activityWeight
        highIntentAction
        sessionId
        visitorId
      }
    }
  }
`;
            a.a `
  query GetContentSources {
    team {
      contentSources {
        nodes {
          id
          createdAt
          updatedAt
          teamId
          type
          enabled
          active
          name
          url
          text
          activeCrawl {
            status
          }
          latestCrawl {
            status
          }
          createdByUser {
            name
            email
          }
          updatedByUser {
            name
            email
          }
          locations {
            nodes {
              id
              url
              enabled
            }
          }
        }
      }
    }
  }
`;
            a.a `
  mutation CreateContentSource(
    $enabled: Boolean!
    $type: ContentSourceTypeEnum!
    $name: String!
    $url: String
    $text: String
    $sourceInteractionId: ID
  ) {
    createContentSource(
      enabled: $enabled
      type: $type
      name: $name
      url: $url
      text: $text
      sourceInteractionId: $sourceInteractionId
    ) {
      contentSource {
        id
        createdAt
        updatedAt
        teamId
        type
        enabled
        active
        name
        url
        text
        createdByUser {
          name
          email
        }
        updatedByUser {
          name
          email
        }
        locations {
          nodes {
            id
            url
            enabled
          }
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation UpdateContentSource($id: ID!, $enabled: Boolean, $name: String, $text: String) {
    updateContentSource(id: $id, enabled: $enabled, name: $name, text: $text) {
      contentSource {
        id
        createdAt
        updatedAt
        teamId
        type
        enabled
        active
        name
        url
        text
        createdByUser {
          name
          email
        }
        updatedByUser {
          name
          email
        }
        locations {
          nodes {
            id
            url
            enabled
          }
        }
      }
      errors
    }
  }
`;
            a.a `
  mutation UpdateContentLocations($contentSourceId: ID!, $locations: [ContentLocationInput!]!) {
    updateContentLocations(contentSourceId: $contentSourceId, locations: $locations) {
      errors
      locations {
        id
        enabled
      }
    }
  }
`;
            a.a `
  mutation DeleteContentSource($id: ID!) {
    deleteContentSource(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation RecrawlContentSource($id: ID!) {
    recrawlContentSource(id: $id) {
      errors
    }
  }
`;
            a.a `
  query GetEmbeddingUrls {
    team {
      currentEmbeddingCrawl {
        updatedAt
        status
        archived
      }
      embeddingsCrawlPaths
      embeddingCrawls(last: 1) {
        nodes {
          updatedAt
          status
          archived
        }
      }
    }
  }
`;
            a.a `
  mutation UpdateEmbeddingsCrawlPaths($paths: [String!]!) {
    updateEmbeddingsCrawlPaths(paths: $paths) {
      embeddingsCrawlPaths
      errors
    }
  }
`;
            a.a `
  mutation DeleteFailedEmbeddingCrawl {
    deleteFailedEmbeddingCrawl {
      currentEmbeddingCrawl {
        updatedAt
        status
        archived
      }
      embeddingsCrawlPaths
      errors
    }
  }
`;
            a.a `
  query GetCalendarEventTypesQrql {
    team {
      calendarEventTypes {
        __typename
        id
        name
        duration
        enableMeetingLink
        enableMeetingLinkRouted
        meetingLink
        meetingLinkRouted
        eventTitle
        eventBody
        restrictionType
        fixedEndsAt
        meetingLinkDescription
        calendarEventReminders {
          ...CalendarEventReminder
        }
        meetingLinks {
          id
          userIds
          type
          calendarEventTypeId
          ownerId
          url
        }
      }
      inactiveUsers {
        id
        name
        email
        avatarUrl
        status
      }
    }
  }
  ${De}
`;
            a.a `
  mutation CreateMeetingLinkToken(
    $calendarEventTypeId: ID!
    $type: MeetingLinkTypeEnum!
    $ownerId: ID
    $userIds: [ID!]
  ) {
    createMeetingLinkToken(
      calendarEventTypeId: $calendarEventTypeId
      type: $type
      ownerId: $ownerId
      userIds: $userIds
    ) {
      meetingUrlLink
      errors
    }
  }
`;
            a.a `
  mutation DeleteMeetingLinkToken($id: ID!) {
    deleteMeetingLinkToken(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation CreateDirectMeetingLink($calendarEventTypeId: ID!, $userIds: [ID!]!, $ownerId: ID!) {
    createDirectMeetingLink(
      calendarEventTypeId: $calendarEventTypeId
      userIds: $userIds
      ownerId: $ownerId
    ) {
      meetingLink {
        id
        userIds
        type
        calendarEventTypeId
        ownerId
        url
      }
      alreadyActive
    }
  }
`;
            a.a `
  query GetMeetingRoutingRuleSets {
    team {
      id
      salesforceRoutingEnabled
      outreachRoutingEnabled
      salesloftRoutingEnabled
      meetingRoutingRuleSets {
        id
        name
        routingRules {
          ...RoutingRule
        }
        defaultRoutingRule {
          ...RoutingRule
        }
      }
      groups {
        __typename
        id
        name
        members {
          id
          email
          name
          avatarUrl
        }
      }
      users {
        __typename
        id
        email
        name
        avatarUrl
      }
    }
    fields {
      ...Field
    }
    externalObjects {
      ...ExternalObject
    }
    externalFields {
      ...ExternalField
    }
    segments {
      ...Segment
    }
    targetLists {
      ...TargetListMeta
    }
  }
  ${gt}
  ${et}
  ${Ne}
  ${He}
  ${_t}
  ${Ot}
`;
            a.a `
  mutation UpdateMeetingRoutingRule($id: ID!, $enabled: Boolean, $position: Int) {
    updateMeetingRoutingRule(id: $id, enabled: $enabled, position: $position) {
      errors
      routingRule {
        id
        ... on MeetingRoutingRule {
          enabled
          position
        }
      }
    }
  }
`;
            a.a `
  mutation DeleteMeetingRoutingRuleSet($id: ID!) {
    deleteMeetingRoutingRuleSet(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation CreateMeetingRoutingRuleSet(
    $name: String!
    $routingRules: [MeetingRoutingRuleInput!]
    $defaultRoutingRule: MeetingDefaultRoutingRuleInput
  ) {
    createMeetingRoutingRuleSet(
      name: $name
      routingRules: $routingRules
      defaultRoutingRule: $defaultRoutingRule
    ) {
      meetingRoutingRuleSet {
        id
        name
        routingRules {
          ...RoutingRule
        }
        defaultRoutingRule {
          ...RoutingRule
        }
      }
      errors
    }
  }
  ${gt}
`;
            a.a `
  mutation UpdateMeetingRoutingRuleSet($id: ID!, $name: String!) {
    updateMeetingRoutingRuleSet(id: $id, name: $name) {
      meetingRoutingRuleSet {
        id
        name
      }
      errors
    }
  }
`;
            a.a `
  subscription ActiveMeeting {
    activeMeeting {
      ...Meeting
      visitorId
    }
  }
  ${Ge}
`;
            a.a `
  mutation CreateMeeting($visitorId: ID!, $type: String!, $userNumber: String) {
    createMeeting(visitorId: $visitorId, type: $type, userNumber: $userNumber) {
      meeting {
        ...ActiveMeeting
      }
      errors
    }
  }
  ${rn}
`;
            a.a `
  mutation EndVideoMeeting($id: ID!) {
    endVideoMeeting(id: $id) {
      meeting {
        ...ActiveMeeting
      }
      errors
    }
  }
  ${rn}
`;
            a.a `
  query GetVisitorMeetings($id: ID!) {
    visitor(id: $id) {
      meetings {
        ...Meeting
      }
    }
  }
  ${Ge}
`;
            a.a `
  query GetCalendarEventTypes {
    team {
      users {
        id
        name
        email
        avatarUrl
      }
      calendarEventTypes {
        __typename
        id
        clientId @client
        name
        duration
        sendReminder
        eventTitle
        eventBody
        enableMeetingLink
        enableMeetingLinkRouted
        meetingLinkDescription
        externalTitle
        externalDescription
        meetingLink
        meetingLinkRouted
        calendarMinimumNotice
        rollingCount
        rollingUnits
        fixedStartsAt
        fixedEndsAt
        restrictionType
        enableCalendarEventTypeInChat
        calendarEventReminders {
          ...CalendarEventReminder
        }
        meetingRoutingRuleSet {
          id
          name
        }
        routingType
        meetingRoutingWeights {
          id
          userId
          weight
        }
      }
      meetingRoutingRuleSets {
        id
        name
        routingRules {
          ...RoutingRule
        }
        defaultRoutingRule {
          ...RoutingRule
        }
      }
    }
  }
  ${De}
  ${gt}
`;
            a.a `
  mutation UpdateCalendarEventType(
    $id: ID!
    $name: String!
    $duration: Int!
    $sendReminder: Boolean!
    $eventTitle: String!
    $eventBody: String!
    $enableMeetingLink: Boolean!
    $enableMeetingLinkRouted: Boolean!
    $meetingLinkDescription: String!
    $externalTitle: String!
    $externalDescription: String!
    $calendarEventReminders: [CalendarEventReminderInput!]
    $meetingRoutingRuleSetId: ID!
    $calendarMinimumNotice: Int!
    $routingType: CalendarEventTypeRoutingTypeEnum!
    $rollingCount: Int!
    $rollingUnits: CalendarEventTypeTimeUnitEnum!
    $fixedStartsAt: DateTime!
    $fixedEndsAt: DateTime!
    $restrictionType: CalendarEventTypeRestrictionTypeEnum!
    $meetingRoutingWeights: [MeetingRoutingWeightInput!]
    $enableCalendarEventTypeInChat: Boolean!
  ) {
    updateCalendarEventType(
      id: $id
      name: $name
      duration: $duration
      sendReminder: $sendReminder
      eventTitle: $eventTitle
      eventBody: $eventBody
      enableMeetingLink: $enableMeetingLink
      enableMeetingLinkRouted: $enableMeetingLinkRouted
      meetingLinkDescription: $meetingLinkDescription
      externalTitle: $externalTitle
      externalDescription: $externalDescription
      calendarEventReminders: $calendarEventReminders
      meetingRoutingRuleSetId: $meetingRoutingRuleSetId
      calendarMinimumNotice: $calendarMinimumNotice
      routingType: $routingType
      rollingCount: $rollingCount
      rollingUnits: $rollingUnits
      fixedStartsAt: $fixedStartsAt
      fixedEndsAt: $fixedEndsAt
      restrictionType: $restrictionType
      meetingRoutingWeights: $meetingRoutingWeights
      enableCalendarEventTypeInChat: $enableCalendarEventTypeInChat
    ) {
      calendarEventType {
        __typename
        id
        clientId @client
        name
        duration
        sendReminder
        eventTitle
        eventBody
        enableMeetingLink
        enableMeetingLinkRouted
        meetingLinkDescription
        meetingLinkRouted
        externalTitle
        externalDescription
        calendarMinimumNotice
        rollingCount
        rollingUnits
        fixedStartsAt
        fixedEndsAt
        restrictionType
        enableCalendarEventTypeInChat
        calendarEventReminders {
          ...CalendarEventReminder
        }
        meetingRoutingRuleSet {
          id
          name
        }
        routingType
        meetingRoutingWeights {
          id
          userId
          weight
        }
      }
      errors
    }
  }
  ${De}
`;
            a.a `
  mutation CreateCalendarEventType(
    $name: String!
    $duration: Int!
    $sendReminder: Boolean!
    $eventTitle: String!
    $eventBody: String!
    $enableMeetingLink: Boolean!
    $enableMeetingLinkRouted: Boolean!
    $meetingLinkDescription: String!
    $externalTitle: String!
    $externalDescription: String!
    $calendarEventReminders: [CalendarEventReminderInput!]
    $meetingRoutingRuleSetId: ID!
    $calendarMinimumNotice: Int!
    $routingType: CalendarEventTypeRoutingTypeEnum!
    $rollingCount: Int!
    $rollingUnits: CalendarEventTypeTimeUnitEnum!
    $fixedStartsAt: DateTime!
    $fixedEndsAt: DateTime!
    $restrictionType: CalendarEventTypeRestrictionTypeEnum!
    $meetingRoutingWeights: [MeetingRoutingWeightInput!]
    $enableCalendarEventTypeInChat: Boolean!
  ) {
    createCalendarEventType(
      name: $name
      duration: $duration
      sendReminder: $sendReminder
      eventTitle: $eventTitle
      eventBody: $eventBody
      enableMeetingLink: $enableMeetingLink
      enableMeetingLinkRouted: $enableMeetingLinkRouted
      meetingLinkDescription: $meetingLinkDescription
      externalTitle: $externalTitle
      externalDescription: $externalDescription
      calendarEventReminders: $calendarEventReminders
      meetingRoutingRuleSetId: $meetingRoutingRuleSetId
      calendarMinimumNotice: $calendarMinimumNotice
      routingType: $routingType
      rollingCount: $rollingCount
      rollingUnits: $rollingUnits
      fixedStartsAt: $fixedStartsAt
      fixedEndsAt: $fixedEndsAt
      restrictionType: $restrictionType
      meetingRoutingWeights: $meetingRoutingWeights
      enableCalendarEventTypeInChat: $enableCalendarEventTypeInChat
    ) {
      calendarEventType {
        __typename
        id
        clientId @client
        name
        duration
        sendReminder
        eventTitle
        eventBody
        enableMeetingLink
        enableMeetingLinkRouted
        meetingLinkDescription
        externalTitle
        externalDescription
        meetingLink
        meetingLinkRouted
        calendarMinimumNotice
        rollingCount
        rollingUnits
        fixedStartsAt
        fixedEndsAt
        restrictionType
        enableCalendarEventTypeInChat
        calendarEventReminders {
          ...CalendarEventReminder
        }
        meetingRoutingRuleSet {
          id
          name
        }
        routingType
        meetingRoutingWeights {
          id
          userId
          weight
        }
      }
      errors
    }
  }
  ${De}
`;
            a.a `
  mutation DeleteCalendarEventType($id: ID!) {
    deleteCalendarEventType(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation MessageTransformation(
    $includeCitations: Boolean
    $input: String!
    $language: String
    $source: MessageTransformationSourceEnum!
    $tone: MessageTransformationToneEnum
    $type: MessageTransformationTypeEnum!
    $visitorId: String
    $autopounceSettings: AutoPounceSettingsInput
  ) {
    messageTransformation(
      includeCitations: $includeCitations
      input: $input
      language: $language
      source: $source
      tone: $tone
      type: $type
      visitorId: $visitorId
      autopounceSettings: $autopounceSettings
    ) {
      citationSources {
        ...AiCitationSource
      }
      errors
      interaction {
        ...AiInteraction
      }
      inputLanguage
      interactionId
      output
      outputLanguage
    }
  }
  ${Vt}
  ${Gt}
`;
            a.a `
  query NotificationsConnection($after: String, $before: String) {
    notificationsConnection(first: 20, after: $after, before: $before) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...Notification
          mutedUserIds
        }
        cursor
      }
    }
  }
  ${Le}
  ${ct}
`;
            a.a `
  subscription Notifications {
    notifications {
      ...Notification
      mutedUserIds
    }
  }
  ${ct}
`;
            a.a `
  query VisitorPageViewsQuery($id: ID!, $after: String!) {
    visitor(id: $id) {
      id
      recentPageViews(first: 10, after: $after) {
        pageInfo {
          ...PageInfo
        }
        edges {
          node {
            ...PageView
          }
        }
      }
    }
  }
  ${Le}
  ${je}
`;
            a.a `
  query Visitor($id: ID!) {
    visitor(id: $id) {
      ...VisitorsDataContainerVisitorV2
    }
  }
  ${lt}
`;
            a.a `
  query GetRefreshedBots {
    bots {
      ...BotMeta
    }
  }
  ${vt}
`;
            a.a `
  query GetBots(
    $includeDiscardedDependentFields: Boolean
    $includeDrafts: Boolean
    $types: [String!]
  ) {
    bots(includeDrafts: $includeDrafts, types: $types) {
      ...BotMeta
    }
    fields(includeDiscardedDependents: $includeDiscardedDependentFields) {
      ...FieldWithSalesforceBindings
    }
    externalFields(includeDiscardedDependents: $includeDiscardedDependentFields) {
      ...ExternalField
    }
    externalObjects(includeDiscardedDependents: $includeDiscardedDependentFields) {
      ...ExternalObject
    }
    segments {
      ...Segment
    }
    team {
      id
      salesforceRoutingEnabled
      outreachRoutingEnabled
      salesloftRoutingEnabled
      calendarEventTypes {
        ...TeamCalendarEventType
      }
      groups {
        id
        name
        members {
          id
          email
          name
          avatarUrl
        }
      }
      salesforceLeadExternalObjectAction {
        ...ExternalObjectAction
      }
      pardotProspectExternalObjectAction {
        ...ExternalObjectAction
      }
      targetLists {
        ...TargetListMeta
      }
      linkedinCampaigns {
        id
        name
      }
      googleAdCampaigns {
        id
        name
      }
      bomboraTopicMappings {
        id
        name
      }
    }
  }
  ${vt}
  ${At}
  ${He}
  ${Ne}
  ${_t}
  ${Re}
  ${Ie}
  ${Ot}
`;
            a.a `
  mutation UpdateBot($id: ID!, $enabled: Boolean, $position: Int, $archived: Boolean) {
    createOrUpdateBot(id: $id, enabled: $enabled, position: $position, archived: $archived) {
      errors
      bot {
        ...BotMeta
      }
    }
  }
  ${vt}
`;
            a.a `
  mutation CreateOrUpdateListGrouping(
    $id: ID
    $name: String
    $color: String
    $position: Int
    $addBotId: ID
    $removeBotId: ID
  ) {
    createOrUpdateListGrouping(
      id: $id
      name: $name
      color: $color
      position: $position
      addBotId: $addBotId
      removeBotId: $removeBotId
    ) {
      errors
      team {
        id
        listGroupings {
          ...ListGrouping
        }
      }
    }
  }
  ${Qt}
`;
            a.a `
  mutation DeleteListGrouping($id: ID!) {
    deleteListGrouping(id: $id) {
      errors
      team {
        id
        listGroupings {
          ...ListGrouping
        }
      }
    }
  }
  ${Qt}
`;
            a.a `
  mutation ValidateFieldSourceFormula($formula: String!) {
    validateFieldSourceFormula(formula: $formula) {
      errors
      valid
    }
  }
`;
            a.a `
  query CurrentAccount {
    account {
      id
      name
      firstName
      lastName
      email
      phoneNumber
      jobTitle
      avatarUrl
      timeZone
      meetingConferenceDetails
      calendarInviteBody
      calendarMinimumNotice
      calendarBuffer
      calendarAvailability {
        day
        start
        end
        __typename
      }
      mobileNotificationSchedule {
        day
        start
        end
        __typename
      }
      enableReturnVisitorAlerts
      enableVoiceAlerts
      enableBlurBackground
      defaultNotificationSound
      dismissedDesktopAnnouncement
      waitingForRepNotificationSound
      waitingForRepVoiceAlert
      role
      permissionsAdmin
      permissionsCsm
      permissionsChat
      permissionsMeeting
      permissionsViewAllVisitors
      permissionsEditAllTeamSettings
      permissionsEditTeammates
      permissionsEditGroups
      permissionsEditTeamCalendar
      permissionsEditBusinessHours
      permissionsEditSso
      permissionsEditMessenger
      permissionsEditVsiitorFields
      permissionsEditSegments
      permissionsEditLiveStreams
      permissionsEditRouting
      permissionsEditExperiences
      permissionsEditMacros
      permissionsEditSalesforce
      permissionsEditPardot
      permissionsEditMarketo
      permissionsEditHubspot
      permissionsEditEloqua
      permissionsEditOutreach
      permissionsEditClearbit
      permissionsEditSixsense
      permissionsEditDemandbase
      permissionsEditSlack
      permissionsEditMicrosoft
      permissionsEditZoominfo
      permissionsEditSalesloft
      permissionsEditLinkedin
      permissionsEditGoogle
      permissionsViewAllStatistics
      permissionsEditAnalytics
      permissionsExportReports
      permissionsBotView
      permissionsBotEdit
      permissionsBotPublish
      permissionsEditMeetingTypes
      permissionsEditMeetingRouting
      permissionsEditAutoPounce
      available
      videoAvailable
      autoPounceAvailable
      snoozeEndsAt
      hasMobile
      mobileRequestForChatSound
      mobileMessageReceivedSound
      __typename
      salesforceConnection {
        id
        __typename
        updatedAt
        username
      }
      calendarConnection {
        ...CalendarConnection
      }
      slackConnection {
        id
        __typename
      }
      microsoftConnection {
        id
        __typename
        invalid
      }
      externalMeetingConnection {
        id
        __typename
        updatedAt
        email
        type
        invalid
        invalidAt
        scopes
      }
      macros {
        ...Macro
      }
      announcements {
        ...Announcement
      }
      team {
        id
        allowlistedDomains
        company
        appexchangeCompanyName
        token
        phoneNumber
        countryCode
        features
        preferencesSendGaEvents
        preferencesSendFbEvents
        preferencesShowIdleVisitorsDefault
        preferencesShowSalesforceMatchSettings
        preferencesSfdcOauthPromptSelectAccount
        preferencesDisableScimRoleSync
        preferencesDisableDesktopAppAnnouncement
        defaultSyncActionType
        samlEnabled
        samlVerified
        scimEnabled
        scimToken
        identityProvider
        maximumExportRows
        createdAt
        signalsToken
        privacyPolicyMaxLength
        __typename
        activeLinkedinAdAccounts {
          ...LinkedInAdAccount
        }
        activeGoogleAdAccounts {
          ...GoogleAdAccount
        }
        salesforceConnection {
          id
          __typename
          updatedAt
          username
          invalid
          sandbox
          instanceUrl
          matchSettings {
            __typename
            type
            contactExternalFieldId
            leadExternalFieldId
          }
        }
        pardotConnection {
          id
          __typename
          email
          dynamicContentConfigured
          activityTrackingConfigured
          invalid
          demo
          businessUnitId
          username
        }
        zoomInfoConnection {
          id
          __typename
          email
          invalid
          enterpriseEnabled
          websightsEnabled
          rateLimitedEnterprise
          rateLimitedWebsights
        }
        marketoConnection {
          id
          __typename
          munchkinId
          invalid
        }
        clearbitConnection {
          id
          __typename
          secretKeyMasked
          revealEnabled
          enrichmentEnabled
          confidenceThreshold
        }
        sixsenseConnection {
          id
          __typename
          secretKeyMasked
          confidenceThreshold
          productLines
        }
        slackConnection {
          id
          __typename
          invalid
          authorizedUserEmailScopes
        }
        microsoftConnection {
          id
          __typename
          invalid
          email
        }
        demandbaseConnection {
          id
          __typename
          secretKeyMasked
        }
        hubspotConnection {
          id
          __typename
          visitorAssociationConfigured
          hasAllScopes
          invalid
          identifier
        }
        linkedinConnection {
          ...LinkedInConnection
        }
        facebookConnection {
          ...FacebookConnection
        }
        eloquaConnection {
          id
          __typename
          visitorAssociationConfigured
          invalid
        }
        outreachGalaxyConnection {
          id
          __typename
          invalid
        }
        salesloftConnection {
          id
          __typename
          invalid
        }
        googleConnection {
          ...GoogleConnection
        }
        users {
          ...TeamUser
        }
        inactiveUsers {
          ...TeamUser
        }
        groups {
          id
          __typename
          name
          members {
            id
            __typename
          }
        }
        segments {
          ...SegmentMeta
        }
        calendarEventTypes {
          id
          name
          duration
          sendReminder
          eventTitle
          eventBody
          enableMeetingLink
          enableCalendarEventTypeInChat
          __typename
        }
        macros {
          ...Macro
        }
        fields {
          __typename
          id
          name
          apiName
          type
          hidden
          listVisible
        }
        variables {
          ...Variable
        }
        dashboards {
          __typename
          id
          type
          settings {
            ...DashboardSettings
          }
        }
        listGroupings {
          ...ListGrouping
        }
        businessHours {
          __typename
          days
          startHour
          endHour
          timeZone
        }
        calendarEventExclusionDates {
          ...CalendarEventExclusionDate
        }
      }
      activeMeeting {
        id
        status
        token
        startedAt
        visitorId
        userId
        __typename
      }
    }
  }
  ${$t}
  ${Wt}
  ${qt}
  ${Jt}
  ${tn}
  ${Zt}
  ${nn}
  ${en}
  ${Ht}
  ${Kt}
  ${Yt}
  ${Xt}
  ${Qt}
  ${an}
`;
            a.a `
  query CurrentMeetingUserAccount {
    account {
      id
      name
      firstName
      lastName
      email
      phoneNumber
      jobTitle
      avatarUrl
      timeZone
      meetingConferenceDetails
      calendarInviteBody
      calendarMinimumNotice
      calendarBuffer
      calendarAvailability {
        day
        start
        end
        __typename
      }
      mobileNotificationSchedule {
        day
        start
        end
        __typename
      }
      enableReturnVisitorAlerts
      enableVoiceAlerts
      enableBlurBackground
      defaultNotificationSound
      dismissedDesktopAnnouncement
      waitingForRepNotificationSound
      waitingForRepVoiceAlert
      role
      permissionsAdmin
      permissionsCsm
      permissionsChat
      permissionsMeeting
      permissionsViewAllVisitors
      permissionsEditAllTeamSettings
      permissionsEditTeammates
      permissionsEditGroups
      permissionsEditTeamCalendar
      permissionsEditBusinessHours
      permissionsEditSso
      permissionsEditMessenger
      permissionsEditVsiitorFields
      permissionsEditSegments
      permissionsEditLiveStreams
      permissionsEditRouting
      permissionsEditExperiences
      permissionsEditMacros
      permissionsEditSalesforce
      permissionsEditPardot
      permissionsEditMarketo
      permissionsEditHubspot
      permissionsEditEloqua
      permissionsEditOutreach
      permissionsEditClearbit
      permissionsEditSixsense
      permissionsEditDemandbase
      permissionsEditSlack
      permissionsEditMicrosoft
      permissionsEditZoominfo
      permissionsEditSalesloft
      permissionsEditLinkedin
      permissionsEditGoogle
      permissionsViewAllStatistics
      permissionsEditAnalytics
      permissionsExportReports
      permissionsBotView
      permissionsBotEdit
      permissionsBotPublish
      permissionsEditMeetingTypes
      permissionsEditMeetingRouting
      permissionsEditAutoPounce
      available
      videoAvailable
      autoPounceAvailable
      snoozeEndsAt
      hasMobile
      mobileRequestForChatSound
      mobileMessageReceivedSound
      __typename
      salesforceConnection {
        id
        __typename
        updatedAt
        username
      }
      calendarConnection {
        ...CalendarConnection
      }
      slackConnection {
        id
        __typename
      }
      microsoftConnection {
        id
        __typename
        invalid
      }
      externalMeetingConnection {
        id
        __typename
        updatedAt
        email
        type
        invalid
        invalidAt
        scopes
      }
      announcements {
        ...Announcement
      }
      team {
        id
        countryCode
        features
        samlEnabled
        samlVerified
        scimEnabled
        identityProvider
        users {
          id
          name
          email
          avatarUrl
          calendarConnection {
            id
            invalid
          }
          __typename
        }
        __typename
      }
    }
  }
  ${$t}
  ${qt}
`;
            a.a `
  query GetDashboardTileData(
    $tileDataInputs: [DashboardTileDataInput!]!
    $filter: String!
    $startDate: DateTime!
    $endDate: DateTime!
    $timeZone: String
    $dashboardId: String
  ) {
    tilesData(
      tileDataInputs: $tileDataInputs
      filter: $filter
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      dashboardId: $dashboardId
    ) {
      clientId
      __typename
      ... on DashboardTileNumericResult {
        numericData: data
        numericComparisonData: comparisonData
      }
      ... on DashboardTileDatedResult {
        datedData: data {
          date
          metric
        }
        datedComparisonData: comparisonData {
          metricName
          data {
            date
            metric
          }
        }
        uniqueCounts
      }
      ... on DashboardTileFunnelResult {
        funnelData: data
        funnelComparisonData: comparisonData {
          metricName
          data
        }
      }
      ... on DashboardTileUserAvailabilityTimelineResult {
        userAvailabilityTimespans {
          userId
          startsAt
          endsAt
        }
        autoPounceAvailabilityTimespans {
          userId
          startsAt
          endsAt
        }
      }
      ... on DashboardTileLeaderboardResult {
        rows {
          ... on RepLeaderboardRowDataResult {
            userId
            pounceAttempts
            inboundChatVisitorEngagedConversation
            pounceEngagedConversation
            autoPounceEngagedConversation
            autoPounceMissedConnections
            callsFromRep
            successfulCallsFromRep
            engagementConversations
            leadCaptureEloquaByRep
            leadCaptureMarketoByRep
            leadCaptureHubspotByRep
            leadCapturePardotByRep
            leadCaptureSalesforceByRep
            meetingsBookedByRep
            meetingsOfferedByRep
            meetingsBookedForRep
            averageRepAvailableHours
            totalRepAvailableHours
          }
          ... on BotLeaderboardRowDataResult {
            botId
            callsFromExperience
            successfulCallsFromExperience
            engagementConversations
            engagementExperiences
            leadCaptureEloquaByExperience
            leadCaptureMarketoByExperience
            leadCaptureHubspotByExperience
            leadCapturePardotByExperience
            leadCaptureSalesforceByExperience
            meetingsBookedByExperience
            meetingsOfferedByExperience
            pounceAttempts
            autoPounceAttempts
            sessionExperience
            sessionExperienceTriggered
            sessionExperienceShown
            opensBeforePounce
            opensAfterPounce
            pounceEngagedConversation
            autoPounceEngagedConversation
            inboundChatVisitorEngagedConversation
          }
          ... on InboundChatLeaderboardRowDataResult {
            userId
            avgRepResponseTime
            callsFromInboundChat
            successfulCallsFromInboundChat
            inboundChatVisitorEngagedConversation
            leadCaptureEloquaByRepAfterInboundChat
            leadCaptureMarketoByRepAfterInboundChat
            leadCaptureHubspotByRepAfterInboundChat
            leadCapturePardotByRepAfterInboundChat
            leadCaptureSalesforceByRepAfterInboundChat
            meetingsBookedAfterInboundChat
            meetingsOfferedAfterInboundChat
            sessionInboundChat
          }
          ... on PounceLeaderboardRowDataResult {
            userId
            callsFromPounce
            successfulCallsFromPounce
            leadCaptureEloquaByRepAfterPounce
            leadCaptureMarketoByRepAfterPounce
            leadCaptureHubspotByRepAfterPounce
            leadCapturePardotByRepAfterPounce
            leadCaptureSalesforceByRepAfterPounce
            meetingsBookedAfterPouncing
            meetingsOfferedAfterPouncing
            pounceAttempts
            autoPounceAttempts
            pounceEngagedConversation
            autoPounceEngagedConversation
            pounceRoutings
            autoPounceAvgRepResponseTime
          }
          ... on MeetingChannelLeaderboardRowDataResult {
            meetingOfferChannelType
            meetingOfferedByChannel
            meetingPickedByChannel
            meetingCancelledByChannel
            meetingRescheduledByChannel
            meetingLeadCaptureSalesforceByChannel
            meetingLeadCapturePardotByChannel
            meetingLeadCaptureMarketoByChannel
            meetingLeadCaptureEloquaByChannel
            meetingLeadCaptureHubspotByChannel
          }
        }
      }
    }
  }
`;
            a.a `
  query GetReportsMetadata {
    fields {
      ...Field
    }
    externalFields {
      ...ExternalField
    }
    bots {
      id
      clientId @client
      type
      name
      loadingDraftScript
    }
    calendarEventTypes {
      id
      name
    }
    team {
      id
      offers {
        id
        name
      }
    }
    targetLists {
      ...TargetListMeta
    }
  }
  ${et}
  ${He}
  ${Ot}
`;
            a.a `
  query GET_OPPORTUNITY_DATA_V2(
    $stages: [String!]
    $status: String
    $startDate: DateTime!
    $endDate: DateTime!
    $influenceType: OpportunityInfluenceTypeEnum!
    $conversationDateThreshold: Int
    $opportunityTypes: [String!]
    $attributedOpportunityDataInputs: [AttributedOpportunityDataInput!]!
  ) {
    opportunityDashboardData(
      stages: $stages
      status: $status
      startDate: $startDate
      endDate: $endDate
      influenceType: $influenceType
      conversationDateThreshold: $conversationDateThreshold
      opportunityTypes: $opportunityTypes
      attributedOpportunityDataInputs: $attributedOpportunityDataInputs
    ) {
      attributedOpportunities {
        attributionModel
        hideTile
        opportunities {
          reportFilter
          name
          opportunityId: id
          fieldValues {
            name
            value
          }
        }
      }
      currencySymbol
    }
  }
`;
            a.a `
  mutation UpdateOpportunityDashboardSettings(
    $id: ID!
    $settings: OpportunityDashboardSettingsInput!
  ) {
    updateOpportunityDashboardSettings(id: $id, settings: $settings) {
      errors
      dashboard {
        id
        type
        settings {
          ...DashboardSettings
        }
      }
    }
  }
  ${Xt}
`;
            a.a `
  query GetTeamDashboards {
    team {
      dashboards {
        id
        type
        settings {
          ...DashboardSettings
        }
      }
    }
  }
  ${Xt}
`;
            a.a `
  query GetOpportunityExternalFields {
    externalFields(sources: [SALESFORCE_OPPORTUNITY]) {
      ...ExternalField
    }
  }
  ${He}
`;
            a.a `
  query GetReportData(
    $first: Int!
    $after: String
    $object: String!
    $filter: String!
    $columns: [String!]!
    $order: String!
  ) {
    reportData(
      first: $first
      after: $after
      object: $object
      filter: $filter
      columns: $columns
      order: $order
    ) {
      pageInfo {
        ...PageInfo
      }
      nodes {
        objectId
        visitorId
        createdAt
        data
        meta {
          visitorId
          createdAt
          companyId
        }
      }
    }
  }
  ${Le}
`;
            a.a `
  query GetReportRowsCount($object: String!, $filter: String!) {
    reportRowsCount(object: $object, filter: $filter) {
      count
      description
    }
  }
`;
            a.a `
  query GetUsersAvailability {
    users {
      __typename
      id
      available
    }
  }
`;
            a.a `
  query VisitorQuery($id: ID!) {
    visitor(id: $id) {
      ...ConsoleVisitorDetail
    }
  }
  ${rt}
`;
            a.a `
  subscription VisitorDetailUpdates($visitorId: ID!) {
    visitorDetailUpdates(visitorId: $visitorId) {
      externalIdentifiers {
        ...ExternalVisitorIdentifier
      }
      message {
        ...Message
        conversation {
          ...Conversation
          routings {
            ...RoutingDetail
          }
        }
      }
      pageView {
        ...PageView
      }
      readReceipt {
        readMessageId
        readAt
      }
      displayedExternalFieldValues {
        ...ExternalFieldValue
      }
      syncAction {
        ...ExternalObjectActionDetail
      }
      companyExternalIdentifiers {
        ...VisitorCompanyExternalIdentifier
      }
      salesforceAccountMatchSource
      calendarEventPickMessages {
        ...CalendarEventPickMessage
      }
      calendarEventOfferMessages {
        ...CalendarEventOfferMessage
      }
    }
  }
  ${$e}
  ${it}
  ${ot}
  ${Je}
  ${je}
  ${We}
  ${xe}
  ${qe}
  ${tt}
  ${nt}
`;
            a.a `
  mutation StartConversation($id: ID!) {
    startConversation(visitorId: $id) {
      errors
      visitor {
        ...Visitor
        lastConversation {
          ...Conversation
          routings {
            ...RoutingDetail
          }
        }
        conversations {
          ...Conversation
          routings {
            ...RoutingDetail
          }
        }
        messages {
          ...Message
        }
      }
    }
  }
  ${we}
  ${ot}
  ${Je}
  ${it}
`;
            a.a `
  mutation RunVisitorSyncAction($visitorId: ID!) {
    runVisitorSyncAction(visitorId: $visitorId) {
      errors
      visitor {
        id
        fieldValues {
          ...FieldValue
        }
      }
    }
  }
  ${Fe}
`;
            a.a `
  mutation SetFieldValues($visitorId: ID!, $fieldValues: [FieldValueInput!]!) {
    setFieldValues(visitorId: $visitorId, fieldValues: $fieldValues) {
      errors
      visitor {
        ...Visitor
        fieldValues {
          ...FieldValue
        }
      }
    }
  }
  ${we}
  ${Fe}
`;
            a.a `
  mutation UpdateVisitorSyncIdentity(
    $visitorId: ID!
    $salesforceId: String
    $pardotProspectId: String
  ) {
    updateVisitorSyncIdentity(
      visitorId: $visitorId
      salesforceId: $salesforceId
      pardotProspectId: $pardotProspectId
    ) {
      errors
      visitor {
        ...Visitor
      }
    }
  }
  ${we}
`;
            a.a `
  mutation clearVisitorIdentities($visitorId: ID!) {
    clearVisitorIdentities(visitorId: $visitorId) {
      errors
      visitor {
        ...Visitor
        companyDomain
        fieldValues {
          ...FieldValue
        }
        externalIdentifiers {
          ...ExternalVisitorIdentifier
        }
        displayedExternalFieldValues {
          ...ExternalFieldValue
        }
        companyExternalIdentifiers {
          ...CompanyExternalIdentifier
        }
        syncAction {
          ...ExternalObjectActionDetail
        }
      }
    }
  }
  ${we}
  ${Fe}
  ${$e}
  ${We}
  ${Me}
  ${xe}
`;
            a.a `
  query GetWebsiteBuilderToken {
    account {
      websiteBuilderToken
    }
  }
`;
            a.a `
  query GetOffers {
    team {
      offers {
        ...Offer
      }
    }
  }
  ${zt}
`;
            a.a `
  query GetFilterProps {
    fields {
      ...Field
    }
    externalObjects {
      ...ExternalObject
    }
    externalFields {
      ...ExternalField
    }
    segments {
      ...Segment
    }
    targetLists {
      ...TargetListMeta
    }
  }
  ${et}
  ${Ne}
  ${He}
  ${_t}
  ${Ot}
`;
            a.a `
  mutation CreateOffer(
    $content: ContentInput!
    $filter: FilterInput!
    $location: LocationEnum!
    $name: String!
    $position: Int
    $target: TargetInput!
    $ctaType: CtaTypeEnum!
  ) {
    createOffer(
      content: $content
      filter: $filter
      location: $location
      name: $name
      position: $position
      target: $target
      ctaType: $ctaType
    ) {
      ... on OfferFailureResult {
        errors
      }
      ... on OfferSuccessResult {
        offer {
          ...Offer
        }
      }
    }
  }
  ${zt}
`;
            a.a `
  mutation UpdateOffer(
    $id: ID!
    $content: ContentInput!
    $filter: FilterInput!
    $location: LocationEnum!
    $name: String!
    $target: TargetInput!
    $ctaType: CtaTypeEnum!
  ) {
    updateOffer(
      id: $id
      content: $content
      filter: $filter
      location: $location
      name: $name
      target: $target
      ctaType: $ctaType
    ) {
      ... on OfferFailureResult {
        errors
      }
      ... on OfferSuccessResult {
        offer {
          ...Offer
        }
      }
    }
  }
  ${zt}
`;
            a.a `
  mutation UpdateOfferPosition($id: ID!, $position: Int!) {
    updateOfferPosition(id: $id, position: $position) {
      ... on OfferFailureResult {
        errors
      }
      ... on OfferSuccessResult {
        offer {
          ...Offer
        }
      }
    }
  }
  ${zt}
`;
            a.a `
  mutation DeleteOffer($id: ID!) {
    deleteOffer(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation ToggleOffer($id: ID!, $enabled: Boolean!) {
    toggleOffer(id: $id, enabled: $enabled) {
      ... on OfferFailureResult {
        errors
      }
      ... on OfferSuccessResult {
        offer {
          ...Offer
        }
      }
    }
  }
  ${zt}
`;
            a.a `
  query GetSegments {
    segments {
      ...Segment
    }
  }
  ${_t}
`;
            a.a `
  query GetOffersAnalyticsCount($offerId: ID!, $startDate: DateTime!, $endDate: DateTime!) {
    offer(id: $offerId) {
      analyticsCount(startDate: $startDate, endDate: $endDate) {
        dismissCount
        shownCount
        clickCount
        conversionCount
        formFillCount
        meetingCount
        repConversationCount
        botConversationCount
      }
    }
  }
`;
            a.a `
  query GetOffersAnalyticsData(
    $offerId: ID!
    $startDate: DateTime!
    $endDate: DateTime!
    $conversionFilter: ConversionFilterEnum!
  ) {
    offer(id: $offerId) {
      analyticsData(startDate: $startDate, endDate: $endDate, conversionFilter: $conversionFilter) {
        id
        startedAt
        name
        email
        company
        conversionsCount
        segments
      }
    }
  }
`;
            a.a `
  mutation CreateSegment($segment: SegmentInput!) {
    createSegment(segment: $segment) {
      segment {
        ...Segment
      }
      errors
    }
  }
  ${_t}
`;
            a.a `
  mutation UpdateSegment($segment: SegmentInput!) {
    updateSegment(segment: $segment) {
      segment {
        ...Segment
      }
      errors
    }
  }
  ${_t}
`;
            a.a `
  mutation DeleteSegment($id: ID!) {
    deleteSegment(id: $id) {
      errors
    }
  }
`;
            a.a `
  query FieldsAndSegments {
    team {
      bomboraTopicMappings {
        id
        name
      }
    }
    fields {
      ...Field
    }
    externalObjects {
      ...ExternalObject
    }
    externalFields {
      ...ExternalField
    }
    targetLists {
      ...TargetListMeta
    }
    segments {
      ...Segment
      draftExperimentBotNames
      publishExperimentBotNames
    }
    externalLists {
      ...ExternalList
    }
  }
  ${et}
  ${Ne}
  ${He}
  ${Ot}
  ${_t}
  ${on}
`;
            a.a `
  query CompanySignals($companyDomain: String!) {
    company(domain: $companyDomain) {
      id
      cachedCurrentTrend
      cachedSignalScore
      cachedSignalScoreState
    }
  }
`;
            a.a `
  query GetSignalsListData(
    $first: Int!
    $after: String
    $id: ID
    $filter: String
    $columns: [String!]!
    $order: String!
  ) {
    signalsListData(
      first: $first
      after: $after
      id: $id
      filter: $filter
      columns: $columns
      order: $order
    ) {
      pageInfo {
        ...PageInfo
      }
      nodes {
        objectId
        visitorId
        createdAt
        data
        meta {
          visitorId
          createdAt
          companyId
        }
      }
    }
  }
  ${Le}
`;
            a.a `
  query GetSignalsListRowsCount($id: ID, $filter: String) {
    signalsListRowsCount(id: $id, filter: $filter) {
      count
      description
    }
  }
`;
            a.a `
  query CachedInterpolatedSignalsQuery($companyId: ID!) {
    company(id: $companyId) {
      id
      cachedInterpolatedSignals {
        time
        temperature
        signalScore
        activityWeight
        highIntentAction
        sessionId
        visitorId
      }
    }
  }
`;
            a.a `
  query GetSignalsMetadata($sources: [ExternalSourceEnum!]!) {
    externalFields(sources: $sources) {
      ...ExternalField
    }
    segments(type: COMPANY) {
      ...Segment
    }
    team {
      id
      companyExternalObjectFields {
        id
      }
      bomboraTopicMappings {
        id
        name
      }
    }
  }
  ${He}
  ${_t}
`;
            a.a `
  query GetTimelineView(
    $companyId: ID!
    $companyExternalIdentifierId: ID
    $filter: SignalsFilterInput
    $startDate: DateTime!
    $endDate: DateTime!
  ) {
    company(id: $companyId, companyExternalIdentifierId: $companyExternalIdentifierId) {
      id
      sessions: archivedSessions(
        last: 10
        startDate: $startDate
        endDate: $endDate
        filter: $filter
      ) {
        ...ArchivedSessionActivity
      }
    }
  }
  ${Nt}
`;
            a.a `
  query GetMoreSessions(
    $companyId: ID!
    $companyExternalIdentifierId: ID
    $before: String
    $filter: SignalsFilterInput
    $startDate: DateTime!
    $endDate: DateTime!
  ) {
    company(id: $companyId, companyExternalIdentifierId: $companyExternalIdentifierId) {
      id
      sessions: archivedSessions(
        last: 15
        before: $before
        filter: $filter
        startDate: $startDate
        endDate: $endDate
      ) {
        ...ArchivedSessionActivity
      }
    }
  }
  ${Nt}
`;
            a.a `
  query GetMoreSessionsFromTop(
    $companyId: ID!
    $companyExternalIdentifierId: ID
    $filter: SignalsFilterInput
    $startDate: DateTime!
    $endDate: DateTime!
  ) {
    company(id: $companyId, companyExternalIdentifierId: $companyExternalIdentifierId) {
      id
      sessions: archivedSessions(
        first: 15
        filter: $filter
        startDate: $startDate
        endDate: $endDate
      ) {
        ...ArchivedSessionActivity
      }
    }
  }
  ${Nt}
`;
            a.a `
  query GetBomboraCard($companyId: ID!) {
    company(id: $companyId) {
      id
      bomboraTopics {
        name
        score
      }
    }
  }
`;
            a.a `
  query GetOccupiedSelector {
    smartCtaBots {
      id
      name
      domTriggers {
        ...DomTrigger
      }
    }
  }
  ${ht}
`;
            a.a `
  query GetDraftScriptInvalidTrigger($id: ID!) {
    bot(id: $id) {
      draftScriptInvalidTriggers {
        ...DomTrigger
      }
    }
  }
  ${ht}
`;
            a.a `
  mutation SyncCurrentScriptInvalidTriggers($id: ID!) {
    syncBotInvalidTrigger(id: $id) {
      errors
      brokenTriggers {
        ...DomTrigger
      }
    }
  }
  ${ht}
`;
            a.a `
  mutation CreateWebsiteExperiment(
    $websiteExperienceId: ID!
    $variations: [WebsiteExperimentVariationInput!]!
  ) {
    createWebsiteExperiment(websiteExperienceId: $websiteExperienceId, variations: $variations) {
      websiteExperience {
        ...WebsiteExperience
      }
      errors
    }
  }
  ${wt}
`;
            a.a `
  mutation DeleteWebsiteExperience($id: ID!) {
    deleteWebsiteExperience(id: $id) {
      errors
    }
  }
`;
            a.a `
  mutation UpdateAudience(
    $websiteExperienceId: ID!
    $audienceName: String!
    $filter: FilterInput!
  ) {
    updateAudience(
      websiteExperienceId: $websiteExperienceId
      audienceName: $audienceName
      filter: $filter
    ) {
      websiteExperience {
        ...WebsiteExperience
      }
      errors
    }
  }
  ${wt}
`;
            a.a `
  mutation CreateWebsiteExperience($name: String!, $audienceName: String!, $filter: FilterInput!) {
    createWebsiteExperience(name: $name, audienceName: $audienceName, filter: $filter) {
      websiteExperience {
        ...WebsiteExperience
      }
      errors
    }
  }
  ${wt}
`;
            a.a `
  query GetWebsiteExperiences {
    team {
      smartCtaTriggersWithBots {
        ...SmartCtaBot
      }
      websiteExperiences {
        ...WebsiteExperience
      }
    }
    fields {
      ...Field
    }
    externalObjects {
      ...ExternalObject
    }
    externalFields {
      ...ExternalField
    }
    segments {
      ...Segment
    }
    targetLists {
      ...TargetListMeta
    }
  }
  ${Lt}
  ${wt}
  ${et}
  ${Ne}
  ${He}
  ${_t}
  ${Ot}
`;
            a.a `
  mutation UpdateWebsiteExperience($id: ID!, $enabled: Boolean, $name: String) {
    updateWebsiteExperience(id: $id, enabled: $enabled, name: $name) {
      websiteExperience {
        ...WebsiteExperience
      }
      errors
    }
  }
  ${wt}
`;
            a.a `
  query GetHeaders {
    impliedCompanyExternalIdentifier {
      ...CompanyExternalIdentifierHeadersForIntegrations
    }
    team {
      id
      users {
        id
        name
        avatarUrl
      }
      features
    }
  }
  ${It}
`;
            a.a `
  mutation DisconnectUserGoogle {
    disconnectUserGoogle {
      errors
    }
  }
`;
            a.a `
  mutation DisconnectUserMicrosoft {
    disconnectUserMicrosoft {
      errors
    }
  }
`;
            a.a `
  mutation UpdateUserMeetingDetails($meetingConferenceDetails: String) {
    updateUserProfile(meetingConferenceDetails: $meetingConferenceDetails) {
      user {
        meetingConferenceDetails
      }
    }
  }
`;
            a.a `
  mutation DisconnectUserMicrosoftTeams {
    disconnectUserMicrosoftTeams {
      errors
    }
  }
`;
            a.a `
  mutation DisconnectUserZoom {
    disconnectUserZoom {
      errors
    }
  }
`;
            a.a `
  mutation UpdateUserProfile(
    $firstName: String
    $lastName: String
    $jobTitle: String
    $avatarFileName: String
  ) {
    updateUserProfile(
      firstName: $firstName
      lastName: $lastName
      jobTitle: $jobTitle
      avatarFileName: $avatarFileName
    ) {
      user {
        firstName
        lastName
        jobTitle
        avatarUrl
      }
    }
  }
`;
            a.a `
  mutation UpdateUserOnboardingState($onboardingState: String!) {
    updateUserOnboardingState(onboardingState: $onboardingState) {
      errors
      onboardingState
    }
  }
`;
            a.a `
  query GetUser {
    account {
      id
      firstName
      lastName
      jobTitle
      avatarUrl
      onboardingState
      meetingConferenceDetails
      role
      team {
        features
      }
      calendarConnection {
        id
        type
        email
      }
      externalMeetingConnection {
        id
        type
        email
      }
    }
  }
`
        },
        152: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M3.444 6.919a.75.75 0 00-.694.748c0 1.891.768 3.27 1.858 4.163.842.69 1.854 1.07 2.809 1.201v1.302a.75.75 0 001.5 0v-1.302c.178-.024.359-.057.54-.1l-1.349-1.348c-.837-.013-1.801-.301-2.55-.914-.732-.599-1.293-1.535-1.308-2.944l-.806-.806zm5.905 4.49l1.165 1.166a5.397 5.397 0 001.301-.82L10.75 10.69c-.42.338-.908.575-1.401.72zm2.084-1.451l1.073 1.073c.658-.849 1.077-1.967 1.077-3.364a.75.75 0 00-1.5 0c0 .97-.256 1.72-.65 2.291zm-.896-.896L9.392 7.917c.016-.081.025-.165.025-.25V3a1.25 1.25 0 00-2.5 0v2.442l-1.5-1.5V3a2.75 2.75 0 115.5 0v4.667c0 .509-.139.986-.38 1.395zm-5.12-1.585V5.356l1.5 1.5v.81a1.25 1.25 0 001.886 1.077L9.88 9.819a2.738 2.738 0 01-1.529.592L5.417 7.477z",
                    fill: "#6E7879"
                }),
                r = a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M.47 1.47a.75.75 0 011.06 0l13 13a.75.75 0 11-1.06 1.06l-13-13a.75.75 0 010-1.06z",
                    fill: "#D56D6B"
                });

            function s(e) {
                return a.createElement("svg", i({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), o, r)
            }
            n.p
        },
        153: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("rect", {
                    x: 7.333,
                    y: 2.667,
                    width: 1.333,
                    height: 6,
                    rx: .667,
                    fill: "#58C2D5"
                }),
                r = a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M8 1.333a2 2 0 00-2 2V8a2 2 0 004 0V3.333a2 2 0 00-2-2zM3.833 8a.5.5 0 10-1 0c0 1.817.734 3.125 1.767 3.97.866.71 1.925 1.078 2.9 1.172v1.525a.5.5 0 101 0v-1.525c.975-.094 2.034-.463 2.9-1.172 1.033-.845 1.767-2.153 1.767-3.97a.5.5 0 10-1 0c0 1.517-.6 2.541-1.4 3.196-.816.668-1.867.97-2.767.97-.9 0-1.95-.302-2.767-.97-.8-.655-1.4-1.68-1.4-3.196z",
                    fill: "#122124"
                });

            function s(e) {
                return a.createElement("svg", i({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), o, r)
            }
            n.p
        },
        156: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                d: "M.293 5.121L4 8.828l1.414-1.414-2-2H12a1 1 0 000-2H3.414l2-2L4 0 .293 3.707a1 1 0 000 1.414z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 13,
                    height: 8.828,
                    viewBox: "0 0 13 8.828"
                }, e), o)
            }
            n.p
        },
        157: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                d: "M12.707 5.121L9 8.828 7.586 7.414l2-2H1a1 1 0 110-2h8.586l-2-2L9 0l3.707 3.707a1 1 0 010 1.414z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 13,
                    height: 8.828,
                    viewBox: "0 0 13 8.828"
                }, e), o)
            }
            n.p
        },
        158: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MESSENGER_BACKGROUND_COLOR", (function() {
                return g
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(22),
                d = n(1);
            const c = .15,
                u = Object(a.b)("height:calc(30vh - ", d.d.size("16px"), ");;label:chatConversationLoadingCss;");
            class m extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        appear: !1,
                        enter: !1,
                        leave: !1,
                        doneAnimating: !1
                    }
                }
                render() {
                    const {
                        appear: e,
                        enter: t,
                        leave: n,
                        doneAnimating: i
                    } = this.state, {
                        showStartConversationLoadingState: o
                    } = this.props;
                    return r.a.createElement(p, {
                        className: Object(a.c)({
                            appear: e,
                            enter: t,
                            leave: n,
                            doneAnimating: i,
                            [u]: o
                        }),
                        "data-clickable": !0
                    }, this.props.children)
                }
                componentWillAppear(e) {
                    var t, n;
                    null === (t = (n = this.props).beforeAnimationIn) || void 0 === t || t.call(n), this.setState({
                        appear: !1,
                        enter: !1,
                        leave: !1,
                        doneAnimating: !1
                    }), setTimeout(e, 150)
                }
                componentWillEnter(e) {
                    var t, n;
                    null === (t = (n = this.props).beforeAnimationIn) || void 0 === t || t.call(n), this.setState({
                        appear: !1,
                        enter: !1,
                        leave: !1,
                        doneAnimating: !1
                    }), setTimeout(e, 150)
                }
                componentWillLeave(e) {
                    this.setState({
                        appear: !1,
                        enter: !1,
                        leave: !0,
                        doneAnimating: !1
                    }), setTimeout(e, 150)
                }
                componentDidAppear() {
                    this.setState({
                        appear: !0,
                        doneAnimating: !0
                    })
                }
                componentDidEnter() {
                    this.setState({
                        enter: !0,
                        doneAnimating: !0
                    })
                }
                componentDidLeave() {
                    var e, t;
                    null === (e = (t = this.props).afterAnimationOut) || void 0 === e || e.call(t), this.setState({
                        leave: !1,
                        doneAnimating: !0
                    })
                }
            }
            const g = d.c.white,
                p = Object(i.a)("div", {
                    target: "eazok3z0",
                    label: "Wrapper"
                })(l.o, ";background-color:", g, ";overflow:hidden;opacity:0;height:calc(100vh - ", d.d.legacySize(2 * l.p + "px"), ");width:", d.d.legacySize(`${l.n}px`), ";margin-top:", d.d.unsafeMargin(`${l.p}px`), ";margin-left:", d.d.unsafeMargin(`${l.p}px`), ";margin-right:", d.d.unsafeMargin(`${l.f.buttonInsetPx}px`), ";margin-bottom:", d.d.unsafeMargin(`${l.f.buttonInsetPx}px`), ";border-radius:", l.h, ";body.not-ie.not-edge &{&.appear{transition:margin-bottom ", .3, "s ease-out,opacity ", .3, "s ease-out;}&.enter{transition:margin-bottom ", .3, "s ease-out,opacity ", .3, "s ease-out;transition-delay:", c, "s;}&.doneAnimating{transition:margin-bottom ", .3, "s ease-out,opacity ", .3, "s ease-out,height ", c, "s ease-out;}&.leave{transition:margin-bottom ", c, "s ease-out,opacity ", c, "s ease-out;}}&.appear,&.enter{opacity:1;margin-bottom:", d.d.marginUnits(4), ";}body.is-mobile.not-tablet &{border-radius:0;height:100vh;width:100vw;margin:0 0 ", d.d.marginUnits(-4), " 0;&.appear,&.enter{margin-bottom:0;}}", s.isSafari && "\n    &:not(.doneAnimating) {\n      > * { display: none; }\n    }\n  ");
            t.default = m
        },
        159: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            })), n.d(t, "b", (function() {
                return r
            }));
            var a = n(0),
                i = n.n(a);
            const o = Object(a.createContext)({
                    registerSpinner: () => {},
                    unregisterSpinner: () => {},
                    isVisible: () => !1
                }),
                r = ({
                    children: e
                }) => {
                    const [t, n] = Object(a.useState)([]), r = Object(a.useCallback)((e => n((t => [...t, e]))), []), s = Object(a.useCallback)((e => n((t => t.filter((t => t !== e))))), []), l = Object(a.useCallback)((e => t.length > 0 && t[0] === e), [t]), d = Object(a.useMemo)((() => ({
                        registerSpinner: r,
                        unregisterSpinner: s,
                        isVisible: l
                    })), [r, s, l]);
                    return i.a.createElement(o.Provider, {
                        value: d
                    }, e)
                }
        },
        163: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return _
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(70),
                s = n(132);
            n(35);
            const l = {
                    action: Object(a.b)({
                        name: "37gnig-action",
                        styles: "flex-grow:1;button,a{width:100%;};label:action;"
                    })
                },
                d = ({
                    children: e,
                    _quartzInternal_className: t
                }) => o.a.createElement("div", {
                    className: Object(a.c)(l.action, t)
                }, e);
            var c = n(230),
                u = n(61),
                m = n(46),
                g = n(14),
                p = n(1),
                h = n(310),
                v = n(144),
                b = n(220);
            const E = {
                    hideBoxShadow: Object(a.b)({
                        name: "ifc7qc-hideBoxShadow",
                        styles: "box-shadow:none;;label:hideBoxShadow;"
                    }),
                    root: Object(a.b)({
                        name: "55ihdy-root",
                        styles: "overflow-y:auto;height:100%;;label:root;"
                    }),
                    rootMobile: Object(a.b)({
                        name: "1w90a68-rootMobile",
                        styles: "width:100%;;label:rootMobile;"
                    }),
                    offerPageWithThemesStyle: Object(a.b)({
                        name: "ktioyk-offerPageWithThemesStyle",
                        styles: "display:flex;padding:var(--padding);text-align:left;position:relative;;label:offerPageWithThemesStyle;"
                    }),
                    offerPageMobileStyle: Object(a.b)("flex-direction:column;border-bottom:1px solid ", p.c.lightGray, ";;label:offerPageMobileStyle;"),
                    offerPageWithThemesStyleWithAlert: Object(a.b)("padding-top:calc(var(--padding) + ", p.d.paddingUnits(6), ");;label:offerPageWithThemesStyleWithAlert;"),
                    verticalLine: Object(a.b)("border-left:1px solid ", p.c.lightGray, ";margin-right:", p.d.marginUnits(14), ";;label:verticalLine;"),
                    footer: Object(a.b)("display:flex;justify-content:center;padding:", p.d.paddingUnits(4), ";font-size:", p.i.size300, ";color:", p.c.lightTextGray, ";background-color:", p.c.lighterBackground, ";;label:footer;"),
                    footerWhiteLabeling: Object(a.b)("display:flex;justify-content:space-between;border-radius:", p.n.inputBorderRadius, "px;box-shadow:", p.m.interactive100, ";padding-block:", p.d.paddingUnits(4), ";padding-inline:", p.d.paddingUnits(14), ";font-size:", p.i.size300, ";color:", p.c.lightTextGray, ";background-color:", p.c.lighterBackground, ";;label:footerWhiteLabeling;"),
                    whiteLabelingContainer: Object(a.b)("display:flex;min-width:", p.d.size("152px"), ";align-items:center;;label:whiteLabelingContainer;"),
                    whiteLabelingText: Object(a.b)("min-width:", p.d.size("76px"), ";;label:whiteLabelingText;")
                },
                _ = e => e ? o.a.createElement("div", {
                    className: E.footerWhiteLabeling
                }, "Privacy policy", o.a.createElement("div", {
                    className: E.whiteLabelingContainer,
                    "aria-label": "Powered by Qualified"
                }, o.a.createElement("div", {
                    className: E.whiteLabelingText,
                    "aria-hidden": !0
                }, "Powered by"), o.a.createElement(h.a, {
                    fill: p.c.secondaryText,
                    "aria-hidden": !0,
                    width: 76,
                    height: 16
                }))) : o.a.createElement("div", {
                    className: E.footer
                }, "Privacy policy"),
                f = e => Object(a.b)("animation:growBox 300ms ease-out;@keyframes growBox{from{transform:scale(", e, ");}to{transform:scale(1);}}"),
                O = {
                    default: {
                        padding: p.d.paddingUnits(14),
                        offerTitleFontSize: p.n.fontSize800,
                        offerSubtitleFontSize: p.n.fontSize500,
                        footerMargin: p.d.marginUnits(8)
                    },
                    smallView: {
                        padding: `${p.d.paddingUnits(10)} ${p.d.paddingUnits(1)}`,
                        offerTitleFontSize: p.n.fontSize500,
                        offerSubtitleFontSize: p.n.fontSize300,
                        footerMargin: p.d.marginUnits(6)
                    },
                    mobile: {
                        padding: p.d.paddingUnits(6),
                        offerTitleFontSize: p.n.fontSize500,
                        offerSubtitleFontSize: p.n.fontSize300,
                        footerMargin: p.d.marginUnits(6)
                    }
                };
            t.a = ({
                isSmallView: e = !1,
                showBookedRepPhoto: t,
                calendarEventAvatarUrls: n,
                repAvatarUrl: l,
                repName: p,
                repRole: h,
                confirmBookingForTimeSlot: C,
                availableSlots: S,
                duration: y,
                closeAction: k,
                hideCloseButton: T,
                makeButtonsViewOnly: A,
                isMobile: N,
                className: R,
                source: D,
                errorMessage: I,
                visitorEmail: x,
                changeVisitorIdentity: M,
                growAnimationScale: B,
                hideBoxShadow: F,
                isTimeZoneAbbr: w,
                showBranding: L,
                inputFields: P
            }) => {
                const [U, j] = Object(i.useState)(null), z = o.a.useContext(g.a), V = (e => {
                    if (!e) return e;
                    if (-1 === e.indexOf("@")) return e;
                    const [t, n] = e.split("@");
                    let a = t[0] + "*".repeat(t.length - 1);
                    return a.length > 2 && (a = a.slice(0, t.length - 1) + e[t.length - 1]), `${a}@${n}`
                })(x), G = N ? O.mobile : e ? O.smallView : O.default;
                return o.a.createElement(u.a, {
                    className: Object(a.c)(E.root, {
                        [f(B)]: !!B,
                        [E.rootMobile]: N,
                        [E.hideBoxShadow]: F
                    })
                }, x && o.a.createElement(v.b, null, z.t("messenger.text_sub.invite_sent", {
                    email: V
                }), " ", o.a.createElement(v.a, {
                    onClick: M
                }, z.t("messenger.text.not_you")), "?"), o.a.createElement("div", {
                    className: Object(a.c)(E.offerPageWithThemesStyle, {
                        [E.offerPageWithThemesStyleWithAlert]: !!I && !N && !e,
                        [E.offerPageMobileStyle]: N
                    }, R),
                    style: Object(m.a)({
                        padding: G.padding
                    })
                }, o.a.createElement(b.b, {
                    isSmallView: e,
                    showBookedRepPhoto: t,
                    calendarEventAvatarUrls: n,
                    repAvatarUrl: l,
                    repName: p,
                    repRole: h,
                    duration: y,
                    closeAction: k,
                    hideCloseButton: T,
                    isMobile: N,
                    errorMessage: I,
                    isTimeZoneAbbr: w
                }), !N && o.a.createElement("div", {
                    className: E.verticalLine
                }), P || o.a.createElement(c.a, {
                    confirmBookingForTimeSlot: C,
                    availableSlots: S,
                    selectedSlot: U,
                    setSelectedSlot: j,
                    isSmallView: e,
                    makeButtonsViewOnly: A,
                    isMobile: N,
                    source: D,
                    meetingThemesEnabled: !0
                })), N && o.a.createElement(r.a, {
                    paddingVerticalUnits: 4,
                    paddingHorizontalUnits: 6
                }, o.a.createElement(d, null, o.a.createElement(s.a, {
                    variant: "primary",
                    size: "small",
                    disabled: !U,
                    onClick: () => {
                        C(U)
                    }
                }, "Continue"))), _(L || !1))
            }
        },
        167: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "ICON_ENUM_TO_SVG", (function() {
                return N
            })), n.d(t, "MessengerButtonIcon", (function() {
                return R
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(335),
                l = n(117),
                d = n(57),
                c = n(22),
                u = n(1),
                m = n(9);

            function g() {
                return g = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, g.apply(this, arguments)
            }
            var p = o.createElement("path", {
                d: "M9 0C4.05 0 0 3.487 0 7.875s4.05 7.875 9 7.875a4.218 4.218 0 001.238-.113L15.75 18v-4.95A7.324 7.324 0 0018 7.875C18 3.487 13.95 0 9 0z"
            });
            n.p;

            function h() {
                return h = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, h.apply(this, arguments)
            }
            var v = o.createElement("path", {
                    d: "M16.875 4.5H15.75v6.75a1.125 1.125 0 01-1.125 1.125H7.682l-2.057 2.25h5.625L14.625 18v-3.375h2.25A1.125 1.125 0 0018 13.5V5.625A1.125 1.125 0 0016.875 4.5z"
                }),
                b = o.createElement("path", {
                    d: "M1.125 0h11.25A1.125 1.125 0 0113.5 1.125V9a1.125 1.125 0 01-1.125 1.125H6.75L3.375 13.5v-3.375h-2.25A1.125 1.125 0 010 9V1.125A1.125 1.125 0 011.125 0z"
                });
            n.p;

            function E() {
                return E = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, E.apply(this, arguments)
            }
            var _ = o.createElement("path", {
                d: "M0 8a8 8 0 1116 0v8H8a8 8 0 01-8-8z"
            });
            n.p;

            function f() {
                return f = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, f.apply(this, arguments)
            }
            var O = o.createElement("path", {
                d: "M17.991 14.205a.871.871 0 01-.267.763l-2.534 2.517a1.427 1.427 0 01-.448.324 1.849 1.849 0 01-.543.172q-.019 0-.114.01t-.248.01a8.777 8.777 0 01-1.172-.124 8.9 8.9 0 01-1.982-.61 16.631 16.631 0 01-2.657-1.455 19.822 19.822 0 01-3.163-2.669 20.89 20.89 0 01-2.21-2.517 17.935 17.935 0 01-1.41-2.221 11.968 11.968 0 01-.8-1.85 9.818 9.818 0 01-.362-1.43A4.726 4.726 0 010 4.176q.019-.343.019-.381a1.854 1.854 0 01.171-.543 1.429 1.429 0 01.324-.448L3.052.267A.839.839 0 013.662 0 .711.711 0 014.1.143a1.325 1.325 0 01.324.353l2.039 3.871a.928.928 0 01.1.667 1.189 1.189 0 01-.324.61l-.939.934a.318.318 0 00-.067.124.471.471 0 00-.029.143 3.444 3.444 0 00.343.915 8.4 8.4 0 00.705 1.115 12.382 12.382 0 001.354 1.517 12.625 12.625 0 001.524 1.363 8.8 8.8 0 001.115.715 2.961 2.961 0 00.686.276l.238.048a.454.454 0 00.124-.029.318.318 0 00.124-.067l1.083-1.105a1.167 1.167 0 01.8-.305 1 1 0 01.514.114h.019l3.678 2.174a.959.959 0 01.48.629z"
            });
            n.p;

            function C() {
                return C = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, C.apply(this, arguments)
            }
            var S = o.createElement("g", {
                transform: "translate(-3.895)"
            }, o.createElement("circle", {
                cx: 2,
                cy: 2,
                r: 2,
                transform: "translate(7.368 16)"
            }), o.createElement("path", {
                d: "M9.368 0A5.342 5.342 0 004.34 3.556L3.9 4.812l2.508.888.444-1.257a2.668 2.668 0 015.183.889c0 .843-.327 1.119-1.269 1.8A5.389 5.389 0 008.035 12v1.333H10.7V12c0-1.543.643-2 1.619-2.7A4.563 4.563 0 0014.7 5.333 5.339 5.339 0 009.368 0z"
            }));
            n.p;
            var y = {
                messenger: function(e) {
                    return o.createElement("svg", E({
                        viewBox: "0 0 16 16",
                        fill: "none",
                        height: 35,
                        width: 35
                    }, e), _)
                },
                phone: function(e) {
                    return o.createElement("svg", f({
                        viewBox: "0 0 18 18"
                    }, e), O)
                },
                question: function(e) {
                    return o.createElement("svg", C({
                        width: 10.807,
                        height: 20,
                        viewBox: "0 0 10.807 20"
                    }, e), S)
                },
                chat: function(e) {
                    return o.createElement("svg", g({
                        viewBox: "0 0 18 18"
                    }, e), p)
                },
                doubleChat: function(e) {
                    return o.createElement("svg", h({
                        width: 18,
                        height: 18,
                        viewBox: "0 0 18 18"
                    }, e), v, b)
                }
            };
            const {
                CSS_VARS: k,
                setCssVariables: T
            } = Object(s.a)(["buttonSizePx", "launcherButtonBackgroundColor", "launcherImageUrl"]), A = {
                root: Object(a.b)("max-height:", k.buttonSizePx, ";max-width:", k.buttonSizePx, ";display:inline-block;cursor:pointer;position:relative;svg{fill:white;};label:root;"),
                launcherButton: {
                    root: Object(a.b)("height:", k.buttonSizePx, ";width:", k.buttonSizePx, ";position:relative;background-color:", k.launcherButtonBackgroundColor, ";overflow:hidden;border-radius:100%;background-size:cover;background-position:center;background-image:", k.launcherImageUrl, ";;label:root;"),
                    overlayShadow: Object(a.b)(c.o, ";label:overlayShadow;"),
                    square: Object(a.b)({
                        name: "11drm8h-square",
                        styles: "border-radius:4px;;label:square;"
                    })
                },
                notificationGem: Object(a.b)("height:", u.d.size("24px"), ";width:", u.d.size("24px"), ";line-height:", u.d.legacyLineHeight("24px"), ";right:-8px;top:-8px;position:absolute;overflow:hidden;background-color:#f25656;color:#fff;border-radius:100%;text-align:center;z-index:1;font-size:", u.i.size300, ";", c.o, ";label:notificationGem;")
            }, N = {
                [m.k.Chat]: y.chat,
                [m.k.DoubleChat]: y.doubleChat,
                [m.k.Messenger]: y.messenger,
                [m.k.Phone]: y.phone,
                [m.k.Question]: y.question
            }, R = Object(i.a)((({
                className: e,
                backgroundColor: t,
                shape: n,
                icon: i,
                imageUrl: o,
                numUnread: s,
                showShadow: u = !0,
                buttonRef: g,
                measurements: {
                    buttonSizePx: p
                } = c.f,
                "aria-label": h,
                ...v
            }) => {
                const {
                    themeStyles: b
                } = Object(d.c)(), E = null !== n && void 0 !== n ? n : b.launcherShape, _ = null !== i && void 0 !== i ? i : b.launcherIcon, f = null !== t && void 0 !== t ? t : b.launcherBackgroundColor, O = null !== o && void 0 !== o ? o : b.launcherImageBackgroundUrl, C = N[_], S = _ === m.k.Messenger ? 35 : 20;
                return r.a.createElement("div", {
                    className: Object(a.c)(A.root, e),
                    style: T({
                        buttonSizePx: `${p}px`
                    })
                }, !!s && r.a.createElement("div", {
                    className: A.notificationGem
                }, s), r.a.createElement("button", {
                    ref: g,
                    className: Object(a.c)(A.launcherButton.root, {
                        [A.launcherButton.square]: E === m.i.Square
                    }, {
                        [A.launcherButton.overlayShadow]: u
                    }),
                    style: T({
                        launcherButtonBackgroundColor: f,
                        launcherImageUrl: Object(l.a)(O)
                    }),
                    "aria-label": h,
                    ...v
                }, !O && C && r.a.createElement(C, {
                    "data-backend-test-id": "messenger-button-svg",
                    width: S,
                    height: S
                })))
            }), {
                target: "e1x85bs90",
                label: "MessengerButtonIcon"
            })()
        },
        176: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(0),
                i = n(127);
            const o = () => Object(a.useRef)(`id-${Object(i.v4)()}`).current
        },
        178: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return d
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(6),
                s = n(1);
            var l = ({
                color: e,
                size: t
            }) => o.a.createElement("svg", {
                width: t,
                height: t,
                viewBox: "0 0 66 60",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg"
            }, o.a.createElement("rect", {
                x: "5",
                y: "2",
                width: "56",
                height: "56",
                rx: "28",
                fill: "white"
            }), o.a.createElement("g", {
                clipPath: "url(#clip0_5255_83494)"
            }, o.a.createElement("g", {
                clipPath: "url(#clip1_5255_83494)"
            }, o.a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M42.0515 25.2C41.5961 25.2 41.1806 24.9533 40.923 24.5776C39.1932 22.0549 36.2898 20.4 32.9999 20.4C29.71 20.4 26.8066 22.0549 25.0768 24.5776C24.8192 24.9533 24.4037 25.2 23.9483 25.2C23.0284 25.2 22.421 24.2565 22.9211 23.4845C25.0592 20.1839 28.7745 18 32.9999 18C37.2253 18 40.9406 20.1839 43.0787 23.4845C43.5788 24.2565 42.9714 25.2 42.0515 25.2ZM44.9999 29.985V30.015C44.9999 30.01 44.9999 30.005 44.9999 30C44.9999 29.995 44.9999 29.99 44.9999 29.985Z",
                fill: "white"
            }), o.a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M22.1952 27.6001C21.6394 27.6001 21.1544 27.991 21.0876 28.5427C21.0298 29.0204 21 29.5068 21 30.0002C21 36.6276 26.3726 42.0002 33 42.0002C39.6274 42.0002 45 36.6276 45 30.0002C45 29.5068 44.9702 29.0204 44.9124 28.5427C44.8456 27.991 44.3606 27.6001 43.8048 27.6001C43.0413 27.6001 42.4848 28.3232 42.5568 29.0834C42.5854 29.3851 42.6 29.6909 42.6 30.0002C42.6 35.3021 38.3019 39.6002 33 39.6002C27.6981 39.6002 23.4 35.3021 23.4 30.0002C23.4 29.6909 23.4146 29.3851 23.4432 29.0834C23.5152 28.3232 22.9587 27.6001 22.1952 27.6001Z",
                fill: e
            }, o.a.createElement("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 33 30",
                to: "360 33 30",
                dur: "0.6s",
                repeatCount: "indefinite"
            })))), o.a.createElement("defs", null, o.a.createElement("clipPath", {
                id: "clip0_5255_83494"
            }, o.a.createElement("rect", {
                width: "24",
                height: "24",
                fill: "white",
                transform: "translate(21 18)"
            })), o.a.createElement("clipPath", {
                id: "clip1_5255_83494"
            }, o.a.createElement("rect", {
                width: "24",
                height: "24",
                fill: "white",
                transform: "translate(45 18) rotate(90)"
            }))));
            const d = 80,
                c = {
                    Wrapper: Object(a.a)("div", {
                        target: "ehg4wz60",
                        label: "Wrapper"
                    })("display:flex;justify-content:center;align-items:center;", s.e, ";"),
                    MeetingLoadingSpinnerContainer: Object(a.a)("div", {
                        target: "ehg4wz61",
                        label: "MeetingLoadingSpinnerContainer"
                    })("display:flex;justify-content:center;align-items:center;flex-direction:column;width:", s.d.legacySize(`${d}px`), ";height:", s.d.legacySize(`${d}px`), ";background-color:", s.c.white, ";border-radius:100%;")
                };
            t.b = ({
                color: e
            }) => o.a.createElement(c.Wrapper, {
                "data-testid": "meeting-loading-spinner"
            }, o.a.createElement(c.MeetingLoadingSpinnerContainer, {
                size: d
            }, o.a.createElement(l, {
                size: d,
                color: e || r.a.MEETING_BOOKER_COLOR || s.c.loadingSpinner
            })))
        },
        183: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        204: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(21),
                l = n(1);
            const d = Object(a.b)("svg{& + span{padding-left:", l.d.paddingUnits(2), ";font-size:", l.i.size500, ";vertical-align:baseline;}};label:svgStyles;"),
                c = ({
                    icon: e,
                    pill: t,
                    small: n,
                    large: i,
                    secondary: o,
                    secondaryDark: r,
                    primaryInverted: c,
                    warning: u,
                    warningInverted: m,
                    backgroundColor: g,
                    textColor: p,
                    borderColor: h,
                    fontWeight: v
                }) => e ? {
                    color: "rgb(161, 171, 173)",
                    background: g || "none",
                    fontSize: "14px"
                } : t ? Object(a.b)("border-radius:50px;padding:", l.d.paddingUnits(1), " ", l.d.paddingUnits(4), ";min-width:", l.d.size("40px"), ";background-color:white;border:1px solid ", l.c.fieldBorder, ";height:", l.d.size("32px"), ";font-size:", l.i.size500, ";color:", l.c.gray, ";&:hover{border-color:", l.c.lightGray, ";}", d, " svg{fill:", l.c.iconGray, ";vertical-align:baseline;}") : (({
                    backgroundColor: e,
                    hoverBackgroundColor: t,
                    color: n,
                    fontWeight: i,
                    borderColor: o,
                    small: r,
                    medium: c,
                    large: u
                }) => Object(a.b)("border-radius:3px;margin-right:", l.d.marginUnits(2), ";background-color:", e, ";color:", n, ";font-weight:", i, ";", o && `\n    -webkit-box-shadow:inset 0px 0px 0px 1px ${o};\n    -moz-box-shadow:inset 0px 0px 0px 1px ${o};\n    box-shadow:inset 0px 0px 0px 1px ${o};\n  `, " font-size:", r ? l.i.size300 : l.i.size500, ";", u && {
                    lineHeight: "44px",
                    padding: "0 16px"
                } || c && {
                    lineHeight: "33px",
                    padding: "0 12px"
                } || r && {
                    lineHeight: "22px",
                    padding: "0 8px"
                } || {
                    lineHeight: "32px",
                    padding: "0 16px"
                }, " &:last-of-type{margin-right:0;}&:hover,&:focus,&:active{background-color:", t || ("transparent" === e ? e : Object(s.a)(.05, e)), ";}&[disabled],&[data-fake-disabled]{background-color:", "transparent" === e ? e : Object(s.d)(.2, e), ";cursor:not-allowed;}", d))({
                    backgroundColor: g || o && l.c.darkBackground || r && l.c.buttonIconDisabled || c && l.c.transparent || m && l.c.transparent || u && l.c.red || l.c.teal,
                    color: p || r && l.c.darkCharcoal || o && l.c.primaryText || c && l.c.teal || m && l.c.red || "#FFF",
                    borderColor: c && l.c.teal || m && l.c.red || h,
                    hoverBackgroundColor: c && Object(s.d)(.5, l.c.darkerTeal) || m && l.c.lightRed,
                    small: n,
                    large: i,
                    fontWeight: v || 500
                }),
                u = e => {
                    const [t, n] = Object(o.useState)(!1), a = Object(o.useRef)(!1);
                    Object(o.useEffect)((() => (a.current = !0, () => {
                        a.current = !1
                    })), []);
                    const i = () => {
                            a.current && n(!1)
                        },
                        {
                            savingMessage: s,
                            disabled: l,
                            children: d,
                            fakeDisabled: c,
                            submitting: u,
                            type: m,
                            onClick: g,
                            borderColor: p,
                            backgroundColor: h,
                            textColor: v,
                            small: b,
                            secondary: E,
                            icon: _,
                            pill: f,
                            large: O,
                            warning: C,
                            medium: S,
                            fontWeight: y,
                            secondaryDark: k,
                            primaryInverted: T,
                            warningInverted: A,
                            ...N
                        } = e,
                        R = s || "Please wait\u2026",
                        D = t || u || !!l,
                        I = { ...N,
                            "data-fake-disabled": !!c || void 0
                        };
                    return r.a.createElement("button", {
                        type: m,
                        ...I,
                        disabled: D,
                        onClick: t => {
                            if (n(!0), e.onClick) {
                                const n = e.onClick(t);
                                Promise.resolve(n).then((e => (i(), e))).catch((e => {
                                    throw i(), e
                                }))
                            } else i()
                        }
                    }, t || u ? R : d)
                },
                m = Object(i.a)(u, {
                    target: "e5mtidr0",
                    label: "DeprecatedButton"
                })(c);
            l.c.red, l.c.red, l.c.lightRed;
            t.a = m
        },
        205: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M7.979 3.782c.222-.21.397-.264.521-.264s.299.053.52.264c.227.215.464.562.68 1.048.082.183.158.381.228.593a14.054 14.054 0 00-2.856 0c.07-.212.146-.41.228-.593.216-.486.453-.833.68-1.048zm-2.545 1.92a8.82 8.82 0 01.495-1.482l.019-.041A5.275 5.275 0 003.91 6.215l.042-.018a8.82 8.82 0 011.48-.496zM3.25 8.767c0 .124.054.299.265.52.215.226.561.464 1.047.68.183.081.381.158.593.228a14.055 14.055 0 010-2.856c-.212.07-.41.146-.593.227-.486.216-.832.454-1.047.68-.212.222-.265.396-.265.52zm3.461 1.788a12.249 12.249 0 01-.128-1.788c0-.631.046-1.233.128-1.789A12.249 12.249 0 018.5 6.851c.63 0 1.232.046 1.789.128.082.556.128 1.158.128 1.789 0 .63-.046 1.232-.128 1.788-.557.083-1.158.128-1.789.128-.63 0-1.232-.045-1.789-.128zm-1.277 1.278a8.819 8.819 0 01-1.481-.495l-.042-.02a5.275 5.275 0 002.037 2.037l-.019-.041a8.82 8.82 0 01-.495-1.481zM1.75 8.768a6.75 6.75 0 1113.5 0 6.75 6.75 0 01-13.5 0zm11.339-2.553a5.275 5.275 0 00-2.037-2.036l.019.041c.197.443.364.942.495 1.481a8.82 8.82 0 011.523.514zM11.845 7.34c.212.07.41.146.593.227.486.216.832.454 1.047.68.212.222.265.396.265.52 0 .125-.053.3-.265.522-.215.225-.561.463-1.047.679a6.452 6.452 0 01-.593.228 14.038 14.038 0 000-2.856zm-.279 4.494a8.818 8.818 0 001.481-.495l.042-.02a5.274 5.274 0 01-2.037 2.037l.019-.041c.197-.443.364-.941.495-1.481zm-1.638.278c-.07.212-.146.41-.228.594-.216.485-.453.832-.68 1.047-.221.211-.396.265-.52.265s-.299-.054-.521-.265c-.226-.215-.463-.562-.68-1.047a6.461 6.461 0 01-.227-.594 14.066 14.066 0 002.856 0z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 17,
                    height: 17,
                    viewBox: "0 0 17 17",
                    fill: "#8A9394"
                }, e), o)
            }
            n.p
        },
        206: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.436 1.35h.128c.354 0 .63 0 .884.048a2.75 2.75 0 011.989 1.554c.108.234.175.502.26.845l.016.062.169.677a5.406 5.406 0 012.035 4.232 5.406 5.406 0 01-2.035 4.231l-.17.677-.015.062c-.085.344-.152.61-.26.845a2.75 2.75 0 01-1.99 1.554c-.253.047-.529.047-.883.047h-.128c-.354 0-.63 0-.883-.047a2.75 2.75 0 01-1.99-1.554c-.108-.234-.174-.502-.26-.845l-.016-.062-.169-.677a5.406 5.406 0 01-2.035-4.231c0-1.713.795-3.24 2.035-4.232l.17-.677.015-.062c.086-.343.152-.61.26-.845a2.75 2.75 0 011.99-1.554c.254-.047.53-.047.883-.047zM6.924 13.952l.002.006c.17.367.506.63.904.706.098.018.222.021.67.021.448 0 .572-.003.67-.021a1.25 1.25 0 00.904-.706l.003-.006a5.417 5.417 0 01-1.577.233 5.417 5.417 0 01-1.576-.233zm3.15-10.372l.003.005A5.417 5.417 0 008.5 3.35c-.548 0-1.078.081-1.576.233l.002-.005a1.25 1.25 0 01.904-.707c.098-.018.222-.021.67-.021.448 0 .572.003.67.021.398.075.735.339.904.707zm-5.49 5.189a3.917 3.917 0 117.833 0 3.917 3.917 0 01-7.834 0zM9.25 7.434a.75.75 0 00-1.5 0v1.334c0 .25.125.484.334.624l1 .666a.75.75 0 00.832-1.248l-.666-.444v-.932z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 17,
                    height: 17,
                    viewBox: "0 0 17 17",
                    fill: "#8A9394"
                }, e), o)
            }
            n.p
        },
        207: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "UnavailableTimeSlotError", (function() {
                return a
            }));
            class a extends Error {
                constructor(e, t) {
                    super(e), this.availabilities = void 0, this.availabilities = t, this.name = "UnavailableTimeSlotError"
                }
            }
        },
        208: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                d: "M9.8 9.444l-2.31-.635a1.033 1.033 0 01-.746-.78L6.6 7.343a3.044 3.044 0 001.855-2.769v-1.4A3.188 3.188 0 005.382.001 3.242 3.242 0 003.077.86a2.992 2.992 0 00-.963 2.189v1.525a3.044 3.044 0 001.853 2.77l-.142.685a1.033 1.033 0 01-.746.779l-2.313.635a1.023 1.023 0 00-.766.978v2.28a.519.519 0 00.528.508h9.512a.519.519 0 00.528-.508v-2.28a1.023 1.023 0 00-.766-.977z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    viewBox: "0 0 10.569 13.211"
                }, e), o)
            }
            n.p
        },
        209: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return l
            }));
            var a = n(0),
                i = n.n(a),
                o = n(569);
            const r = {
                    user: {
                        id: "NOT_INITIALIZED",
                        team: null,
                        avatarUrl: null,
                        name: "",
                        email: "",
                        jobTitle: "",
                        wrappedTeam: {
                            featuresMap: {},
                            preferencesDisableDesktopAppAnnouncement: !1,
                            messengerTheme: {
                                buttonShape: "circle",
                                disableAudioBeforeOpen: !1,
                                domains: [],
                                enableInboundVoice: !0,
                                id: "",
                                isDefault: !0,
                                primaryColor: "",
                                textColor: "",
                                themeName: "",
                                title: "",
                                useCallBoxImage: !1
                            }
                        },
                        available: !1,
                        videoAvailable: !1,
                        autoPounceAvailable: !1,
                        availableAndNotSnoozed: !1,
                        canEditLinkedin: !1,
                        canEditGoogle: !1,
                        canExportReports: !1,
                        canEditAnalytics: !1,
                        canEditMacros: !1,
                        canViewAllStatistics: !1,
                        permissionsViewAllVisitors: !1,
                        permissionsCsm: !1
                    },
                    creationData: {
                        bot: {
                            steps: null,
                            triggerFilter: null
                        }
                    },
                    channel: {
                        emitter: new o.TinyEmitter
                    },
                    refetchUser: () => {},
                    setCreationData: () => {},
                    resetCreationData: () => {}
                },
                s = i.a.createContext(r),
                l = () => Object(a.useContext)(s).user;
            s.Provider, s.Consumer;
            t.a = s
        },
        210: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "calcShowRedDot", (function() {
                return N
            })), n.d(t, "MessengerButton", (function() {
                return R
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(68),
                d = n(181),
                c = n.n(d),
                u = n(69),
                m = n(128),
                g = n(85),
                p = n(22),
                h = n(1),
                v = n(103),
                b = n(262),
                E = n(167),
                _ = n(228),
                f = n(229);
            const O = .15,
                C = .25,
                S = .5,
                y = s.isMobileOnly ? p.r : p.f,
                k = y.buttonSizePx + 2 * y.buttonInsetPx + p.s + 4 + 2,
                T = Object(i.a)("div", {
                    target: "e12kthku0",
                    label: "MessageBubbles"
                })("body:not(.is-mobile) &{", v.CloseButton, "{opacity:0;transition:opacity 0.2s ease-in;}&:hover ", v.CloseButton, ",", v.CloseButton, ":focus-within{opacity:1;}}display:flex;flex-direction:", (({
                    showAsChatLike: e
                }) => e ? "row" : "column"), ";"),
                A = Object(i.a)("div", {
                    target: "e12kthku1",
                    label: "Wrapper"
                })("min-height:", h.d.legacySize(`${y.buttonSizePx+y.buttonInsetPx}px`), ";min-width:", h.d.legacySize(`${y.buttonSizePx+y.buttonInsetPx}px`), ";", _.MessengerPrompt, ",", f.MessengerPromptV3, "{flex-direction:column;.inner{margin:0 ", h.d.legacyMargin(`${y.buttonInsetPx}px`), " ", h.d.legacyMargin(`${y.buttonInsetPx}px`), " 0;}&.prompt-appear{opacity:0;margin-bottom:calc( ", h.d.legacyMargin(y.buttonSizePx - p.p + 2 * y.buttonInsetPx + "px"), " - ", h.d.marginUnits(4), " );", g.a, "{.facepile-avatar{margin-bottom:", h.d.marginUnits(4), ";opacity:0;}}}&.prompt-appear-active{opacity:1;margin-bottom:", h.d.legacyMargin(y.buttonSizePx - p.p + 2 * y.buttonInsetPx + "px"), ";transition:opacity ", C, "s ease-out,margin-bottom ", C, "s ease-out;transition-delay:", S, "s;", g.a, " .facepile-avatar{margin-bottom:0;opacity:1;transition:opacity 0.2s ease-out,margin-bottom 0.2s ease-out;", [1, 2, 3, 4, 5].map((e => Object(a.b)("&:nth-child(", e, "){transition-delay:", .75 + .04 * e, "s;};label:Wrapper;"))), "}}}.prompt-like-enter,.prompt-like-appear{position:relative;opacity:0;bottom:-1rem;}.prompt-like-enter-active,.prompt-like-appear-active{opacity:1;bottom:0;transition:bottom ", C, "s ease-out,opacity ", C, "s ease-out;transition-delay:", S, "s;}", b.EntryWrapper, "{&.prompt-like:last-child{padding-bottom:", h.d.legacyPadding(`${p.p}px`), ";}&.bubble-enter,&.bubble-appear{position:relative;opacity:0;}&.bubble-enter.bubble-enter-active,&.bubble-appear.bubble-appear-active{opacity:1;transition:margin-bottom ", C, "s ease-out,opacity ", C, "s ease-out;transition-delay:", S, "s;}&:not(:first-child){&.bubble-enter{opacity:0;max-height:0;}&.bubble-enter.bubble-enter-active{opacity:0.99;max-height:", h.d.size("300px"), ";transition:opacity 100ms ease-in 500ms,max-height 500ms ease-in;}}&:only-child{&.bubble-appear,&.bubble-enter{opacity:0;position:relative;left:", p.f.buttonInsetPx, "px;transform-origin:bottom right;transform:scale(0);}&.bubble-appear.bubble-appear-active,&.bubble-enter.bubble-enter-active{left:0;opacity:0.99;transform:scale(1);transition:left 200ms ease-out,transform 200ms ease-out,opacity 50ms ease-in 100ms;}}}width:", (({
                    contentTooWide: e
                }) => e ? `calc(100vw - ${h.d.legacySize("133px")})` : void 0), ";max-width:", (({
                    contentTooWide: e
                }) => e ? h.d.size("300px") : "inherit"), ";", E.MessengerButtonIcon, "{position:fixed;bottom:", y.buttonInsetPx, "px;right:", y.buttonInsetPx, "px;opacity:0;transform:scale(0.75);transition:transform ", O, "s ease-out,opacity ", O, "s ease-out;}&.appear ", E.MessengerButtonIcon, ",&.enter ", E.MessengerButtonIcon, "{opacity:1;transform:scale(1);}&.exit ", E.MessengerButtonIcon, "{opacity:0;transform:scale(0.75);}&.exit{", T, ",", _.MessengerPrompt, ",", f.MessengerPromptV3, "{display:none;}}.left-button{display:flex;.inner{padding-bottom:", h.d.paddingUnits(8), ";overflow:hidden;}}.above-button{display:flex;margin-bottom:", h.d.legacyMargin(y.buttonSizePx - p.p + 2 * y.buttonInsetPx + "px"), ";border:1px solid transparent;.inner{&:not(.prompt-like){margin-bottom:", h.d.marginUnits(4), ";}}}.inner{padding:0 ", h.d.paddingUnits(4), ";margin-right:", (({
                    showPrompt: e,
                    showGreeting: t,
                    showAsChatLike: n
                }) => e || t || !n ? 0 : h.d.legacyMargin(`${y.buttonSizePx+y.buttonInsetPx}px`)), ";height:", (({
                    contentTooTall: e,
                    showAsChatLike: t,
                    showPrompt: n,
                    showGreeting: a
                }) => e ? `calc(100vh - ${h.d.legacySize(`${n||a||!t?k:0}px`)})` : "auto"), ";width:", (({
                    contentTooWide: e
                }) => e ? "100vw" : "auto"), ";}", v.CloseButton, "{width:", (({
                    contentTooWide: e,
                    showAsChatLike: t
                }) => e && !t ? "100vw" : void 0), ";}"),
                N = e => 0 !== e.length && e.every((e => ("text" === e.type || "event" === e.type || e.onlyShowMessage) && !e.forceNoRedDot));
            class R extends r.a.Component {
                constructor(...e) {
                    super(...e), this.context = void 0, this.state = {
                        appear: !1,
                        enter: !1,
                        exit: !1
                    }, this.messengerButtonEntryFactory = new b.MessengerButtonEntryFactory(this.props.config)
                }
                render() {
                    const {
                        messages: e,
                        conversation: t,
                        prompt: n,
                        greeting: i,
                        openMessenger: o,
                        sendMessage: d,
                        anyUserAvailable: u
                    } = this.props, g = i && !this.props.promptDismissed && !e.length, h = n && !this.props.promptDismissed && !e.length && !g;
                    i && n && Object(l.c)("Returns prompt and greeting both");
                    const b = t.user ? e.filter((e => !!e.userId)) : [],
                        O = b.length ? b : e,
                        C = N(O),
                        S = C && !s.isMobileOnly;
                    return r.a.createElement(A, {
                        className: Object(a.c)(this.state),
                        "aria-live": "polite",
                        role: "log",
                        contentTooTall: this.context.contentTooTall,
                        contentTooWide: this.context.contentTooWide,
                        showAsChatLike: S,
                        showPrompt: h,
                        showGreeting: g
                    }, h && r.a.createElement(c.a, {
                        transitionName: "prompt",
                        transitionLeave: !1,
                        transitionEnter: !1,
                        transitionAppear: !0,
                        transitionAppearTimeout: 1450
                    }, r.a.createElement(_.MessengerPrompt, {
                        className: "above-button",
                        prompt: n,
                        showBranding: this.props.showBranding,
                        customizablePrivacyPolicyEnabled: this.props.customizablePrivacyPolicyEnabled,
                        onDismiss: this.props.dismissPrompt,
                        onChatAction: () => o(),
                        onVoiceAction: () => o({
                            focus: "meeting"
                        }),
                        showVoice: this.props.allowInboundVoice,
                        avatarUrls: this.props.avatarUrls,
                        sendMessagesDismissedClientEvent: this.props.sendMessagesDismissedClientEvent
                    })), g && r.a.createElement(c.a, {
                        transitionName: "greeting",
                        transitionLeave: !1,
                        transitionEnter: !1,
                        transitionAppear: !0,
                        transitionAppearTimeout: 1450
                    }, r.a.createElement(f.MessengerPromptV3, {
                        className: "above-button",
                        anyUserAvailable: u,
                        prompt: i,
                        customizablePrivacyPolicyEnabled: this.props.customizablePrivacyPolicyEnabled,
                        onDismiss: this.props.dismissPrompt,
                        onChatAction: () => o(),
                        sendMessage: d,
                        avatarUrls: this.props.avatarUrls,
                        sendMessagesDismissedClientEvent: this.props.sendMessagesDismissedClientEvent
                    })), !!O.length && r.a.createElement(T, {
                        showAsChatLike: S,
                        className: S ? "left-button" : "above-button"
                    }, r.a.createElement(v.CloseButton, {
                        className: "close-button",
                        onClick: () => {
                            this.props.dismissPrompt(), this.props.onMessagesDismissed(), this.props.sendMessagesDismissedClientEvent()
                        },
                        showAsChatLike: S
                    }), C ? r.a.createElement("div", {
                        className: "inner",
                        "data-clickable": !0
                    }, r.a.createElement(c.a, {
                        transitionName: "bubble",
                        transitionLeave: !1,
                        transitionEnterTimeout: 500,
                        transitionAppear: !0,
                        transitionAppearTimeout: 500
                    }, O.map(((e, n) => this.messengerButtonEntryFactory.getMessageEntries(e, {
                        conversation: t,
                        sendMessage: d,
                        openMessenger: o,
                        index: n,
                        showMessageNub: S && n === O.length - 1,
                        entryWrapperClass: "chat-like"
                    }))))) : r.a.createElement(c.a, {
                        transitionName: "prompt-like",
                        transitionLeave: !1,
                        transitionEnterTimeout: 750,
                        transitionAppear: !0,
                        transitionAppearTimeout: 750
                    }, r.a.createElement(m.a, {
                        className: "inner prompt-like",
                        "data-clickable": !0
                    }, O.map(((e, n) => this.messengerButtonEntryFactory.getMessageEntries(e, {
                        conversation: t,
                        sendMessage: d,
                        openMessenger: o,
                        index: n,
                        entryWrapperClass: "prompt-like",
                        customizablePrivacyPolicyEnabled: this.props.customizablePrivacyPolicyEnabled
                    })))))), r.a.createElement(E.MessengerButtonIcon, {
                        "data-backend-test-id": "messenger-button",
                        "aria-label": "Open Messenger",
                        onClick: () => o(),
                        measurements: s.isMobileOnly ? p.r : p.f,
                        numUnread: C ? O.length : void 0,
                        buttonRef: this.props.messengerButtonIconRef
                    }))
                }
                componentWillAppear(e) {
                    this.setState({
                        exit: !1,
                        appear: !1,
                        enter: !1
                    }), setTimeout(e, 150)
                }
                componentWillEnter(e) {
                    this.setState({
                        exit: !1,
                        appear: !1,
                        enter: !1
                    }), setTimeout(e, 150)
                }
                componentWillLeave(e) {
                    this.setState({
                        exit: !0
                    }), setTimeout(e, 150)
                }
                componentDidAppear() {
                    this.setState({
                        appear: !0
                    })
                }
                componentDidEnter() {
                    this.setState({
                        enter: !0
                    })
                }
            }
            R.contextType = u.a
        },
        211: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "UserDetails", (function() {
                return d
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(21),
                s = n(1);
            const l = {
                    root: Object(a.b)({
                        name: "m1ikq0-root",
                        styles: "display:flex;align-items:center;;label:root;"
                    }),
                    details: {
                        root: Object(a.b)("font-size:", s.i.size500, ";margin-left:", s.d.marginUnits(2), ";flex-grow:1;overflow:hidden;height:100%;display:flex;flex-direction:column;;label:root;"),
                        rootImagePresent: Object(a.b)({
                            name: "z1jl0j-rootImagePresent",
                            styles: "margin-left:0;;label:rootImagePresent;"
                        }),
                        rootButtonEntry: Object(a.b)("color:", s.h.secondary, ";;label:rootButtonEntry;"),
                        name: Object(a.b)(Object(r.b)(), " line-height:", s.d.legacyLineHeight("16px"), ";font-weight:", s.j.medium, ";;label:name;"),
                        nameDescriptionNotPresent: Object(a.b)("line-height:", s.d.legacyLineHeight("32px"), ";;label:nameDescriptionNotPresent;"),
                        description: Object(a.b)(Object(r.b)(), " line-height:", s.d.legacyLineHeight("16px"), ";font-size:", s.i.size300, ";;label:description;")
                    },
                    img: Object(a.b)("height:", s.d.size("32px"), ";min-width:", s.d.size("32px"), ";margin-right:", s.d.marginUnits(2), ";border-radius:32px;;label:img;")
                },
                d = ({
                    className: e,
                    name: t,
                    description: n,
                    url: i,
                    isButtonEntry: r = !1
                }) => o.a.createElement("div", {
                    className: Object(a.c)(l.root, e),
                    "data-backend-test-id": "messenger-header-title"
                }, i && o.a.createElement("img", {
                    className: l.img,
                    src: i,
                    role: "presentation",
                    alt: ""
                }), o.a.createElement("div", {
                    className: Object(a.c)(l.details.root, {
                        [l.details.rootButtonEntry]: r
                    }, {
                        [l.details.rootImagePresent]: !!i
                    }),
                    role: "heading",
                    "aria-level": 1
                }, o.a.createElement("strong", {
                    className: Object(a.c)(l.details.name, {
                        [l.details.nameDescriptionNotPresent]: !n
                    })
                }, t), n && o.a.createElement("small", {
                    className: l.details.description
                }, n)))
        },
        212: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(351),
                d = (n(445), n(62)),
                c = n(1),
                u = n(327),
                m = n(355),
                g = n.n(m);
            const p = Object(a.b)("font-size:", c.i.size500, ";line-height:normal;background-color:#fff;border-radius:3px;box-shadow:0 2px 3px 3px rgba(0,0,0,0.1);z-index:1;margin-top:", c.d.legacyMargin("10px"), ";padding:", c.d.paddingUnits(2), ";&.position-top-right,&.position-right{left:calc(50% - 24px);}&.position-top-left,&.position-left{right:calc(50% - 8px);}&.position-top-right,&.position-top-center,&.position-top-left{bottom:calc(100% + 8px);}&.position-normal{left:0;}&.position-top-center,&.position-center{left:50%;transform:translate(-50%);}& button.danger{color:", c.c.red, ";}& button:not(.unstyled),a:not(.unstyled){display:block;width:100%;padding:", c.d.legacyPadding("5px"), " ", c.d.legacyPadding("10px"), ";text-align:left;}& button:not(.unstyled):hover,a:not(.unstyled):hover{background-color:", c.c.teal, ";color:#fff;};label:content;"),
                h = Object(i.a)("div", {
                    target: "e12jywgy0",
                    label: "DropdownContentNubbin"
                })("width:100%;height:", c.d.legacySize("9px"), ';position:absolute;overflow:hidden;&:after{content:"";position:absolute;width:', c.d.size("8px"), ";height:", c.d.size("8px"), ";background:#fff;transform:rotate(45deg);box-shadow:2px 2px 3px 3px rgba(0,0,0,0.1);}.position-left &,.position-center &,.position-right &,.position-normal &{top:-9px;}.position-left &:after,.position-center &:after,.position-right &:after,.position-normal &:after{top:6px;}.position-top-right &,.position-top-center &,.position-top-left &{top:calc(100%);}.position-center &{left:0;}.position-top-right &:after,.position-top-center &:after,.position-top-left &:after{top:-6px;}.position-left &:after,.position-top-left &:after,.position-normal &:after{right:12px;}.position-top-right &:after,.position-right &:after{left:12px;}.position-top-center &:after,.position-center &:after{left:50%;transform:translate(-50%) rotate(45deg);}"),
                v = e => {
                    const {
                        className: t = "",
                        width: n = null,
                        position: i = "right",
                        hideNubbin: o = !1
                    } = e;
                    return r.a.createElement(m.DropdownContent, {
                        className: Object(a.c)(p, t, "dropdown-content", `position-${i}`, n && Object(a.b)("width:", c.d.legacySize(`${n}px`), ";;label:DropdownContent;"))
                    }, !o && r.a.createElement(h, null), e.children)
                },
                b = m.DropdownTrigger;
            class E extends r.a.Component {
                constructor(e) {
                    super(e), this.hideMenu = e => {
                        e.target.closest('[data-hide-menu="true"]') && this.menu.current.hide()
                    }, this.menu = r.a.createRef()
                }
                render() {
                    return r.a.createElement(g.a, {
                        className: `${this.props.className||""} ${Object(a.b)({name:"tyzphp-Dropdown",styles:"position:relative;;label:Dropdown;"})}`,
                        onClick: this.hideMenu,
                        ref: this.menu,
                        disabled: this.props.disabled,
                        active: this.props.active
                    }, this.props.children)
                }
            }
            var _ = n(63);
            const f = Object(i.a)("button", {
                    target: "e17khc0x0",
                    label: "Button"
                })("background-color:", (e => e.dark ? "rgba(255, 255, 255, 0.1)" : "transparent"), ";height:", (e => c.d.legacySize(`${e.size}px`)), ";width:", (e => c.d.legacySize(`${e.size}px`)), ";text-align:center;border-radius:100%;border:1px solid ", c.c.border, ";vertical-align:middle;margin-right:", (e => c.d.legacyMargin(`${e.margin||0}px`)), ";"),
                O = Object(i.a)((e => r.a.createElement(f, {
                    "aria-label": e["aria-label"],
                    ...e
                }, r.a.createElement(_.b.Times, null))), {
                    target: "e17khc0x2",
                    label: "CancelButton"
                })("svg{width:", (e => e.size * c.d.legacySize("0.45px")), ";height:", (e => e.size * c.d.legacySize("0.45px")), ";fill:", c.c.gray, ";}"),
                C = Object(i.a)((e => r.a.createElement(f, {
                    "aria-label": "End call",
                    onClick: () => e.connection.disconnect(),
                    ...e
                }, r.a.createElement(_.b.EndCall, null))), {
                    target: "e17khc0x3",
                    label: "EndCallButton"
                })("svg{width:", (e => e.size * c.d.legacySize("0.7px")), ";height:", (e => e.size * c.d.legacySize("0.7px")), ";fill:", c.c.red, ";}"),
                S = Object(i.a)((e => r.a.createElement(f, {
                    "aria-label": "Mute",
                    ...e
                }, r.a.createElement(_.b.Mute, null))), {
                    target: "e17khc0x4",
                    label: "Mute"
                })("&.muted{background-color:", c.c.red, ";border-color:", c.c.red, ";svg{fill:#fff;}}svg{width:", (e => e.size * c.d.legacySize("0.6px")), ";height:", (e => e.size * c.d.legacySize("0.6px")), ";fill:", (e => e.dark ? "#FFF" : c.c.gray), ";}");
            class y extends r.a.Component {
                constructor(e) {
                    super(e), this.muteCall = () => {
                        const {
                            connection: e
                        } = this.props;
                        e.mute(!e.isMuted()), this.setState({
                            isMuted: e.isMuted()
                        })
                    }, this.state = {
                        isMuted: e.connection.isMuted()
                    }
                }
                render() {
                    const {
                        className: e,
                        ...t
                    } = this.props;
                    return r.a.createElement(S, {
                        className: Object(a.c)(e, {
                            muted: this.state.isMuted
                        }),
                        onClick: this.muteCall,
                        ...t
                    })
                }
            }
            var k = Object(i.a)("div", {
                    target: "e2f14l70",
                    label: "MeetingControls"
                })("text-align:center;background-color:#fff;padding:", c.d.paddingUnits(6), " 0;& .name{font-size:", c.i.size800, ";font-weight:", c.j.semiBold, ";margin-top:", c.d.marginUnits(2), ";}.company{font-size:", c.i.size600, ";}& .role{font-size:", c.i.size300, ";margin-top:", c.d.marginUnits(2), ";}& .avatar{height:", c.d.legacySize("50px"), ";width:", c.d.legacySize("50px"), ";margin:auto;margin-top:", c.d.marginUnits(4), ";border-radius:100%;img{height:", c.d.legacySize("50px"), ";}}& .status{font-size:", c.i.size300, ";color:", c.h.secondary, ";margin-bottom:", c.d.marginUnits(4), ";}"),
                T = n(14),
                A = n(204),
                N = n(271);
            class R extends r.a.Component {
                constructor(e) {
                    super(e), this.setInputDevice = e => {
                        this.props.device.audio.setInputDevice(e.value), this.setState({
                            inputDevice: e.value
                        })
                    }, this.setOutputDevice = e => {
                        this.props.device.audio.speakerDevices.set(e.value), this.setState({
                            outputDevice: e.value
                        })
                    }, this.refreshDeviceOpts = () => {
                        this.setState(this.getDeviceOpts())
                    }, this.state = Object.assign({}, this.getDeviceOpts(), {
                        inputDevice: this.getInputDevice(),
                        outputDevice: this.getOutputDevice()
                    })
                }
                render() {
                    const {
                        inputDevice: e,
                        inputDevices: t,
                        outputDevice: n,
                        outputDevices: a
                    } = this.state;
                    return r.a.createElement(T.a.Consumer, null, (i => r.a.createElement("div", {
                        className: this.props.className
                    }, r.a.createElement("header", null, i.t("messenger.text.meeting_settings")), r.a.createElement("label", null, i.t("messenger.text.microphone")), r.a.createElement(N.a, {
                        value: e,
                        options: t,
                        onChange: this.setInputDevice
                    }), r.a.createElement("label", null, i.t("messenger.text.speakers")), r.a.createElement(N.a, {
                        value: n,
                        options: a,
                        onChange: this.setOutputDevice
                    }), r.a.createElement(A.a, {
                        textColor: this.props.theme.messenger.textColor,
                        backgroundColor: this.props.theme.messenger.primaryColor,
                        onClick: this.props.onDone
                    }, i.t("messenger.cta.done")))))
                }
                componentDidMount() {
                    this.props.device.audio.on("deviceChange", this.refreshDeviceOpts)
                }
                componentWillUnmount() {
                    this.props.device.audio.removeListener("deviceChange", this.refreshDeviceOpts)
                }
                getInputDevice(e) {
                    return this.props.device.audio.inputDevice && this.props.device.audio.inputDevice.deviceId || "default"
                }
                getOutputDevice() {
                    const e = this.props.device.audio.speakerDevices.get().values().next();
                    return e && e.value && e.value.deviceId || "default"
                }
                getDeviceOpts() {
                    const {
                        device: e
                    } = this.props, t = [];
                    e.audio.availableInputDevices.forEach(((e, n) => {
                        t.push({
                            label: e.label,
                            value: n
                        })
                    }));
                    const n = [];
                    return e.audio.availableOutputDevices.forEach(((e, t) => {
                        n.push({
                            label: e.label,
                            value: t
                        })
                    })), {
                        inputDevices: t,
                        outputDevices: n
                    }
                }
            }
            var D = Object(i.a)(Object(l.b)(R), {
                    target: "etuix670",
                    label: "WrappedMeetingSettings"
                })("padding:", c.d.paddingUnits(4), ";& header{font-size:", c.i.size800, ";font-weight:", c.j.semiBold, ";margin-bottom:", c.d.marginUnits(4), ";}& label{font-size:", c.i.size500, ";font-weight:", c.j.semiBold, ";display:inline-block;margin:", c.d.marginUnits(2), " 0;}& button{margin-top:", c.d.marginUnits(4), ";float:right;}"),
                I = n(331),
                x = n(307);
            var M = Object(i.a)((({
                className: e
            }) => r.a.createElement("div", {
                className: e
            }, r.a.createElement("div", null), r.a.createElement("div", null), r.a.createElement("div", null))), {
                target: "e1n7a7yc0",
                label: "Waves"
            })("position:relative;width:", c.d.size("300px"), ";height:", c.d.legacySize("30px"), ";margin:", c.d.marginUnits(2), " 0;> div{", c.e, " background-image:url(", x.a, ");background-repeat:repeat-x;background-size:auto 30px;}& > div:nth-child(1){animation:wave 200s infinite linear;}& > div:nth-child(2){animation:wave 300s infinite linear;}& > div:nth-child(3){animation:wave 500s infinite linear;}@keyframes wave{0%{background-position-x:0;}100%{background-position-x:30000px;}}");
            Object(a.d)(c.a);
            class B extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        showSettings: !1
                    }, this.toggleSettings = () => {
                        this.setState({
                            showSettings: !this.state.showSettings
                        })
                    }
                }
                render() {
                    var e, t, n;
                    const {
                        connection: a,
                        device: i,
                        meeting: o,
                        messengerTheme: s,
                        startedAt: c,
                        appexchange: u,
                        appexchangeCompanyName: m
                    } = this.props;
                    return r.a.createElement(l.a, {
                        theme: {
                            messenger: s
                        }
                    }, r.a.createElement(r.a.Fragment, null, r.a.createElement(k, {
                        className: this.props.className
                    }, i && r.a.createElement(E, {
                        className: "menu"
                    }, r.a.createElement(b, {
                        className: "menu-trigger"
                    }, r.a.createElement(_.b.DotMenu, {
                        height: 15
                    })), r.a.createElement(v, {
                        width: 110,
                        position: "left"
                    }, r.a.createElement("button", {
                        onClick: this.toggleSettings
                    }, r.a.createElement(d.a, {
                        id: "messenger.cta.settings"
                    })))), this.state.showSettings && r.a.createElement(D, {
                        className: "settings",
                        device: i,
                        onDone: this.toggleSettings
                    }), r.a.createElement("div", {
                        className: "status"
                    }, this.props.children || r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                        className: "connection-status"
                    }, a ? r.a.createElement(I.a, {
                        startedAt: c
                    }) : r.a.createElement("span", null, r.a.createElement(d.a, {
                        id: "messenger.text.connecting"
                    }))), (null === (e = o.user) || void 0 === e ? void 0 : e.avatarUrl) && r.a.createElement("div", {
                        className: "avatar"
                    }, r.a.createElement("img", {
                        src: o.user.avatarUrl
                    })), r.a.createElement("div", {
                        className: "name"
                    }, null === (t = o.user) || void 0 === t ? void 0 : t.name), (null === (n = o.user) || void 0 === n ? void 0 : n.jobTitle) && r.a.createElement("div", {
                        className: "role"
                    }, o.user.jobTitle), u && r.a.createElement("div", {
                        className: "company"
                    }, m))), r.a.createElement(M, null), r.a.createElement("div", {
                        className: "buttons"
                    }, a ? r.a.createElement(r.a.Fragment, null, r.a.createElement(y, {
                        connection: a,
                        size: 40,
                        margin: 16
                    }), r.a.createElement(C, {
                        connection: a,
                        size: 40
                    })) : r.a.createElement(O, {
                        onClick: () => window.close(),
                        size: 40,
                        "aria-label": "Close window"
                    }))), r.a.createElement(_.a, null)))
                }
            }
            const F = Object(i.a)(Object(u.a)(B), {
                target: "em96wsy0",
                label: "WrappedMeetingStatus"
            })("display:flex;flex-direction:column;width:", c.d.size("300px"), ";height:", s.isMobileOnly ? c.d.size("300px") : "100vh", ";margin:auto;.status{flex-grow:1;display:flex;flex-direction:column;justify-content:center;}.menu{position:absolute;top:16px;right:16px;svg{fill:", c.c.gray, ";}}.menu-trigger{padding:0 ", c.d.paddingUnits(2), ";}.settings{", c.e, " z-index:1;text-align:initial;background-color:#fff;}", M, "{position:absolute;top:calc(50% - 15px);}");
            t.default = F
        },
        213: function(e, t, n) {
            "use strict";

            function a(e) {
                return e.charAt(0).toUpperCase() + e.slice(1)
            }
            n.d(t, "a", (function() {
                return a
            }))
        },
        215: function(e, t, n) {
            "use strict";
            const a = {
                primaryColor: "#0070d2",
                textColor: "#ffffff",
                positionY: 0,
                buttonShape: "circle",
                buttonIcon: "double_chat",
                buttonImageUrl: null,
                launcherUseThemeColors: !0,
                themeButtonsUseThemeColors: !0,
                themeHeaderUseThemeColors: !0,
                callboxUseThemeColors: !0,
                callBoxImageUrl: null,
                themeHeaderBackgroundImageUrl: null,
                themeHeaderUseImage: !1,
                themeButtonsBorderRadiusPx: 3,
                themeButtonsButtonStyle: "shade",
                themeButtonsButtonShape: "rectangle",
                launcherBackgroundUseImage: !1
            };
            t.a = (e, t, n) => {
                const i = n.reduce(((e, t) => (t.domains.forEach((n => {
                        e[n] = t
                    })), e)), []),
                    o = Object.keys(i).sort(((e, t) => t.length - e.length)),
                    r = e ? o.find((t => t === e || e.endsWith(`.${t}`))) : null,
                    s = r && i[r] || n.find((e => e.isDefault));
                return t ? { ...s,
                    ...a
                } : s
            }
        },
        219: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = (n(754), n(552)),
                l = n.n(s),
                d = n(553),
                c = n.n(d),
                u = n(554),
                m = n.n(u),
                g = n(1);
            class p extends r.a.Component {
                constructor(e) {
                    super(e), this.phoneInputRef = r.a.createRef(), this.isValid = () => null === this.itiPhoneNumber.isValidNumber() || this.itiPhoneNumber.isValidNumber(), this.getItiNumber = () => null === this.itiPhoneNumber.isValidNumber() && this.phoneInputRef.current.value || this.itiPhoneNumber.getNumber(), Object(a.d)(`\n      .iti-flag {\n        background-image: url("${l.a}");\n      }\n\n      @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n        .iti-flag {\n          background-image: url("${c.a}");\n        }\n      }\n    `, ";label:PhoneInputComponent;")
                }
                render() {
                    return r.a.createElement(h.PhoneInputWrapper, {
                        className: this.props.className
                    }, r.a.createElement("input", {
                        type: "tel",
                        ref: e => {
                            this.phoneInputRef.current = e, this.props.innerRef && (this.props.innerRef.current = e)
                        },
                        defaultValue: this.props.value,
                        onChange: () => {
                            this.itiPhoneNumber.setNumber(this.phoneInputRef.current.value), this.props.onChange({
                                isValid: this.isValid(),
                                value: this.getItiNumber()
                            })
                        },
                        onKeyDown: e => {
                            this.props.onKeyDown && this.props.onKeyDown(e), "Enter" === e.key && this.props.onEnter && this.props.onEnter(e)
                        },
                        disabled: this.props.disabled
                    }))
                }
                componentDidUpdate(e) {
                    this.getItiNumber() !== this.props.value && (this.itiPhoneNumber.setNumber(this.props.value), this.props.onChange({
                        isValid: this.isValid(),
                        value: this.getItiNumber()
                    }))
                }
                componentDidMount() {
                    const {
                        initialCountry: e,
                        onlyCountries: t
                    } = this.props;
                    window.intlTelInputGlobals.loadUtils("/javascript/intl_tel_input_utils.js");
                    const n = {
                        initialCountry: e || "us",
                        preferredCountries: [e || "us"]
                    };
                    t && (n.onlyCountries = t), this.itiPhoneNumber = m()(this.phoneInputRef.current, n)
                }
                componentWillUnmount() {
                    this.itiPhoneNumber.destroy()
                }
            }
            const h = {
                    PhoneInputWrapper: Object(i.a)("div", {
                        target: "e143lagg0",
                        label: "PhoneInputWrapper"
                    })("display:inline;& .intl-tel-input,input{width:100%;height:100%;::placeholder{color:", g.c.secondaryText, ";}}.country-list{width:", g.d.size("240px"), ";}")
                },
                v = r.a.forwardRef(((e, t) => r.a.createElement(p, {
                    innerRef: t,
                    ...e
                })));
            t.a = v
        },
        22: function(e, t, n) {
            "use strict";
            n.d(t, "f", (function() {
                return r
            })), n.d(t, "r", (function() {
                return s
            })), n.d(t, "p", (function() {
                return l
            })), n.d(t, "s", (function() {
                return d
            })), n.d(t, "e", (function() {
                return c
            })), n.d(t, "l", (function() {
                return u
            })), n.d(t, "n", (function() {
                return m
            })), n.d(t, "d", (function() {
                return g
            })), n.d(t, "k", (function() {
                return p
            })), n.d(t, "j", (function() {
                return h
            })), n.d(t, "c", (function() {
                return v
            })), n.d(t, "b", (function() {
                return b
            })), n.d(t, "m", (function() {
                return E
            })), n.d(t, "i", (function() {
                return _
            })), n.d(t, "q", (function() {
                return f
            })), n.d(t, "h", (function() {
                return O
            })), n.d(t, "g", (function() {
                return C
            })), n.d(t, "o", (function() {
                return S
            })), n.d(t, "a", (function() {
                return y
            }));
            var a = n(2),
                i = n(1);
            const o = e => ({
                    buttonSizePx: e,
                    buttonRadiusPx: e / 2,
                    buttonCornerInsetPx: e / 2 - e / 2 / Math.SQRT2,
                    buttonInsetPx: 16
                }),
                r = o(56),
                s = o(50),
                l = 20,
                d = 28,
                c = 28,
                u = 32,
                m = 342,
                g = 320,
                p = 538,
                h = 480,
                v = 55,
                b = 226,
                E = 48,
                _ = 8,
                f = 16.5,
                O = "8px",
                C = "#101010",
                S = Object(a.b)("box-shadow:0px 5px ", l, "px 0px rgba(0,0,0,0.15);;label:overlay;"),
                y = `\n  ${i.a}\n\n  /* iOS will autozoom on text inputs unless the font is at least 16px */\n  body.ios {\n    input, textarea {\n      font-size: ${i.d.legacyFontSize("16px")} !important;\n    }\n\n    // We need this for our behind-frame iframe clicking trickery, because iOS\n    // will not bubble click events on non-clickable elements without this\n    * {\n      cursor: pointer;\n    }\n  }\n`
        },
        220: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return E
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(35),
                s = n(95),
                l = n(232),
                d = n(84),
                c = n(129),
                u = n(1),
                m = n(100),
                g = n(76),
                p = n(205),
                h = n(206),
                v = n(104);
            const b = {
                    changeIdentitySection: Object(a.b)({
                        name: "1vg8bha-changeIdentitySection",
                        styles: "flex-basis:100%;text-align:left;;label:changeIdentitySection;"
                    }),
                    changeIdentityButton: Object(a.b)("color:", u.c.secondaryText, ";text-decoration:underline;;label:changeIdentityButton;"),
                    alertMessage: Object(a.b)("position:absolute;top:1rem;left:0;right:0;margin-left:auto;margin-right:auto;width:fit-content;padding:", u.d.paddingUnits(2), " ", u.d.paddingUnits(4), ";border-radius:", u.n.inputBorderRadius, "px;background-color:", u.c.lightOrange, ";color:", u.c.darkOrange, ";font-size:", u.i.size300, ";;label:alertMessage;"),
                    alertMessageMobile: Object(a.b)("position:initial;top:0.5rem;padding:", u.d.paddingUnits(1), " ", u.d.paddingUnits(2), ";margin:", u.d.paddingUnits(2), " auto;;label:alertMessageMobile;"),
                    verticalLine: Object(a.b)("border-left:1px solid ", u.c.lightGray, ";margin-right:", u.d.marginUnits(14), ";;label:verticalLine;"),
                    offerHeader: Object(a.b)("display:flex;flex-direction:column;max-width:", u.d.size("328px"), ";padding-right:", u.d.paddingUnits(14), ";gap:", u.d.gapUnits(4), ";;label:offerHeader;"),
                    offerHeaderMobile: Object(a.b)("padding-right:0;padding-bottom:", u.d.paddingUnits(6), ";;label:offerHeaderMobile;")
                },
                E = (e, t, n = "start") => o.a.createElement(s.a, {
                    level: 2,
                    preset: "headingExtraSmall",
                    fontColor: "secondary"
                }, o.a.createElement(r.a, {
                    justify: n
                }, o.a.createElement(h.a, {
                    "aria-hidden": !0
                }), " \xa0", e, "\xa0", t && o.a.createElement(o.a.Fragment, null, o.a.createElement(p.a, {
                    "aria-hidden": !0
                }), " \xa0", t, "\xa0")));
            t.b = ({
                isSmallView: e = !1,
                showBookedRepPhoto: t,
                calendarEventAvatarUrls: n,
                repAvatarUrl: i,
                repName: p,
                repRole: h,
                duration: _,
                closeAction: f,
                hideCloseButton: O,
                isMobile: C,
                errorMessage: S,
                isTimeZoneAbbr: y
            }) => {
                const k = Object(v.c)(!!y);
                return o.a.createElement(r.a, {
                    textAlign: "left",
                    direction: C ? "column" : "row"
                }, !O && o.a.createElement("button", {
                    className: d.a,
                    onClick: f,
                    "aria-label": "Close"
                }, o.a.createElement(g.a, null)), S && o.a.createElement("div", {
                    className: Object(a.c)(b.alertMessage, {
                        [b.alertMessageMobile]: C || e
                    })
                }, o.a.createElement(m.a, {
                    "aria-hidden": !0,
                    style: {
                        fill: u.c.darkOrange
                    }
                }), " ", S), o.a.createElement("div", {
                    className: Object(a.c)(b.offerHeader, {
                        [b.offerHeaderMobile]: C
                    })
                }, t && o.a.createElement(r.a, {
                    paddingUnits: C ? 0 : 1,
                    paddingBottomUnits: C ? 0 : 8
                }, o.a.createElement(c.a, {
                    calendarEventAvatarUrls: n,
                    repAvatarUrl: i,
                    repName: p,
                    repRole: h,
                    isThemesDefaultView: !0
                })), o.a.createElement(r.a, {
                    textAlign: "left"
                }, o.a.createElement(s.a, {
                    level: 1,
                    preset: "headingLarge",
                    color: u.c.primaryText
                }, "Schedule a meeting with our team!")), _ && E(_, k), o.a.createElement(l.a, null, "Pick a day and time that works for you to schedule your meeting. We can't wait to give you a sneak peek behind the scenes!")))
            }
        },
        221: function(e, t, n) {
            "use strict";
            var a = n(5),
                i = n(0),
                o = n.n(i);
            const r = Object(a.a)("svg", {
                target: "e3hphau0",
                label: "CalendarLoading"
            })({
                name: "fapo5a",
                styles: "#eRqBWwmOUPc3{animation:eRqBWwmOUPc3_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc3_c_o{0%{opacity:0;}7.692308%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}#eRqBWwmOUPc4{animation:eRqBWwmOUPc4_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc4_c_o{0%{opacity:0;}7.692308%{opacity:0;}15.384615%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}#eRqBWwmOUPc5{animation:eRqBWwmOUPc5_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc5_c_o{0%{opacity:0;}23.076923%{opacity:0;}30.769231%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}#eRqBWwmOUPc6{animation:eRqBWwmOUPc6_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc6_c_o{0%{opacity:0;}30.769231%{opacity:0;}38.461538%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}#eRqBWwmOUPc7{animation:eRqBWwmOUPc7_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc7_c_o{0%{opacity:0;}38.461538%{opacity:0;}46.153846%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}#eRqBWwmOUPc8{animation:eRqBWwmOUPc8_c_o 1300ms linear infinite normal forwards;}@keyframes eRqBWwmOUPc8_c_o{0%{opacity:0;}15.384615%{opacity:0;}23.076923%{opacity:0;}53.846154%{opacity:1;}69.230769%{opacity:1;}76.923077%{opacity:0;}100%{opacity:0;}}"
            });
            t.a = ({
                color: e,
                size: t
            }) => o.a.createElement(r, {
                id: "eRqBWwmOUPc1",
                role: "img",
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 24 24",
                shapeRendering: "geometricPrecision",
                textRendering: "geometricPrecision",
                height: t,
                width: t,
                fill: e
            }, o.a.createElement("title", null, "Calendar Loading Icon"), o.a.createElement("path", {
                d: "M8.37402,1.25c0-.414214-.33578-.75-.75-.75s-.75.335786-.75.75v1.40734c-.32049.00592-.60977.01639-.87218.03492-.61664.04353-1.14152.13423-1.6298.3444C3.25645,3.51684,2.36718,4.40611,1.887,5.5217c-.21017.48828-.30087,1.01315-.3444,1.6298C1.49999,7.75501,1.5,8.50059,1.5,9.44135v.00003.02836v5.27826.0565v0c-.00002,1.8377-.00003,3.2934.15314,4.4326.15762,1.1724.48974,2.1213,1.2381,2.8697s1.69732,1.0805,2.86974,1.2381c1.1392.1532,2.59482.1532,4.43252.1531h.0001.0564h3.3484.0564v0c1.8378.0001,3.2934.0001,4.4326-.1531c1.1724-.1576,2.1214-.4897,2.8697-1.2381s1.0805-1.6973,1.2382-2.8697c.1531-1.1392.1531-2.5949.1531-4.4326v0-.0565-3.3483-.0565v0c0-1.83774,0-3.29336-.1531-4.43257-.1577-1.17242-.4898-2.12137-1.2382-2.86973s-1.6973-1.08048-2.8697-1.23811c-.3424-.04603-.7134-.07823-1.1147-.10075v-1.45204c0-.414214-.3358-.75-.75-.75s-.75.335786-.75.75v1.40652c-.5597-.00687-1.1646-.00687-1.8178-.00686h-.0001-.0564-5.22438v-1.39966ZM15.4727,4.47473v-.31792c-.5588-.00694-1.18-.00715-1.8743-.00715h-5.22438v.32507c0,.41421-.33578.75-.75.75s-.75-.33579-.75-.75v-.31715c-.28765.00554-.53993.01495-.76655.03095-.53744.03794-.87353.11019-1.14239.22592-.7633.32854-1.37174.93699-1.70029,1.70029-.11572.26886-.18797.60495-.22591,1.14239C3.00044,7.80163,3,8.49432,3,9.46974v5.27826c0,1.9069.00159,3.2615.13976,4.2892.13526,1.0061.38893,1.5857.81214,2.0089.42321.4233,1.00286.6769,2.00895.8122c1.02766.1382,2.38233.1397,4.28915.1397h3.3484c1.9068,0,3.2615-.0015,4.2891-.1397c1.0061-.1353,1.5858-.3889,2.009-.8122.4232-.4232.6769-1.0028.8121-2.0089.1382-1.0277.1398-2.3823.1398-4.2892v-3.3483c0-1.90686-.0016-3.26153-.1398-4.28919-.1352-1.00609-.3889-1.58574-.8121-2.00895s-1.0029-.67688-2.009-.81214c-.2793-.03755-.5827-.06502-.9148-.0851v.27041c0,.41421-.3358.75-.75.75s-.75-.33579-.75-.75ZM8.7002,8.02417c-.41422,0-.75.33579-.75.75s.33578.75.75.75h6.4495c.4142,0,.75-.33579.75-.75s-.3358-.75-.75-.75h-6.4495Z",
                clipRule: "evenodd",
                fillRule: "evenodd"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc3",
                r: "1.07491",
                transform: "translate(7.624711 13.102695)",
                opacity: "0"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc4",
                r: "1.07491",
                transform: "translate(11.952995 17.402195)",
                opacity: "0"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc5",
                r: "1.07491",
                transform: "translate(16.252795 13.102695)",
                opacity: "0"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc6",
                r: "1.07491",
                transform: "translate(16.2243 17.3737)",
                opacity: "0"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc7",
                r: "1.07491",
                transform: "translate(11.952995 13.102695)",
                opacity: "0"
            }), o.a.createElement("circle", {
                id: "eRqBWwmOUPc8",
                r: "1.07491",
                transform: "translate(7.624711 17.402195)",
                opacity: "0"
            }))
        },
        222: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "IncomingMeetingRequest", (function() {
                return E
            })), n.d(t, "OutgoingMeetingRequest", (function() {
                return _
            })), n.d(t, "PendingOutgoingMeetingRequest", (function() {
                return O
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(62),
                d = n(96),
                c = n(14),
                u = n(6),
                m = n(93),
                g = n(26),
                p = n(91),
                h = n(219),
                v = n(1);
            class b extends r.a.Component {
                constructor(...e) {
                    super(...e), this.connectionRef = r.a.createRef()
                }
                focus() {
                    this.connectionRef.current.focus()
                }
                render() {
                    const {
                        meeting: e
                    } = this.props, t = this.context;
                    return r.a.createElement(g.e.Call, {
                        className: this.props.className
                    }, r.a.createElement("div", {
                        className: "status"
                    }, t.t("messenger.text.incoming_call")), e.user.avatarUrl && r.a.createElement("div", {
                        className: "avatar"
                    }, r.a.createElement("img", {
                        src: e.user.avatarUrl
                    })), r.a.createElement("div", {
                        className: "name"
                    }, e.user.name), e.user.jobTitle && r.a.createElement("div", {
                        className: "role"
                    }, e.user.jobTitle), this.props.config.appexchange && r.a.createElement("div", {
                        className: "company"
                    }, this.props.config.appexchangeCompanyName), r.a.createElement(S, {
                        ref: this.connectionRef,
                        className: "connection-options",
                        rtcSupported: this.props.rtcSupported,
                        joinViaWebText: s.isMobile ? t.t("messenger.cta.join_mobile") : t.t("messenger.cta.join_web"),
                        joinViaWeb: this.props.accept,
                        joinViaPhone: this.props.transfer,
                        cancel: this.props.reject,
                        cancelText: t.t("messenger.cta.decline"),
                        config: this.props.config,
                        countryCode: this.props.countryCode
                    }))
                }
            }
            b.contextType = c.a;
            const E = Object(i.a)(b, {
                target: "e1i1qwz00",
                label: "IncomingMeetingRequest"
            })(".status{font-size:", v.i.size300, ";color:", v.h.secondary, ";}.name{font-size:", v.i.size600, ";font-weight:", v.j.semiBold, ";}.company{font-size:", v.i.size500, ";margin-top:", v.d.marginUnits(1), ";}.avatar{height:", v.d.legacySize("50px"), ";margin:", v.d.marginUnits(2), " 0;img{height:100%;}}.role{font-size:", v.i.size300, ";}.connection-options{margin-top:", v.d.marginUnits(4), ";}");
            class _ extends r.a.Component {
                constructor(...e) {
                    super(...e), this.connectionRef = r.a.createRef()
                }
                focus() {
                    this.connectionRef.current.focus()
                }
                render() {
                    const e = this.context;
                    return r.a.createElement(g.e.Call, null, r.a.createElement(S, {
                        ref: this.connectionRef,
                        cancelText: e.t("messenger.cta.cancel"),
                        joinViaWebText: s.isMobile ? e.t("messenger.cta.call_mobile") : e.t("messenger.cta.call_web"),
                        ...this.props
                    }))
                }
            }
            _.contextType = c.a;
            const f = Object(d.a)(c.a, "i18n")((({
                    meeting: e,
                    config: t,
                    cancel: n,
                    className: a,
                    i18n: i
                }) => r.a.createElement(g.e.Call, {
                    className: a
                }, r.a.createElement(p.b.PhoneCall, {
                    className: "icon",
                    height: 16
                }), r.a.createElement("span", null, r.a.createElement(l.a, {
                    id: "messenger.text.connecting_to_rep"
                }), "\u2026"), e.visitorNumber && r.a.createElement(r.a.Fragment, null, r.a.createElement("p", {
                    className: "phone-number"
                }, i.t("messenger.text_sub.expect_call", {
                    text: t.teamPhoneNumber
                })), r.a.createElement("button", {
                    onClick: n
                }, r.a.createElement(l.a, {
                    id: "messenger.cta.cancel"
                })))))),
                O = Object(i.a)(f, {
                    target: "e1i1qwz01",
                    label: "PendingOutgoingMeetingRequest"
                })(".phone-number,button{font-size:", v.i.size300, ";color:", v.c.secondaryText, ";}span{max-width:", v.d.size("240px"), ";display:inline-block;}");
            class C extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        validPhoneNumber: !1,
                        phoneNumber: ""
                    }, this.phoneInputRef = r.a.createRef(), this.joinViaPhone = () => {
                        this.state.validPhoneNumber && this.state.phoneNumber && this.props.joinViaPhone(this.state.phoneNumber)
                    }
                }
                render() {
                    const e = this.context;
                    return r.a.createElement("div", {
                        className: this.props.className
                    }, r.a.createElement("div", {
                        className: "web-button-wrapper"
                    }, this.props.rtcSupported || "boolean" !== typeof this.props.rtcSupported ? r.a.createElement("button", {
                        className: "web-button",
                        onClick: () => this.props.rtcSupported && this.props.joinViaWeb()
                    }, this.props.joinViaWebText) : r.a.createElement(m.a, {
                        tooltip: e.t("messenger.text.web_call_unavailable"),
                        placement: "top"
                    }, r.a.createElement("button", {
                        className: "web-button disabled",
                        "aria-disabled": !0
                    }, this.props.joinViaWebText, r.a.createElement("div", {
                        className: "sr-only"
                    }, e.t("messenger.text.web_call_unavailable"))))), !this.props.config.appexchange && r.a.createElement(r.a.Fragment, null, r.a.createElement("p", null, e.t("messenger.text.call_phone")), r.a.createElement(h.a, {
                        className: "phone-input",
                        ref: this.phoneInputRef,
                        onlyCountries: this.props.config.geoPermissions,
                        initialCountry: this.props.countryCode || this.props.config.countryCode,
                        onEnter: this.joinViaPhone,
                        value: this.state.phoneNumber,
                        onChange: ({
                            isValid: e,
                            value: t
                        }) => {
                            this.setState({
                                validPhoneNumber: e,
                                phoneNumber: t
                            })
                        }
                    }), r.a.createElement(m.a, {
                        tooltip: !1 === this.state.validPhoneNumber && e.t("messenger.text.invalid_phone"),
                        placement: "bottom-end",
                        className: Object(a.b)({
                            name: "1n443bu-ConnectionOptionsBase",
                            styles: "display:inline;;label:ConnectionOptionsBase;"
                        })
                    }, r.a.createElement("button", {
                        className: "phone-button",
                        onClick: this.joinViaPhone,
                        "aria-label": e.t("messenger.text.call_us")
                    }, r.a.createElement(p.b.StartCall, {
                        height: 16
                    }), !1 === this.state.validPhoneNumber && r.a.createElement("div", {
                        className: "sr-only"
                    }, e.t("messenger.text.invalid_phone")))), r.a.createElement("p", {
                        className: "team-phone-number"
                    }, e.t("messenger.text_sub.will_receive_call", {
                        text: this.props.config.teamPhoneNumber
                    }))), r.a.createElement("button", {
                        className: "cancel-button",
                        onClick: this.props.cancel
                    }, this.props.cancelText))
                }
                focus() {
                    var e;
                    null === (e = this.phoneInputRef.current) || void 0 === e || e.focus()
                }
            }
            C.contextType = c.a;
            const S = Object(i.a)(C, {
                target: "e1i1qwz02",
                label: "ConnectionOptions"
            })("text-align:center;p{font-size:", v.i.size300, ";color:", v.c.secondaryText, ";}.web-button,.phone-button,input{font-size:", v.i.size500, ";height:", v.d.size("40px"), ";}.web-button{width:100%;border-radius:", u.a.BUTTON_BORDER_RADIUS, ";font-weight:", v.j.semiBold, ";color:", u.a.MEETING_REQUEST_WEB_BUTTON_TEXT_COLOR, ";background:", u.a.MEETING_REQUEST_WEB_BUTTON_BACKGROUND_COLOR, ";border:1px solid ", u.a.MEETING_REQUEST_WEB_BUTTON_BORDER_COLOR, ";&:hover:not(.disabled){color:", u.a.MEETING_REQUEST_WEB_BUTTON_HOVER_TEXT_COLOR, ";background:", u.a.MEETING_REQUEST_WEB_BUTTON_HOVER_BACKGROUND_COLOR, ";border-color:", u.a.MEETING_REQUEST_WEB_BUTTON_HOVER_BORDER_COLOR, ";}&.disabled{opacity:0.5;}}.web-button-wrapper + p{font-size:", v.i.size300, ";margin:", v.d.legacyMargin("10px"), " 0;}.phone-button,.phone-input{vertical-align:middle;}.phone-button{width:", v.d.size("40px"), ";padding:0;margin-right:0;border:1px solid ", u.a.MEETING_REQUEST_PHONE_BUTTON_BORDER_COLOR, ";border-radius:", "3px", ";border-top-left-radius:0px;border-bottom-left-radius:0px;background:", u.a.MEETING_REQUEST_PHONE_BUTTON_BACKGROUND_COLOR, ";svg{fill:", u.a.MEETING_REQUEST_PHONE_BUTTON_ICON_COLOR, ";}&:hover{background-color:", u.a.MEETING_REQUEST_PHONE_BUTTON_HOVER_BACKGROUND_COLOR, ";border-color:", u.a.MEETING_REQUEST_PHONE_BUTTON_HOVER_BORDER_COLOR, ";svg{fill:", u.a.MEETING_REQUEST_PHONE_BUTTON_HOVER_ICON_COLOR, ";}}}.team-phone-number{margin:", v.d.legacyMargin("6px"), " 0 0 0;}.cancel-button{font-size:", v.i.size300, ";margin-top:", v.d.marginUnits(4), ";color:", u.a.MEETING_REQUEST_CANCEL_BUTTON_TEXT_COLOR, ";text-decoration:underline;}.phone-input{display:inline-block;height:", v.d.legacySize(v.n.inputHeight - 4 + "px"), ";width:calc(100% - ", v.d.size("40px"), ");border:1px solid ", v.c.fieldBorder, ";border-right:none;border-radius:", "3px", ";border-top-right-radius:0px;border-bottom-right-radius:0px;}")
        },
        228: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MessengerPrompt", (function() {
                return O
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(14),
                d = n(57),
                c = n(6),
                u = n(128),
                m = n(85),
                g = n(115),
                p = n(22),
                h = n(1),
                v = n(103),
                b = n(102);
            const E = "close-button",
                _ = "--ctaMarginBottom",
                f = {
                    root: Object(a.b)("width:", h.d.size("300px"), ";.os-host-overflow-y{", _, ":1rem !important;}", m.a, "{position:absolute;left:0;bottom:16px;padding:", h.d.paddingUnits(4), ";margin-left:", h.d.marginUnits(-4), ";.facepile-avatar{", p.o, ";}}a{text-decoration:underline;}body:not(.is-mobile) &{.", E, "{opacity:0;transition:opacity 0.2s ease-in;}&:hover .", E, ",.", E, ":focus-within{opacity:1;}};label:root;"),
                    inner: Object(a.b)(p.o, ";position:relative;padding:", h.d.paddingUnits(8), " ", h.d.paddingUnits(6), " ", h.d.paddingUnits(6), " !important;text-align:center;color:#333;background:#fff;border-radius:4px;;label:inner;"),
                    heading: Object(a.b)("font-size:", h.i.size800, ";line-height:", h.d.legacyLineHeight("26px"), ";;label:heading;"),
                    body: Object(a.b)("font-size:", h.d.legacyFontSize("15px"), ";line-height:", h.d.legacyLineHeight("21px"), ";margin:", h.d.legacyMargin("10px"), " 0 ", h.d.marginUnits(4), ";;label:body;"),
                    actions: Object(a.b)("display:flex;flex-direction:column;gap:", h.d.gapUnits(2), ";margin-bottom:var(", _, ",0);;label:actions;"),
                    cta: Object(a.b)("color:", c.a.MESSENGER_PROMPT_CTA_TEXT_COLOR, ";background:", c.a.MESSENGER_PROMPT_CTA_BACKGROUND_COLOR, ";border-radius:", c.a.BUTTON_BORDER_RADIUS, ";border:1px solid ", c.a.MESSENGER_PROMPT_CTA_BORDER_COLOR, ";font-size:", h.i.size500, ";padding:", h.d.legacyPadding("10px"), ";width:100%;transition:background 0.2s ease-out;font-weight:", h.j.semiBold, ";&:hover{background:", c.a.MESSENGER_PROMPT_CTA_HOVER_BACKGROUND, ";color:", c.a.MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR, ";};label:cta;"),
                    ctaChatOnly: Object(a.b)("color:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_TEXT_COLOR, ";background-color:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_BACKGROUND_COLOR, ";border-color:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_BORDER_COLOR, ";&:hover{color:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_TEXT_COLOR, ";background:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BACKGROUND_COLOR, ";border-color:", c.a.MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BORDER_COLOR, ";};label:ctaChatOnly;"),
                    messengerFooter: Object(a.b)("margin-top:", h.d.legacyMargin("6px"), ";a{text-decoration:none;};label:messengerFooter;")
                },
                O = Object(i.a)((({
                    prompt: e,
                    showBranding: t,
                    customizablePrivacyPolicyEnabled: n,
                    onDismiss: i,
                    onChatAction: o,
                    onVoiceAction: c,
                    showVoice: p,
                    avatarUrls: h = [],
                    hideClose: _ = !1,
                    className: O,
                    scrollBarsClassName: C,
                    sendMessagesDismissedClientEvent: S
                }) => {
                    const {
                        themeDataValues: y
                    } = Object(d.c)(), k = null !== p && void 0 !== p ? p : y.enableInboundVoice, T = Object(l.c)(), A = k && !s.isMobileOnly;
                    return r.a.createElement("div", {
                        className: Object(a.c)(f.root, O),
                        "data-backend-test-id": "messenger-prompt"
                    }, !_ && r.a.createElement(v.CloseButton, {
                        className: E,
                        onClick: () => {
                            null === i || void 0 === i || i(), null === S || void 0 === S || S()
                        }
                    }), r.a.createElement(u.a, {
                        className: Object(a.c)(f.inner, "prompt-like", "inner", C),
                        onClick: o,
                        "data-clickable": !0
                    }, r.a.createElement("div", {
                        className: f.heading
                    }, r.a.createElement(g.b, null, e.heading)), r.a.createElement("div", {
                        className: f.body
                    }, r.a.createElement(g.b, null, e.body)), r.a.createElement("div", {
                        className: f.actions
                    }, k && !s.isMobileOnly && r.a.createElement("button", {
                        className: f.cta,
                        "aria-label": T.t("messenger.text.call_us"),
                        onClick: e => {
                            e.stopPropagation(), null === i || void 0 === i || i(), null === c || void 0 === c || c()
                        }
                    }, e.ctaVoice), r.a.createElement("button", {
                        className: Object(a.c)(f.cta, {
                            [f.ctaChatOnly]: A
                        }),
                        "data-backend-test-id": "cta-chat-button",
                        "aria-label": e.ctaChat,
                        onClick: e => {
                            e.stopPropagation(), null === o || void 0 === o || o()
                        }
                    }, e.ctaChat), r.a.createElement(b.MessengerFooter, {
                        className: f.messengerFooter,
                        onItemClick: e => e.stopPropagation(),
                        privacyPolicyUrl: y.privacyPolicyUrl,
                        privacyPolicyText: y.privacyPolicyText,
                        privacyDisclosures: y.privacyDisclosures,
                        customizablePrivacyPolicyEnabled: n,
                        showBranding: t
                    }))), (e.showFacepile || null === e.showFacepile) && h.length > 1 && r.a.createElement(m.a, {
                        avatarUrls: h
                    }))
                }), {
                    target: "e104xfoy0",
                    label: "MessengerPrompt"
                })()
        },
        229: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MessengerPromptV3", (function() {
                return O
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(25),
                l = n(57),
                d = n(6),
                c = n(128),
                u = n(85),
                m = n(342),
                g = n(22),
                p = n(1),
                h = n(103),
                v = n(102),
                b = n(9);
            const E = "close-button",
                _ = s.isMobileOnly ? g.r : g.f,
                f = {
                    root: Object(a.b)("width:", p.d.unsafeSize(`${g.d+_.buttonInsetPx}px`), ";.os-host-overflow-y{", "--ctaMarginBottom", ":", p.d.marginUnits(4), " !important;}a{text-decoration:underline;}body:not(.is-mobile) &{.", E, "{opacity:0;transition:opacity 0.2s ease-in;}&:hover .", E, ",.", E, ":focus-within{opacity:1;}};label:root;"),
                    inner: Object(a.b)(g.o, ";position:relative;text-align:left;color:", d.a.THEME_TEXT_COLOR, ";border-radius:8px;padding:0 !important;max-width:", p.d.size(`${g.d}px`), ";;label:inner;"),
                    greeting: Object(a.b)("border-radius:8px;>:first-child{border-radius:8px 8px 0 0;}>:last-child{border-radius:0 0 8px 8px;}.white &{background:", p.c.transparent, ";color:", p.c.black, ";}.minimal &{background:", p.c.transparent, ";color:", p.c.black, ";}.duo &{background:", p.c.transparent, ";}.solid &{background:linear-gradient(334.88deg,rgba(0,0,0,0.15) 0%,rgba(0,0,0,0) 88.63%),", d.a.THEME_PRIMARY_COLOR, ";};label:greeting;"),
                    heading: Object(a.b)("font-size:", p.i.size800, ";font-weight:", p.j.semiBold, ";line-height:", p.d.unsafeLineHeight(1.3), ";text-align:left;margin-bottom:", p.d.marginUnits(4), ";margin-top:", p.d.marginUnits(4), ";.minimal &{font-size:", p.i._deprecated_size400, ";margin-top:0;margin-bottom:", p.d.marginUnits(2), ";};label:heading;"),
                    body: Object(a.b)("font-size:", p.i._deprecated_size400, ";text-align:left;margin-block-start:0;margin-bottom:0;margin-top:", p.d.marginUnits(3), ";.minimal &{margin:0;};label:body;"),
                    bodyDuoNoTitle: Object(a.b)("font-size:", p.i._deprecated_size400, ";text-align:left;margin-bottom:0;;label:bodyDuoNoTitle;"),
                    bodyMinimalNoTitle: Object(a.b)("font-size:", p.i._deprecated_size400, ";text-align:left;margin-bottom:0;margin-top:0;;label:bodyMinimalNoTitle;"),
                    overPromptSection: Object(a.b)({
                        name: "1o9eh5f-overPromptSection",
                        styles: "display:flex;;label:overPromptSection;"
                    }),
                    underPromptSection: Object(a.b)("display:inline-flex;flex-direction:column;align-items:flex-end;padding:0 !important;margin-bottom:", p.d.marginUnits(2), ";;label:underPromptSection;"),
                    underPromptButton: Object(a.b)("font-size:", p.i._deprecated_size400, ";color:", d.a.MESSENGER_PROMPT_CTA_TEXT_COLOR, ";background:", d.a.MESSENGER_PROMPT_CTA_BACKGROUND_COLOR, ";border:1px solid ", d.a.MESSENGER_PROMPT_CTA_BORDER_COLOR, ";border-radius:", d.a.BUTTON_BORDER_RADIUS, ";padding-top:", p.d.paddingUnits(2), ";padding-right:", p.d.paddingUnits(3), ";padding-bottom:", p.d.paddingUnits(2), ";padding-left:", p.d.paddingUnits(3), ";margin-bottom:", p.d.marginUnits(2), ";transition:background 0.2s ease-in-out,color 0.2s ease-in-out;&:hover{background:", d.a.MESSENGER_PROMPT_CTA_HOVER_BACKGROUND, ";color:", d.a.MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR, ";};label:underPromptButton;"),
                    closeButton: Object(a.b)({
                        name: "1ew2u15-closeButton",
                        styles: "margin-left:auto;;label:closeButton;"
                    }),
                    headerSection: Object(a.b)("padding-top:", p.d.paddingUnits(3), ";padding-right:", p.d.paddingUnits(6), ";padding-bottom:", p.d.legacyPadding("1.6px"), ";padding-left:", p.d.paddingUnits(6), ";.white &{background:", p.c.white, ";}.duo &{background:", d.a.THEME_PRIMARY_COLOR, ";padding-bottom:", p.d.paddingUnits(6), ";}.duo.", b.g.Image, " &{border-radius:0;}.minimal &{background:", p.c.white, ";padding:", p.d.paddingUnits(4), ";border-radius:8px;};label:headerSection;"),
                    mainSection: Object(a.b)("margin-top:", p.d.unsafeMargin("-1px"), ";padding-top:", p.d.paddingUnits(3), ";padding-right:", p.d.paddingUnits(6), ";padding-bottom:", p.d.paddingUnits(4), ";padding-left:", p.d.paddingUnits(6), ";.white &{background:", p.c.white, ";}.duo &{background:", p.c.white, ";padding-top:", p.d.paddingUnits(4), ";}:last-child{padding-bottom:", p.d.paddingUnits(6), ";}:not(:last-child){padding-bottom:", p.d.paddingUnits(3), ";};label:mainSection;"),
                    footerCommon: Object(a.b)("a{text-decoration:none;}.solid &{color:", p.c.white, ";}.white &{background:", p.c.white, ";}.duo &{background:", p.c.white, ";};label:footerCommon;"),
                    footerSection: Object(a.b)("margin-top:", p.d.unsafeMargin("-1px"), ";padding-inline:", p.d.paddingUnits(6), ";padding-bottom:", p.d.paddingUnits(4), ";;label:footerSection;"),
                    footerSectionMinimal: Object(a.b)("padding-top:", p.d.paddingUnits(3), ";;label:footerSectionMinimal;"),
                    dotSeparatorClassName: Object(a.b)(".solid &{color:", p.c.white, ";};label:dotSeparatorClassName;"),
                    logoImg: Object(a.b)("height:", p.d.size("32px"), ";width:", p.d.size("32px"), ";border-radius:100%;margin-top:", p.d.marginUnits(3), ";.minimal &{height:", p.d.size("24px"), ";width:", p.d.size("24px"), ";margin-top:0;margin-bottom:", p.d.marginUnits(2), ";};label:logoImg;"),
                    headerImageContainerFull: Object(a.b)("img{width:100%;min-height:", p.d.size("180px"), ";border-radius:8px 8px 0 0;};label:headerImageContainerFull;"),
                    headerImageContainerFramed: Object(a.b)("padding-top:", p.d.paddingUnits(4), ";padding-right:", p.d.paddingUnits(4), ";padding-bottom:0;padding-left:", p.d.paddingUnits(4), ";margin-bottom:", p.d.legacyMargin("-1px"), ";border-radius:8px 8px 0 0;.white &{background-color:", p.c.white, ";}img{width:100%;min-height:", p.d.unsafeSize("162px"), ";border-radius:3px;};label:headerImageContainerFramed;"),
                    placeholder: Object(a.b)("background-color:", p.c.lightBackground, ";opacity:0.5;;label:placeholder;"),
                    facepile: Object(a.b)("margin-top:", p.d.marginUnits(3), ";.minimal &{margin-top:0;margin-bottom:", p.d.marginUnits(2), ";};label:facepile;"),
                    mainButton: Object(a.b)("align-self:auto;text-align:center;border-radius:", d.a.BUTTON_BORDER_RADIUS, ";padding-top:", p.d.paddingUnits(2), ";padding-right:", p.d.paddingUnits(4), ";padding-bottom:", p.d.paddingUnits(2), ";padding-left:", p.d.paddingUnits(4), ";font-size:", p.i._deprecated_size400, ";width:100%;margin-top:", p.d.marginUnits(2), ";.duo &,.white &{color:", d.a.MESSENGER_PROMPT_CTA_TEXT_COLOR, ";background:", d.a.MESSENGER_PROMPT_CTA_BACKGROUND_COLOR, ";border:1px solid ", d.a.MESSENGER_PROMPT_CTA_BORDER_COLOR, ";transition:all 0.2s ease-in-out;&:hover{background:", d.a.MESSENGER_PROMPT_CTA_HOVER_BACKGROUND, ";color:", d.a.MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR, ";}}.solid &{color:", d.a.MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR, ";background:", d.a.MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR, ";border:1px solid ", d.a.MESSENGER_PROMPT_CTA_SOLID_ONLY_BORDER_COLOR, ";transition:all 0.2s ease-in-out;&:hover{background:", d.a.MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_BACKGROUND_COLOR, ";color:", d.a.MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_TEXT_COLOR, ";}};label:mainButton;")
                },
                O = Object(i.a)((({
                    prompt: e,
                    onDismiss: t,
                    hideClose: n = !1,
                    customizablePrivacyPolicyEnabled: i,
                    avatarUrls: o,
                    anyUserAvailable: d,
                    className: g,
                    scrollBarsClassName: p,
                    onChatAction: _,
                    sendMessage: O,
                    sendMessagesDismissedClientEvent: C
                }) => {
                    const {
                        themeDataValues: S,
                        themeStyles: y
                    } = Object(l.c)();
                    let k = e.style,
                        {
                            showOptionsAfterMessengerIsOpened: T
                        } = e;
                    s.isMobileOnly && "minimal" !== k && e.showMinimalToMobileVisitors && (k = "minimal", T = !0);
                    const A = "minimal" === k,
                        N = A && !e.heading,
                        R = "duo" === k && !e.heading,
                        D = e.headerStyle === b.g.Logo,
                        I = e.headerStyle === b.g.Image,
                        x = e.headerStyle === b.g.Faces,
                        M = e.useThemeLogo && y.companyLogoImageUrl,
                        B = !e.useThemeLogo && e.logoImageUrl,
                        F = D && (M || B),
                        w = !A && I,
                        L = e.headerImageSize === b.f.Full ? f.headerImageContainerFull : f.headerImageContainerFramed,
                        P = () => r.a.createElement(u.a, {
                            anyUserAvailable: d,
                            className: f.facepile,
                            avatarUrls: o,
                            avatarHeight: A ? 24 : 40,
                            transparentBorder: !0
                        });
                    return r.a.createElement("div", {
                        className: Object(a.c)(f.root, g, k, e.headerStyle),
                        "data-backend-test-id": "messenger-prompt"
                    }, r.a.createElement("div", {
                        className: f.overPromptSection
                    }, A && F && r.a.createElement("img", {
                        className: f.logoImg,
                        src: e.useThemeLogo ? y.companyLogoImageUrl : e.logoImageUrl,
                        alt: ""
                    }), A && x && r.a.createElement(P, null), !n && r.a.createElement(h.CloseButton, {
                        "aria-label": "Close messenger prompt",
                        className: Object(a.c)(E, f.closeButton),
                        onClick: () => {
                            null === t || void 0 === t || t(), null === C || void 0 === C || C()
                        }
                    })), r.a.createElement(c.a, {
                        className: Object(a.c)(f.inner, "prompt-like", "inner", p, k),
                        "data-clickable": !0,
                        onClick: _,
                        "data-testid": "greeting"
                    }, r.a.createElement("div", {
                        className: f.greeting
                    }, w && r.a.createElement("div", {
                        className: L
                    }, r.a.createElement("img", {
                        className: Object(a.c)({
                            [f.placeholder]: !e.headerImageUrl
                        }),
                        src: e.headerImageUrl,
                        alt: ""
                    })), r.a.createElement("div", {
                        className: f.headerSection
                    }, !A && F && r.a.createElement("img", {
                        className: f.logoImg,
                        src: e.useThemeLogo ? y.companyLogoImageUrl : e.logoImageUrl,
                        alt: ""
                    }), !A && x && r.a.createElement(P, null), e.heading && r.a.createElement("h2", {
                        className: f.heading
                    }, e.heading), r.a.createElement("p", {
                        className: Object(a.c)({
                            [f.bodyDuoNoTitle]: R
                        }, {
                            [f.bodyMinimalNoTitle]: N
                        }, {
                            [f.body]: !(R || N)
                        })
                    }, r.a.createElement(m.a, {
                        text: e.body
                    })), A && r.a.createElement(v.MessengerFooter, {
                        className: Object(a.c)(f.footerCommon, f.footerSectionMinimal),
                        dotSeparatorClassName: f.dotSeparatorClassName,
                        privacyPolicyUrl: S.privacyPolicyUrl,
                        privacyPolicyText: S.privacyPolicyText,
                        privacyDisclosures: S.privacyDisclosures,
                        customizablePrivacyPolicyEnabled: i,
                        onItemClick: e => e.stopPropagation(),
                        showBranding: !1
                    })), !A && r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                        className: f.mainSection
                    }, e.fieldValues.map(((t, n) => r.a.createElement("button", {
                        className: f.mainButton,
                        key: t.value,
                        "data-backend-test-id": "messenger-prompt-button-option",
                        onClick: () => {
                            O({
                                type: "field_entry",
                                botStep: e.botStep,
                                executionStep: e.executionStep,
                                text: t.label,
                                value: t.value
                            })
                        }
                    }, t.label)))), r.a.createElement(v.MessengerFooter, {
                        className: Object(a.c)(f.footerCommon, f.footerSection),
                        dotSeparatorClassName: f.dotSeparatorClassName,
                        privacyPolicyUrl: S.privacyPolicyUrl,
                        privacyPolicyText: S.privacyPolicyText,
                        privacyDisclosures: S.privacyDisclosures,
                        customizablePrivacyPolicyEnabled: i,
                        onItemClick: e => e.stopPropagation(),
                        showBranding: !1
                    })))), A && !T && r.a.createElement("div", {
                        className: Object(a.c)("inner", f.underPromptSection)
                    }, e.fieldValues.map(((t, n) => r.a.createElement("button", {
                        className: f.underPromptButton,
                        key: t.value,
                        "data-backend-test-id": "messenger-prompt-minimal-button-option",
                        onClick: () => {
                            O({
                                type: "field_entry",
                                botStep: e.botStep,
                                executionStep: e.executionStep,
                                text: t.label,
                                value: t.value
                            })
                        }
                    }, t.label)))))
                }), {
                    target: "e4sh8en0",
                    label: "MessengerPromptV3"
                })()
        },
        23: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(1);
            const i = {
                size100: a.n.fontSize100,
                size300: a.n.fontSize300,
                size500: a.n.fontSize500,
                size600: a.n.fontSize600,
                size800: a.n.fontSize800
            };
            const o = {
                identity: n(336).a,
                marginUnits: a.d.marginUnits,
                paddingUnits: a.d.paddingUnits,
                gapUnits: a.d.gapUnits,
                width: e => "number" === typeof e ? a.d.size(`${e}px`) : e,
                height: e => "number" === typeof e ? a.d.size(`${e}px`) : e,
                pxValue: e => "number" === typeof e ? `${e}px` : e,
                themeColor: e => {
                    var t;
                    return null !== (t = a.c[e]) && void 0 !== t ? t : e
                },
                fontColor: e => {
                    var t;
                    return null !== (t = a.h[e]) && void 0 !== t ? t : e
                },
                fontSize: e => `${a.d.legacyFontSize(`${i[e]}px`)}`,
                fontWeight: e => a.j[e]
            }
        },
        230: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = (n(621), n(1009)),
                s = n(179),
                l = n(1010),
                d = n(340),
                c = n(1005),
                u = n(1006),
                m = n(1007),
                g = n(1008),
                p = n(334),
                h = n(966),
                v = n(339),
                b = n.n(v),
                E = n(1004),
                _ = n(550),
                f = n(35),
                O = n(95),
                C = n(14),
                S = n(1),
                y = n(33);

            function k() {
                return k = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, k.apply(this, arguments)
            }
            var T = i.createElement("g", {
                    clipPath: "url(#gray-down-caret_svg__clip0_864_29121)"
                }, i.createElement("path", {
                    d: "M.5 1.619L1.8.384l3.7 3.529L9.2.383l1.3 1.236-5 4.765-5-4.765z"
                })),
                A = i.createElement("defs", null, i.createElement("clipPath", {
                    id: "gray-down-caret_svg__clip0_864_29121"
                }, i.createElement("path", {
                    fill: "#fff",
                    transform: "translate(.5 .384)",
                    d: "M0 0h10v6H0z"
                })));

            function N(e) {
                return i.createElement("svg", k({
                    width: 11,
                    height: 7,
                    viewBox: "0 0 11 7",
                    fill: "#8A9394"
                }, e), T, A)
            }
            n.p;
            const R = {
                weekViewHeader: Object(a.b)("background:", S.c.white, ";border-style:none;color:", S.c.blackPearl, ";font-weight:", S.j.medium, ";position:relative;font-size:", S.i.size300, ";top:1rem;;label:weekViewHeader;"),
                imgToRightOfHeader: Object(a.b)("margin-left:", S.d.marginUnits(2), ";;label:imgToRightOfHeader;"),
                viewOnly: Object(a.b)({
                    name: "1k4ylr9-viewOnly",
                    styles: "pointer-events:none;;label:viewOnly;"
                }),
                weekViewHeaderThemesOverride: Object(a.b)("display:flex;align-items:center;font-weight:", S.j.semiBold, ";font-size:", S.i.size500, ";;label:weekViewHeaderThemesOverride;")
            };
            var D = ({
                    firstDayInWeek: e,
                    lastDayInWeek: t,
                    onViewHeaderClick: n,
                    makeButtonsViewOnly: r,
                    meetingThemesEnabled: s = !1
                }) => {
                    const l = Object(i.useContext)(C.a),
                        d = () => Object(E.a)(e, t) ? Object(h.a)(t, l.t("messenger.dates.year_month_format"), {
                            locale: y.a[l.locale]
                        }) : Object(_.a)(e, t) ? `${Object(h.a)(e,"MMMM",{locale:y.a[l.locale]})} - ${Object(h.a)(t,l.t("messenger.dates.year_month_format"),{locale:y.a[l.locale]})}` : `${Object(h.a)(e,l.t("messenger.dates.year_month_format"),{locale:y.a[l.locale]})} - ${Object(h.a)(t,l.t("messenger.dates.year_month_format"),{locale:y.a[l.locale]})}`;
                    return s ? o.a.createElement("button", {
                        className: Object(a.c)({
                            [R.viewOnly]: r
                        }),
                        onClick: r ? void 0 : n
                    }, o.a.createElement(f.a, {
                        justify: "center",
                        align: "center"
                    }, o.a.createElement(O.a, {
                        level: 2,
                        preset: "headingSmall"
                    }, d()), o.a.createElement(N, {
                        className: R.imgToRightOfHeader
                    }))) : o.a.createElement("button", {
                        className: Object(a.c)(R.weekViewHeader, {
                            [R.viewOnly]: r
                        }),
                        onClick: r ? void 0 : n
                    }, d(), " ", o.a.createElement(N, {
                        className: R.imgToRightOfHeader
                    }))
                },
                I = n(6);
            const x = ({
                    size: e
                }) => o.a.createElement("svg", {
                    width: e,
                    height: e,
                    viewBox: "0 0 17 17",
                    xmlns: "http://www.w3.org/2000/svg"
                }, o.a.createElement("g", {
                    clipPath: "url(#clip0_1_10)"
                }, o.a.createElement("path", {
                    className: "arrow-outline",
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M14.8838 8.19186C14.8838 11.8877 11.8877 14.8837 8.19192 14.8837C4.49611 14.8837 1.50006 11.8877 1.50006 8.19186C1.50006 4.49604 4.49611 1.5 8.19192 1.5C11.8877 1.5 14.8838 4.49604 14.8838 8.19186ZM8.19192 16.3837C12.7162 16.3837 16.3838 12.7161 16.3838 8.19186C16.3838 3.66762 12.7162 0 8.19192 0C3.66768 0 6.10352e-05 3.66762 6.10352e-05 8.19186C6.10352e-05 12.7161 3.66768 16.3837 8.19192 16.3837ZM6.9174 10.9548C7.2103 11.2476 7.68517 11.2476 7.97806 10.9548C8.27096 10.6619 8.27096 10.187 7.97806 9.89409L7.02583 8.94186H11.1687C11.5829 8.94186 11.9187 8.60607 11.9187 8.19186C11.9187 7.77764 11.5829 7.44186 11.1687 7.44186H7.02583L7.97806 6.48963C8.27096 6.19674 8.27096 5.72186 7.97806 5.42897C7.68517 5.13608 7.2103 5.13608 6.9174 5.42897L4.68484 7.66153C4.39195 7.95442 4.39195 8.42929 4.68484 8.72219L6.9174 10.9548Z"
                }), o.a.createElement("path", {
                    className: "button-circle",
                    d: "M8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16Z",
                    fill: "transparent",
                    fillOpacity: "0.1"
                })), o.a.createElement("defs", null, o.a.createElement("clipPath", {
                    id: "clip0_1_10"
                }, o.a.createElement("rect", {
                    width: "17",
                    height: "17",
                    fill: "white"
                })))),
                M = {
                    buttonStyle: Object(a.b)(".arrow-outline{fill:", I.a.MEETING_BOOKER_COLOR, ";}&:hover{.button-circle{fill:", I.a.MEETING_BOOKER_COLOR, ";}};label:buttonStyle;")
                };
            var B = ({
                onClick: e,
                "aria-label": t,
                makeButtonsViewOnly: n,
                Element: a = "button"
            }) => o.a.createElement(a, {
                className: M.buttonStyle,
                onClick: n ? void 0 : e,
                "aria-label": t
            }, o.a.createElement(x, {
                size: 20
            }));
            const F = Object(a.b)("display:flex;justify-content:space-between;margin-bottom:", S.d.marginUnits(4), ";height:", S.d.size("20px"), ";;label:navigationContainerStyle;"),
                w = Object(a.b)("display:flex;padding-block:", S.d.paddingUnits(6), ";font-size:", S.i.size500, ";font-weight:", S.j.semiBold, ";;label:navigationContainerStyleWithThemes;"),
                L = Object(a.b)("padding-top:0;padding-bottom:", S.d.paddingUnits(3), ";;label:navigationContainerStyleWithThemesMobile;"),
                P = {
                    rightButtonStyle: Object(a.b)("margin-left:auto;transform:rotate(180deg);.arrow-outline{fill:", I.a.MEETING_BOOKER_COLOR, ";}&:hover{.button-circle{fill:", I.a.MEETING_BOOKER_COLOR, ";}};label:rightButtonStyle;"),
                    viewOnly: Object(a.b)({
                        name: "1k4ylr9-viewOnly",
                        styles: "pointer-events:none;;label:viewOnly;"
                    })
                };
            var U = ({
                    onClick: e,
                    "aria-label": t,
                    Element: n = "button",
                    makeButtonsViewOnly: i
                }) => o.a.createElement(n, {
                    onClick: e,
                    "aria-label": t,
                    className: Object(a.c)(P.rightButtonStyle, {
                        [P.viewOnly]: i
                    })
                }, o.a.createElement(x, {
                    size: 20
                })),
                j = n(46);
            const z = {
                    boldText: Object(a.b)("font-weight:", S.j.semiBold, ";;label:boldText;"),
                    selectedAvailableDay: Object(a.b)("border:1px solid ", I.a.MEETING_BOOKER_COLOR, ";color:", I.a.MEETING_BOOKER_COLOR, ";&:hover{background:", I.a.MEETING_BOOKER_COLOR, ";color:", I.a.MEETING_BOOKER_TEXT_COLOR, ";};label:selectedAvailableDay;"),
                    unselectedAvailableDay: Object(a.b)("border:1px solid transparent;color:", S.c.primaryText, ";&:hover{border:1px solid ", I.a.MEETING_BOOKER_COLOR, ";background:", I.a.MEETING_BOOKER_COLOR, ";color:", I.a.MEETING_BOOKER_TEXT_COLOR, ";};label:unselectedAvailableDay;"),
                    unavailableDay: Object(a.b)({
                        name: "1gc8egk-unavailableDay",
                        styles: "box-shadow:none;border-style:none;cursor:not-allowed;;label:unavailableDay;"
                    }),
                    availableDayContainer: Object(a.b)("display:flex;flex-direction:row;justify-content:space-between;margin-bottom:", S.d.marginUnits(4), ";position:relative;;label:availableDayContainer;"),
                    availableButton: Object(a.b)("display:flex;flex-direction:column;align-items:center;justify-content:center;height:", S.d.size("80px"), ";width:", S.d.size("48px"), ";background:", S.c.white, ";border-radius:4px;flex:1 1 0px;border:1px solid transparent;:not(:first-child){margin-left:var(--marginLeft);}:not(:last-child){margin-right:var(--marginRight);}font-weight:", S.j.normal, ";font-size:var(--fontSize);box-shadow:0px 0px 3px rgba(55,71,122,0.25);span:first-of-type{padding-bottom:", S.d.paddingUnits(1), ";};label:availableButton;"),
                    viewOnly: Object(a.b)({
                        name: "1k4ylr9-viewOnly",
                        styles: "pointer-events:none;;label:viewOnly;"
                    })
                },
                V = ({
                    day: e,
                    dayType: t,
                    onSelectDate: n,
                    isSmallView: r,
                    makeButtonsViewOnly: s
                }) => {
                    const l = {
                            fontSize: `${S.n.fontSize500}px`,
                            marginLeft: "10px",
                            marginRight: "10px"
                        },
                        d = {
                            fontSize: `${S.n.fontSize300}px`,
                            marginLeft: "2px",
                            marginRight: "2px"
                        },
                        c = Object(i.useContext)(C.a);
                    return o.a.createElement("button", {
                        className: Object(a.c)(z.availableButton, {
                            [z.selectedAvailableDay]: "selected" === t,
                            [z.unselectedAvailableDay]: "available" === t,
                            [z.unavailableDay]: "unavailable" === t,
                            [z.viewOnly]: s
                        }),
                        style: Object(j.a)(r ? d : l),
                        disabled: "unavailable" === t,
                        onClick: s ? void 0 : () => n(e)
                    }, o.a.createElement("span", null, Object(h.a)(e, "EEE", {
                        locale: y.a[c.locale]
                    }), " "), o.a.createElement("span", {
                        className: z.boldText
                    }, Object(h.a)(e, "d", {
                        locale: y.a[c.locale]
                    })))
                },
                G = e => {
                    const t = Object(c.a)(e),
                        n = Object(u.a)(e),
                        a = Object(m.a)({
                            start: t,
                            end: n
                        });
                    return {
                        firstDay: t,
                        lastDay: n,
                        weekDays: a,
                        isWithinWeek: e => Object(g.a)(e, {
                            start: t,
                            end: n
                        }),
                        getPreviousWeek: () => G(Object(p.a)(e, -7)),
                        getNextWeek: () => G(Object(p.a)(e, 7))
                    }
                };
            var $ = ({
                    initialDay: e,
                    availableDays: t,
                    onWeekChange: n,
                    onViewHeaderClick: a,
                    isSmallView: r,
                    dateToType: s,
                    onSelectDate: l,
                    makeButtonsViewOnly: d
                }) => {
                    const c = b()(t.map(G), (e => `${e.firstDay.toISOString()}-${e.lastDay.toISOString()}`)),
                        u = Object(i.useContext)(C.a),
                        m = Object(i.useMemo)((() => e || t[0] || new Date), [e, t]),
                        g = Object(i.useMemo)((() => c.findIndex((e => e.isWithinWeek(m)))), [c, m]),
                        p = c[g] || G(m),
                        h = g > 0,
                        v = g < c.length - 1;
                    return o.a.createElement(o.a.Fragment, null, o.a.createElement(D, {
                        firstDayInWeek: p.firstDay,
                        lastDayInWeek: p.lastDay,
                        onViewHeaderClick: a,
                        makeButtonsViewOnly: d
                    }), o.a.createElement("div", {
                        className: F
                    }, h && o.a.createElement(B, {
                        onClick: d ? void 0 : () => {
                            const e = Math.max(g - 1, 0);
                            d || n(c[e])
                        },
                        "aria-label": u.t("messenger.meeting_booker.previous_week")
                    }), v && o.a.createElement(U, {
                        onClick: d ? void 0 : () => {
                            const e = Math.min(g + 1, c.length - 1);
                            n(c[e])
                        },
                        "aria-label": u.t("messenger.meeting_booker.next_week"),
                        makeButtonsViewOnly: d
                    })), o.a.createElement("div", {
                        className: z.availableDayContainer
                    }, p.weekDays.map((e => {
                        const t = s(e);
                        return o.a.createElement(V, {
                            day: e,
                            dayType: t,
                            onSelectDate: l,
                            isSmallView: r,
                            key: e.toISOString(),
                            makeButtonsViewOnly: d
                        })
                    }))))
                },
                H = n(5),
                W = n(38),
                K = n(100);
            const q = {
                    rightButton: Object(a.b)({
                        name: "xmrueh-rightButton",
                        styles: "margin-left:auto;;label:rightButton;"
                    }),
                    availableTimeSlotContainer: Object(a.b)("display:grid;grid-template-columns:repeat(var(--numColumns),1fr);grid-auto-rows:", "32px", ";align-content:flex-start;gap:", S.d.gapUnits(3), ";height:", S.d.size("180px"), ";&.small-view{height:", "135px", ";}&.dynamically-resize-slots,&.background{height:auto;};label:availableTimeSlotContainer;"),
                    boldNotification: Object(a.b)("font-weight:", S.j.semiBold, ";font-size:", S.i.size500, ";;label:boldNotification;"),
                    noAvailabilitiesContainer: Object(a.b)("padding-bottom:", S.d.paddingUnits(12), ";padding-top:", S.d.paddingUnits(12), ";;label:noAvailabilitiesContainer;")
                },
                Y = Object(H.a)("button", {
                    target: "e1du5uho0",
                    label: "AvailableTimeSlotButton"
                })("background:", S.c.white, ";border-radius:4px;border-style:none;display:inline;font-weight:", S.j.semiBold, ";font-size:", S.i.size300, ";line-height:", S.d.legacyLineHeight("16px"), ";color:", S.c.veryDarkGray, ";box-shadow:0px 0px 3px rgba(55,71,122,0.25);&:hover,&:focus-visible,&.confirm{background-color:", I.a.MEETING_BOOKER_COLOR, ";color:", I.a.MEETING_BOOKER_TEXT_COLOR, ";}.confirm-content{display:none;}&:hover .confirm-content,&:focus-visible .confirm-content{display:inline;}", (({
                    makeButtonsViewOnly: e
                }) => e && "pointer-events: none;"));
            var X = ({
                    availableTimeSlots: e,
                    confirmBookingForTimeSlot: t,
                    isSmallView: n,
                    startingTimeSlotIndex: r,
                    setStartingTimeSlotIndex: s,
                    noAvailableTimeSlots: l,
                    isMobile: d,
                    isBackground: c,
                    makeButtonsViewOnly: u,
                    source: m
                }) => {
                    const g = {
                            default: {
                                numSlots: 12,
                                numColumns: 3
                            },
                            smallView: {
                                numSlots: 6,
                                numColumns: 2
                            }
                        },
                        [p, v] = Object(i.useState)(null),
                        b = n ? g.smallView : g.default,
                        E = Object(i.useContext)(C.a),
                        _ = e.slice(r, r + b.numSlots),
                        f = b.numSlots - _.length,
                        O = r + b.numSlots < e.length,
                        S = r >= b.numSlots;
                    return l ? o.a.createElement("div", {
                        className: q.noAvailabilitiesContainer
                    }, o.a.createElement(K.a, null), o.a.createElement("p", {
                        className: q.boldNotification
                    }, E.t("messenger.meeting_booker.no_available_slots"))) : o.a.createElement(o.a.Fragment, null, o.a.createElement("div", {
                        className: F
                    }, S && o.a.createElement(B, {
                        onClick: () => {
                            s(Math.max(r - b.numSlots, 0))
                        },
                        "aria-label": "Previous time slots"
                    }), O && o.a.createElement(U, {
                        onClick: () => {
                            s(Math.min(r + b.numSlots, e.length))
                        },
                        "aria-label": "Next time slots"
                    })), o.a.createElement("div", {
                        className: Object(a.c)(q.availableTimeSlotContainer, {
                            "small-view": !c && !!n,
                            "dynamically-resize-slots": !c && !!n && "conversation" === m,
                            background: !!c
                        }),
                        style: Object(j.a)({
                            numColumns: b.numColumns
                        })
                    }, _.map((e => {
                        const n = (a = e.startsAt, Object(h.a)(Object(W.b)(a), "h:mm aaa"));
                        var a;
                        return o.a.createElement(Y, {
                            className: (null === p || void 0 === p ? void 0 : p.startsAt) === e.startsAt && (null === p || void 0 === p ? void 0 : p.endsAt) === e.endsAt ? "confirm" : void 0,
                            onClick: () => {
                                d ? (null === p || void 0 === p ? void 0 : p.startsAt) === e.startsAt && (null === p || void 0 === p ? void 0 : p.endsAt) === e.endsAt ? t(e) : v(e) : t(e)
                            },
                            key: `${e.startsAt}${e.endsAt}`,
                            makeButtonsViewOnly: u
                        }, o.a.createElement("span", {
                            className: "confirm-content"
                        }, E.t("messenger.meeting_booker.confirm")), " ", n)
                    })), Array(f).map(((e, t) => o.a.createElement("div", {
                        key: t
                    })))))
                },
                Q = n(21),
                Z = n(156),
                J = n(157);
            const ee = {
                    selected: Object(a.b)("border-color:", I.a.MEETING_BOOKER_COLOR, ";border-width:1.5px;color:", Object(Q.f)(S.c.veryDarkGray, .6), ";;label:selected;"),
                    unselected: Object(a.b)("color:", Object(Q.f)(S.c.veryDarkGray, .6), ";&:hover{border-color:", I.a.MEETING_BOOKER_COLOR, ";};label:unselected;"),
                    unavailable: Object(a.b)("color:", Object(Q.f)(S.c.veryDarkGray, .2), ";cursor:not-allowed;;label:unavailable;"),
                    availableDayContainer: Object(a.b)("display:flex;flex-direction:row;justify-content:space-between;margin-bottom:", S.d.marginUnits(4), ";position:relative;color:", Object(Q.f)(S.c.veryDarkGray, .6), ";align-items:center;;label:availableDayContainer;"),
                    availableButton: Object(a.b)("display:flex;flex-direction:column;align-items:center;justify-content:center;height:", S.d.size("80px"), ";width:", S.d.size("48px"), ";background:", S.c.white, ";border-radius:", S.n.inputBorderRadius, "px;flex:1 1 0px;border:1px solid transparent;:not(:first-child){margin-left:var(--marginLeft);}:not(:last-child){margin-right:var(--marginRight);}font-weight:", S.j.medium, ";font-size:var(--fontSize);box-shadow:0px 0px 3px rgba(55,71,122,0.25);span:first-of-type{padding-bottom:", S.d.paddingUnits(1), ";};label:availableButton;"),
                    calendarViewHeader: Object(a.b)("margin-bottom:", S.d.marginUnits(6), ";text-align:left;;label:calendarViewHeader;"),
                    viewOnly: Object(a.b)({
                        name: "1k4ylr9-viewOnly",
                        styles: "pointer-events:none;;label:viewOnly;"
                    })
                },
                te = ({
                    day: e,
                    dayType: t,
                    onSelectDate: n,
                    isSmallView: r,
                    makeButtonsViewOnly: s
                }) => {
                    const l = {
                            fontSize: `${S.n.fontSize100}px`,
                            marginLeft: "6px",
                            marginRight: "6px"
                        },
                        d = {
                            fontSize: `${S.n.fontSize300}px`,
                            marginLeft: "2px",
                            marginRight: "2px"
                        },
                        c = Object(a.b)("font-weight:", S.j.semiBold, ";font-size:", S.i.size800, ";color:", "unavailable" === t ? Object(Q.f)(S.c.veryDarkGray, .2) : S.c.veryDarkGray, ";;label:weekDayButtonNumberClassOverrides;"),
                        u = Object(i.useContext)(C.a);
                    return o.a.createElement("button", {
                        className: Object(a.c)(ee.availableButton, {
                            [ee.selected]: "selected" === t,
                            [ee.unselected]: "available" === t,
                            [ee.unavailable]: "unavailable" === t,
                            [ee.viewOnly]: s
                        }),
                        style: Object(j.a)(r ? d : l),
                        disabled: "unavailable" === t,
                        onClick: s ? void 0 : () => n(e)
                    }, o.a.createElement("span", null, Object(h.a)(e, "EEE", {
                        locale: y.a[u.locale]
                    }).toUpperCase(), " "), o.a.createElement("span", {
                        className: c
                    }, Object(h.a)(e, "d", {
                        locale: y.a[u.locale]
                    })))
                },
                ne = e => {
                    const t = Object(c.a)(e),
                        n = Object(u.a)(e),
                        a = Object(m.a)({
                            start: t,
                            end: n
                        });
                    return {
                        firstDay: t,
                        lastDay: n,
                        weekDays: a,
                        isWithinWeek: e => Object(g.a)(e, {
                            start: t,
                            end: n
                        }),
                        getPreviousWeek: () => ne(Object(p.a)(e, -7)),
                        getNextWeek: () => ne(Object(p.a)(e, 7))
                    }
                };
            var ae = ({
                    initialDay: e,
                    availableDays: t,
                    onWeekChange: n,
                    onViewHeaderClick: a,
                    isSmallView: r,
                    dateToType: s,
                    onSelectDate: l,
                    makeButtonsViewOnly: d,
                    meetingThemesEnabled: c
                }) => {
                    const u = b()(t.map(ne), (e => `${e.firstDay.toISOString()}-${e.lastDay.toISOString()}`)),
                        m = Object(i.useContext)(C.a),
                        g = Object(i.useMemo)((() => e || t[0] || new Date), [e, t]),
                        p = Object(i.useMemo)((() => u.findIndex((e => e.isWithinWeek(g)))), [u, g]),
                        h = u[p] || ne(g),
                        v = p > 0,
                        E = p < u.length - 1;
                    return o.a.createElement(o.a.Fragment, null, o.a.createElement("div", {
                        className: ee.calendarViewHeader
                    }, o.a.createElement(D, {
                        firstDayInWeek: h.firstDay,
                        lastDayInWeek: h.lastDay,
                        onViewHeaderClick: a,
                        makeButtonsViewOnly: d,
                        meetingThemesEnabled: c
                    })), o.a.createElement("div", {
                        className: ee.availableDayContainer
                    }, o.a.createElement("button", {
                        onClick: v && !d ? () => {
                            const e = Math.max(p - 1, 0);
                            d || n(u[e])
                        } : void 0,
                        "aria-label": m.t("messenger.meeting_booker.previous_week"),
                        style: {
                            marginRight: S.d.marginUnits(2)
                        }
                    }, o.a.createElement(Z.a, {
                        color: v && !d ? S.c.iconGray : S.c.lightGray,
                        size: le,
                        cursor: v && !d ? "pointer" : "auto"
                    })), o.a.createElement(f.a, {
                        wrap: "wrap",
                        gapUnits: 3,
                        justify: "center"
                    }, h.weekDays.map((e => {
                        const t = s(e);
                        return o.a.createElement(f.b, {
                            key: e.toISOString()
                        }, o.a.createElement(te, {
                            day: e,
                            dayType: t,
                            onSelectDate: l,
                            isSmallView: r,
                            makeButtonsViewOnly: d
                        }))
                    }))), o.a.createElement("button", {
                        onClick: E && !d ? () => {
                            const e = Math.min(p + 1, u.length - 1);
                            n(u[e])
                        } : void 0,
                        "aria-label": m.t("messenger.meeting_booker.next_week"),
                        style: {
                            marginLeft: S.d.marginUnits(2)
                        }
                    }, o.a.createElement(J.a, {
                        color: E && !d ? S.c.iconGray : S.c.lightGray,
                        size: le,
                        cursor: E && !d ? "pointer" : "auto"
                    }))))
                },
                ie = n(132);
            const oe = {
                    rightButton: Object(a.b)({
                        name: "xmrueh-rightButton",
                        styles: "margin-left:auto;;label:rightButton;"
                    }),
                    availableTimeSlotContainer: Object(a.b)("display:grid;grid-template-columns:repeat(var(--numColumns),1fr);grid-auto-rows:", "32px", ";align-content:flex-start;gap:", S.d.gapUnits(3), ";height:", S.d.size("160px"), ";padding:", S.d.paddingUnits(1), ";&.small-view{height:", "135px", ";}&.dynamically-resize-slots,&.mobile-view{overflow-y:auto;};label:availableTimeSlotContainer;"),
                    boldNotification: Object(a.b)("font-weight:", S.j.semiBold, ";font-size:", S.i.size500, ";;label:boldNotification;"),
                    noAvailabilitiesContainer: Object(a.b)("padding-bottom:", S.d.paddingUnits(12), ";padding-top:", S.d.paddingUnits(12), ";;label:noAvailabilitiesContainer;"),
                    cancelButton: Object(a.b)({
                        name: "1mppti3-cancelButton",
                        styles: "justify-content:space-between;;label:cancelButton;"
                    }),
                    buttons: Object(a.b)({
                        name: "17ohndm-buttons",
                        styles: "display:flex;justify-content:flex-end;;label:buttons;"
                    }),
                    selectTimeArrow: Object(a.b)("display:flex;gap:", S.d.gapUnits(3), ";margin-left:auto;;label:selectTimeArrow;")
                },
                re = Object(H.a)("button", {
                    target: "e1fbxkdj0",
                    label: "AvailableTimeSlotButton"
                })("background:", S.c.white, ";border-radius:", S.n.inputBorderRadius, "px;border-style:none;display:inline;font-weight:", S.j.semiBold, ";font-size:", S.i.size300, ";line-height:", S.d.legacyLineHeight("16px"), ";color:", S.c.veryDarkGray, ";box-shadow:0px 0px 3px rgba(55,71,122,0.25);&:hover{border:", (({
                    isSelectedSlot: e
                }) => e ? `2px solid ${I.a.MEETING_BOOKER_COLOR}` : `1px solid ${I.a.MEETING_BOOKER_COLOR}`), ";}&:focus-visible,&.confirm{border:2px solid ", I.a.MEETING_BOOKER_COLOR, ";}", (({
                    makeButtonsViewOnly: e
                }) => e && "pointer-events: none;"));
            var se = ({
                availableTimeSlots: e,
                confirmBookingForTimeSlot: t,
                isSmallView: n,
                startingTimeSlotIndex: r,
                setStartingTimeSlotIndex: s,
                noAvailableTimeSlots: l,
                isMobile: d,
                isBackground: c,
                makeButtonsViewOnly: u,
                source: m,
                cancelBookingOption: g,
                cancelBooking: p,
                selectedSlot: h,
                setSelectedSlot: v
            }) => {
                const b = {
                        default: {
                            numSlots: 16,
                            numColumns: 4
                        },
                        smallView: {
                            numSlots: Number.POSITIVE_INFINITY,
                            numColumns: 2
                        }
                    },
                    E = n ? b.smallView : b.default,
                    _ = Object(i.useContext)(C.a),
                    O = e.slice(r, r + E.numSlots),
                    y = E.numSlots - O.length,
                    k = r + E.numSlots < e.length,
                    T = r >= E.numSlots;
                return l ? o.a.createElement("div", {
                    className: oe.noAvailabilitiesContainer
                }, o.a.createElement(K.a, null), o.a.createElement("p", {
                    className: oe.boldNotification
                }, _.t("messenger.meeting_booker.no_available_slots"))) : o.a.createElement(o.a.Fragment, null, o.a.createElement("div", {
                    className: Object(a.c)(w, {
                        [L]: d
                    })
                }, "Select a time", !d && o.a.createElement("div", {
                    className: oe.selectTimeArrow
                }, o.a.createElement("button", {
                    onClick: T ? () => {
                        s(Math.max(r - E.numSlots, 0))
                    } : void 0,
                    "aria-label": "Previous time slots"
                }, o.a.createElement(Z.a, {
                    color: T ? S.c.iconGray : S.c.lightGray,
                    size: le,
                    cursor: T ? "pointer" : "auto"
                })), o.a.createElement("button", {
                    onClick: k ? () => {
                        s(Math.min(r + E.numSlots, e.length))
                    } : void 0,
                    "aria-label": "Next time slots"
                }, o.a.createElement(J.a, {
                    color: k ? S.c.iconGray : S.c.lightGray,
                    size: le,
                    cursor: k ? "pointer" : "auto"
                })))), o.a.createElement("div", {
                    className: Object(a.c)(oe.availableTimeSlotContainer, {
                        "small-view": !c && !!n,
                        "dynamically-resize-slots": !c && !!n && "conversation" === m,
                        background: !!c,
                        "mobile-view": d
                    }),
                    style: Object(j.a)({
                        numColumns: E.numColumns
                    })
                }, O.map((e => {
                    const t = Object(W.h)(e.startsAt, "h:mm aaa");
                    return o.a.createElement(re, {
                        className: (null === h || void 0 === h ? void 0 : h.startsAt) === e.startsAt && (null === h || void 0 === h ? void 0 : h.endsAt) === e.endsAt ? "confirm" : void 0,
                        onClick: () => {
                            v(e)
                        },
                        key: `${e.startsAt}${e.endsAt}`,
                        makeButtonsViewOnly: u,
                        isSelectedSlot: e === h
                    }, t)
                })), !d && Array(y).map(((e, t) => o.a.createElement("div", {
                    key: t
                })))), o.a.createElement("div", {
                    className: Object(a.c)(oe.buttons, {
                        [oe.cancelButton]: g
                    })
                }, !d && o.a.createElement(o.a.Fragment, null, g && o.a.createElement(f.a, {
                    marginTopUnits: 8
                }, o.a.createElement(ie.a, {
                    variant: "tertiaryDanger",
                    size: "small",
                    onClick: p
                }, "Cancel meeting")), o.a.createElement(f.a, {
                    justify: "end",
                    marginTopUnits: 8
                }, o.a.createElement(ie.a, {
                    variant: "primary",
                    size: "small",
                    disabled: !h,
                    onClick: () => {
                        t(h)
                    }
                }, g ? "Confirm" : "Continue")))))
            };
            const le = 12;
            var de = ({
                    onWeekChange: e,
                    initialDay: t,
                    availableTimeSlots: n,
                    availableDays: a,
                    onViewHeaderClick: i,
                    confirmBookingForTimeSlot: r,
                    isSmallView: s,
                    startingTimeSlotIndex: l,
                    setStartingTimeSlotIndex: d,
                    dateToType: c,
                    onSelectDate: u,
                    makeButtonsViewOnly: m,
                    isMobile: g,
                    isBackground: p,
                    source: h,
                    meetingThemesEnabled: v = !1,
                    cancelBookingOption: b,
                    cancelBooking: E,
                    selectedSlot: _,
                    setSelectedSlot: f
                }) => {
                    const O = 0 === a.length;
                    return o.a.createElement(o.a.Fragment, null, !v && o.a.createElement(o.a.Fragment, null, o.a.createElement($, {
                        initialDay: t,
                        availableDays: a,
                        onWeekChange: e,
                        onViewHeaderClick: i,
                        isSmallView: s,
                        dateToType: c,
                        onSelectDate: u,
                        makeButtonsViewOnly: m
                    }), o.a.createElement(X, {
                        availableTimeSlots: n,
                        confirmBookingForTimeSlot: r,
                        isSmallView: s,
                        startingTimeSlotIndex: l,
                        setStartingTimeSlotIndex: d,
                        noAvailableTimeSlots: O,
                        isMobile: g,
                        isBackground: p,
                        makeButtonsViewOnly: m,
                        source: h
                    })), v && o.a.createElement(o.a.Fragment, null, o.a.createElement(ae, {
                        initialDay: t,
                        availableDays: a,
                        onWeekChange: e,
                        onViewHeaderClick: i,
                        isSmallView: s,
                        dateToType: c,
                        onSelectDate: u,
                        makeButtonsViewOnly: m,
                        meetingThemesEnabled: v
                    }), o.a.createElement(se, {
                        availableTimeSlots: n,
                        confirmBookingForTimeSlot: r,
                        isSmallView: s,
                        startingTimeSlotIndex: l,
                        setStartingTimeSlotIndex: d,
                        noAvailableTimeSlots: O,
                        isMobile: g,
                        isBackground: p,
                        makeButtonsViewOnly: m,
                        source: h,
                        cancelBookingOption: b,
                        cancelBooking: E,
                        selectedSlot: _,
                        setSelectedSlot: f
                    })))
                },
                ce = n(573);

            function ue() {
                return ue = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, ue.apply(this, arguments)
            }
            var me = i.createElement("g", {
                    clipPath: "url(#caret_svg__clip0_613_19054)"
                }, i.createElement("path", {
                    d: "M10.5 5.149L9.2 6.384l-3.7-3.53-3.7 3.53L.5 5.149l5-4.765 5 4.765z"
                })),
                ge = i.createElement("defs", null, i.createElement("clipPath", {
                    id: "caret_svg__clip0_613_19054"
                }, i.createElement("path", {
                    fill: "#fff",
                    transform: "rotate(-180 5.25 3.192)",
                    d: "M0 0h10v6H0z"
                })));

            function pe(e) {
                return i.createElement("svg", ue({
                    width: 11,
                    height: 7,
                    viewBox: "0 0 11 7"
                }, e), me, ge)
            }
            n.p;
            const he = {
                    tileRoot: Object(a.b)("display:flex;align-items:center;justify-content:center;position:relative;z-index:1;max-width:100%;text-align:center;padding:", S.d.legacyPadding("18.4px"), " 0;font-style:normal;font-size:", S.i.size300, ";font-weight:var(--font-weight);color:var(--font-color);border-color:transparent;background:", S.c.white, ';overflow:visible;&::after{content:"";position:absolute;width:2.75em;height:2.75em;background:var(--circle-background);border-radius:50%;z-index:-1;};label:tileRoot;'),
                    tileRootSmallView: Object(a.b)("padding:", S.d.paddingUnits(3), " ", S.d.paddingUnits(2), ";&::after{width:2.25em;height:2.25em;};label:tileRootSmallView;"),
                    imgToRightOfHeader: Object(a.b)("margin-left:", S.d.marginUnits(2), ";;label:imgToRightOfHeader;"),
                    selectedDay: Object(a.b)("--circle-background:", I.a.MEETING_BOOKER_COLOR, ";--font-color:", I.a.MEETING_BOOKER_TEXT_COLOR, ";--font-weight:", S.j.semiBold, ";;label:selectedDay;"),
                    availableDay: Object(a.b)("--circle-background:", S.c.white, ";--font-color:", S.c.blackPearl, ";--font-weight:", S.j.semiBold, ";&::after{border:1px solid ", S.c.borderGray, ";}&:hover::after{border:1px solid ", I.a.MEETING_BOOKER_COLOR, ";--circle-background:", I.a.MEETING_BOOKER_COLOR, ";}&:hover{--font-color:", I.a.MEETING_BOOKER_TEXT_COLOR, ";};label:availableDay;"),
                    availableDayThemesOverride: Object(a.b)("&:hover::after{--circle-background:", S.c.white, ";};label:availableDayThemesOverride;"),
                    unavailableDay: Object(a.b)("--circle-background:", S.c.white, ";--font-color:", S.c.secondaryText, ";--font-weight:", S.j.normal, ";cursor:default;;label:unavailableDay;"),
                    calendar: Object(a.b)("padding:", S.d.paddingUnits(4), " ", S.d.paddingUnits(8), ";max-width:", S.d.size("416px"), ";width:100%;box-shadow:0px 0px 0px 1px rgba(230,233,236,0.5),0px 3px 4px rgba(35,66,72,0.04),0px 0px 48px rgba(0,0,0,0.06);border-radius:1rem;margin:auto;.react-calendar__navigation{display:flex;margin-bottom:", S.d.marginUnits(8), ";.react-calendar__navigation__label{font-weight:", S.j.normal, ";font-size:", S.i.size300, ";}}.react-calendar button:enabled:hover{cursor:pointer;}.react-calendar__navigation button{background:none;border-width:0;}.react-calendar__month-view__weekdays{font-weight:", S.j.semiBold, ";font-size:", S.i.size300, ";color:", S.c.secondaryText, ";abbr{text-decoration:none;}}.react-calendar__navigation button[disabled]{color:", S.c.blackPearl, ";font-weight:", S.j.normal, ";};label:calendar;"),
                    calendarSmallView: Object(a.b)("padding:", S.d.paddingUnits(3), " ", S.d.paddingUnits(2), ";;label:calendarSmallView;"),
                    monthHeader: Object(a.b)("color:", S.c.primaryText, ";font-weight:", S.j.medium, ";;label:monthHeader;"),
                    calendarThemesOverride: Object(a.b)("background:", S.c.white, ";text-transform:uppercase;.react-calendar__month-view__weekdays{font-size:", S.n.fontSize100, "px;color:", Object(Q.f)(S.c.veryDarkGray, .6), ";margin-left:", S.d.marginUnits(4), ";}.react-calendar__month-view__days{margin-right:", S.d.marginUnits(4), ";};label:calendarThemesOverride;"),
                    calendarThemesMobileOverride: Object(a.b)(".react-calendar__navigation__prev-button{margin-left:", S.d.marginUnits(4), ";}.react-calendar__navigation__next-button{margin-right:", S.d.marginUnits(4), ";};label:calendarThemesMobileOverride;")
                },
                ve = new Date,
                be = Object(H.a)("div", {
                    target: "ett7d3y0",
                    label: "EmptyButton"
                })("height:", S.d.size("20px"), ";width:", S.d.size("20px"), ";"),
                Ee = (e, t) => e.getFullYear() < t.getFullYear() || e.getFullYear() === t.getFullYear() && e.getMonth() < t.getMonth();
            var _e = ({
                onSelectDate: e,
                onViewHeaderClick: t,
                dateToType: n,
                handleOutsideClick: r,
                isSmallView: s,
                lastAvailableDay: l,
                makeButtonsViewOnly: d,
                meetingThemesEnabled: c = !1,
                calendarRef: u
            }) => {
                const [m, g] = Object(i.useState)(ve), p = Object(i.useContext)(C.a), v = Ee(ve, m), b = Ee(m, l);
                Object(i.useEffect)((() => (document.addEventListener("mousedown", r), () => {
                    document.removeEventListener("mousedown", r)
                })), [r]);
                const E = v ? o.a.createElement(B, {
                        Element: "div",
                        "aria-label": p.t("messenger.meeting_booker.calendar_previous_month"),
                        makeButtonsViewOnly: d
                    }) : o.a.createElement(be, null),
                    _ = b ? o.a.createElement(U, {
                        Element: "div",
                        "aria-label": p.t("messenger.meeting_booker.calendar_next_month")
                    }) : o.a.createElement(be, null);
                return o.a.createElement(ce.a, {
                    inputRef: c ? u : void 0,
                    minDate: ve,
                    maxDate: l,
                    formatMonthYear: (e, t) => Object(h.a)(t, p.t("messenger.dates.year_month_format"), {
                        locale: y.a[p.locale]
                    }),
                    formatShortWeekday: (e, t) => Object(h.a)(t, "EEE", {
                        locale: y.a[p.locale]
                    }),
                    onClickDay: d ? void 0 : t => e(t),
                    onActiveStartDateChange: ({
                        activeStartDate: e
                    }) => g(e),
                    tileDisabled: ({
                        date: e
                    }) => "available" !== n(e),
                    minDetail: "year",
                    maxDetail: "month",
                    defaultView: "month",
                    tileClassName: ({
                        date: e
                    }) => {
                        const t = n(e);
                        return Object(a.c)(he.tileRoot, {
                            [he.tileRootSmallView]: s
                        }, {
                            [he.selectedDay]: "selected" === t
                        }, {
                            [he.availableDay]: "available" === t
                        }, {
                            [he.availableDayThemesOverride]: "available" === t && c
                        }, {
                            [he.unavailableDay]: "unavailable" === t
                        })
                    },
                    prevLabel: c ? o.a.createElement("div", {
                        "aria-label": p.t("messenger.meeting_booker.previous_week")
                    }, o.a.createElement(Z.a, {
                        color: v && !d ? S.c.iconGray : S.c.lightGray,
                        size: le,
                        cursor: v && !d ? "pointer" : "auto"
                    })) : E,
                    prevAriaLabel: p.t("messenger.meeting_booker.calendar_previous_month"),
                    nextLabel: c ? o.a.createElement("div", {
                        "aria-label": p.t("messenger.meeting_booker.next_week")
                    }, o.a.createElement(J.a, {
                        color: b && !d ? S.c.iconGray : S.c.lightGray,
                        size: le,
                        cursor: b && !d ? "pointer" : "auto"
                    })) : _,
                    nextAriaLabel: p.t("messenger.meeting_booker.calendar_next_month"),
                    prev2Label: null,
                    next2Label: null,
                    showNeighboringMonth: !1,
                    navigationLabel: ({
                        label: e
                    }) => c ? o.a.createElement(f.a, {
                        justify: "center",
                        align: "center"
                    }, o.a.createElement(O.a, {
                        level: 2,
                        preset: "headingSmall"
                    }, e), !s && o.a.createElement(pe, {
                        className: he.imgToRightOfHeader,
                        fill: S.c.iconGray
                    })) : o.a.createElement(o.a.Fragment, null, o.a.createElement("span", {
                        className: he.monthHeader
                    }, e), o.a.createElement(pe, {
                        fill: I.a.MEETING_BOOKER_COLOR,
                        className: he.imgToRightOfHeader
                    })),
                    calendarType: "US",
                    className: Object(a.c)(he.calendar, {
                        [he.calendarSmallView]: s,
                        [he.calendarThemesOverride]: c,
                        [he.calendarThemesMobileOverride]: c && s
                    }),
                    onDrillUp: t
                })
            };
            const fe = {
                wrapper: Object(a.b)({
                    name: "1hfnasu-wrapper",
                    styles: "position:relative;;label:wrapper;"
                }),
                weekWrapper: Object(a.b)({
                    name: "xcfqyb-weekWrapper",
                    styles: "&.hidden{opacity:0;};label:weekWrapper;"
                }),
                weekWrapperHidden: Object(a.b)({
                    name: "g5e8kv-weekWrapperHidden",
                    styles: "opacity:0;;label:weekWrapperHidden;"
                }),
                weekWrapperSmallHidden: Object(a.b)({
                    name: "1bc6cqt-weekWrapperSmallHidden",
                    styles: "display:none;;label:weekWrapperSmallHidden;"
                }),
                monthWrapper: Object(a.b)("background:white;", S.e, ";label:monthWrapper;"),
                monthWrapperThemesOverride: Object(a.b)("position:absolute;background:none;left:", S.d.unsafeMargin("-337px"), ";top:", S.d.marginUnits(-4), ";bottom:0;;label:monthWrapperThemesOverride;"),
                monthWrapperThemesMobileOverride: Object(a.b)({
                    name: "1hgonpf-monthWrapperThemesMobileOverride",
                    styles: "left:0;top:-20%;;label:monthWrapperThemesMobileOverride;"
                }),
                monthWrapperSmall: Object(a.b)({
                    name: "1pn42m8-monthWrapperSmall",
                    styles: "position:relative;;label:monthWrapperSmall;"
                })
            };
            t.a = ({
                availableSlots: e,
                confirmBookingForTimeSlot: t,
                isSmallView: n,
                makeButtonsViewOnly: c,
                isMobile: u = !1,
                isBackground: m,
                source: g,
                meetingThemesEnabled: p = !1,
                cancelBookingOption: h,
                cancelBooking: v,
                disableButtonFocus: b = !1,
                selectedSlot: E,
                setSelectedSlot: _
            }) => {
                var f;
                const O = Object(i.useMemo)((() => e.reduce(((e = {}, t) => {
                        const n = Object(r.a)(Object(s.a)(Object(W.b)(t.startsAt)));
                        return e[n] = e[n] || [], e[n].push(t), e
                    }), {})), [e]),
                    C = Object(i.useMemo)((() => {
                        const t = e.filter((e => Object(l.a)(new Date(e.startsAt), new Date) || Object(d.a)(new Date(e.startsAt), new Date)));
                        return [...new Set(t.map((e => Object(r.a)(Object(s.a)(Object(W.b)(e.startsAt))))))]
                    }), [e]),
                    [S, y] = Object(i.useState)(!0),
                    [k, T] = Object(i.useState)(0 !== C.length ? new Date(C[0]) : null),
                    [A, N] = Object(i.useState)(0),
                    R = Object(i.useCallback)((e => !(!k || !e) && Object(d.a)(e, k)), [k]),
                    D = Object(i.useCallback)((e => C.includes(Object(r.a)(e))), [C]),
                    I = Object(i.useCallback)((() => y((e => !e))), []),
                    x = Object(i.useCallback)((e => {
                        y(!0), T(e), N((t => R(e) ? t : 0))
                    }), [R]),
                    M = k && O[Object(r.a)(k)] || [],
                    B = e => R(e) ? "selected" : D(e) ? "available" : "unavailable",
                    F = C.map((e => new Date(e))),
                    w = null !== (f = F[F.length - 1]) && void 0 !== f ? f : new Date,
                    L = Object(i.useCallback)((({
                        isWithinWeek: e
                    }) => {
                        const t = F.find(e);
                        x(t || null)
                    }), [F, x]),
                    P = Object(i.useRef)(null);
                return o.a.createElement("div", {
                    className: fe.wrapper,
                    inert: b ? "true" : void 0
                }, o.a.createElement("div", {
                    className: Object(a.c)(fe.weekWrapper, {
                        [fe.weekWrapperHidden]: !S && !p,
                        [fe.weekWrapperSmallHidden]: n && !S && !p
                    })
                }, o.a.createElement(de, {
                    onWeekChange: L,
                    availableTimeSlots: M,
                    initialDay: k,
                    availableDays: F,
                    confirmBookingForTimeSlot: t,
                    onViewHeaderClick: I,
                    isSmallView: n,
                    startingTimeSlotIndex: A,
                    setStartingTimeSlotIndex: N,
                    dateToType: B,
                    onSelectDate: x,
                    makeButtonsViewOnly: c,
                    isMobile: u,
                    isBackground: m,
                    source: g,
                    meetingThemesEnabled: p,
                    cancelBookingOption: h,
                    cancelBooking: v,
                    selectedSlot: E,
                    setSelectedSlot: _
                })), !S && o.a.createElement("div", {
                    className: Object(a.c)(fe.monthWrapper, {
                        [fe.monthWrapperSmall]: n,
                        [fe.monthWrapperThemesOverride]: p,
                        [fe.monthWrapperThemesMobileOverride]: p && u
                    })
                }, o.a.createElement(_e, {
                    onSelectDate: x,
                    isAvailableDay: D,
                    isSelectedDay: R,
                    onViewHeaderClick: I,
                    dateToType: B,
                    handleOutsideClick: e => {
                        P.current && !P.current.contains(e.target) && y(!0)
                    },
                    calendarRef: P,
                    isSmallView: n,
                    lastAvailableDay: w,
                    makeButtonsViewOnly: c,
                    meetingThemesEnabled: p
                })))
            }
        },
        231: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "animationTime", (function() {
                return c
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(91),
                l = n(1);
            var d = Object(i.a)("div", {
                target: "e1rqzcta0",
                label: "MessengerHeaderBar"
            })("border-bottom:1px solid ", l.c.border, ";z-index:1;.controls{height:", l.d.size("48px"), ";padding:", l.d.paddingUnits(2), " ", l.d.paddingUnits(4), ";}");
            const c = .25,
                u = Object(i.a)("div", {
                    target: "e1ig7uu30",
                    label: "Wrapper"
                })("position:absolute;z-index:1;overflow:hidden;bottom:0;right:0;left:0;height:0;background-color:#fff;transition:height ", c, "s ease-in;display:flex;flex-direction:column;&.enter{height:100%;}&.leave{height:0;.close-button{display:none;}.component-wrapper{display:none;}}", d, "{position:relative;}.component-wrapper{flex-grow:1;display:flex;}.close-button{height:100%;svg{transform:rotate(180deg);}}");
            t.default = e => class extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        enter: !1,
                        leave: !1
                    }
                }
                render() {
                    return r.a.createElement(u, {
                        className: Object(a.c)(this.state)
                    }, r.a.createElement(d, null, r.a.createElement("div", {
                        className: "controls"
                    }, r.a.createElement("button", {
                        className: "close-button",
                        onClick: this.props.toggleFeedback,
                        "aria-label": "Show feedback"
                    }, r.a.createElement(s.b.RightArrow, {
                        height: 16,
                        fill: l.c.iconGray
                    })))), r.a.createElement("div", {
                        className: "component-wrapper"
                    }, r.a.createElement(e, { ...this.props,
                        setLeave: e => this.setState({
                            leave: e
                        })
                    })))
                }
                componentDidEnter() {
                    this.setState({
                        enter: !0
                    })
                }
                componentWillLeave(e) {
                    this.state.leave ? e() : (this.setState({
                        leave: !0
                    }), setTimeout(e, 1e3 * c))
                }
            }
        },
        232: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0),
                i = n.n(a),
                o = n(353);
            const r = i.a.forwardRef((({
                preset: e = "body",
                _quartzInternal_className: t,
                children: n,
                ...a
            }, r) => i.a.createElement(o.a, { ...a,
                as: "p",
                preset: e,
                _quartzInternal_className: t,
                ref: r
            }, n)))
        },
        259: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MESSAGE_CYCLE_TIME_MS", (function() {
                return d
            })), n.d(t, "LOADING_MESSAGES", (function() {
                return c
            })), n.d(t, "FINAL_LOADING_MESSAGE", (function() {
                return u
            })), n.d(t, "MeetingLoadingStatus", (function() {
                return h
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(61),
                s = n(178),
                l = n(1);
            const d = 3e3,
                c = ["Sit tight, loading...", "One sec, almost there!", "Just a moment, please...", "Hang on, we're on it!", "Working on it...", "Processing your request..."],
                u = "Hold on, almost finished!",
                m = Object(a.a)(r.a, {
                    target: "e4emtye0",
                    label: "LoadingContainer"
                })("padding:", l.d.paddingUnits(10), ";display:flex;align-items:center;justify-content:center;width:", l.d.size("256px"), ";height:", l.d.size("256px"), ";flex-direction:column;row-gap:", l.d.gapUnits(6), ";animation:growBox 150ms linear;@keyframes growBox{from{transform:scale(0.3);border-radius:9999px;}to{transform:scale(1);border-radius:8px;}}"),
                g = Object(a.a)("span", {
                    target: "e4emtye1",
                    label: "DescriptionText"
                })("font-size:", l.i.size300, ";font-weight:", l.j.normal, ";margin-top:", l.d.marginUnits(4), ";text-align:center;color:", l.c.blackPearl, ";"),
                p = Object(a.a)("div", {
                    target: "e4emtye2",
                    label: "SpinnerContainer"
                })("position:relative;margin-top:", l.d.marginUnits(4), ";"),
                h = ({
                    loadingMessage: e
                }) => o.a.createElement(m, null, o.a.createElement(p, null, o.a.createElement(s.b, null)), o.a.createElement(g, null, e))
        },
        26: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return te
            })), n.d(t, "c", (function() {
                return ne
            })), n.d(t, "b", (function() {
                return ae
            })), n.d(t, "d", (function() {
                return ve
            })), n.d(t, "f", (function() {
                return Ke
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(170),
                l = n(348),
                d = n(1015),
                c = n(1018),
                u = n(1016),
                m = n(967),
                g = n(960),
                p = n(966),
                h = n(21),
                v = n(406),
                b = n.n(v),
                E = n(69),
                _ = n(343),
                f = n(129),
                O = n(62),
                C = n(96),
                S = n(341),
                y = n(117),
                k = n(14),
                T = n(6),
                A = n(1),
                N = n(208);
            class R extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        error: null
                    }
                }
                render() {
                    const {
                        url: e,
                        title: t,
                        size: n,
                        className: i = "",
                        PlaceholderIcon: o = N.a,
                        iconStyle: s,
                        error: l = !1,
                        deactivated: d = !1
                    } = this.props;
                    return e || n ? r.a.createElement("span", {
                        className: i
                    }, e && !this.state.error ? r.a.createElement("img", {
                        className: Object(a.c)(Object(a.b)("border-radius:100%;object-fit:contain;filter:", d ? "grayscale(1)" : "none", ";;label:Avatar;"), s),
                        src: e,
                        height: n || "100%",
                        width: n || "100%",
                        title: t,
                        onError: () => this.setState({
                            error: !0
                        }),
                        "data-se-id": "fireball-image"
                    }) : r.a.createElement(D, {
                        title: t,
                        size: n,
                        error: l
                    }, r.a.createElement(o, {
                        height: .5 * n,
                        title: t,
                        fill: "#FFF"
                    }))) : r.a.createElement("span", {
                        className: Object(a.b)({
                            name: "1pf0xrz-Avatar",
                            styles: "width:100%;height:100%;;label:Avatar;"
                        })
                    }, r.a.createElement(I, null, r.a.createElement(o, {
                        fill: "#FFF"
                    })))
                }
            }
            const D = Object(i.a)("span", {
                    target: "etd7xao0",
                    label: "Placeholder"
                })("display:inline-grid;place-content:center;vertical-align:middle;height:", (({
                    size: e
                }) => A.d.legacySize(`${e}px`)), ";width:", (({
                    size: e
                }) => A.d.legacySize(`${e}px`)), ";border-radius:100%;background-color:", A.c.iconGray, ";", (({
                    error: e
                }) => e && `border: 1px solid ${A.c.red};\n    border-radius: 100%;`)),
                I = ({
                    children: e
                }) => r.a.createElement("div", {
                    className: Object(a.b)("display:flex;align-items:center;justify-content:center;height:100%;width:100%;border-radius:100%;background-color:", A.c.iconGray, ";> svg{width:50%;height:50%;};label:IconWithCircleBackground;")
                }, e);
            var x = R,
                M = n(145),
                B = n(33),
                F = n(38),
                w = n(101),
                L = n(113);

            function P() {
                return P = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, P.apply(this, arguments)
            }
            var U = o.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M18.342 15.733l3.497.961h.003a1.548 1.548 0 011.16 1.48v3.451a.786.786 0 01-.8.77h-14.4a.785.785 0 01-.8-.77v-3.452a1.549 1.549 0 011.16-1.48l3.502-.962a1.565 1.565 0 001.129-1.18l.215-1.036a4.609 4.609 0 01-2.805-4.194V7.01a4.53 4.53 0 011.458-3.313 4.909 4.909 0 013.49-1.3A4.827 4.827 0 0119.802 7.2v2.12a4.609 4.609 0 01-2.809 4.192l.218 1.039a1.565 1.565 0 001.13 1.18zM4.547 4.99c-2.08 1.464-2.589 4.544-1.108 6.717l.208.305c.262.385.19.928-.163 1.212-.352.285-.85.204-1.111-.18l-.208-.305C.135 9.76.83 5.539 3.682 3.533c.369-.26.86-.143 1.1.259.238.402.133.938-.235 1.198zm1.829 4.846c-.633-.642-.525-1.799.238-2.296.376-.245.498-.777.273-1.188-.226-.411-.714-.545-1.09-.3-1.648 1.073-1.931 3.602-.502 5.051a.749.749 0 001.123-.043.923.923 0 00-.042-1.224z"
            });

            function j(e) {
                return o.createElement("svg", P({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 24 25",
                    fill: "#58C2D5"
                }, e), U)
            }
            n.p;
            var z = n(314),
                V = n(315);
            const G = {
                CallIcon: Object(i.a)("div", {
                    target: "e1y79j2r0",
                    label: "CallIcon"
                })("background:", A.c.buttonIconPrimary, ";border-radius:50%;width:", A.d.size("32px"), ";height:", A.d.size("32px"), ";display:flex;align-items:center;justify-content:center;"),
                CallInfo: Object(i.a)("div", {
                    target: "e1y79j2r1",
                    label: "CallInfo"
                })("display:flex;flex-direction:column;gap:", A.d.gapUnits(1), ";align-items:left;"),
                CallInfoLabel: Object(i.a)("div", {
                    target: "e1y79j2r2",
                    label: "CallInfoLabel"
                })("font-weight:", A.j.semiBold, ";font-size:", A.i.size500, ";color:", A.h.primary, ";text-align:left;line-height:", A.d.legacyLineHeight("21px"), ";"),
                CallInfoDuration: Object(i.a)("div", {
                    target: "e1y79j2r3",
                    label: "CallInfoDuration"
                })("font-weight:", A.j.normal, ";font-size:", A.i.size300, ";color:", A.h.secondary, ";text-align:left;line-height:", A.d.legacyLineHeight("18px"), ";")
            };
            var $, H, W = n(93),
                K = n(85),
                q = n(91),
                Y = n(115),
                X = n(219),
                Q = n(331);
            const Z = {},
                J = 16,
                ee = 12,
                te = 13,
                ne = Y.a,
                ae = 8,
                ie = Object(a.b)("margin-top:", A.d.legacyMargin("16px"), ";font-size:", A.d.legacyFontSize(`${te}px`), ";;label:entryBlock;"),
                oe = Object(a.b)("margin-top:", A.d.legacyMargin(`${ae}px`), ";font-size:", A.d.legacyFontSize(`${te}px`), ";;label:entry;"),
                re = Object(a.b)("color:", A.c.secondaryText, ";clear:both;font-size:", A.i._deprecated_size200, ";;label:label;"),
                se = Object(a.b)("border-radius:3px;border-width:", A.d.legacySize("1px"), ";border-style:solid;;label:bubble;"),
                le = () => r.a.createElement("span", null, "\xa0", r.a.createElement("span", {
                    "aria-hidden": "true"
                }, "\u2022"), "\xa0"),
                de = Object(i.a)("div", {
                    target: "e1q07h3z0",
                    label: "ErrorIcon"
                })("display:block;position:absolute;right:calc(100% + 8px);top:calc(50% - 8px);font-size:", A.i.size100, ";height:", A.d.size("16px"), ";width:", A.d.size("16px"), ";line-height:", A.d.legacyLineHeight("14px"), ";border-radius:100%;border:1px solid ", A.c.dangerRed, ";font-size:", A.i.size100, ";color:", A.c.dangerRed, ";text-align:center;"),
                ce = Object(C.a)(k.a, "i18n")((({
                    time: e,
                    i18n: t,
                    includeTimeZone: n = !1,
                    alwaysShowDay: a = !1
                }) => ue({
                    time: e,
                    i18n: t,
                    includeTimeZone: n,
                    alwaysShowDay: a
                }))),
                ue = ({
                    time: e,
                    i18n: t,
                    includeTimeZone: n = !1,
                    alwaysShowDay: a = !1
                }) => {
                    const i = Object(F.b)(e);
                    let o = t.t("messenger.dates.short_time_format") || "h:mm aaaa";
                    n && (o += " z");
                    const r = Object(p.a)(i, o, {
                        locale: B.a[t.locale]
                    });
                    let s;
                    return s = Object(d.a)(i) ? a ? `${t.t("messenger.dates.today")}, ${r}` : r : Object(c.a)(i) ? `${t.t("messenger.dates.yesterday")}, ${r}` : Object(u.a)(i) ? Object(p.a)(i, `eee, MMM dd, ${o}`, {
                        locale: B.a[t.locale]
                    }) : Object(p.a)(i, `eee, MMM dd, yyyy, ${o}`, {
                        locale: B.a[t.locale]
                    }), Object(F.f)(s, t)
                },
                me = Object(i.a)("div", {
                    target: "e1q07h3z1",
                    label: "MessageBubble"
                })(ie, " ", se, " clear:both;word-wrap:break-word;max-width:", 80, "%;padding:", A.d.legacyPadding(`${ee}px`), " ", A.d.legacyPadding(`${J}px`), ";position:relative;&.own{float:right;border-color:", T.a.MESSAGE_BUBBLE_OWN_BORDER_COLOR, ";background-color:", T.a.MESSAGE_BUBBLE_OWN_BACKGROUND_COLOR, ";color:", T.a.MESSAGE_BUBBLE_OWN_TEXT_COLOR, ";&.isRepsAiMessage{border-color:", A.c.transparent, ";background-color:", A.c.lightPurple, ";color:", A.c.primaryText, ";}& + .own{", oe, "}&.bot{border-color:", T.a.MESSAGE_BUBBLE_BOT_BORDER_COLOR, ";background-color:", T.a.MESSAGE_BUBBLE_BOT_BACKGROUND_COLOR, ";color:", T.a.MESSAGE_BUBBLE_BOT_TEXT_COLOR, ";}}&.other{border-color:#f1f4f7;background-color:#f1f4f7;float:left;isolation:isolate;& + .other{", oe, '}&::before,&::after{content:"";display:', (e => e.shouldShowAvatar ? "block" : "none"), ";position:absolute;top:0;left:0;height:", A.d.size("16px"), ";width:", A.d.size("16px"), ";border-radius:8px;transform:translateX(-50%) translateY(-33%);} &::before{background-image:", (e => e.repAvatarUrl ? Object(y.a)(e.repAvatarUrl) : T.a.PLACEHOLDER_AVATAR_URL), ";background-repeat:no-repeat;background-size:cover;z-index:2;} &::after{background-image:", T.a.NON_BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND, ";background-color:", T.a.NON_BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND, "; background-position-x:10%;background-position-y:center;z-index:1;}&.bot{&::before{background-image:", T.a.BOT_AVATAR_BACKGROUND_IMAGE, ";}&::after{background-image:", T.a.BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND, ";background-color:", T.a.BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND, ";}}}"),
                ge = Object(i.a)(V.a, {
                    target: "e1q07h3z2",
                    label: "RightArrowIcon"
                })(),
                pe = Object(i.a)(ge, {
                    target: "e1q07h3z3",
                    label: "LeftArrowIcon"
                })({
                    name: "4ky835",
                    styles: "transform:rotate(180deg);"
                });
            Z.SystemMessage = Object(i.a)("div", {
                target: "e1q07h3z4"
            })(ie, " ", re, " float:left;width:100%;text-align:center;> *{vertical-align:middle;}svg{margin-right:", A.d.marginUnits(2), ";}"), Z.Timestamp = Object(i.a)(r.a.forwardRef((({
                children: e,
                time: t,
                highlight: n,
                className: i
            }, o) => r.a.createElement(Z.SystemMessage, {
                ref: o,
                className: Object(a.c)(i, {
                    highlight: n
                }),
                role: "listitem"
            }, r.a.createElement("span", null, e, r.a.createElement(ce, {
                time: t,
                alwaysShowDay: !0
            }))))), {
                target: "e1q07h3z5"
            })("&.highlight{display:flex;align-items:center;color:", A.c.red, ";span{margin:0 ", A.d.marginUnits(2), ';}&:before,&:after{content:"";height:50%;flex-grow:1;border-top:1px solid ', A.c.red, ";}}"), Z.UserTimestamp = r.a.forwardRef((({
                time: e,
                user: t,
                children: n
            }, i) => r.a.createElement(Z.Timestamp, {
                ref: i,
                time: e,
                role: "listitem"
            }, t && r.a.createElement(r.a.Fragment, null, t.avatarUrl && r.a.createElement("img", {
                src: t.avatarUrl,
                title: t.name,
                className: Object(a.b)("height:", A.d.size("20px"), ";vertical-align:middle;margin-right:", A.d.marginUnits(2), ";border-radius:100%;")
            }), n))));
            const he = Object(C.a)(k.a, "i18n")((({
                message: e,
                conversation: t,
                visitor: n,
                emailDecorator: a,
                i18n: i
            }) => {
                var o;
                const s = ue({
                        time: e.createdAt,
                        i18n: i
                    }),
                    l = !!e.visitorId,
                    d = !!e.scriptId,
                    c = l ? null === n || void 0 === n ? void 0 : n.listName : d ? i.t("messenger.text.chat_bot") : null === t || void 0 === t || null === (o = t.user) || void 0 === o ? void 0 : o.name;
                return r.a.createElement(r.a.Fragment, null, r.a.createElement("span", {
                    className: "sr-only"
                }, e.isOwn && !d && i.t("messenger.text_sub.message_announcement_from_me", {
                    timestamp: s
                }), (!e.isOwn && !d || d) && i.t("messenger.text_sub.message_announcement_from_them", {
                    timestamp: s,
                    subject: c
                }), "\xa0"), r.a.createElement(Y.b, {
                    disallowHeading: !0,
                    emailDecorator: a,
                    disallowBracketLink: l
                }, e.text))
            }));
            Z.Message = Object(C.a)(k.a, "i18n")((({
                message: e,
                conversation: t,
                visitor: n,
                emailDecorator: i,
                className: o,
                i18n: s
            }) => {
                var l;
                const d = r.a.createElement(ce, {
                        time: e.createdAt
                    }),
                    c = !!e.scriptId || Ye(e),
                    u = e.showAvatar || Ye(e);
                return r.a.createElement(W.a, {
                    placement: "auto",
                    tooltip: c && e.isOwn ? r.a.createElement(r.a.Fragment, null, "Sent by bot at ", d) : d,
                    delayShow: "250",
                    shouldAnnounce: !1,
                    Wrapper: me,
                    wrapperProps: {
                        "data-backend-test-id": "message",
                        tabIndex: "-1",
                        className: Object(a.c)("focusable", o, e.isOwn ? "own" : "other", {
                            bot: c,
                            isRepsAiMessage: Ke(e) || qe(e)
                        }),
                        repAvatarUrl: null === t || void 0 === t || null === (l = t.user) || void 0 === l ? void 0 : l.avatarUrl,
                        shouldShowAvatar: u
                    }
                }, r.a.createElement("div", {
                    "aria-live": e.pendingStatus ? "off" : "polite",
                    role: "listitem"
                }, r.a.createElement(he, {
                    message: e,
                    conversation: t,
                    visitor: n,
                    emailDecorator: i
                })))
            })), Z.MessageRetry = Object(C.a)(k.a, "i18n")((({
                message: e,
                sendMessage: t,
                i18n: n,
                conversation: i,
                visitor: o,
                emailDecorator: s
            }) => r.a.createElement(W.a, {
                tooltip: n.t("messenger.cta.retry"),
                placement: "top-end",
                Wrapper: me,
                wrapperProps: {
                    onClick: () => t(e),
                    tabIndex: "-1",
                    className: Object(a.c)("focusable", "own", Object(a.b)({
                        name: "11l4m4j-className",
                        styles: "position:relative;cursor:pointer;;label:className;"
                    }))
                }
            }, r.a.createElement(de, {
                "aria-hidden": !0
            }, "!"), r.a.createElement(he, {
                message: e,
                conversation: i,
                visitor: o,
                emailDecorator: s
            }), r.a.createElement("span", {
                className: "sr-only"
            }, n.t("messenger.cta.retry"))))), Z.DraftMessage = Object(i.a)((({
                className: e,
                text: t
            }) => r.a.createElement(r.a.Fragment, null, r.a.createElement(me, {
                className: `${e} other`,
                "data-backend-test-id": "draft-message"
            }, t), r.a.createElement("div", null, "Visitor is typing\u2026"))), {
                target: "e1q07h3z6"
            })("color:", A.h.secondary, ";font-style:italic;background-color:", Object(h.h)(.875, A.c.yellow), " !important;border-color:transparent !important;& + div{", re, " ", oe, " font-size:", A.i._deprecated_size200, ";float:left;}");
            const ve = te * ne + 2 * ee + 2;
            Z.TypingIndicator = Object(i.a)(Object(C.a)(k.a, "i18n")((({
                className: e,
                shouldAnnounceTyping: t,
                i18n: n
            }) => r.a.createElement(me, {
                className: Object(a.c)("other", e),
                "data-backend-test-id": "typing-indicator",
                "aria-label": n.t("messenger.text.rep_is_typing"),
                "aria-live": t ? "polite" : "off"
            }, r.a.createElement("svg", {
                style: {
                    height: 6,
                    width: 24
                },
                viewBox: "0 0 120 30",
                xmlns: "http://www.w3.org/2000/svg",
                color: A.c.secondaryText
            }, r.a.createElement("circle", {
                cx: "15",
                cy: "15",
                r: "15"
            }, r.a.createElement("animate", {
                attributeName: "r",
                from: "15",
                to: "15",
                begin: "0s",
                dur: "0.8s",
                values: "15;9;15",
                calcMode: "linear",
                repeatCount: "indefinite"
            }), r.a.createElement("animate", {
                attributeName: "fill-opacity",
                from: "1",
                to: "1",
                begin: "0s",
                dur: "0.8s",
                values: "1;.5;1",
                calcMode: "linear",
                repeatCount: "indefinite"
            })), r.a.createElement("circle", {
                cx: "60",
                cy: "15",
                r: "9",
                fillOpacity: "0.3"
            }, r.a.createElement("animate", {
                attributeName: "r",
                from: "9",
                to: "9",
                begin: "0s",
                dur: "0.8s",
                values: "9;15;9",
                calcMode: "linear",
                repeatCount: "indefinite"
            }), r.a.createElement("animate", {
                attributeName: "fill-opacity",
                from: "0.5",
                to: "0.5",
                begin: "0s",
                dur: "0.8s",
                values: ".5;1;.5",
                calcMode: "linear",
                repeatCount: "indefinite"
            })), r.a.createElement("circle", {
                cx: "105",
                cy: "15",
                r: "15"
            }, r.a.createElement("animate", {
                attributeName: "r",
                from: "15",
                to: "15",
                begin: "0s",
                dur: "0.8s",
                values: "15;9;15",
                calcMode: "linear",
                repeatCount: "indefinite"
            }), r.a.createElement("animate", {
                attributeName: "fill-opacity",
                from: "1",
                to: "1",
                begin: "0s",
                dur: "0.8s",
                values: "1;.5;1",
                calcMode: "linear",
                repeatCount: "indefinite"
            })))))), {
                target: "e1q07h3z7"
            })("position:absolute;bottom:0;line-height:", Y.a, ";"), Z.Status = Object(i.a)("div", {
                target: "e1q07h3z8"
            })(oe, " ", re, " float:right;color:", A.c.secondaryText, ";& + .own{", oe, "}"), Z.ReadReceipt = ({
                time: e
            }) => r.a.createElement(Z.Status, {
                "data-backend-test-id": "read-receipt"
            }, r.a.createElement(O.a, {
                id: "messenger.text.seen"
            }), r.a.createElement(le, null), r.a.createElement(ce, {
                time: e
            })), Z.Unread = ({
                message: e
            }) => r.a.createElement(Z.Status, null, r.a.createElement(O.a, {
                id: "messenger.text.not_seen"
            }), r.a.createElement(le, null), r.a.createElement(ce, {
                time: e.createdAt
            })), Z.CallTimestamp = ({
                meeting: e
            }) => r.a.createElement(Z.Timestamp, {
                time: e.startedAt
            }, r.a.createElement(O.a, {
                id: "messenger.text.call_started"
            }), r.a.createElement(le, null)), Z.Event = Object(i.a)((({
                children: e,
                className: t
            }) => r.a.createElement("div", {
                className: t,
                role: "listitem"
            }, e)), {
                target: "e1q07h3z9"
            })(ie, " ", se, " position:relative;float:left;width:100%;padding:", A.d.paddingUnits(4), ";text-align:center;border:1px solid #e6e9ec;border-top:2px solid ", T.a.THEME_PRIMARY_COLOR, ";box-shadow:rgba(0,0,0,0.1) 0px 1px 5px;"), Z.Call = Object(i.a)(Z.Event, {
                target: "e1q07h3z10"
            })("svg.icon{position:absolute;left:16px;fill:", T.a.THEME_PRIMARY_COLOR, ";}"), Z.StartedCall = Object(C.a)(k.a, "i18n")((({
                meeting: e,
                i18n: t
            }) => r.a.createElement(Z.Call, {
                meeting: e
            }, r.a.createElement(q.b.PhoneCall, {
                className: "icon",
                height: 16
            }), e.endedAt ? r.a.createElement("span", null, Object(F.c)(e.startedAt, e.endedAt, !1, !0, t.locale)) : r.a.createElement(Q.a, {
                startedAt: e.startedAt
            })))), Z.MissedCall = Object(C.a)(k.a, "i18n")((({
                meeting: e,
                i18n: t
            }) => r.a.createElement(Z.Call, {
                meeting: e
            }, r.a.createElement(q.b.MissedCall, {
                className: "icon",
                height: 24
            }), r.a.createElement("span", null, t.t("messenger.text_sub.missed_call", {
                text: Object(F.c)(e.enqueuedAt, e.endedAt, !1, !0, t.locale)
            })))));
            Object(i.a)("div", {
                target: "e1q07h3z11",
                label: "CalendarOfferDescription"
            })(oe, " ", re, " float:left;width:100%;margin:", A.d.marginUnits(6), " 0 ", A.d.marginUnits(-3), ";text-align:center;");
            const be = Object(i.a)(Z.Event, {
                    target: "e1q07h3z12",
                    label: "CalendarCard"
                })(".big{font-size:", A.i.size600, ";font-weight:", A.j.semiBold, ";}.small{font-size:", A.i._deprecated_size200, ";line-height:", A.d.legacyLineHeight("1.4em"), ";}", K.a, "{margin:", A.d.marginUnits(2), " 0 ", A.d.legacyMargin("20px"), ";}", K.a, " .facepile-avatar,.avatar{height:", A.d.size("40px"), ";&.confirmed{float:left;}}.day-controls{display:flex;justify-content:space-between;align-items:center;.date-container{margin:0 ", A.d.marginUnits(4), ";height:", A.d.size("16px"), ";}.day-control{width:", A.d.size("64px"), ";height:", A.d.size("16px"), ";button{color:", T.a.CALENDAR_CARD_DAY_CONTROL_BUTTON_TEXT_COLOR, ";font-size:", A.i.size500, ";", ge, ",", pe, "{fill:", T.a.CALENDAR_CARD_DAY_CONTROL_BUTTON_ICON_COLOR, ";}}}.day-control.disabled{color:#eee;}}.available-events{list-style-type:none;columns:2;padding:0;column-gap:", A.d.legacyGap("8px"), ";li{line-height:", A.d.legacyLineHeight("34px"), ";vertical-align:middle;height:", A.d.legacySize("34px"), ";margin-bottom:", A.d.legacyMargin("8px"), ";button{break-inside:avoid;color:", T.a.AVAILABLE_EVENTS_BUTTON_TEXT_COLOR, ";background-color:", T.a.AVAILABLE_EVENTS_BUTTON_BACKGROUND_COLOR, ";border:1px solid ", T.a.AVAILABLE_EVENTS_BUTTON_BORDER_COLOR, ";border-radius:", T.a.BUTTON_BORDER_RADIUS, ";width:100%;&:hover{background:", T.a.AVAILABLE_EVENTS_BUTTON_HOVER_BACKGROUND, ";color:", T.a.AVAILABLE_EVENTS_BUTTON_HOVER_TEXT_COLOR, ";border-color:", T.a.AVAILABLE_EVENTS_BUTTON_HOVER_BORDER_COLOR, ";}}}}.final{width:75%;margin-bottom:", A.d.legacyMargin("5px"), ";}.back{color:", T.a.CALENDAR_CARD_BACK_BUTTON_TEXT_COLOR, ";text-decoration:underline;}.confirm{color:", T.a.CALENDAR_CARD_CONFIRM_BUTTON_TEXT_COLOR, ";background-color:", T.a.CALENDAR_CARD_CONFIRM_BUTTON_BACKGROUND_COLOR, ";border:1px solid ", T.a.CALENDAR_CARD_CONFIRM_BUTTON_BORDER_COLOR, ";border-radius:", T.a.BUTTON_BORDER_RADIUS, ";width:75%;height:", A.d.legacySize("34px"), ";line-height:", A.d.legacyLineHeight("30px"), ";margin:", A.d.marginUnits(4), " 0 ", A.d.marginUnits(2), ";&:hover:not(.disabled){color:", T.a.CALENDAR_CARD_CONFIRM_BUTTON_HOVER_TEXT_COLOR, ";background:", T.a.CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BACKGROUND_COLOR, ";border-color:", T.a.CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BORDER_COLOR, ";}&.disabled{opacity:0.5;cursor:not-allowed;}}.event-details{margin-left:", A.d.marginUnits(14), ";text-align:left;}.invite-email-label{display:inline-block;margin:", A.d.marginUnits(2), " 0;}.invite-email{width:90%;line-height:", A.d.legacyLineHeight("32px"), ";border:1px solid ", A.c.fieldBorder, ";border-radius:3px;text-align:center;::placeholder{color:", A.c.secondaryText, ";}}"),
                Ee = Object(i.a)(Z.Event, {
                    target: "e1q07h3z13",
                    label: "CallLogDiv"
                })("display:flex;flex-direction:row;position:relative;border-top:2px solid ", A.c.buttonIconPrimary, ";padding:", A.d.paddingUnits(4), ";border-left:1px solid ", A.c.border, ";border-right:1px solid ", A.c.border, ";border-bottom:1px solid ", A.c.border, ";border-radius:4px;margin-top:", A.d.marginUnits(4), ";padding:", A.d.paddingUnits(4), ";align-items:center;gap:", A.d.legacyGap("10px"), ";"),
                _e = Object(i.a)("div", {
                    target: "e1q07h3z14",
                    label: "CalendarCanceledDiv"
                })(ie, " ", se, " font-size:", A.i.size300, ";color:", A.c.secondaryText, ";position:relative;float:left;width:100%;text-align:center;border:1px solid #e6e9ec;");
            Z.CalendarCanceled = () => {
                const e = Object(o.useContext)(k.a);
                return r.a.createElement(_e, null, r.a.createElement("p", null, e.t("messenger.text.meeting_canceled")))
            };
            const fe = Object(i.a)("div", {
                    target: "e1q07h3z15",
                    label: "AvatarPositioner"
                })({
                    name: "gmuwbf",
                    styles: "display:flex;align-items:center;justify-content:center;"
                }),
                Oe = Object(i.a)("div", {
                    target: "e1q07h3z16",
                    label: "CalendarEventInnerWrapper"
                })("padding:", A.d.paddingUnits(6), " ", A.d.legacyPadding("10px"), ";"),
                Ce = Object(i.a)("div", {
                    target: "e1q07h3z17",
                    label: "AvatarContainer"
                })({
                    name: "b3pn3b",
                    styles: "display:inline-block;position:relative;"
                }),
                Se = Object(i.a)("img", {
                    target: "e1q07h3z18",
                    label: "CheckImg"
                })({
                    name: "f9ygeo",
                    styles: "display:block;position:absolute;bottom:0;right:0;"
                }),
                ye = Object(i.a)("p", {
                    target: "e1q07h3z19",
                    label: "RepName"
                })("margin:", A.d.marginUnits(2), " 0 0 0;text-align:center;font-weight:", A.j.semiBold, ";font-size:", A.i.size500, ";"),
                ke = Object(i.a)("p", {
                    target: "e1q07h3z20",
                    label: "MeetingScheduled"
                })("margin:", A.d.marginUnits(6), " 0 0 0;text-align:center;font-weight:", A.j.semiBold, ";font-size:", A.i.size500, ";"),
                Te = Object(i.a)("p", {
                    target: "e1q07h3z21",
                    label: "MeetingTime"
                })("margin:", A.d.marginUnits(1), " 0 0 0;text-align:center;font-size:", A.i.size500, ";"),
                Ae = Object(i.a)("p", {
                    target: "e1q07h3z22",
                    label: "MeetingDetailsSentTo"
                })("margin:", A.d.marginUnits(1), " 0 0 0;text-align:center;font-size:", A.i.size500, ";color:", A.c.placeholder, ";");
            Z.CalendarEvent = ({
                calendarEvent: e
            }) => {
                var t;
                const n = null === (t = e.calendarEventUsers.find((e => e.eventOwner))) || void 0 === t ? void 0 : t.user,
                    a = Object(o.useContext)(k.a),
                    i = Object(p.a)(Object(F.b)(e.startsAt), "h:mma z, cccc, MMMM do", {
                        locale: B.a[a.locale]
                    });
                return r.a.createElement(Ne, null, r.a.createElement(Oe, null, r.a.createElement(fe, null, r.a.createElement(Ce, null, r.a.createElement(x, {
                    size: 64,
                    url: null === n || void 0 === n ? void 0 : n.avatarUrl
                }), r.a.createElement(Se, {
                    src: z.a
                }))), r.a.createElement(ye, null, null === n || void 0 === n ? void 0 : n.name), r.a.createElement("div", null, r.a.createElement(ke, null, a.t("messenger.text.meeting_scheduled")), r.a.createElement(Te, null, i), r.a.createElement(Ae, null, a.t("messenger.text_sub.meeting_details_sent", {
                    email: e.email
                })))))
            };
            const Ne = Object(i.a)("div", {
                    target: "e1q07h3z23",
                    label: "Wrapper"
                })("box-shadow:0px 0px 4px rgba(0,0,0,0.25);border-radius:8px;", oe, ";float:left;width:100%;"),
                Re = Object(i.a)("div", {
                    target: "e1q07h3z24",
                    label: "InnerWrapper"
                })("padding:", A.d.paddingUnits(6), " ", A.d.paddingUnits(2), " ", A.d.paddingUnits(2), " ", A.d.paddingUnits(2), ";"),
                De = Object(i.a)(_.a, {
                    target: "e1q07h3z25",
                    label: "StyledOfferPage"
                })({
                    name: "y8aj3r",
                    styles: "padding:0;"
                }),
                Ie = Object(i.a)("div", {
                    target: "e1q07h3z26",
                    label: "EmailCollectionContainer"
                })("padding:0 ", A.d.paddingUnits(2), ";text-align:center;"),
                xe = Object(i.a)("span", {
                    target: "e1q07h3z27",
                    label: "TimeDisplay"
                })("font-size:", A.i.size500, ";font-weight:", A.j.semiBold, ";display:block;width:100%;text-align:center;margin-bottom:", A.d.marginUnits(2), ";margin-top:", A.d.marginUnits(6), ";"),
                Me = Object(i.a)("label", {
                    target: "e1q07h3z28",
                    label: "EmailLabel"
                })("font-size:", A.i.size500, ";width:100%;text-align:center;display:block;"),
                Be = Object(i.a)("input", {
                    target: "e1q07h3z29",
                    label: "EmailInput"
                })("width:100%;padding:", A.d.paddingUnits(3), " ", A.d.paddingUnits(4), ";background:", A.c.white, ";border:1px solid #d7dde2;border-radius:4px;margin-top:", A.d.marginUnits(4), ";&::placeholder{color:", A.c.lightTextGray, ";}"),
                Fe = Object(i.a)("button", {
                    target: "e1q07h3z30",
                    label: "ConfirmMeetingButton"
                })((e => e.disabled && "opacity: 0.5; cursor: not-allowed;"), " padding:", A.d.legacyPadding("7px"), " ", A.d.paddingUnits(4), ";width:100%;color:", T.a.THEME_TEXT_COLOR, ";background:", T.a.THEME_PRIMARY_COLOR, ";border-radius:3px;font-size:", A.i.size500, ";margin-top:", A.d.marginUnits(2), ";"),
                we = Object(i.a)("button", {
                    target: "e1q07h3z31",
                    label: "BackButton"
                })("font-size:", A.i.size500, ";width:100%;text-align:center;line-height:", A.d.legacyLineHeight("150%"), ";text-decoration-line:underline;color:", A.c.secondaryText, ";margin-top:", A.d.marginUnits(2), ";"),
                Le = Object(i.a)("div", {
                    target: "e1q07h3z32",
                    label: "ErrorContainer"
                })("margin:0 0 ", A.d.marginUnits(4), " 0;"),
                Pe = Object(i.a)("p", {
                    target: "e1q07h3z33",
                    label: "ErrorMessage"
                })("font-size:", A.i.size500, ";text-align:center;margin:0;"),
                Ue = Object(i.a)("button", {
                    target: "e1q07h3z34",
                    label: "OkayButton"
                })("padding:", A.d.legacyPadding("7px"), " ", A.d.paddingUnits(4), ";width:100%;color:", T.a.THEME_TEXT_COLOR, ";background:", T.a.THEME_PRIMARY_COLOR, ";border-radius:3px;font-size:", A.i.size500, ";margin-top:", A.d.marginUnits(2), ";"),
                je = ({
                    email: e,
                    setEmail: t,
                    validateEmailDomain: n,
                    emailValid: a,
                    calendarEventAvatarUrls: i,
                    repAvatarUrl: s,
                    repName: l,
                    repRole: d,
                    setIsGettingEmail: c,
                    selectedTime: u,
                    confirmTime: m,
                    setUpdatedAvailableSlots: g
                }) => {
                    const p = Object(o.useContext)(k.a),
                        [h, v] = Object(o.useState)(!1),
                        [b, E] = Object(o.useState)();
                    return b ? r.a.createElement(Ie, null, r.a.createElement(Le, null, r.a.createElement(Pe, null, b), r.a.createElement(Ue, {
                        onClick: () => {
                            c(!1)
                        }
                    }, "Okay"))) : r.a.createElement(Ie, null, r.a.createElement(f.a, {
                        calendarEventAvatarUrls: i,
                        repAvatarUrl: s,
                        repName: l,
                        repRole: d,
                        isSmallView: !0,
                        forceShowAvatars: !0
                    }), r.a.createElement(xe, null, r.a.createElement(ce, {
                        time: u,
                        includeTimeZone: !0,
                        alwaysShowDay: !0
                    })), r.a.createElement("form", {
                        onSubmit: e => {
                            e.preventDefault(), v(!0), m().then((() => v(!1)), (e => {
                                E(e.message), e.availabilities && g(e.availabilities)
                            }))
                        }
                    }, r.a.createElement(Me, null, p.t("messenger.text.calendar_invite"), r.a.createElement(Be, {
                        id: "email",
                        type: "email",
                        placeholder: "Email",
                        value: e,
                        onChange: e => t(e.target.value)
                    })), r.a.createElement(W.a, {
                        placement: "top",
                        tooltip: !a && (n ? p.t("messenger.error.business_email") : p.t("messenger.error.email")),
                        delayShow: "250"
                    }, r.a.createElement(Fe, {
                        type: "submit",
                        disabled: h || !a
                    }, h ? p.t("messenger.text.confirming") : p.t("messenger.cta.confirm_meeting"), !a && r.a.createElement("div", {
                        className: "sr-only"
                    }, n ? p.t("messenger.error.business_email") : p.t("messenger.error.email"))))), r.a.createElement(we, {
                        onClick: () => c(!1)
                    }, p.t("messenger.cta.back")))
                };
            Z.BookCalendarEvent = ({
                sendMessage: e,
                message: t,
                validateEmailDomain: n,
                calendarEventAvatarUrls: a,
                repAvatarUrl: i,
                repName: s,
                repRole: l,
                availableSlots: d,
                ...c
            }) => {
                const [u, m] = Object(o.useState)(t.calendarEventInviteEmail || ""), [g, p] = Object(o.useState)(!1), [h, v] = Object(L.c)(u, n), [b, E] = Object(o.useState)(), [_, f] = Object(o.useState)(d), O = Object(o.useContext)(k.a), C = Object(F.d)(t.calendarEventTypeDuration, !1, !0, O.locale);
                return r.a.createElement(r.a.Fragment, null, _ && 0 !== _.length ? r.a.createElement(Ne, null, r.a.createElement(Re, null, g ? r.a.createElement(je, {
                    calendarEventAvatarUrls: a,
                    selectedTime: b,
                    email: u,
                    setEmail: m,
                    emailValid: h,
                    validateEmailDomain: n,
                    repAvatarUrl: i,
                    repName: s,
                    repRole: l,
                    setIsGettingEmail: p,
                    setUpdatedAvailableSlots: f,
                    confirmTime: () => e({
                        type: "calendar_event_pick",
                        calendarEventStartsAt: b,
                        calendarEventInviteEmail: u,
                        botStep: t.botStep,
                        executionStep: t.executionStep,
                        replyToId: t.id
                    })
                }) : r.a.createElement(De, { ...c,
                    calendarEventAvatarUrls: a,
                    repAvatarUrl: i,
                    repName: s,
                    repRole: l,
                    confirmBookingForTimeSlot: e => {
                        E(e.startsAt), p(!0)
                    },
                    source: "conversation",
                    availableSlots: _,
                    isTimeZoneAbbr: !0,
                    duration: C,
                    hideBoxShadow: !0
                }))) : r.a.createElement(be, null, r.a.createElement("div", null, t.calendarEventAvatarUrls.length > 0 && r.a.createElement(K.a, {
                    avatarUrls: t.calendarEventAvatarUrls
                }), r.a.createElement("p", null, O.t("messenger.meeting_booker.no_available_slots")))))
            }, Z.MeetingMessage = Object(C.a)(k.a, "i18n")((({
                meeting: e
            }) => {
                const t = 1e3 * e.duration,
                    {
                        hours: n,
                        minutes: a = 0,
                        seconds: i = 0
                    } = Object(m.a)({
                        start: 0,
                        end: t
                    }),
                    o = [n ? `${n}h` : "", `${a}m`, `${i}s`].filter(Boolean).join(" ");
                return r.a.createElement(W.a, {
                    placement: "auto",
                    tooltip: Object(p.a)(Object(g.a)(e.startedAt), "eee, MMM d, hh:mm a zzz"),
                    delayShow: "250"
                }, r.a.createElement(Ee, null, r.a.createElement(G.CallIcon, null, r.a.createElement(j, {
                    width: 16,
                    height: 16,
                    fill: A.c.white
                })), r.a.createElement(G.CallInfo, null, r.a.createElement(G.CallInfoLabel, null, "Call with ", e.user.name), r.a.createElement(G.CallInfoDuration, null, "Duration: ", o))))
            })), Z.PicklistField = Object(i.a)((({
                className: e,
                message: t,
                sendMessage: n,
                isBubbleEntry: i,
                index: o,
                noOpOnClick: l
            }) => {
                const d = t.layout.stacked ? "stacked" : "inline",
                    c = t.layout.expand ? "expand" : "fit";
                if (i) {
                    const i = {
                            tension: 500,
                            friction: 40
                        },
                        u = t.layout.card || t.fake || t.existing || 0 !== o,
                        m = t.fieldValues.map(((e, a) => r.a.createElement(s.a, {
                            native: !0,
                            key: e.value,
                            from: {
                                x: 500
                            },
                            to: {
                                x: 0
                            },
                            delay: 500 + (t.layout.stacked ? 10 * a : 0),
                            config: i,
                            immediate: u
                        }, (({
                            x: t
                        }) => r.a.createElement(s.c.button, {
                            onClick: l ? void 0 : () => n(e.label, e.value),
                            style: {
                                transform: t.interpolate((e => `translate3d(${e}px,0,0)`))
                            },
                            "data-backend-test-id": "picklist-option"
                        }, e.label)))));
                    return r.a.createElement("div", {
                        className: Object(a.c)(e, d, c)
                    }, m)
                }
                return r.a.createElement(ze, {
                    className: Object(a.c)(e, d, c),
                    message: t,
                    sendMessage: n,
                    noOpOnClick: l
                })
            }), {
                target: "e1q07h3z35"
            })("text-align:right;display:flex;gap:", A.d.legacyGap("8px"), ";flex-wrap:wrap;justify-content:flex-end;position:relative;", (({
                isBubbleEntry: e
            }) => !e && Object(a.b)(ie, " float:right;width:100%;")), " &.stacked{flex-direction:column;& button{align-self:flex-end;}&.expand{& button{align-self:auto;text-align:center;}}}&.fit button{max-width:90%;align-self:flex-end;}& button{color:", T.a.PICKLIST_FIELD_BUTTON_TEXT_COLOR, ";background-color:", T.a.PICKLIST_FIELD_BUTTON_BACKGROUND_COLOR, ";border:1px solid ", T.a.PICKLIST_FIELD_BUTTON_BORDER_COLOR, ";border-radius:", T.a.BUTTON_BORDER_RADIUS, ";padding:", A.d.paddingUnits(2), " ", A.d.paddingUnits(4), ";text-align:left;line-height:", A.d.legacyLineHeight("20px"), ";&:hover:not([disabled]),&.selected{background-color:", T.a.PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BACKGROUND_COLOR, ";border-color:", T.a.PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BORDER_COLOR, ";color:", T.a.PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_TEXT_COLOR, ";}&.selected{cursor:auto;}&.pre-transition-button{padding:", A.d.paddingUnits(2), " 0;span{display:inline-block;padding:0 ", A.d.paddingUnits(4), ";}}}");
            class ze extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        status: "initial",
                        selectedValue: null
                    }, this.picklistRef = r.a.createRef(), this.originalStyles = [], this.originalHeight = 0, this.sendMessageTimeout = null, this.setOriginalStyles = () => {
                        this.isInitial && this.picklistRef.current && (this.originalStyles = Array.from(this.picklistRef.current.children).map((e => ({
                            position: [this.picklistRef.current.offsetWidth - e.offsetLeft - e.offsetWidth - 8, e.offsetTop],
                            width: e.getBoundingClientRect().width,
                            finalWidth: e.firstChild.getBoundingClientRect().width
                        }))), this.originalHeight = this.picklistRef.current.offsetHeight)
                    }
                }
                get isInitial() {
                    return "initial" === this.state.status
                }
                get isTransitioning() {
                    return "transitioning" === this.state.status
                }
                get isFinal() {
                    return "final" === this.state.status
                }
                componentDidMount() {
                    this.setOriginalStyles()
                }
                componentDidUpdate() {
                    this.setOriginalStyles(), this.isTransitioning && this.setState({
                        status: "final"
                    })
                }
                componentWillUnmount() {
                    clearTimeout(this.sendMessageTimeout)
                }
                render() {
                    let {
                        fieldValues: e
                    } = this.props.message;
                    const t = this.props.message.layout.expand && this.props.message.layout.stacked;
                    if (this.isInitial) return r.a.createElement(E.a.Consumer, null, (({
                        isFocusVisible: n
                    }) => r.a.createElement("div", {
                        className: this.props.className,
                        ref: this.picklistRef
                    }, e.map(((e, a) => r.a.createElement("button", {
                        autoFocus: 0 === a && n,
                        disabled: !this.props.sendMessage,
                        key: `picklist-option-${a}`,
                        className: t ? "pre-transition-button" : "",
                        "data-backend-test-id": "picklist-option",
                        onClick: this.props.noOpOnClick ? void 0 : () => {
                            clearTimeout(this.sendMessageTimeout), this.sendMessageTimeout = setTimeout((() => {
                                this.props.sendMessage(e.label, e.value)
                            }), 800), this.setState({
                                status: "transitioning",
                                selectedValue: e
                            })
                        }
                    }, r.a.createElement("span", {
                        "data-backend-test-id": `picklist-option-${a}`
                    }, e.label)))))));
                    if (this.isFinal) {
                        let n = null;
                        e = e.filter(((e, a) => {
                            if (this.state.selectedValue.value === e.value) {
                                if (({
                                        finalWidth: n
                                    } = this.originalStyles[a]), t) {
                                    const e = .8 * this.originalStyles[a].width;
                                    n > e && (n = e)
                                }
                                return !0
                            }
                            return !1
                        })).map((e => ({
                            xy: [0, 0],
                            opacity: 1,
                            width: n,
                            fv: e
                        })))
                    } else e = e.map(((e, t) => ({
                        xy: this.originalStyles[t].position,
                        width: this.originalStyles[t].width,
                        opacity: 1,
                        fv: e
                    })));
                    return r.a.createElement("div", {
                        className: this.props.className
                    }, r.a.createElement("div", {
                        className: Object(a.b)("width:100%;height:", A.d.legacySize(`${this.originalHeight}px`), ";;label:MessengerPicklistBubbles;")
                    }, r.a.createElement(s.b, {
                        native: !0,
                        items: e,
                        keys: e => e.fv.value,
                        from: ({
                            xy: e,
                            width: n,
                            opacity: a
                        }) => ({
                            xy: e,
                            width: t ? n : null,
                            opacity: a
                        }),
                        enter: ({
                            xy: e,
                            width: n,
                            opacity: a
                        }) => ({
                            xy: e,
                            width: t ? n : null,
                            opacity: a
                        }),
                        leave: ({
                            xy: e,
                            width: t,
                            opacity: n
                        }) => ({
                            xy: e,
                            opacity: 0
                        }),
                        update: e => async (n, a, i) => {
                            await Object(w.b)(200), await n({
                                xy: e.xy,
                                width: t ? e.width : null,
                                opacity: 1
                            })
                        }
                    }, (e => ({
                        xy: t,
                        ...n
                    }) => r.a.createElement(s.c.button, {
                        className: this.state.selectedValue.value === e.fv.value ? "selected" : "",
                        style: {
                            position: "absolute",
                            top: 0,
                            right: 0,
                            transform: t.interpolate(((e, t) => `translate3d(-${e}px,${t}px,0)`)),
                            ...n
                        }
                    }, e.fv.label)))))
                }
            }
            Z.BooleanField = Z.PicklistField;
            const Ve = "3px",
                Ge = Object(i.a)(Object(C.a)(k.a, "i18n")((e => r.a.createElement("div", {
                    className: e.className
                }, !e.isBubbleEntry && r.a.createElement("label", {
                    htmlFor: e.id
                }, e.inputFieldLabel), r.a.createElement("div", {
                    className: "field-wrapper"
                }, e.isBubbleEntry && r.a.createElement("label", {
                    htmlFor: e.id
                }, e.inputFieldLabel), e.children, !e.isBubbleEntry && r.a.createElement("button", {
                    onClick: e.onSubmit,
                    "data-backend-test-id": "field-submit"
                }, e.i18n.t("messenger.cta.send"))), e.validationError && r.a.createElement("span", {
                    className: "error"
                }, e.validationError)))), {
                    target: "e1q07h3z36",
                    label: "BaseStringField"
                })("width:100%;", (({
                    isBubbleEntry: e
                }) => !e && Object(a.b)(ie, " float:right;;label:BaseStringField;")), " label{border:none;font-size:", A.i.size300, ";color:", A.c.secondaryText, ";", (e => e.isBubbleEntry ? `margin: ${A.d.legacyMargin("7px")} ${A.d.marginUnits(4)} 0;` : ""), "}& .field-wrapper{display:flex;", (e => e.isBubbleEntry ? `border-top: 1px solid ${A.c.border};\n      flex-direction: column;` : Object(a.b)("margin:", A.d.marginUnits(1), " 0;;label:BaseStringField;")), " width:100%;vertical-align:top;> *{vertical-align:top;}>:first-child{flex-grow:1;}input{border:", (({
                    isBubbleEntry: e
                }) => e ? "none" : `1px solid ${A.c.fieldBorder}`), ";border-radius:", Ve, ";border-top-right-radius:0px;border-bottom-right-radius:0px;border-right:none;font-size:", A.i.size500, ";min-width:", A.d.legacySize("150px"), ";", (e => e.isBubbleEntry ? `padding: ${A.d.legacyPadding("1px")} ${A.d.paddingUnits(4)} ${A.d.legacyPadding("20px")};` : `padding: ${A.d.paddingUnits(2)} ${A.d.paddingUnits(4)};`), "}button{background-color:", T.a.STRING_FIELD_SEND_BUTTON_BACKGROUND_COLOR, ";color:", T.a.STRING_FIELD_SEND_BUTTON_TEXT_COLOR, ";border:1px solid ", T.a.STRING_FIELD_SEND_BUTTON_BORDER_COLOR, ";border-radius:", Ve, ";border-bottom-left-radius:0px;border-top-left-radius:0px;padding:0 ", A.d.paddingUnits(4), ";flex-shrink:0;&:hover{background-color:", T.a.STRING_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR, ";color:", T.a.STRING_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR, ";border-color:", T.a.STRING_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR, ";}}}& .error{font-size:", A.i.size300, ";color:", A.c.dangerRed, ";text-align:right;margin-right:", A.d.marginUnits(4), ";padding-bottom:", A.d.paddingUnits(2), ";display:block;}"),
                $e = ({
                    message: e,
                    componentId: t,
                    isBubbleEntry: n,
                    validationError: a,
                    submit: i,
                    inputRef: s,
                    type: l,
                    autoComplete: d
                }) => {
                    const c = Object(o.useContext)(k.a),
                        u = null != e.placeholder ? e.placeholder : c.t("messenger.placeholder.reply");
                    return Object(o.useEffect)((() => {
                        var e;
                        n || (null === (e = s.current) || void 0 === e || e.focus())
                    }), [n, s]), r.a.createElement(Ge, {
                        id: t,
                        inputFieldLabel: e.inputFieldLabel,
                        isBubbleEntry: n,
                        validationError: a,
                        onSubmit: i
                    }, r.a.createElement(E.a.Consumer, null, (() => r.a.createElement("input", {
                        id: t,
                        ref: s,
                        type: l || "text",
                        placeholder: u,
                        onKeyPress: e => "Enter" === e.key && i(),
                        name: e.fieldName,
                        autoComplete: d || "off"
                    }))))
                },
                He = () => {
                    const [e] = Object(o.useState)(!0), [t, n] = Object(o.useState)(null), [a] = Object(o.useState)(b()());
                    return {
                        isValid: e,
                        validationError: t,
                        setValidationError: n,
                        componentId: a,
                        inputRef: Object(o.useRef)()
                    }
                },
                We = (e, t) => {
                    const [n] = Object(o.useState)((() => {
                        var n;
                        return (null === (n = e.validation) || void 0 === n ? void 0 : n.regex) && new RegExp(e.validation.regex, e.validation.caseSensitive ? "" : "i") || t || /[^\s]+/
                    }));
                    return n
                };
            Z.StringField = ({
                message: e,
                validation: t,
                validationError: n,
                sendMessage: a,
                ...i
            }) => {
                const {
                    isValid: s,
                    validationError: l,
                    setValidationError: d,
                    componentId: c,
                    inputRef: u
                } = He(), m = Object(o.useContext)(k.a), g = We(e, t);
                return r.a.createElement($e, {
                    isValid: s,
                    validationError: l,
                    submit: () => {
                        var t;
                        if (g.test(null === (t = u.current) || void 0 === t ? void 0 : t.value)) {
                            var i;
                            d(null), a(null === (i = u.current) || void 0 === i ? void 0 : i.value.trim())
                        } else {
                            var o;
                            const t = (null === (o = e.validation) || void 0 === o ? void 0 : o.error) || n || m.t("messenger.error.default");
                            d(t)
                        }
                    },
                    componentId: c,
                    inputRef: u,
                    message: e,
                    ...i
                })
            };
            Z.EmailField = ({
                message: e,
                sendMessage: t,
                ...n
            }) => {
                const {
                    isValid: a,
                    validationError: i,
                    setValidationError: s,
                    componentId: l,
                    inputRef: d
                } = He(), {
                    t: c
                } = Object(o.useContext)(k.a);
                return r.a.createElement($e, {
                    autoComplete: "email",
                    inputRef: d,
                    submit: () => {
                        var n;
                        const [a, i] = Object(L.c)(null === (n = d.current) || void 0 === n ? void 0 : n.value, e.validateEmailDomain);
                        var o;
                        a ? (s(null), t(null === (o = d.current) || void 0 === o ? void 0 : o.value.trim())) : s(c("personal" === i ? "messenger.error.business_email" : "messenger.error.email"))
                    },
                    isValid: a,
                    validationError: i,
                    componentId: l,
                    message: e,
                    ...n
                })
            }, Z.PhoneField = (($ = class extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        isValid: !0,
                        validationError: null,
                        value: ""
                    }, this.phoneInputRef = r.a.createRef(), this.submit = () => {
                        this.state.isValid && this.state.value ? (this.setState({
                            validationError: null
                        }), this.props.sendMessage(this.phoneInputRef.current.value, this.state.value)) : this.setState({
                            validationError: this.context.t("messenger.error.phone")
                        })
                    }
                }
                render() {
                    var e;
                    const t = this.props.message.defaultCountryCode || (null === (e = this.props.config) || void 0 === e ? void 0 : e.countryCode);
                    return r.a.createElement(Ge, {
                        isBubbleEntry: this.props.isBubbleEntry,
                        validationError: this.state.validationError,
                        onSubmit: this.submit
                    }, r.a.createElement(X.a, {
                        key: `phone-input-${t}`,
                        ref: this.phoneInputRef,
                        initialCountry: t,
                        onEnter: this.submit,
                        value: this.state.value,
                        onChange: ({
                            isValid: e,
                            value: t
                        }) => {
                            this.setState({
                                isValid: e,
                                value: t
                            })
                        }
                    }))
                }
                componentDidMount() {
                    var e;
                    this.props.isBubbleEntry || (null === (e = this.phoneInputRef.current) || void 0 === e || e.focus())
                }
            }).contextType = k.a, $);
            Z.NameField = ({
                message: e,
                sendMessage: t,
                validation: n = L.a,
                validationError: a,
                ...i
            }) => {
                const {
                    isValid: s,
                    validationError: l,
                    setValidationError: d,
                    componentId: c,
                    inputRef: u
                } = He(), {
                    t: m
                } = Object(o.useContext)(k.a), g = We(e, n);
                return r.a.createElement($e, {
                    autoComplete: "name",
                    inputRef: u,
                    submit: () => {
                        var n, i, o, r;
                        if (g.test(null === (n = u.current) || void 0 === n ? void 0 : n.value))
                            if (e.validateFullName && !Object(S.a)(null === (i = u.current) || void 0 === i ? void 0 : i.value)) d(m("messenger.error.name"));
                            else if (null !== (o = u.current) && void 0 !== o && o.value && g.test(null === (r = u.current) || void 0 === r ? void 0 : r.value)) {
                            var s;
                            d(null), t(null === (s = u.current) || void 0 === s ? void 0 : s.value.trim())
                        } else {
                            var l;
                            const t = (null === (l = e.validation) || void 0 === l ? void 0 : l.error) || a || m("messenger.error.default");
                            d(t)
                        } else d(m("messenger.error.valid_name"))
                    },
                    isValid: s,
                    validationError: l,
                    componentId: c,
                    message: e,
                    ...i
                })
            }, Z.CompanyField = e => r.a.createElement(Z.StringField, {
                autoComplete: "organization",
                ...e
            }), Z.DecimalField = Object(C.a)(k.a, "i18n")((e => r.a.createElement(Z.StringField, {
                inputMode: "numeric",
                validation: L.b,
                validationError: e.i18n.t("messenger.error.number"),
                ...e
            }))), Z.TextField = Object(i.a)(((H = class extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        text: ""
                    }
                }
                render() {
                    return r.a.createElement(E.a.Consumer, null, (({
                        isFocusVisible: e
                    }) => r.a.createElement("div", {
                        className: Object(a.c)("focusable", this.props.className)
                    }, r.a.createElement(l.a, {
                        inputRef: e => this.textareaRef = e,
                        value: this.state.text,
                        onChange: e => this.setState({
                            text: e.target.value
                        }),
                        placeholder: this.props.message.placeholder,
                        minRows: 1
                    }), r.a.createElement("button", {
                        disabled: !this.state.text.trim(),
                        onClick: () => this.props.sendMessage(this.state.text.trim())
                    }, this.context.t("messenger.cta.send")))))
                }
                componentDidMount() {
                    this.props.isBubbleEntry || this.textareaRef.focus()
                }
            }).contextType = k.a, H), {
                target: "e1q07h3z37"
            })("width:100%;text-align:right;padding:", A.d.paddingUnits(2), ";", (({
                isBubbleEntry: e
            }) => e ? Object(a.b)("border-top:1px solid ", A.c.border, ";textarea{width:100%;}") : Object(a.b)(ie, " float:right; border:1px solid ", A.c.fieldBorder, ";border-radius:", Ve, ";")), " textarea{display:block;width:100%;padding:0 ", A.d.paddingUnits(2), ";text-align:left;resize:none;margin-bottom:", A.d.marginUnits(2), ";&::placeholder{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}}button{background-color:", T.a.TEXT_FIELD_SEND_BUTTON_BACKGROUND_COLOR, ";color:", T.a.TEXT_FIELD_SEND_BUTTON_TEXT_COLOR, ";border:1px solid ", T.a.TEXT_FIELD_SEND_BUTTON_BORDER_COLOR, ";padding:", A.d.paddingUnits(2), " ", A.d.paddingUnits(4), ";border-radius:", Ve, ";&:hover{background-color:", T.a.TEXT_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR, ";color:", T.a.TEXT_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR, ";border-color:", T.a.TEXT_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR, ";}}");
            const Ke = e => !(null == e || e.source !== M.a.AutoPounce || !e.isOwn),
                qe = e => !(!Xe(e) || !e.isOwn),
                Ye = e => !(!Xe(e) || e.isOwn),
                Xe = e => !(null == e || "system" !== e.type || "ap_rep_unavailable" !== e.eventType);
            t.e = Z
        },
        262: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MessengerButtonEntryFactory", (function() {
                return f
            })), n.d(t, "EntryWrapper", (function() {
                return O
            })), n.d(t, "MessageNub", (function() {
                return C
            }));
            var a, i = n(2),
                o = n(5),
                r = n(0),
                s = n.n(r),
                l = n(181),
                d = n.n(l),
                c = n(57),
                u = n(22),
                m = n(1),
                g = n(350),
                p = n(26),
                h = n(115),
                v = n(102),
                b = n(211);
            const E = Object(i.b)("&:before{", u.o, " ", m.e, " content:'';z-index:-1;border-radius:4px;};label:shadowBefore;"),
                _ = Object(i.b)("position:relative;", E, ";;label:shadow;");
            class f extends g.a {
                constructor(e) {
                    super(), this.config = void 0, this.textMessage = (e, {
                        conversation: t,
                        openMessenger: n,
                        index: a,
                        showMessageNub: i,
                        entryWrapperClass: o
                    }) => {
                        var r, l, d, c;
                        const u = null !== (r = this.config) && void 0 !== r && r.appexchange ? ` (${this.config.appexchangeCompanyName})` : "",
                            m = [],
                            g = 0 === a && e.userId && s.a.createElement(b.UserDetails, {
                                className: "user-details",
                                url: (null === (l = t.user) || void 0 === l ? void 0 : l.avatarUrl) || void 0,
                                name: `${null===(d=t.user)||void 0===d?void 0:d.name}${u}`,
                                description: (null === (c = t.user) || void 0 === c ? void 0 : c.jobTitle) || void 0,
                                isButtonEntry: !0
                            });
                        return m.push(s.a.createElement(O, {
                            key: `message-${e.id}`,
                            entryWrapperClass: o
                        }, s.a.createElement(S, {
                            tabIndex: -1,
                            messageHeader: g,
                            message: e,
                            openMessenger: () => n(),
                            showMessageNub: i,
                            "data-clickable": !0,
                            className: "focusable"
                        }))), m
                    }, this.fieldRequestMessage = (e, t) => {
                        const {
                            customizablePrivacyPolicyEnabled: n = !1
                        } = t;
                        let a;
                        if (e.onlyShowMessage) a = S;
                        else switch (e.fieldType) {
                            case "picklist":
                            case "boolean":
                                a = k;
                                break;
                            default:
                                a = y
                        }
                        return s.a.createElement(O, {
                            key: `field-${e.id}`,
                            entryWrapperClass: t.entryWrapperClass
                        }, s.a.createElement(a, {
                            openMessenger: t.openMessenger,
                            message: e,
                            sendMessage: (n, a) => {
                                t.sendMessage({
                                    type: "field_entry",
                                    botStep: e.botStep,
                                    executionStep: e.executionStep,
                                    text: n,
                                    value: a
                                })
                            },
                            config: this.config,
                            index: t.index,
                            showMessageNub: t.showMessageNub,
                            customizablePrivacyPolicyEnabled: n
                        }))
                    }, this.config = e
                }
            }
            const O = Object(o.a)((({
                    className: e,
                    children: t,
                    entryWrapperClass: n
                }) => s.a.createElement("div", {
                    className: Object(i.c)(e, n)
                }, t)), {
                    target: "enbnlnv0",
                    label: "EntryWrapper"
                })("font-size:", m.d.legacyFontSize(`${p.a}px`), ";line-height:", p.c, ";width:", m.d.size("300px"), ";margin-top:", m.d.marginUnits(2), ";body.is-mobile &{font-size:", m.i.size500, ";line-height:inherit;}"),
                C = Object(o.a)("span", {
                    target: "enbnlnv1",
                    label: "MessageNub"
                })("transform:translateX(-6px) rotate(45deg);position:absolute;display:block;width:", m.d.legacySize("10px"), ";height:", m.d.legacySize("10px"), ";bottom:10px;right:-10px;background-color:#ffff;pointer-events:none;z-index:-1;border-radius:3px;", E),
                S = Object(o.a)((({
                    message: e,
                    messageHeader: t,
                    openMessenger: n,
                    onlyMessageOpensMessenger: a,
                    showMessageNub: o,
                    bubbleClassName: r,
                    className: l,
                    children: d,
                    tabIndex: c
                }) => s.a.createElement("div", {
                    "data-clickable": !0,
                    "data-backend-test-id": "message-bubble",
                    className: Object(i.c)(l, r),
                    tabIndex: c,
                    ...a || {
                        onClick: n,
                        onKeyDown: e => "Enter" === e.key && n()
                    }
                }, t, s.a.createElement("div", {
                    "data-clickable": !0,
                    className: "message",
                    ...a ? {
                        onClick: n
                    } : {}
                }, s.a.createElement(h.b, null, null === e || void 0 === e ? void 0 : e.text)), d, o && s.a.createElement(C, null))), {
                    target: "enbnlnv2",
                    label: "MessageBubble"
                })(_, ";width:100%;background-color:#fff;border-radius:4px;cursor:pointer;position:relative;text-align:left;.user-details{padding:", m.d.paddingUnits(4), " ", m.d.paddingUnits(4), " 0;}.message{padding:", m.d.paddingUnits(4), ";word-break:break-word;}.country-list{height:", m.d.size("80px"), ";}"),
                y = ({
                    message: e,
                    sendMessage: t,
                    openMessenger: n,
                    config: a,
                    showMessageNub: i
                }) => {
                    const o = p.e[`${e.fieldType.camelize()}Field`];
                    return s.a.createElement(S, {
                        openMessenger: n,
                        message: e,
                        showMessageNub: i,
                        onlyMessageOpensMessenger: !0,
                        tabIndex: -1,
                        className: "focusable"
                    }, s.a.createElement(o, {
                        isBubbleEntry: !0,
                        message: e,
                        sendMessage: t,
                        config: a
                    }))
                },
                k = Object(o.a)(((a = class extends s.a.Component {
                    constructor(...e) {
                        super(...e), this.state = {
                            fieldEntry: null
                        }, this.timer = null
                    }
                    componentDidMount() {
                        const {
                            message: e,
                            sendMessage: t,
                            index: n
                        } = this.props;
                        if (e.fake) return;
                        const a = p.e[`${e.fieldType.camelize()}Field`];
                        this.timer = setTimeout((() => {
                            this.setState({
                                fieldEntry: s.a.createElement(a, {
                                    isBubbleEntry: !0,
                                    message: e,
                                    sendMessage: t,
                                    index: n
                                })
                            })
                        }), e.existing ? 0 : 1300)
                    }
                    componentWillUnmount() {
                        this.timer && clearTimeout(this.timer)
                    }
                    render() {
                        const {
                            message: e,
                            sendMessage: t,
                            openMessenger: n,
                            className: a,
                            index: i,
                            showMessageNub: o,
                            customizablePrivacyPolicyEnabled: r
                        } = this.props, l = p.e[`${e.fieldType.camelize()}Field`], c = e.layout.card ? "display-card" : "display-float";
                        return e.layout.card ? s.a.createElement("div", {
                            className: a
                        }, s.a.createElement(S, {
                            message: e,
                            openMessenger: n,
                            bubbleClassName: c,
                            showMessageNub: o,
                            tabIndex: -1
                        }, s.a.createElement(l, {
                            isBubbleEntry: !0,
                            message: e,
                            sendMessage: t
                        }), this.context.themeDataValues.privacyPolicyUrl && s.a.createElement("div", {
                            className: "privacy-policy-card"
                        }, s.a.createElement(v.MessengerFooter, {
                            showBranding: !1,
                            privacyPolicyUrl: this.context.themeDataValues.privacyPolicyUrl,
                            privacyPolicyText: this.context.themeDataValues.privacyPolicyText,
                            privacyDisclosures: this.context.themeDataValues.privacyDisclosures,
                            customizablePrivacyPolicyEnabled: r,
                            onItemClick: e => e.stopPropagation()
                        })))) : s.a.createElement("div", {
                            className: a
                        }, s.a.createElement(S, {
                            openMessenger: n,
                            message: e,
                            bubbleClassName: c,
                            showMessageNub: o,
                            tabIndex: -1
                        }, this.context.themeDataValues.privacyPolicyUrl && s.a.createElement("div", {
                            className: "privacy-policy-floating"
                        }, s.a.createElement(v.MessengerFooter, {
                            showBranding: !1,
                            privacyPolicyUrl: this.context.themeDataValues.privacyPolicyUrl,
                            privacyPolicyText: this.context.themeDataValues.privacyPolicyText,
                            privacyDisclosures: this.context.themeDataValues.privacyDisclosures,
                            customizablePrivacyPolicyEnabled: r,
                            onItemClick: e => e.stopPropagation()
                        }))), e.fake ? s.a.createElement(l, {
                            isBubbleEntry: !0,
                            message: e,
                            sendMessage: t
                        }) : s.a.createElement(d.a, {
                            className: 0 !== i ? "" : "first-message",
                            transitionName: "picklist-bubbles",
                            transitionLeave: !1,
                            transitionEnterTimeout: 600,
                            transitionEnter: !e.existing
                        }, this.state.fieldEntry))
                    }
                }).contextType = c.a, a), {
                    target: "enbnlnv3",
                    label: "PicklistFieldBubble"
                })(S, ".display-float{margin-bottom:", m.d.marginUnits(4), ";}", p.e.PicklistField, " button{", u.o, ";box-shadow:none;}", S, ".display-card{width:", m.d.size("300px"), ";position:relative;padding:", m.d.paddingUnits(4), ";text-align:center;color:#333;background:#fff;.message{text-align:left;margin-bottom:", m.d.marginUnits(4), ";padding:0;}button{box-shadow:none;}}.picklist-bubbles-enter{opacity:0;max-height:0;}.first-message{.picklist-bubbles-enter{opacity:1;}}.picklist-bubbles-enter.picklist-bubbles-enter-active{opacity:1;max-height:", m.d.legacySize("9999px"), ";transition:opacity 100ms ease-in 500ms,max-height 500ms ease-in;}.privacy-policy-card{padding-top:", m.d.paddingUnits(3), ";}.privacy-policy-floating{padding-inline:", m.d.paddingUnits(3), ";padding-bottom:", m.d.paddingUnits(3), ";}")
        },
        263: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MessengerHeaderBar", (function() {
                return g
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(68),
                s = n(14),
                l = n(63),
                d = n(57),
                c = n(93),
                u = n(211),
                m = n(134);
            const g = ({
                className: e,
                owner: t,
                activeMeeting: n,
                toggleFeedback: i,
                disableClose: g,
                startInboundVoice: p,
                allowInboundVoice: h,
                updateExpanded: v,
                appexchange: b,
                appexchangeCompanyName: E,
                reportEmptyTitle: _ = !0,
                onCloseMessenger: f
            }) => {
                const {
                    themeStyles: O,
                    themeDataValues: C
                } = Object(d.c)(), S = null !== h && void 0 !== h ? h : C.enableInboundVoice, y = Object(s.c)(), k = b && E ? t ? `${t.name} (${E})` : E : t ? t.name : C.headerTitle;
                return _ && !k && Object(r.c)("MessengerHeaderBar used with empty title calculated ", {
                    extra: {
                        appexchange: b,
                        appexchangeCompanyName: E,
                        owner: t
                    }
                }), o.a.createElement("div", {
                    className: Object(a.c)(m.classes.root, e),
                    "data-backend-test-id": "messenger-header"
                }, o.a.createElement("div", {
                    className: m.classes.controls.root
                }, o.a.createElement(u.UserDetails, {
                    className: m.classes.controls.userDetails,
                    url: t ? t.avatarUrl : O.companyLogoImageUrl,
                    name: k,
                    description: t && t.jobTitle
                }), o.a.createElement("div", {
                    className: m.classes.controls.buttons
                }, n ? null : o.a.createElement(o.a.Fragment, null, S && o.a.createElement(c.a, {
                    tooltip: y.t("messenger.text.call_us"),
                    placement: "bottom"
                }, o.a.createElement("button", {
                    onClick: p,
                    "data-backend-test-id": "messenger-header-voice-button",
                    "aria-label": y.t("messenger.text.call_us"),
                    className: m.classes.controls.button
                }, o.a.createElement(l.b.StartCall, {
                    "aria-label": y.t("messenger.text.call_us"),
                    height: 16
                }))), i && o.a.createElement(c.a, {
                    tooltip: y.t("messenger.text.rate_conversation"),
                    placement: "bottom"
                }, o.a.createElement("button", {
                    onClick: i,
                    "aria-label": y.t("messenger.text.rate_conversation"),
                    className: m.classes.controls.button
                }, o.a.createElement(l.b.Feedback, {
                    "aria-label": y.t("messenger.text.rate_conversation"),
                    height: 16
                }))))), !g && o.a.createElement("button", {
                    className: m.classes.controls.closeButton,
                    "data-backend-test-id": "messenger-close",
                    "aria-label": y.t("messenger.text.close_messenger"),
                    onClick: () => {
                        null === v || void 0 === v || v(!1), null === f || void 0 === f || f()
                    }
                }, o.a.createElement(l.b.Times, {
                    height: 12
                }))))
            }
        },
        267: function(e, t, n) {
            "use strict";
            n.d(t, "c", (function() {
                return l
            })), n.d(t, "b", (function() {
                return d
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(575),
                s = n(1);
            const l = Object(a.b)("background:", s.c.primaryText, ";color:white;font-size:", s.i.size300, ";border:1px solid rgba(0,0,0,0.85);border-radius:3px;box-shadow:0 5px 10px rgba(0,0,0,0.2);display:flex;flex-direction:column;margin:", s.d.legacyMargin("6.4px"), ";padding:", s.d.paddingUnits(3), ";transition:opacity 0.3s;z-index:2147483643;max-width:", s.d.legacySize("350px"), ";line-height:", s.k.baseLineHeight, ";white-space:pre-wrap;p:first-child{margin-top:0;}p:last-child{margin-bottom:0;};label:tooltipWrapper;"),
                d = Object(a.b)("height:", s.d.size("8px"), ";position:absolute;width:", s.d.size("16px"), ';&::before{border-style:solid;content:"";display:block;height:0;margin:auto;width:0;}&::after{border-style:solid;content:"";display:block;height:0;margin:auto;position:absolute;width:0;}&[data-placement*="bottom"]{height:', s.d.size("16px"), ";left:0;margin-top:", s.d.legacyMargin("-6.4px"), ";top:0;width:", s.d.size("16px"), ';}&[data-placement*="bottom"]::before{border-color:transparent transparent ', s.c.primaryText, " transparent;border-width:0 ", s.d.size("8px"), " ", s.d.legacySize("6.4px"), " ", s.d.size("8px"), ';position:absolute;}&[data-placement*="bottom"]::after{border-color:transparent transparent ', s.c.primaryText, " transparent;border-width:0 ", s.d.size("8px"), " ", s.d.legacySize("6.4px"), " ", s.d.size("8px"), ';}&[data-placement*="top"]{bottom:0;height:', s.d.size("8px"), ";left:0;margin-bottom:", s.d.marginUnits(-2), ";width:", s.d.size("16px"), ';}&[data-placement*="top"]::before{border-color:', s.c.primaryText, " transparent transparent transparent;border-width:", s.d.legacySize("6.4px"), " ", s.d.size("8px"), " 0 ", s.d.size("8px"), ';position:absolute;top:1px;}&[data-placement*="top"]::after{border-color:', s.c.primaryText, " transparent transparent transparent;border-width:", s.d.legacySize("6.4px"), " ", s.d.size("8px"), " 0 ", s.d.size("8px"), ';}&[data-placement*="right"]{height:', s.d.size("16px"), ";left:0;margin-left:", s.d.legacyMargin("-11.2px"), ";width:", s.d.size("16px"), ';}&[data-placement*="right"]::before{border-color:transparent ', s.c.primaryText, " transparent transparent;border-width:", s.d.size("8px"), " ", s.d.legacySize("6.4px"), " ", s.d.size("8px"), ' 0;}&[data-placement*="right"]::after{border-color:transparent ', s.c.primaryText, " transparent transparent;border-width:", s.d.size("8px"), " ", s.d.legacySize("6.4px"), " ", s.d.size("8px"), ' 0;left:6px;top:0;}&[data-placement*="left"]{height:', s.d.size("16px"), ";margin-right:", s.d.legacyMargin("-11.2px"), ";right:0;width:", s.d.size("16px"), ';}&[data-placement*="left"]::before{border-color:transparent transparent transparent ', s.c.primaryText, ";border-width:", s.d.size("8px"), " 0 ", s.d.size("8px"), " ", s.d.legacySize("6.4px"), ';}&[data-placement*="left"]::after{border-color:transparent transparent transparent ', s.c.primaryText, ";border-width:", s.d.size("8px"), " 0 ", s.d.size("8px"), " ", s.d.legacySize("6.4px"), ";left:4px;top:0;};label:tooltipArrow;");
            t.a = ({
                tooltip: e,
                enabled: t,
                outerElementType: n = "span",
                children: i,
                hideArrow: s,
                trigger: c = "hover",
                tooltipClassName: u,
                triggerClassName: m,
                outerElementClassName: g,
                ...p
            }) => {
                const h = !!e && (void 0 === t || t);
                return o.a.createElement(r.a, {
                    trigger: h ? c : "none",
                    portalContainer: window.document.body,
                    ...p,
                    tooltip: ({
                        getTooltipProps: t,
                        getArrowProps: n,
                        tooltipRef: i,
                        arrowRef: r,
                        placement: c
                    }) => e ? o.a.createElement("div", { ...t({
                            ref: i,
                            className: Object(a.c)(l, u)
                        })
                    }, !s && o.a.createElement("div", { ...n({
                            ref: r,
                            "data-placement": c,
                            className: d
                        })
                    }), e) : null
                }, (({
                    getTriggerProps: e,
                    triggerRef: t
                }) => o.a.createElement(n, { ...e({
                        ref: t,
                        className: Object(a.c)("trigger", m, g)
                    })
                }, i)))
            }
        },
        271: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(25),
                s = n(547),
                l = n(21),
                d = n(328),
                c = n(546),
                u = n(330),
                m = n(1);
            const g = (e, t) => Object(a.b)(e, ";border:1px solid ", m.c.fieldBorder, ";background:white;padding:", m.d.legacyPadding("3px"), " 0 ", m.d.legacyPadding("3px"), " ", m.d.paddingUnits(2), ";border-radius:100px;align-items:center;max-width:calc(100% - ", m.d.legacySize("10px"), ");max-width:", null !== t && void 0 !== t && t.selectProps.maxWidth ? null === t || void 0 === t ? void 0 : t.selectProps.maxWidth : "calc(100% - 10px)", ";"),
                p = e => Object(a.b)(e, " border-radius:100%;height:", m.d.size("20px"), ";:hover{background:", m.c.lightBackground, ";svg{fill:", m.c.gray, ";}}svg{height:", m.d.legacySize("11px"), ";fill:", m.c.iconGray, ";}"),
                h = e => ({ ...e,
                    display: "none"
                }),
                v = e => ({ ...e,
                    color: m.c.placeholder
                }),
                b = e => ({ ...e,
                    color: "inherit"
                }),
                E = ({ ...e
                }, {
                    selectProps: t
                }) => ({ ...e,
                    minWidth: "100%",
                    width: t.contained ? "100%" : "auto",
                    paddingRight: r.isFirefox && !t.contained ? "16px;" : "",
                    '[class*="__menu-list"]': {
                        minWidth: r.isFirefox && !t.contained ? "calc(100% + 16px);" : "100%"
                    }
                }),
                _ = e => ({ ...e,
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                    textOverflow: "ellipsis"
                }),
                f = e => ({ ...e,
                    colors: { ...e.colors,
                        primary: m.f.defaultQuartzFocusRingColor
                    }
                }),
                O = {
                    cursor: "pointer"
                },
                C = {
                    default: { ...O,
                        height: m.n.inputHeight,
                        minHeight: m.n.inputHeight,
                        border: `1px solid ${m.c.quartzFieldBorder}`,
                        boxShadow: m.m.interactive100,
                        borderRadius: m.n.inputBorderRadius,
                        backgroundColor: "#FFF",
                        paddingLeft: "6px"
                    },
                    minimal: { ...O,
                        border: "none",
                        boxShadow: "none",
                        borderRadius: 0,
                        backgroundColor: "transparent",
                        height: "100%"
                    }
                },
                S = e => {
                    var t;
                    return !(null === (t = e[0]) || void 0 === t || !t.options)
                },
                y = (e, t) => {
                    if (S(e)) {
                        let n;
                        return e.find((e => (n = e.options.find((e => e.value === t)), !!n))), n
                    }
                    return e.find((e => e.value === t))
                };
            class k extends o.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        loadingOptions: !1,
                        loadedInitialOptions: !1,
                        asyncOptions: null
                    }, this.loadOptions = (e, t) => {
                        const {
                            updateOptions: n,
                            options: a
                        } = this.props, {
                            loadingOptions: i,
                            asyncOptions: o,
                            loadedInitialOptions: r
                        } = this.state;
                        if (!(o && r || i && n)) return this.setState({
                            loadingOptions: !0
                        }), a().then((e => (this.setState({
                            loadedInitialOptions: !0,
                            asyncOptions: e,
                            loadingOptions: !1
                        }), e))); {
                            const a = n ? n() : o;
                            S(a), t(a.filter((t => t.label.toLowerCase().includes(e.toLowerCase()))))
                        }
                    }
                }
                render() {
                    var e;
                    const {
                        minimal: t,
                        backgroundColor: n,
                        options: i,
                        value: r,
                        isCreatable: O,
                        isAsync: S,
                        className: k,
                        inputControlStyle: T,
                        maxMenuHeight: A,
                        updateOptions: N,
                        ...R
                    } = this.props, D = null !== (e = R.menuPlacement) && void 0 !== e ? e : "auto", I = { ...C[t ? "minimal" : "default"],
                        ...T || {}
                    }, x = {
                        control: (e, t) => Object(a.b)(e, ";cursor:", t.isDisabled ? "not-allowed" : "pointer", ";pointer-events:auto;", I, ";background-color:", t.isDisabled ? m.c.disabledInput : n || I.backgroundColor, ";", R.isMulti && "height: auto;", " ", R.noBorderRadius && "border-radius: 0;", " &,&:hover{border:", n ? "none" : I.border, ";", t.isFocused && `border-color: ${t.theme.colors.primary};`, " ", t.isFocused && (I.focused || {}), "}", t.isDisabled && (I.disabled || {}), ";label:Select;"),
                        dropdownIndicator: e => Object(a.b)(e, " svg{height:", m.d.size("16px"), ";width:", m.d.size("16px"), ";fill:", n ? Object(l.a)(.4, n) : m.c.iconGray, ";};label:Select;"),
                        clearIndicator: e => Object(a.b)(e, " padding:0;svg{height:", m.d.size("16px"), ";fill:", n ? Object(l.a)(.4, n) : m.c.iconGray, ";:hover{fill:", n ? Object(l.a)(.6, n) : "#b1b9bf", ";}};label:Select;"),
                        indicatorSeparator: h,
                        multiValueRemove: p,
                        multiValue: g,
                        singleValue: b,
                        placeholder: v,
                        menu: E,
                        menuPortal: e => Object(a.b)(e, ";z-index:2147483643;;label:Select;"),
                        option: _,
                        ...this.props.styles || {}
                    }, M = e => {
                        const t = R.isMulti && null === e ? [] : e;
                        R.onChange && R.onChange(t)
                    };
                    if (S) {
                        let e = null;
                        this.state.asyncOptions && (e = R.isMulti ? r.map((e => y(this.state.asyncOptions, e))) : y(this.state.asyncOptions, r) || null);
                        const t = O ? c.a : d.a;
                        return o.a.createElement(t, { ...R,
                            className: Object(a.c)(k, "_select"),
                            styles: x,
                            theme: f,
                            loadOptions: this.loadOptions,
                            value: e,
                            onChange: M,
                            maxMenuHeight: A || 245,
                            defaultOptions: !0,
                            menuPlacement: D
                        })
                    } {
                        let e;
                        e = "undefined" !== typeof r ? Array.isArray(r) ? r.map((e => y(i, e))) || null : y(i, r) || null : null;
                        const t = O ? u.a : s.a;
                        return o.a.createElement(t, { ...R,
                            ref: R.forwardRef,
                            className: Object(a.c)(k, "_select"),
                            styles: x,
                            theme: f,
                            options: i,
                            value: e,
                            onChange: M,
                            isClearable: !R.isMulti && R.isClearable,
                            maxMenuHeight: A || 245,
                            menuPlacement: D
                        })
                    }
                }
            }
            t.a = k
        },
        275: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        276: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                d: "M6.261 0A6.268 6.268 0 000 6.261c0 2.252 1.882 5.366 5.751 9.518a.7.7 0 001.018 0c3.869-4.152 5.751-7.265 5.751-9.518A6.268 6.268 0 006.261 0zm0 8.348a2.087 2.087 0 112.087-2.087 2.087 2.087 0 01-2.087 2.087z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 12.521,
                    height: 16,
                    viewBox: "0 0 12.521 16"
                }, e), o)
            }
            n.p
        },
        277: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        278: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        279: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        280: function(e, t, n) {
            "use strict";
            n(0);
            n.p
        },
        306: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "GetFeedback", (function() {
                return u
            }));
            var a, i, o = n(2),
                r = n(0),
                s = n.n(r),
                l = n(231);
            class d extends s.a.Component {
                render() {
                    return s.a.createElement("iframe", {
                        src: this.feedbackUrl,
                        className: Object(o.b)({
                            name: "1yzik7j-ExternalFeedbackIframe",
                            styles: "width:100%;border:0;;label:ExternalFeedbackIframe;"
                        })
                    })
                }
                get feedbackUrl() {
                    var e;
                    return `${this.props.url}?&rep=${(null===(e=this.props.user)||void 0===e?void 0:e.name)||""}&visitor=${this.props.uuid}${this.props.customParams?`&${this.props.customParams}`:""}`
                }
            }
            let c = Object(l.default)(a = class extends s.a.Component {
                    render() {
                        const {
                            url: e,
                            user: t,
                            uuid: n
                        } = this.props;
                        return s.a.createElement(d, {
                            url: e,
                            user: t,
                            uuid: n
                        })
                    }
                }) || a,
                u = Object(l.default)(i = class extends s.a.Component {
                    constructor(...e) {
                        super(...e), this.messageListener = ({
                            data: e,
                            origin: t
                        }) => {
                            "https://www.getfeedback.com" === t && "submittedResponse" === e && (this.props.setLeave(!0), setTimeout(this.props.toggleFeedback, 1e3 * l.animationTime))
                        }
                    }
                    render() {
                        const {
                            url: e,
                            user: t,
                            uuid: n
                        } = this.props;
                        return s.a.createElement(d, {
                            url: e,
                            user: t,
                            uuid: n,
                            customParams: this.customParams
                        })
                    }
                    get customParams() {
                        return "gf_multichannel_embed=true"
                    }
                    componentDidMount() {
                        window.addEventListener("message", this.messageListener)
                    }
                    componentWillUnmount() {
                        window.removeEventListener("message", this.messageListener)
                    }
                }) || i;
            t.default = c
        },
        307: function(e, t, n) {
            "use strict";
            n(0);
            t.a = n.p + "b9658c717df728dbb0ecd82cf9b6f86c.svg"
        },
        308: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "LightboxComponentMessageTypes", (function() {
                return d
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(155),
                s = n(317);
            const l = {
                    lightboxWrapper: {
                        default: Object(a.b)({
                            name: "161xstc-default",
                            styles: "height:100vh;width:100%;display:flex;justify-content:center;position:absolute;top:0;left:0;align-items:center;;label:default;"
                        }),
                        centerRespectingChildHeight: Object(a.b)({
                            name: "efivxz-centerRespectingChildHeight",
                            styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;;label:centerRespectingChildHeight;"
                        })
                    }
                },
                d = ["lightbox_gather", "calendar_event_offer", "calendar_event_confirmation", "text"];
            t.default = ({
                conversation: e,
                messages: t,
                sendMessage: n,
                closeAction: a,
                showStartConversationLoadingState: c,
                showStartElementConversationLoadingState: u,
                stopStartElementConversationLoadingState: m,
                isMobile: g,
                meetingThemesEnabled: p,
                showBranding: h,
                showProgressBar: v
            }) => {
                const b = Object(i.useCallback)((() => {
                        a(), null !== e && void 0 !== e && e.id && n({
                            type: "event",
                            eventType: "close",
                            conversationId: e.id
                        })
                    }), [a, e, n]),
                    E = e => {
                        "Escape" === e.key && b()
                    },
                    _ = null === t || void 0 === t ? void 0 : t.filter((e => !!e.scriptId && !!e.type && d.includes(e.type))),
                    f = _ ? _[_.length - 1] : void 0,
                    O = "lightbox_gather" === (null === f || void 0 === f ? void 0 : f.type) || "calendar_event_offer" === (null === f || void 0 === f ? void 0 : f.type) && f.availableSlots.length > 0;
                return o.a.createElement(r.a, {
                    bounds: !0
                }, (({
                    measureRef: a,
                    contentRect: i
                }) => {
                    var r, d, C;
                    const S = (null === i || void 0 === i || null === (r = i.bounds) || void 0 === r ? void 0 : r.width) && (null === i || void 0 === i || null === (d = i.bounds) || void 0 === d ? void 0 : d.width) < 500 || !1,
                        y = g && S;
                    return o.a.createElement("div", {
                        className: l.lightboxWrapper.default,
                        "data-backend-test-id": "lightbox",
                        onClick: O ? void 0 : b,
                        onKeyDown: E,
                        ref: a,
                        role: "button",
                        tabIndex: 0,
                        "data-clickable": !0
                    }, o.a.createElement("div", {
                        style: {
                            height: "calc(100% - 24px)",
                            ...y && null !== i && void 0 !== i && null !== (C = i.bounds) && void 0 !== C && C.width ? {
                                width: "calc(100% - 24px)"
                            } : {}
                        },
                        role: "presentation",
                        onClick: e => e.stopPropagation(),
                        "aria-hidden": !0
                    }, o.a.createElement("div", {
                        className: l.lightboxWrapper.centerRespectingChildHeight
                    }, o.a.createElement(s.LightboxEntry, {
                        isBelowThreshold: S,
                        conversation: e,
                        messages: t,
                        sendMessage: n,
                        closeAction: b,
                        showStartConversationLoadingState: c,
                        showStartElementConversationLoadingState: u,
                        stopStartElementConversationLoadingState: m,
                        scriptMessageIndex: _ && f ? _.indexOf(f) : void 0,
                        scriptMessage: f,
                        isMobile: g,
                        meetingThemesEnabled: p,
                        showBranding: h,
                        showProgressBar: v
                    }))))
                }))
            }
        },
        309: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                d: "M3.334 10.669L0 7.335l2-2 3.334 3.334L14.001.001l2 2-8.667 8.666-2 2z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 16,
                    height: 12.669,
                    viewBox: "0 0 16 12.669"
                }, e), o)
            }
            n.p
        },
        310: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("defs", null, a.createElement("style", null, ".qualified-banner_svg__cls-1{fill:#333}")),
                r = a.createElement("g", {
                    id: "qualified-banner_svg__Layer_2",
                    "data-name": "Layer 2"
                }, a.createElement("g", {
                    id: "qualified-banner_svg__Layer_1-2",
                    "data-name": "Layer 1"
                }, a.createElement("path", {
                    className: "qualified-banner_svg__cls-1",
                    d: "M356.17 139.7c-24.32 0-37.89-13.09-37.89-38.26V49.32a1.56 1.56 0 011.56-1.56h17.86a1.56 1.56 0 011.56 1.56V100c0 12.83 5.43 20.61 17.4 20.61s17.28-7.78 17.28-20.61V49.32a1.56 1.56 0 011.56-1.56h17.86a1.56 1.56 0 011.56 1.56v52.12c0 25.17-14.44 38.26-38.75 38.26zM468.25 138.15l-6-14.51a1.55 1.55 0 00-1.44-1h-29.19a1.55 1.55 0 00-1.44 1l-6 14.51a1.58 1.58 0 01-1.45 1h-17.88a1.56 1.56 0 01-1.42-2.22l41-87.84a2.21 2.21 0 012-1.29 2.21 2.21 0 012 1.29l41 87.84a1.56 1.56 0 01-1.41 2.22H469.7a1.56 1.56 0 01-1.45-1zm-23.43-49.8l-6.67 16.09a1.56 1.56 0 001.44 2.16h13.26a1.56 1.56 0 001.44-2.16l-6.58-16.08a1.56 1.56 0 00-2.89-.01zM505.63 138.12V49.34a1.57 1.57 0 011.58-1.58h18.16a1.58 1.58 0 011.63 1.58v69.33a1.58 1.58 0 001.58 1.58h33.72a1.58 1.58 0 011.58 1.58v16.29a1.58 1.58 0 01-1.58 1.58h-55a1.58 1.58 0 01-1.67-1.58zM584.42 138.1V49.35a1.6 1.6 0 011.6-1.59h18.13a1.6 1.6 0 011.6 1.59v88.75a1.6 1.6 0 01-1.6 1.6H586a1.6 1.6 0 01-1.58-1.6zM647.38 68.94V86a1.61 1.61 0 001.62 1.64h28.37a1.63 1.63 0 011.63 1.62v15.45a1.62 1.62 0 01-1.62 1.62H649a1.62 1.62 0 00-1.62 1.62v30.13a1.63 1.63 0 01-1.62 1.62h-18.09a1.62 1.62 0 01-1.61-1.62v-88.7a1.61 1.61 0 011.61-1.62h55a1.61 1.61 0 011.61 1.62V65.7a1.61 1.61 0 01-1.61 1.62H649a1.62 1.62 0 00-1.62 1.62zM703.12 138.12V49.34a1.57 1.57 0 011.58-1.58h18.16a1.58 1.58 0 011.58 1.58v88.78a1.58 1.58 0 01-1.58 1.58H704.7a1.58 1.58 0 01-1.58-1.58zM743.75 138.07V49.38a1.62 1.62 0 011.62-1.62h55a1.62 1.62 0 011.63 1.62V65.7a1.62 1.62 0 01-1.62 1.62h-33.69a1.63 1.63 0 00-1.62 1.68v13.13a1.62 1.62 0 001.62 1.62h30.37a1.63 1.63 0 011.63 1.63v15.32a1.63 1.63 0 01-1.63 1.62h-30.37a1.62 1.62 0 00-1.62 1.62v14.69a1.62 1.62 0 001.62 1.62h33.64a1.63 1.63 0 011.62 1.63v16.19a1.63 1.63 0 01-1.62 1.63h-55a1.63 1.63 0 01-1.58-1.63zM849.16 139.51h-26.9a1.53 1.53 0 01-1.45-1.57V49.69a1.56 1.56 0 011.43-1.58c9.9-.35 17.07-.35 25.89-.35 38.48 0 56.59 19 56.59 45.18 0 27.33-16.97 46.42-55.56 46.57zm2-73.53a63.66 63.66 0 00-7.43.35 1.57 1.57 0 00-1.42 1.57v51.82a1.57 1.57 0 001.44 1.57 78.79 78.79 0 008.81.37c20.24 0 29.23-11.39 29.23-28.72C881.81 76.1 871.18 66 851.18 66zM310.61 136.93L293 122a47 47 0 008.9-28.25c0-26.24-17.73-46-45.18-46s-46 19.79-46 46 17.61 45.91 45.18 45.91a47.91 47.91 0 0024.94-6.59l7.33 6.21a1.56 1.56 0 001 .38h20.4a1.57 1.57 0 001.04-2.73zm-54.34-15.57c-14.09 0-23.56-11.66-23.56-27.57s9.47-27.57 23.56-27.57 23.56 11.54 23.56 27.57a33.12 33.12 0 01-3.1 14.41l-3-2.57a1.6 1.6 0 00-1-.37h-20.4a1.57 1.57 0 00-1 2.77L265 119.65a22.66 22.66 0 01-8.73 1.71z"
                }), a.createElement("path", {
                    d: "M142.78 66.78L76 0 9.22 66.78a31.49 31.49 0 000 44.52l18.55 18.55 29.68 29.68 11.13 11.13 7.42 7.42 7.42-7.42 11.13-11.13 29.68-29.68 18.55-18.55a31.49 31.49 0 000-44.52zm-33.14 66.53A26.12 26.12 0 00102 115L77 90a1.3 1.3 0 00-1.86 0L50 115a26.12 26.12 0 00-7.67 18.3l-9-9a18.35 18.35 0 010-26L76 55.65l42.66 42.67a18.35 18.35 0 010 26zm27.57-27.58l-5.31 5.32a26.12 26.12 0 00-7.67-18.3l-47.3-47.3a1.3 1.3 0 00-1.86 0l-47.3 47.3a26.12 26.12 0 00-7.67 18.3l-5.31-5.32a23.6 23.6 0 010-33.39L76 11.13l61.21 61.21a23.6 23.6 0 010 33.39z",
                    fill: "#67b8c7"
                })));

            function s(e) {
                return a.createElement("svg", i({
                    viewBox: "0 0 904.72 178.08"
                }, e), o, r)
            }
            n.p
        },
        311: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MeetingLoadingModalV2", (function() {
                return m
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(61),
                s = n(6),
                l = n(221),
                d = n(1);
            const c = Object(a.a)(r.a, {
                    target: "e1xqbzw40",
                    label: "LoadingContainer"
                })("padding:", d.d.paddingUnits(10), ";display:flex;align-items:center;justify-content:center;width:", (({
                    fullWidth: e
                }) => e ? "100%" : d.d.size("256px")), ";height:", d.d.size("256px"), ";flex-direction:column;row-gap:", d.d.gapUnits(6), ";"),
                u = Object(a.a)("span", {
                    target: "e1xqbzw41",
                    label: "DescriptionText"
                })("font-size:", d.i.size300, ";font-weight:", d.j.normal, ";text-align:center;color:", d.c.blackPearl, ";"),
                m = ({
                    fullWidth: e,
                    loadingMessage: t
                }) => o.a.createElement(c, {
                    fullWidth: e
                }, o.a.createElement("div", null, o.a.createElement(l.a, {
                    size: 32,
                    color: s.a.MEETING_BOOKER_COLOR || d.c.loadingSpinner
                })), o.a.createElement(u, null, t))
        },
        312: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M16 4.75C9.787 4.75 4.75 9.787 4.75 16S9.787 27.25 16 27.25 27.25 22.213 27.25 16 22.213 4.75 16 4.75zM3.25 16C3.25 8.958 8.958 3.25 16 3.25S28.75 8.958 28.75 16 23.042 28.75 16 28.75 3.25 23.042 3.25 16zM16 9.917a.75.75 0 01.75.75v6.666a.75.75 0 01-1.5 0v-6.666a.75.75 0 01.75-.75zm0 12.75A1.333 1.333 0 1016 20a1.333 1.333 0 000 2.667z",
                fill: "#437D88"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 32,
                    height: 32,
                    viewBox: "0 0 32 32",
                    fill: "none"
                }, e), o)
            }
            n.p
        },
        313: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MeetingLoadingModal", (function() {
                return u
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(61),
                s = n(6),
                l = n(221),
                d = n(1);
            const c = Object(a.a)(r.a, {
                    target: "e1pr3p840",
                    label: "LoadingContainer"
                })("padding:", d.d.paddingUnits(10), ";display:flex;align-items:center;justify-content:center;width:", (({
                    fullWidth: e
                }) => e ? "100%" : d.d.size("360px")), ";height:", d.d.size("400px"), ";flex-direction:column;row-gap:", d.d.gapUnits(6), ";"),
                u = ({
                    fullWidth: e,
                    loadingMessage: t
                }) => o.a.createElement(c, {
                    fullWidth: e
                }, o.a.createElement("div", null, o.a.createElement(l.a, {
                    size: 40,
                    color: s.a.MEETING_BOOKER_COLOR || d.c.loadingSpinner
                })), t.length > 0 && o.a.createElement("span", {
                    className: "loadingModalText",
                    color: d.c.blackPearl,
                    "data-se-id": "meeting-loading-modal-text"
                }, t))
        },
        314: function(e, t, n) {
            "use strict";
            n(0);
            t.a = n.p + "78fab313b1c071f6e7917bb0a18536c9.svg"
        },
        315: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                clipRule: "evenodd",
                d: "M14.53 8.53a.75.75 0 000-1.06l-4-4a.75.75 0 10-1.06 1.06l2.72 2.72H3.332a.75.75 0 100 1.5h8.856l-2.72 2.72a.75.75 0 101.061 1.06l4-4z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), o)
            }
            n.p
        },
        316: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "createVisitorViewTheirWindow", (function() {
                return g
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(21),
                s = n(535),
                l = n(1),
                d = n(118),
                c = n(152),
                u = n(153),
                m = n(208);
            const g = (e, t, n, a) => ({
                    audioOn: i,
                    videoOn: r,
                    ongoingVideoCall: l,
                    themeColor: m
                }) => ((i || r) && Object(d.b)("repConnected", !0), r ? o.a.createElement(s.a, {
                    audioOn: i,
                    name: e
                }) : o.a.createElement(p.Container, null, l && !i && !r && !Object(d.a)("repConnected") && o.a.createElement(p.ConnectingText, null, "Connecting..."), o.a.createElement(p.ImageContainer, null, l && !i && !r && !Object(d.a)("repConnected") && o.a.createElement(p.ConnectingCallWrapper, {
                    color: m
                }), t ? o.a.createElement(p.Image, {
                    alt: e,
                    src: t,
                    messengerTooTall: a
                }) : o.a.createElement(p.PlaceholderAvatar, {
                    messengerTooTall: a
                }), o.a.createElement(p.MicrophoneCircle, null, i ? o.a.createElement(u.a, null) : o.a.createElement(c.a, null))), o.a.createElement(p.TitleContainer, null, o.a.createElement(p.Name, null, e), n && !a && o.a.createElement(p.Title, null, n)))),
                p = {
                    Container: Object(a.a)("div", {
                        target: "emd3ni00",
                        label: "Container"
                    })("display:flex;flex-direction:column;align-items:center;margin:", l.d.marginUnits(2), ";gap:", l.d.gapUnits(2), ";isolation:isolate;"),
                    PlaceholderAvatar: Object(a.a)(m.a, {
                        shouldForwardProp: e => "messengerTooTall" !== e,
                        target: "emd3ni01",
                        label: "PlaceholderAvatar"
                    })((({
                        messengerTooTall: e
                    }) => e ? `height: ${l.d.size("40px")}; width: ${l.d.size("40px")};` : `height: ${l.d.legacySize("66px")}; width: ${l.d.legacySize("66px")};`), ");border-radius:50%;fill:", l.c.iconGray, " !important;z-index:100;position:relative;padding:", l.d.legacyPadding("7px"), ";"),
                    ConnectingCallWrapper: Object(a.a)("div", {
                        target: "emd3ni02",
                        label: "ConnectingCallWrapper"
                    })("border-radius:50%;width:", l.d.legacySize("75px"), ";height:", l.d.legacySize("75px"), ";background:", (({
                        color: e
                    }) => `radial-gradient(black 60%, transparent 40%), conic-gradient(\n      from 180deg at 50% 50%,\n      ${e} 0deg,\n      ${Object(r.h)(1,null!==e&&void 0!==e?e:l.c.primaryText)} 360deg\n    )`), ";position:absolute;bottom:-4px;right:-4px;animation:spin 2s linear infinite;@keyframes spin{100%{transform:rotate(-1turn);}}z-index:1;"),
                    ImageContainer: Object(a.a)("div", {
                        target: "emd3ni03",
                        label: "ImageContainer"
                    })({
                        name: "b3pn3b",
                        styles: "display:inline-block;position:relative;"
                    }),
                    ConnectingText: Object(a.a)("div", {
                        target: "emd3ni04",
                        label: "ConnectingText"
                    })("font-size:", l.i._deprecated_size200, ";color:", l.c.secondaryText, ";"),
                    Image: Object(a.a)("img", {
                        target: "emd3ni05",
                        label: "Image"
                    })((({
                        messengerTooTall: e
                    }) => e ? `height: ${l.d.size("40px")}; width: ${l.d.size("40px")};` : `height: ${l.d.legacySize("66px")}; width: ${l.d.legacySize("66px")};`), ");border-radius:50%;position:relative;z-index:100;"),
                    MicrophoneCircle: Object(a.a)("div", {
                        target: "emd3ni06",
                        label: "MicrophoneCircle"
                    })("position:absolute;right:0;bottom:0;padding:", l.d.legacyPadding("3px"), ";border-radius:50%;background-color:#fcfcfc;display:inline-flex;align-items:center;justify-content:center;z-index:101;"),
                    VideoOnMicrophoneCircle: Object(a.a)("div", {
                        target: "emd3ni07",
                        label: "VideoOnMicrophoneCircle"
                    })("padding:", l.d.legacyPadding("3px"), ";border-radius:50%;background-color:#fcfcfc;display:inline-flex;align-items:center;justify-content:center;"),
                    TitleContainer: Object(a.a)("div", {
                        target: "emd3ni08",
                        label: "TitleContainer"
                    })("margin-top:", l.d.legacyMargin("2px"), ";display:flex;flex-direction:column;align-items:center;text-align:center;"),
                    Name: Object(a.a)("span", {
                        target: "emd3ni09",
                        label: "Name"
                    })("display:block;color:", l.c.white, ";font-size:", l.i.size300, ";"),
                    Title: Object(a.a)("span", {
                        target: "emd3ni010",
                        label: "Title"
                    })("display:block;color:", l.c.white, ";font-size:", l.i.size100, ";"),
                    VideoOnContainer: Object(a.a)("div", {
                        target: "emd3ni011",
                        label: "VideoOnContainer"
                    })("display:inline-flex;flex-direction:row;align-items:center;padding:", l.d.paddingUnits(1), ";color:", l.c.white, ";background-color:rgba(0,0,0,0.8);position:absolute;left:6px;top:6px;border-radius:999px;span{margin-left:", l.d.marginUnits(1), ";font-size:", l.i.size300, ";}")
                }
        },
        317: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "StepContainer", (function() {
                return V
            })), n.d(t, "LightboxEntry", (function() {
                return G
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(2),
                s = n(966),
                l = n(129),
                d = n(14),
                c = n(6),
                u = n(1),
                m = n(33),
                g = n(38),
                p = n(76),
                h = n(84),
                v = n(61);
            const b = Object(a.a)("button", {
                    target: "etpejhb0",
                    label: "CloseButton"
                })("padding:", u.d.paddingUnits(3), " ", u.d.paddingUnits(4), ";color:", c.a.MEETING_BOOKER_TEXT_COLOR, ";background:", c.a.MEETING_BOOKER_COLOR, ";border-radius:3px;border-style:none;margin:auto;&:hover{background:", c.a.DARKENED_MEETING_BOOKER_COLOR, ";}", (({
                    makeButtonsViewOnly: e
                }) => e && "pointer-events: none;")),
                E = {
                    confirmationPageStyle: Object(r.b)("max-width:", u.d.size("500px"), ";width:100%;height:max-content;text-align:center;padding:", u.d.paddingUnits(8), ";position:relative;;label:confirmationPageStyle;"),
                    confirmationTitle: Object(r.b)("font-weight:", u.j.semiBold, ";font-size:", u.i.size500, ";;label:confirmationTitle;"),
                    confirmationSubtitle: Object(r.b)("color:", u.c.secondaryText, ";margin-bottom:", u.d.marginUnits(8), ";font-size:", u.i.size500, ";;label:confirmationSubtitle;"),
                    confirmationDate: Object(r.b)("font-weight:", u.j.normal, ";font-size:", u.i.size500, ";;label:confirmationDate;")
                };
            var _ = ({
                    showBookedRepPhoto: e,
                    repAvatarUrl: t,
                    repName: n,
                    repRole: a,
                    confirmationTitle: r,
                    confirmationSubtitle: c,
                    confirmedBooking: u,
                    closeAction: _,
                    hideCloseButton: f,
                    makeButtonsViewOnly: O = !1,
                    isMeetingLink: C = !1
                }) => {
                    const S = Object(i.useContext)(d.a);
                    return o.a.createElement(v.a, {
                        className: E.confirmationPageStyle
                    }, !f && !C && o.a.createElement("button", {
                        className: h.a,
                        onClick: _
                    }, o.a.createElement(p.a, null)), e && o.a.createElement(l.a, {
                        calendarEventAvatarUrls: [],
                        repAvatarUrl: t,
                        repName: n,
                        repRole: a,
                        showGreenCheck: !0
                    }), o.a.createElement("p", {
                        className: E.confirmationTitle
                    }, r), o.a.createElement("div", {
                        className: E.confirmationDate
                    }, Object(g.f)(Object(s.a)(new Date(null === u || void 0 === u ? void 0 : u.startsAt), S.t("messenger.dates.time_format_detail"), {
                        locale: m.a[S.locale]
                    }), S)), o.a.createElement("p", {
                        className: E.confirmationSubtitle
                    }, c), !C && o.a.createElement(b, {
                        onClick: _,
                        makeButtonsViewOnly: O
                    }, S.t("messenger.meeting_booker.close_confirmation")))
                },
                f = n(352),
                O = n(104),
                C = n(342);
            const S = Object(a.a)("button", {
                    target: "ek7esyb0",
                    label: "CloseButton"
                })("padding:", u.d.paddingUnits(3), " ", u.d.paddingUnits(4), ";color:", c.a.MEETING_BOOKER_TEXT_COLOR, ";background:", c.a.MEETING_BOOKER_COLOR, ";border-radius:3px;border-style:none;margin:auto;font-size:", u.i.size500, ";&:hover{background:", c.a.DARKENED_MEETING_BOOKER_COLOR, ";}", (({
                    makeButtonsViewOnly: e
                }) => e && "pointer-events: none;")),
                y = {
                    LightboxMessageStyle: Object(r.b)("max-width:", u.d.size("400px"), ";width:100%;height:max-content;text-align:center;padding:", u.d.paddingUnits(8), ";position:relative;background:", u.c.white, ";border-radius:8px;;label:LightboxMessageStyle;"),
                    title: Object(r.b)("font-weight:", u.j.semiBold, ";font-size:", u.i.size600, ";;label:title;"),
                    subtitle: Object(r.b)("color:", u.c.secondaryText, ";margin-bottom:", u.d.marginUnits(8), ";font-size:", u.i.size500, ";;label:subtitle;")
                };
            var k = ({
                    title: e,
                    subtitle: t,
                    buttonText: n,
                    closeAction: a,
                    makeButtonsViewOnly: i = !1
                }) => o.a.createElement("div", {
                    className: y.LightboxMessageStyle
                }, !i && o.a.createElement("button", {
                    className: h.a,
                    onClick: a
                }, o.a.createElement(p.a, null)), o.a.createElement("p", {
                    className: y.title
                }, e), o.a.createElement("p", {
                    className: y.subtitle
                }, o.a.createElement(C.a, {
                    text: t
                })), o.a.createElement(S, {
                    onClick: a,
                    makeButtonsViewOnly: i
                }, n)),
                T = n(163),
                A = n(178),
                N = n(70),
                R = n(35),
                D = n(140),
                I = n(176);
            const x = ({
                _quartzInternal_className: e,
                theme: t,
                label: n,
                duration: a,
                maxValue: s = 100
            }) => {
                const l = Object(D.b)(),
                    d = null !== t && void 0 !== t ? t : l.components.LoadingProgress,
                    c = Object(i.useMemo)((() => ((e, t, n) => ({
                        root: Object(r.b)("display:flex;flex-direction:column;text-align:center;gap:", u.d.gapUnits(6), ";;label:root;"),
                        progressBarContainer: Object(r.b)("position:relative;background:", e.progressBarBackgroundColor, ";height:", u.d.size("4px"), ";border-radius:", u.n.progressBarBorderRadius, "px;overflow:hidden;@keyframes progress-animation{to{width:", n, '%;}}::before{content:"";position:absolute;top:0;left:0;height:100%;width:0;background:', e.progressBarColor, ";animation:progress-animation ", t, "s ease-out forwards;};label:progressBarContainer;"),
                        progressBar: Object(r.b)({
                            name: "g25pz0-progressBar",
                            styles: "opacity:0;;label:progressBar;"
                        })
                    }))(d, a, s)), [d, a, s]),
                    m = Object(I.a)();
                return o.a.createElement("div", {
                    className: Object(r.c)(c.root, e)
                }, o.a.createElement("div", {
                    className: c.progressBarContainer
                }, o.a.createElement("progress", {
                    className: c.progressBar,
                    id: m,
                    max: s
                })), o.a.createElement("label", {
                    className: Object(r.c)(u.o.bodySecondary, {
                        [u.p]: !n
                    }),
                    htmlFor: m
                }, n, o.a.createElement("span", {
                    className: u.p
                }, "Loading")))
            };
            var M = n(338),
                B = n(221);
            const F = {
                mobileView: Object(r.b)("width:calc(100vw - ", u.d.size("24px"), ");height:", u.d.size("568px"), ";;label:mobileView;"),
                mobileViewForThemes: Object(r.b)("width:calc(100vw - ", u.d.size("40px"), ");height:", u.d.size("836px"), ";;label:mobileViewForThemes;")
            };
            var w = ({
                    label: e,
                    meetingThemesEnabled: t = !1,
                    isMobile: n = !1
                }) => o.a.createElement("div", {
                    className: Object(r.c)({
                        [F.mobileView]: n && !t,
                        [F.mobileViewForThemes]: n && t
                    })
                }, o.a.createElement(R.a, {
                    justify: "center",
                    align: "center",
                    direction: "column",
                    gapUnits: 6,
                    borderRadius: 8,
                    backgroundColor: u.c.white,
                    width: n ? "100%" : t ? 948 : 528,
                    height: n ? "100%" : t ? 588 : 708
                }, o.a.createElement(B.a, {
                    size: 32,
                    color: c.a.MEETING_BOOKER_COLOR
                }), o.a.createElement(N.a, {
                    width: 180,
                    height: 56
                }, o.a.createElement(x, {
                    duration: 10,
                    maxValue: 95,
                    label: e,
                    theme: Object(M.a)(c.a.MEETING_BOOKER_COLOR)
                })))),
                L = n(319),
                P = n(311),
                U = n(259),
                j = n(318);
            const z = Object(a.a)(v.a, {
                    target: "e12c69zx0",
                    label: "InputFieldsGatherContainer"
                })("animation:", (({
                    progressBarModal: e
                }) => e ? `shrinkBox ${O.a}ms ease-out` : `growBox ${O.a}ms ease-out`), ";max-width:100%;box-shadow:none;@keyframes growBox{from{transform:", (({
                    wentThroughInteractiveLoadingMessages: e
                }) => e ? "scale(0.5)" : "scale(0.2)"), ";}to{transform:scale(1);}}@keyframes shrinkBox{from{transform:scaleY(1.7);}to{transform:scaleY(1);}}"),
                V = Object(a.a)("div", {
                    target: "e12c69zx1",
                    label: "StepContainer"
                })("margin-right:", u.d.marginUnits(2), ";margin-left:", u.d.marginUnits(2), ";max-width:100%;max-height:100%;display:flex;justify-content:center;overflow-y:", (({
                    meetingThemesMobile: e
                }) => e ? "auto" : "visible"), ";"),
                G = ({
                    conversation: e,
                    messages: t,
                    sendMessage: n,
                    closeAction: a,
                    isBelowThreshold: r,
                    showStartConversationLoadingState: s,
                    showStartElementConversationLoadingState: l,
                    stopStartElementConversationLoadingState: c,
                    scriptMessageIndex: u,
                    scriptMessage: m,
                    isMobile: p,
                    hideCloseButton: h,
                    meetingThemesEnabled: v = !1,
                    isMeetingLink: b,
                    showBranding: E,
                    showProgressBar: C
                }) => {
                    const S = Object(i.useContext)(d.a),
                        y = [S.t("messenger.meeting_booker.loading_message_1"), S.t("messenger.meeting_booker.loading_message_2"), S.t("messenger.meeting_booker.loading_message_3"), S.t("messenger.meeting_booker.loading_message_4"), S.t("messenger.meeting_booker.loading_message_5"), S.t("messenger.meeting_booker.loading_message_6")],
                        N = S.t("messenger.meeting_booker.loading_message_7"),
                        [R, D] = Object(i.useState)(!1),
                        [I, x] = Object(i.useState)(""),
                        [M, B] = Object(i.useState)(!1),
                        [F, G] = Object(i.useState)(""),
                        $ = Object(i.useRef)(),
                        H = Object(i.useRef)(),
                        W = Object(i.useRef)([...y]),
                        K = Object(i.useRef)(!1),
                        q = () => {
                            if (0 === W.current.length) return G(N), void clearInterval($.current);
                            const e = Math.floor(Math.random() * W.current.length);
                            G(W.current[e]), W.current.splice(e, 1)
                        };
                    Object(i.useEffect)((() => {
                        if (m) return clearInterval($.current), W.current = [...y], c(), D(!1), x(""), G(""), B(!1), clearTimeout(H.current), () => clearInterval($.current);
                        H.current = setTimeout((() => {
                            C || B(!0), q(), $.current = setInterval((() => {
                                q()
                            }), U.MESSAGE_CYCLE_TIME_MS)
                        }), 1e3)
                    }), [m, c]);
                    const Y = () => {
                        D(!0), n({
                            type: "event",
                            eventType: "change_identity",
                            botStep: null === m || void 0 === m ? void 0 : m.botStep,
                            executionStep: null === m || void 0 === m ? void 0 : m.executionStep,
                            conversationId: null === e || void 0 === e ? void 0 : e.id
                        })
                    };
                    if (s) return o.a.createElement(L.ChatLoadingModal, null);
                    const X = (() => {
                        if (M && l) return clearTimeout(H.current), K.current = !0, o.a.createElement(U.MeetingLoadingStatus, {
                            loadingMessage: F
                        });
                        if (R) return o.a.createElement(P.MeetingLoadingModalV2, {
                            fullWidth: p && r,
                            loadingMessage: I
                        });
                        if (!e) return C ? o.a.createElement(w, {
                            label: F,
                            meetingThemesEnabled: v,
                            isMobile: p
                        }) : o.a.createElement(A.b, null);
                        switch (null === m || void 0 === m ? void 0 : m.type) {
                            case "lightbox_gather":
                                {
                                    const t = o.a.createElement(z, {
                                        wentThroughInteractiveLoadingMessages: K.current,
                                        progressBarModal: C
                                    }, o.a.createElement(O.b, {
                                        title: m.title,
                                        subtitle: m.subtitle,
                                        inputFields: m.inputFields,
                                        buttonText: m.buttonText,
                                        inputFieldLabel: m.inputFieldLabel,
                                        placeholder: m.placeholder,
                                        validateEmailDomain: m.validateEmailDomain,
                                        visitorEmail: m.visitorEmail,
                                        onClick: t => {
                                            var a;
                                            a = S.t("messenger.meeting_booker.find_availability"), D(!0), x(a), K.current = !0, n({
                                                type: "field_entries",
                                                botStep: m.botStep,
                                                executionStep: m.executionStep,
                                                entries: t,
                                                conversationId: e.id
                                            })
                                        },
                                        onChangeIdentity: Y,
                                        closeAction: a,
                                        isMobile: p && r,
                                        hideCloseButton: !!h,
                                        meetingThemesEnabled: v,
                                        showBranding: E
                                    }));
                                    return !p && v ? o.a.createElement(T.a, {
                                        availableSlots: [],
                                        confirmBookingForTimeSlot: () => {},
                                        isSmallView: p,
                                        showBookedRepPhoto: !0,
                                        calendarEventAvatarUrls: [],
                                        inputFields: t,
                                        showBranding: E,
                                        hideCloseButton: !0,
                                        isTimeZoneAbbr: !0,
                                        hideBoxShadow: !0
                                    }) : t
                                }
                            case "calendar_event_offer":
                                {
                                    const t = K.current ? .4 : .2;
                                    return o.a.createElement(j.default, {
                                        isMobile: p,
                                        isBelowThreshold: r,
                                        scriptMessage: m,
                                        sendMessage: n,
                                        onChangeIdentity: Y,
                                        conversationId: e.id,
                                        closeAction: a,
                                        scriptMessageIndex: u,
                                        hideCloseButton: !!h,
                                        growAnimationScale: C ? void 0 : t,
                                        meetingThemesEnabled: v,
                                        showBranding: E
                                    })
                                }
                            case "calendar_event_confirmation":
                                {
                                    var i, s, d, c, y, N;
                                    const e = null === t || void 0 === t ? void 0 : t.slice().find((e => "calendar_event_pick" === e.type)),
                                        n = null === t || void 0 === t ? void 0 : t.slice().find((e => "calendar_event_offer" === e.type)),
                                        l = null === e || void 0 === e || null === (i = e.calendarEvent) || void 0 === i ? void 0 : i.user,
                                        u = Object(g.d)(null === n || void 0 === n ? void 0 : n.calendarEventTypeDuration, !1, !0, S.locale);
                                    return v ? o.a.createElement(f.a, {
                                        isSmallView: r,
                                        showBookedRepPhoto: m.showFacepile || !1,
                                        hasUser: !!l,
                                        repAvatarUrl: null === l || void 0 === l ? void 0 : l.avatarUrl,
                                        repName: (null === l || void 0 === l ? void 0 : l.name) || "",
                                        repRole: (null === l || void 0 === l ? void 0 : l.jobTitle) || "",
                                        duration: u,
                                        closeAction: a,
                                        isMobile: p,
                                        visitorEmail: m.calendarEventInviteEmail || (null === e || void 0 === e || null === (s = e.calendarEvent) || void 0 === s ? void 0 : s.email),
                                        changeVisitorIdentity: Y,
                                        hideCloseButton: h,
                                        confirmedBooking: {
                                            startsAt: null === e || void 0 === e || null === (d = e.calendarEvent) || void 0 === d ? void 0 : d.startsAt,
                                            endsAt: null === e || void 0 === e || null === (c = e.calendarEvent) || void 0 === c ? void 0 : c.endsAt
                                        },
                                        confirmation: !0,
                                        isTimeZoneAbbr: !0,
                                        showBranding: E
                                    }) : o.a.createElement(_, {
                                        showBookedRepPhoto: m.showFacepile || !1,
                                        repAvatarUrl: null === l || void 0 === l ? void 0 : l.avatarUrl,
                                        repName: (null === l || void 0 === l ? void 0 : l.name) || "",
                                        repRole: (null === l || void 0 === l ? void 0 : l.jobTitle) || "",
                                        confirmationTitle: m.title,
                                        confirmationSubtitle: m.subtitle,
                                        confirmedBooking: {
                                            startsAt: null === e || void 0 === e || null === (y = e.calendarEvent) || void 0 === y ? void 0 : y.startsAt,
                                            endsAt: null === e || void 0 === e || null === (N = e.calendarEvent) || void 0 === N ? void 0 : N.endsAt
                                        },
                                        closeAction: a,
                                        isMeetingLink: b
                                    })
                                }
                            case "text":
                                return o.a.createElement(k, {
                                    title: m.title,
                                    subtitle: m.text,
                                    buttonText: m.buttonText,
                                    closeAction: a
                                })
                        }
                    })();
                    return X ? o.a.createElement(V, {
                        meetingThemesMobile: v && p
                    }, X) : null
                }
        },
        318: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(0),
                i = n.n(a),
                o = n(352),
                r = n(2),
                s = n(966),
                l = n(21),
                d = n(14),
                c = n(6),
                u = n(1),
                m = n(33),
                g = n(38),
                p = n(113),
                h = n(76),
                v = n(84),
                b = n(61);
            const E = {
                confirmationPageStyle: Object(r.b)("max-width:", u.d.size("500px"), ";width:100%;height:max-content;text-align:center;padding:", u.d.paddingUnits(8), " ", u.d.paddingUnits(16), ";position:relative;&.is-mobile{padding:", u.d.paddingUnits(8), ";};label:confirmationPageStyle;"),
                confirmationTitle: Object(r.b)("font-weight:", u.j.semiBold, ";font-size:", u.i.size800, ";&.is-mobile{font-size:", u.i.size500, ";};label:confirmationTitle;"),
                confirmationSubtitle: Object(r.b)("margin-bottom:", u.d.marginUnits(8), ";font-size:", u.i.size500, ";.email-already-confirmed &{margin-bottom:0;};label:confirmationSubtitle;"),
                confirmationText: Object(r.b)("margin-bottom:", u.d.marginUnits(8), ";font-size:", u.i.size500, ";color:", u.c.secondaryText, ";;label:confirmationText;"),
                emailInputContainer: Object(r.b)("margin-top:", u.d.marginUnits(2), ";display:flex;flex-direction:row;.email-already-confirmed &{justify-content:center;};label:emailInputContainer;"),
                emailInput: Object(r.b)("display:flex;padding:", u.d.paddingUnits(3), " ", u.d.paddingUnits(4), ";width:", u.d.size("300px"), ";border:1px solid ", u.c.buttonIconDisabled, ";border-right:none;border-top-left-radius:3px;border-bottom-left-radius:3px;font-size:", u.i.size500, ";font-weight:", u.j.normal, ";color:", u.c.blackPearl, ";&::placeholder{color:", Object(l.h)(.5, u.c.blackPearl), ";}&:focus{outline:none !important;border:1px solid ", c.a.MEETING_BOOKER_COLOR, ";}&.is-mobile{width:100%;};label:emailInput;"),
                emailButton: Object(r.b)("padding:", u.d.paddingUnits(3), " ", u.d.paddingUnits(4), ";height:", u.d.legacySize("45px"), ";background-color:", c.a.MEETING_BOOKER_COLOR, ";color:", c.a.MEETING_BOOKER_TEXT_COLOR, ";border-top-right-radius:3px;border-bottom-right-radius:3px;&:hover{background-color:", c.a.DARKENED_MEETING_BOOKER_COLOR, ";}.email-already-confirmed &{border-radius:3px;};label:emailButton;"),
                differentTime: Object(r.b)("color:", c.a.MEETING_BOOKER_COLOR, ";font-size:", u.i.size300, ";&:hover{color:", c.a.DARKENED_MEETING_BOOKER_COLOR, ";text-decoration:underline;};label:differentTime;"),
                errorMessage: Object(r.b)("font-size:", u.i.size300, ";color:", u.c.dangerRed, ";text-align:left;margin-top:", u.d.marginUnits(2), ";margin-right:", u.d.marginUnits(4), ";padding-bottom:", u.d.paddingUnits(2), ";display:block;;label:errorMessage;")
            };
            var _ = ({
                    confirmedBooking: e,
                    matchedVisitorEmail: t,
                    isMobile: n = !1,
                    confirmMatchedVisitorEmail: o = !1,
                    onChange: l,
                    onSubmit: c,
                    reselectTime: u,
                    closeAction: _
                }) => {
                    const f = Object(a.useContext)(d.a),
                        [O, C] = Object(a.useState)(t || ""),
                        [S, y] = i.a.useState(null),
                        k = i.a.useRef(null);
                    i.a.useEffect((() => {
                        var e;
                        null === (e = k.current) || void 0 === e || e.focus()
                    }), []);
                    const T = () => {
                            const [t, n] = Object(p.c)(O, !1);
                            t ? (y(null), c(e, O)) : y("personal" === n ? f.t("messenger.error.business_email") : f.t("messenger.error.email"))
                        },
                        A = Object(g.f)(Object(s.a)(new Date(null === e || void 0 === e ? void 0 : e.startsAt), f.t("messenger.dates.time_format_detail"), {
                            locale: m.a[f.locale]
                        }), f);
                    return i.a.createElement(b.a, {
                        className: Object(r.c)(E.confirmationPageStyle, {
                            "is-mobile": n,
                            "email-already-confirmed": o && !!t
                        })
                    }, _ && i.a.createElement("button", {
                        className: v.a,
                        onClick: _
                    }, i.a.createElement(h.a, null)), o && t ? i.a.createElement(i.a.Fragment, null, i.a.createElement("p", {
                        className: Object(r.c)(E.confirmationTitle, {
                            "is-mobile": n
                        })
                    }, f.t("messenger.text.calendar_confirm_title")), i.a.createElement("p", {
                        className: Object(r.c)(E.confirmationSubtitle, {
                            "is-mobile": n
                        })
                    }, A), i.a.createElement("p", {
                        className: Object(r.c)(E.confirmationText)
                    }, f.t("messenger.text.calendar_confirm_body"), " ", t), i.a.createElement("button", {
                        className: E.emailButton,
                        onClick: T
                    }, f.t("messenger.meeting_booker.confirm"))) : i.a.createElement(i.a.Fragment, null, i.a.createElement("p", {
                        className: Object(r.c)(E.confirmationTitle, {
                            "is-mobile": n
                        })
                    }, A), i.a.createElement("p", {
                        className: E.confirmationSubtitle
                    }, f.t("messenger.text.calendar_invite")), i.a.createElement("div", {
                        className: E.emailInputContainer
                    }, i.a.createElement("input", {
                        className: Object(r.c)(E.emailInput, {
                            "is-mobile": n
                        }),
                        onKeyDown: e => {
                            "Enter" === e.key && T()
                        },
                        ref: k,
                        placeholder: f.t("messenger.placeholder.email"),
                        value: O,
                        onChange: e => {
                            C(e.target.value), null === l || void 0 === l || l(e.target.value)
                        },
                        required: !0
                    }), i.a.createElement("button", {
                        className: E.emailButton,
                        onClick: T
                    }, f.t("messenger.meeting_booker.confirm")))), S && i.a.createElement("span", {
                        className: E.errorMessage
                    }, S), i.a.createElement("p", null, i.a.createElement("button", {
                        className: E.differentTime,
                        onClick: u
                    }, f.t("messenger.meeting_booker.different_time"))))
                },
                f = n(5),
                O = n(312);
            const C = Object(f.a)("div", {
                    target: "eoujs220",
                    label: "NoAvailableSlotsContainer"
                })("border-radius:8px;background-color:white;position:relative;padding:", u.d.paddingUnits(16), " ", (({
                    isMobile: e
                }) => e ? u.d.paddingUnits(4) : u.d.paddingUnits(6)), ";display:flex;flex-direction:column;align-items:center;justify-content:center;width:", u.d.size("256px"), ";height:", u.d.size("256px"), ";", (({
                    isMobile: e
                }) => e ? "text-align: center;" : "")),
                S = Object(f.a)("span", {
                    target: "eoujs221",
                    label: "DescriptionText"
                })("margin-top:", u.d.marginUnits(4), ";font-size:", u.i.size300, ";font-weight:", u.j.normal, ";text-align:center;max-width:", u.d.size("196px"), ";line-height:", u.k.baseLineHeight, ";"),
                y = Object(f.a)("button", {
                    target: "eoujs222",
                    label: "CancelButton"
                })({
                    name: "1qklspg",
                    styles: "position:absolute;top:12px;right:16px;"
                }),
                k = ({
                    closeAction: e,
                    isMobile: t,
                    hideCloseButton: n
                }) => {
                    const o = Object(a.useContext)(d.a);
                    return i.a.createElement(C, {
                        isMobile: t
                    }, !n && i.a.createElement(y, {
                        onClick: e
                    }, i.a.createElement(h.a, null)), i.a.createElement(O.a, {
                        width: 32,
                        height: 32
                    }), i.a.createElement(S, null, o.t("messenger.meeting_booker.no_availability")))
                };
            var T = n(343),
                A = n(163),
                N = n(313),
                R = n(207);
            t.default = ({
                isMobile: e,
                isBelowThreshold: t,
                conversationId: n,
                scriptMessage: r,
                sendMessage: s,
                closeAction: l,
                scriptMessageIndex: c,
                onChangeIdentity: u,
                hideCloseButton: m,
                growAnimationScale: p,
                meetingThemesEnabled: h,
                showBranding: v
            }) => {
                const [b, E] = Object(a.useState)(!1), [f, O] = Object(a.useState)((null === r || void 0 === r ? void 0 : r.availableSlots) || null), [C, S] = Object(a.useState)(""), [y, D] = Object(a.useState)(null), I = Object(a.useContext)(d.a);
                Object(a.useEffect)((() => {
                    "calendar_event_offer" === (null === r || void 0 === r ? void 0 : r.type) && null === f && O(r.availableSlots)
                }), [r, c, l, f, O]);
                const x = e => {
                        D(e), !r.emailOptional && r.calendarEventInviteEmail && M(e)
                    },
                    M = (e, t) => {
                        E(!0), s({
                            type: "calendar_event_pick",
                            calendarEventStartsAt: e.startsAt,
                            botStep: r.botStep,
                            executionStep: r.executionStep,
                            replyToId: r.id,
                            calendarEventInviteEmail: t || r.calendarEventInviteEmail,
                            conversationId: n
                        }).then((() => {}), (async e => {
                            e instanceof R.UnavailableTimeSlotError && O(e.availabilities), S(e.message), E(!1)
                        }))
                    };
                if (b) return i.a.createElement(N.MeetingLoadingModal, {
                    fullWidth: e && t,
                    loadingMessage: ""
                });
                if (f && 0 !== f.length) {
                    var B, F, w;
                    let n = null;
                    const a = [];
                    r.users && r.users.length > 1 ? r.users.forEach((e => {
                        e.avatarUrl && a.push(e.avatarUrl)
                    })) : n = r.users && r.users[0];
                    const s = Object(g.d)(r.calendarEventTypeDuration, !1, !0, I.locale);
                    if ((r.emailOptional || !r.calendarEventInviteEmail) && y) {
                        var L, P, U, j;
                        const d = null === (L = r.users) || void 0 === L ? void 0 : L.find((e => e.id === r.ownerId));
                        return n = n || d, h ? i.a.createElement(o.a, {
                            isSmallView: t,
                            showBookedRepPhoto: r.showFacepile || !1,
                            hasUser: !!n,
                            repAvatarUrl: null === (P = n) || void 0 === P ? void 0 : P.avatarUrl,
                            repName: null === (U = n) || void 0 === U ? void 0 : U.name,
                            repRole: null === (j = n) || void 0 === j ? void 0 : j.jobTitle,
                            calendarEventAvatarUrls: a,
                            duration: s,
                            closeAction: l,
                            isMobile: e,
                            errorMessage: C,
                            visitorEmail: r.calendarEventInviteEmail,
                            changeVisitorIdentity: u,
                            hideCloseButton: m,
                            growAnimationScale: p,
                            confirmedBooking: y,
                            onSubmit: M,
                            reselectTime: () => D(null),
                            isTimeZoneAbbr: !0,
                            showBranding: v
                        }) : i.a.createElement(_, {
                            confirmedBooking: y,
                            matchedVisitorEmail: r.calendarEventInviteEmail,
                            isMobile: e,
                            onSubmit: M,
                            reselectTime: () => D(null),
                            closeAction: m ? void 0 : l,
                            confirmMatchedVisitorEmail: !0
                        })
                    }
                    const d = {
                        isSmallView: t,
                        showBookedRepPhoto: r.showFacepile || !1,
                        calendarEventAvatarUrls: a,
                        repAvatarUrl: null === (B = n) || void 0 === B ? void 0 : B.avatarUrl,
                        repName: null === (F = n) || void 0 === F ? void 0 : F.name,
                        repRole: null === (w = n) || void 0 === w ? void 0 : w.jobTitle,
                        offerTitle: r.title,
                        offerSubtitle: r.subtitle,
                        confirmBookingForTimeSlot: x,
                        availableSlots: f,
                        duration: s,
                        closeAction: l,
                        isMobile: e,
                        errorMessage: C,
                        visitorEmail: r.calendarEventInviteEmail,
                        changeVisitorIdentity: u,
                        hideCloseButton: m,
                        growAnimationScale: p
                    };
                    return h ? i.a.createElement(A.a, { ...d,
                        showBranding: v,
                        isTimeZoneAbbr: !0
                    }) : i.a.createElement(T.a, { ...d
                    })
                }
                return i.a.createElement(k, {
                    isMobile: e && t,
                    closeAction: l,
                    hideCloseButton: m
                })
            }
        },
        319: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "ChatLoadingModal", (function() {
                return g
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(6);
            const s = Object(a.a)("svg", {
                target: "ec9m1lz0",
                label: "ChatLoading"
            })({
                name: "wi0unf",
                styles: "animation:growBox 200ms ease-out;@keyframes growBox{from{opacity:0;}to{opacity:1;}}#eMt6SwbNyFU2{animation:eMt6SwbNyFU2_c_o 1400ms linear infinite normal forwards;}@keyframes eMt6SwbNyFU2_c_o{0%{opacity:1;}7.142857%{opacity:1;}50%{opacity:0;}57.142857%{opacity:0;}100%{opacity:1;}}#eMt6SwbNyFU4{animation:eMt6SwbNyFU4_c_o 1400ms linear infinite normal forwards;}@keyframes eMt6SwbNyFU4_c_o{0%{opacity:0;}7.142857%{opacity:0;}50%{opacity:1;}57.142857%{opacity:1;}100%{opacity:0;}}"
            });
            var l = ({
                    className: e,
                    color: t,
                    size: n
                }) => o.a.createElement(s, {
                    id: "eMt6SwbNyFU1",
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    shapeRendering: "geometricPrecision",
                    textRendering: "geometricPrecision",
                    height: n,
                    width: n,
                    fill: t
                }, o.a.createElement("path", {
                    id: "eMt6SwbNyFU2",
                    d: "M16.5163,7.41113c3.8348,0,6.9436,3.10877,6.9436,6.94357c0,.7488-.1725,1.4738-.3948,2.102-.2333.6592-.4004,1.1319-.5098,1.4853-.116.3748-.1361.5239-.1354.5705.0016.1151.005.1495.0084.172s.0106.0564.0434.1667c.0192.0646.0673.1718.2082.3832.141.2115.3398.477.63.8638.1704.2273.1978.5314.0708.7854-.1271.2541-.3868.4146-.6708.4146h-6.1936c-3.8348,0-6.94355-3.1087-6.94355-6.9435s3.10875-6.94357,6.94355-6.94357Z",
                    clipRule: "evenodd",
                    fillRule: "evenodd"
                }), o.a.createElement("path", {
                    d: "M16.5164,8.91113c3.0064,0,5.4436,2.43717,5.4436,5.44357c0,.5262-.1229,1.0763-.3088,1.6015l-.0061.0171c-.2259.6385-.4033,1.1395-.5226,1.5251-.1138.3676-.2068.724-.2023,1.0354.0017.1254.0055.2467.0255.3774s.0526.2476.0884.3678c.0539.1811.1341.352.2303.5192h-4.748c-3.0064,0-5.4435-2.4371-5.4435-5.4435s2.4371-5.44357,5.4435-5.44357Zm6.789,11.18107c.0969.1263.1546.2845.1546.456c0,.4142-.3358.75-.75.75h-6.1936c-3.8348,0-6.94354-3.1087-6.94354-6.9435s3.10874-6.94357,6.94354-6.94357s6.9436,3.10877,6.9436,6.94357c0,.7488-.1724,1.4738-.3948,2.102-.2333.6592-.4004,1.1319-.5098,1.4853-.116.3748-.1361.5239-.1354.5705.0016.1151.005.1495.0085.172s.0105.0564.0433.1667c.0192.0646.0673.1718.2082.3832.1403.2103.3377.4742.6254.8578Z",
                    clipRule: "evenodd",
                    fillRule: "evenodd"
                }), o.a.createElement("path", {
                    id: "eMt6SwbNyFU4",
                    d: "M9.25807,2.25c-4.97502,0-9.008066,4.03305-9.008066,9.0081c0,1.1348.30893,2.2391.678851,3.161l.696055-.2793-.696055.2793c.325245.8105.554805,1.3837.697355,1.8198.14803.453.16091.6438.15034.7241-.0136.1033-.06476.2572-.24828.5495-.18597.2962-.46029.663-.86375,1.2009l-.264516.3527c-.170447.2273-.197864.5314-.07082.7854s.386741.4146.670816.4146h8.25807c1.18493,0,2.31813-.2291,3.35643-.6463.2392-.0961.4123-.3083.4583-.5619s-.0413-.5131-.2314-.6872c-1.0881-.9962-1.7688-2.4261-1.7688-4.016c0-3.0064,2.4372-5.44357,5.4436-5.44357.1199,0,.2388.00387.3566.01147.2572.0166.5049-.10006.656-.30892s.1842-.48066.0879-.71976C16.2845,4.58659,13.045,2.25,9.25807,2.25Z",
                    clipRule: "evenodd",
                    fillRule: "evenodd"
                }), o.a.createElement("path", {
                    d: "M0.250004,11.2581c0-4.97505,4.033046-9.0081,9.008066-9.0081c3.78693,0,7.02643,2.33659,8.35863,5.64392.0963.2391.0631.5109-.0879.71976s-.3988.32552-.656.30892c-.1178-.0076-.2367-.01147-.3566-.01147-3.0064,0-5.4436,2.43717-5.4436,5.44357c0,1.5899.6807,3.0198,1.7688,4.016.1901.1741.2775.4336.2314.6872s-.2191.4658-.4583.5619c-1.0383.4172-2.1715.6463-3.35643.6463h-8.25807c-.284075,0-.543772-.1605-.670816-.4146s-.099627-.5581.07082-.7854l.264516-.3527L1,18.9651l-.33548-.2517c.40346-.5379.67778-.9047.86375-1.2009.18352-.2923.23468-.4462.24828-.5495.01057-.0803-.00231-.2711-.15034-.7241-.14255-.4361-.37211-1.0093-.697355-1.8198l.696055-.2793-.696055.2793c-.369921-.9219-.678851-2.0262-.678851-3.161Zm2.240586,7.508c.11594-.1629.2191-.3143.30805-.456.22931-.3652.41024-.7349.46507-1.1512.05786-.4393-.05566-.9085-.21173-1.386-.15975-.4887-.40816-1.1078-.72035-1.8858l-.01066-.0266C1.99175,13.04,1.75,12.1337,1.75,11.2581C1.75,7.11147,5.11148,3.75,9.25807,3.75c2.75773,0,5.16953,1.48699,6.47513,3.70479-3.4662.38901-6.16057,3.32981-6.16057,6.89991c0,1.5827.53017,3.0423,1.42147,4.2099-.5568.1317-1.13792.2015-1.73603.2015h-6.76748Z",
                    clipRule: "evenodd",
                    fillRule: "evenodd"
                })),
                d = n(178),
                c = n(1);
            const u = Object(a.a)("div", {
                    target: "evuayux0",
                    label: "ChatLoadingContainer"
                })("display:flex;justify-content:center;align-items:center;flex-direction:column;width:", c.d.legacySize(`${d.a}px`), ";height:", c.d.legacySize(`${d.a}px`), ";background-color:", c.c.white, ";border-radius:100%;"),
                m = Object(a.a)("div", {
                    target: "evuayux1",
                    label: "Wrapper"
                })("display:flex;justify-content:center;align-items:center;", c.e),
                g = () => o.a.createElement(m, null, o.a.createElement(u, null, o.a.createElement(l, {
                    size: 40,
                    color: r.a.MEETING_BOOKER_COLOR || c.c.loadingSpinner
                })))
        },
        320: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, "MessengerTimelineEntryFactory", (function() {
                return u
            }));
            var a = n(0),
                i = n.n(a),
                o = n(25),
                r = n(62),
                s = n(350),
                l = n(26);
            class d extends s.a {
                getConversationHeader(e) {
                    return null
                }
                textMessage(e, {
                    sendMessage: t,
                    conversation: n,
                    visitor: a,
                    emailDecorator: s,
                    readReceipt: d,
                    nextMessages: c,
                    isBotMessage: u
                }) {
                    const m = [];
                    return "failed" === e.pendingStatus ? (m.push(i.a.createElement(l.e.MessageRetry, {
                        key: `message-${e.id}`,
                        message: e,
                        sendMessage: t,
                        emailDecorator: s,
                        conversation: n,
                        visitor: a
                    })), o.isMobile && m.push(i.a.createElement(l.e.Status, {
                        key: `message-status-${e.id}`
                    }, i.a.createElement(r.a, {
                        id: "messenger.cta.retry_message"
                    })))) : (m.push(i.a.createElement(l.e.Message, {
                        key: `message-${e.id}`,
                        message: e,
                        emailDecorator: s,
                        sendMessage: t,
                        conversation: n,
                        visitor: a
                    })), "sending" === e.pendingStatus && m.push(i.a.createElement(l.e.Status, {
                        key: `message-status-${e.id}`
                    }, i.a.createElement(r.a, {
                        id: "messenger.text.sending"
                    }))), !e.isOwn || e.pendingStatus || u || (n.gptAutoRespondEnabled && 0 === c.length && e.isOwn ? m.push(i.a.createElement(l.e.ReadReceipt, {
                        key: "read",
                        time: new Date
                    })) : e.id !== (null === d || void 0 === d ? void 0 : d.readMessageId) || c.find((e => !e.isOwn)) ? 0 === c.length && e.isOwn && m.push(i.a.createElement(l.e.Unread, {
                        key: "unread",
                        message: e
                    })) : m.push(i.a.createElement(l.e.ReadReceipt, {
                        key: "read",
                        time: d.readAt
                    })))), m
                }
                fieldEntryMessage(e, t) {
                    return this.textMessage(e, t)
                }
                calendarEventPickMessage(e) {
                    if (e.calendarEvent) return i.a.createElement(l.e.CalendarEvent, {
                        key: `calendar-${e.id}`,
                        calendarEvent: e.calendarEvent
                    })
                }
                systemMessage(e, t) {
                    const {
                        conversation: n,
                        nextMessages: a,
                        appexchange: o,
                        appexchangeCompanyName: s
                    } = t;
                    if (!n.user) return null;
                    if ("ap_rep_unavailable" === e.eventType) return this.textMessage(e, t);
                    let d;
                    const c = a.find((e => null != e.userId));
                    return d = Object(l.f)(c) ? i.a.createElement(i.a.Fragment, null, i.a.createElement("span", null, "Auto pounce sent on behalf of ", n.user.name), " \u2013\xa0") : i.a.createElement(i.a.Fragment, null, n.user.name, o ? ` (${s})` : "", " ", i.a.createElement(r.a, {
                        id: "messenger.text.joined"
                    }), " \u2013\xa0"), i.a.createElement(l.e.UserTimestamp, {
                        key: `system-message-${e.id}`,
                        user: n.user,
                        time: e.createdAt
                    }, d)
                }
            }
            var c = n(38);
            class u extends d {
                constructor(e) {
                    super(), this.config = void 0, this.config = e
                }
                fieldRequestMessage(e, t) {
                    const n = this.textMessage(e, t);
                    if (!(t.conversation.endedAt || t.conversation.user) && !t.nextMessages.find((e => !!e.text))) {
                        const a = l.e[`${e.fieldType.camelize()}Field`];
                        n.push(i.a.createElement(a, {
                            key: `field-${e.id}`,
                            message: e,
                            sendMessage: (n, a) => t.sendMessage({
                                type: "field_entry",
                                botStep: e.botStep,
                                executionStep: e.executionStep,
                                text: n,
                                value: a
                            }),
                            config: this.config,
                            noOpOnClick: e.noOpOnClick
                        }))
                    }
                    return n
                }
                calendarEventOfferMessage(e, {
                    sendMessage: t,
                    nextMessages: n,
                    conversation: a
                }) {
                    if (!e.calendarEventBooked && e.availableSlots && !n.find((t => t.replyToId === e.id && t.calendarEvent))) {
                        var o, r, s;
                        if (e.scriptId && a.user) return i.a.createElement(l.e.CalendarCanceled, null);
                        let n = null;
                        const d = [];
                        return e.users && e.users.length > 1 ? e.users.forEach((e => {
                            e.avatarUrl && d.push(e.avatarUrl)
                        })) : n = e.users && e.users[0], i.a.createElement(l.e.BookCalendarEvent, {
                            hideCloseButton: !0,
                            isSmallView: !0,
                            forceShowRep: !0,
                            showBookedRepPhoto: !0,
                            validateEmailDomain: e.validateEmailDomain,
                            calendarEventAvatarUrls: d,
                            repAvatarUrl: null === (o = n) || void 0 === o ? void 0 : o.avatarUrl,
                            repName: null === (r = n) || void 0 === r ? void 0 : r.name,
                            repRole: null === (s = n) || void 0 === s ? void 0 : s.jobTitle,
                            availableSlots: e.availableSlots,
                            duration: Object(c.e)(e.calendarEventTypeDuration),
                            sendMessage: t,
                            message: e,
                            key: `book-calendar-${e.id}`
                        })
                    }
                }
                calendarEventPickMessage(e) {
                    if (e.calendarEvent) return i.a.createElement(l.e.CalendarEvent, {
                        key: `calendar-${e.id}`,
                        calendarEvent: e.calendarEvent
                    })
                }
                promptMessage(e, {
                    emailDecorator: t,
                    conversation: n,
                    visitor: a
                }) {
                    var o, r;
                    return null !== (o = this.config) && void 0 !== o && null !== (r = o.features) && void 0 !== r && r.find((e => "demo_dreamforce" === e)) ? null : i.a.createElement(l.e.Message, {
                        key: `message-${e.id}`,
                        message: Object.assign({}, e, {
                            text: `${e.heading}\n${e.body}`
                        }),
                        emailDecorator: t,
                        conversation: n,
                        visitor: a
                    })
                }
                greetingMessage(e, t) {
                    return e.text = `${e.heading}\n\n${e.body}`, this.fieldRequestMessage(e, t)
                }
                systemMessage(e, t) {
                    return t.conversation.endedAt && "participant_joined" === e.eventType ? null : super.systemMessage(e, t)
                }
                getConversationHeader(e) {
                    var t;
                    const n = null !== (t = this.config) && void 0 !== t && t.appexchange ? ` (${this.config.appexchangeCompanyName})` : "";
                    return e.endedAt && e.user ? i.a.createElement(l.e.UserTimestamp, {
                        key: `conversation-${e.id}`,
                        user: e.user,
                        time: e.createdAt
                    }, e.user.name, n, " \u2013\xa0") : i.a.createElement(l.e.Timestamp, {
                        key: `conversation-${e.id}`,
                        time: e.createdAt
                    })
                }
            }
        },
        326: function(e, t, n) {
            "use strict";

            function a(e) {
                const t = {};
                for (const n of e) t[n] = `var(--${n})`;
                return t
            }
            n.d(t, "a", (function() {
                return a
            }))
        },
        327: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(19);

            function s(e) {
                return t => o.a.createElement(r.a, {
                    value: a.a
                }, o.a.createElement(e, { ...t
                }))
            }
        },
        33: function(e, t, n) {
            "use strict";
            var a = n(968),
                i = n(431),
                o = n(969),
                r = n(581),
                s = n(970),
                l = n(971),
                d = n(972),
                c = n(973),
                u = n(974),
                m = n(975),
                g = n(976),
                p = n(977),
                h = n(978),
                v = n(979),
                b = n(980),
                E = n(981);
            const _ = {
                cs: a.a,
                en: i.a,
                de: o.a,
                es: r.a,
                fr: s.a,
                id: l.a,
                it: d.a,
                nl: c.a,
                ru: u.a,
                th: m.a,
                pl: g.a,
                pt_BR: p.a,
                es_LA: r.a,
                ja: h.a,
                zh_CN: v.a,
                zh_TW: b.a,
                ko: E.a
            };
            t.a = _
        },
        331: function(e, t, n) {
            "use strict";
            var a = n(0),
                i = n.n(a),
                o = n(165),
                r = n(38),
                s = n(101);
            t.a = ({
                outerElementType: e = "span",
                outerElementProps: t = {},
                startedAt: n,
                endedAt: l,
                hourMaximum: d,
                className: c
            }) => {
                const [u, m] = Object(a.useState)(new Date), g = Object(a.useMemo)((() => {
                    const e = n ? u : l,
                        t = n || u;
                    return d && Object(o.a)(Object(r.b)(e), Object(r.b)(t)) >= 36e5 ? "> 1 hr" : Object(r.a)(t, e)
                }), [n, l, d, u]);
                return Object(a.useEffect)((() => Object(s.c)(1e3, (() => m(new Date)))), []), i.a.createElement(e, { ...t,
                    className: c
                }, g)
            }
        },
        335: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(46),
                i = n(326);

            function o(e) {
                return {
                    CSS_VARS: Object(i.a)(e),
                    setCssVariables: function(e) {
                        return Object(a.a)(e)
                    }
                }
            }
        },
        336: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return i
            })), n.d(t, "a", (function() {
                return o
            }));
            class a extends Error {
                constructor(e) {
                    super(`InvariantError: ${e}`)
                }
            }
            const i = e => () => {
                throw new a(`attempted to invoke method before it was initialized: ${e}`)
            };

            function o(e) {
                return e
            }
        },
        337: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return r
            })), n.d(t, "a", (function() {
                return s
            }));
            var a = n(2),
                i = n(21),
                o = n(1);
            const r = e => ({
                    optionRowBorderColor: e.fieldBorderColor,
                    optionRowBackgroundColor: o.c.white,
                    optionRowTextColor: e.primaryTextColor,
                    selectedOptionBackgroundColor: Object(i.h)(.8, o.c.quartzTeal),
                    selectedOptionTextColor: e.primaryTextColor,
                    selectedOptionFocusStyle: Object(a.b)(e.focusStyle, ";outline-offset:0;;label:selectedOptionFocusStyle;")
                }),
                s = ({
                    currentTheme: e,
                    meetingBookerColor: t,
                    meetingBookerTextColor: n
                }) => ({ ...e,
                    selectedOptionBackgroundColor: t,
                    selectedOptionTextColor: n,
                    optionRowTextColor: o.h.primary,
                    selectedOptionFocusStyle: Object(a.b)("outline:2px solid ", t, ";outline-offset:0;;label:selectedOptionFocusStyle;")
                })
        },
        338: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return r
            })), n.d(t, "a", (function() {
                return s
            }));
            var a = n(21),
                i = n(1);
            const o = Object(a.f)(i.c.iconGray, .2),
                r = e => ({
                    progressBarColor: e.primaryColor,
                    progressBarBackgroundColor: o
                }),
                s = e => ({
                    progressBarColor: e,
                    progressBarBackgroundColor: o
                })
        },
        341: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(551),
                i = n.n(a);

            function o(e) {
                const t = i()(e);
                if (!t.includes(null)) return !0;
                const n = t[0];
                if (null !== n) {
                    if (n.trim().split(/(\s+)/).length > 1) return !0;
                    const t = /,? +(i{1,3}|iv|vi{0,3}|s(enio)?r|j(unio)?r|phd|apr|rph|pe|md|ma|dmd|cme)$/i;
                    if (-1 !== e.search(t)) return !0
                }
                return !1
            }
        },
        342: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(0),
                i = n.n(a);
            const o = ({
                text: e
            }) => {
                const t = e.split("\n");
                return i.a.createElement(i.a.Fragment, null, t.map(((e, n) => i.a.createElement(i.a.Fragment, {
                    key: n
                }, e, n < t.length - 1 && i.a.createElement("br", {
                    role: "presentation"
                })))))
            }
        },
        343: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(84),
                s = n(230),
                l = n(61),
                d = n(129),
                c = n(46),
                u = n(14),
                m = n(1),
                g = n(100),
                p = n(76),
                h = n(205),
                v = n(206),
                b = n(144),
                E = n(104);
            const _ = {
                    hideBoxShadow: Object(a.b)({
                        name: "ifc7qc-hideBoxShadow",
                        styles: "box-shadow:none;;label:hideBoxShadow;"
                    }),
                    rootMobile: Object(a.b)({
                        name: "1w90a68-rootMobile",
                        styles: "width:100%;;label:rootMobile;"
                    }),
                    offerPageStyle: Object(a.b)("max-width:", m.d.size("528px"), ";padding:var(--padding);text-align:center;position:relative;overflow-y:auto;height:100%;;label:offerPageStyle;"),
                    offerPageStyleWithAlert: Object(a.b)("padding-top:calc(var(--padding) + ", m.d.paddingUnits(6), ");;label:offerPageStyleWithAlert;"),
                    offerTitle: Object(a.b)("font-weight:", m.j.semiBold, ";font-size:var(--fontSize);margin-bottom:", m.d.marginUnits(2), ";margin-top:", m.d.marginUnits(6), ";;label:offerTitle;"),
                    offerSubtitle: Object(a.b)("font-weight:", m.j.normal, ";font-size:var(--fontSize);margin-bottom:", m.d.marginUnits(8), ";margin-top:0;;label:offerSubtitle;"),
                    footer: Object(a.b)("bottom:1rem;display:flex;flex-direction:row;justify-content:space-between;flex-wrap:wrap;font-weight:", m.j.normal, ";font-size:", m.i.size300, ";line-height:", m.d.legacyLineHeight("1rem"), ";margin-top:", m.d.marginUnits(8), ";color:", m.c.secondaryText, ";margin-top:var(--marginTop);;label:footer;"),
                    changeIdentitySection: Object(a.b)({
                        name: "1vg8bha-changeIdentitySection",
                        styles: "flex-basis:100%;text-align:left;;label:changeIdentitySection;"
                    }),
                    changeIdentityButton: Object(a.b)("color:", m.c.secondaryText, ";text-decoration:underline;;label:changeIdentityButton;"),
                    footerText: Object(a.b)("display:flex;align-items:center;gap:", m.d.gapUnits(1), ";margin-bottom:0;;label:footerText;"),
                    alertMessage: Object(a.b)("position:absolute;top:1rem;left:0;right:0;margin-left:auto;margin-right:auto;width:fit-content;padding:", m.d.legacyPadding("6px"), " ", m.d.paddingUnits(4), ";border-radius:4px;background-color:rgba(255,133,88,0.15);color:", m.c.darkOrange, ";font-size:", m.i.size300, ";;label:alertMessage;"),
                    alertMessageMobile: Object(a.b)("top:0.5rem;padding:", m.d.legacyPadding("2px"), " ", m.d.legacyPadding("6px"), ";margin:", m.d.legacyMargin("2px"), " auto;;label:alertMessageMobile;")
                },
                f = e => Object(a.b)("animation:growBox 300ms ease-out;@keyframes growBox{from{transform:scale(", e, ");}to{transform:scale(1);}}"),
                O = {
                    default: {
                        padding: m.d.paddingUnits(12),
                        offerTitleFontSize: m.n.fontSize800,
                        offerSubtitleFontSize: m.n.fontSize500,
                        footerMargin: m.d.marginUnits(8)
                    },
                    smallView: {
                        padding: `${m.d.paddingUnits(10)} ${m.d.paddingUnits(1)}`,
                        offerTitleFontSize: m.n.fontSize500,
                        offerSubtitleFontSize: m.n.fontSize300,
                        footerMargin: m.d.marginUnits(6)
                    },
                    mobile: {
                        padding: `${m.d.paddingUnits(10)} ${m.d.paddingUnits(6)} ${m.d.paddingUnits(2)} ${m.d.paddingUnits(6)}`,
                        offerTitleFontSize: m.n.fontSize500,
                        offerSubtitleFontSize: m.n.fontSize300,
                        footerMargin: m.d.marginUnits(6)
                    }
                };
            t.a = ({
                isSmallView: e = !1,
                showBookedRepPhoto: t,
                calendarEventAvatarUrls: n,
                repAvatarUrl: i,
                repName: C,
                repRole: S,
                offerTitle: y,
                offerSubtitle: k,
                confirmBookingForTimeSlot: T,
                availableSlots: A,
                duration: N,
                closeAction: R,
                hideCloseButton: D,
                makeButtonsViewOnly: I,
                isMobile: x,
                forceShowRep: M,
                className: B,
                source: F,
                isTimeZoneAbbr: w,
                errorMessage: L,
                visitorEmail: P,
                changeVisitorIdentity: U,
                growAnimationScale: j,
                hideBoxShadow: z
            }) => {
                const V = o.a.useContext(u.a),
                    G = Object(E.c)(!!w),
                    $ = (e => {
                        if (!e) return e;
                        if (-1 === e.indexOf("@")) return e;
                        const [t, n] = e.split("@");
                        let a = t[0] + "*".repeat(t.length - 1);
                        return a.length > 2 && (a = a.slice(0, t.length - 1) + e[t.length - 1]), `${a}@${n}`
                    })(P),
                    H = x && e ? O.mobile : e ? O.smallView : O.default;
                return o.a.createElement(l.a, {
                    className: Object(a.c)({
                        [f(j)]: !!j,
                        [_.rootMobile]: x,
                        [_.hideBoxShadow]: z
                    })
                }, P && o.a.createElement(b.b, null, V.t("messenger.text_sub.invite_sent", {
                    email: $
                }), " ", o.a.createElement(b.a, {
                    onClick: U
                }, V.t("messenger.text.not_you")), "?"), o.a.createElement("div", {
                    className: Object(a.c)(_.offerPageStyle, {
                        [_.offerPageStyleWithAlert]: !!L && !x && !e
                    }, B),
                    style: Object(c.a)({
                        padding: H.padding
                    })
                }, !D && o.a.createElement("button", {
                    className: r.a,
                    onClick: R,
                    "aria-label": "Close"
                }, o.a.createElement(p.a, {
                    "aria-label": "Cancel"
                })), L && o.a.createElement("div", {
                    className: Object(a.c)(_.alertMessage, {
                        [_.alertMessageMobile]: x || e
                    })
                }, o.a.createElement(g.a, {
                    "aria-label": "Alert",
                    style: {
                        fill: m.c.darkOrange
                    }
                }), " ", L), t && o.a.createElement(d.a, {
                    calendarEventAvatarUrls: n,
                    repAvatarUrl: i,
                    repName: C,
                    repRole: S,
                    isSmallView: e,
                    forceShowAvatars: M
                }), y && o.a.createElement("p", {
                    className: _.offerTitle,
                    style: Object(c.a)({
                        fontSize: m.d.legacyFontSize(`${H.offerTitleFontSize}px`)
                    })
                }, y), k && o.a.createElement("p", {
                    className: _.offerSubtitle,
                    style: Object(c.a)({
                        fontSize: m.d.legacyFontSize(`${H.offerSubtitleFontSize}px`)
                    })
                }, k), o.a.createElement(s.a, {
                    confirmBookingForTimeSlot: T,
                    availableSlots: A,
                    isSmallView: e,
                    makeButtonsViewOnly: I,
                    isMobile: x,
                    source: F,
                    selectedSlot: null,
                    setSelectedSlot: e => {}
                }), o.a.createElement("footer", {
                    className: _.footer,
                    style: Object(c.a)({
                        marginTop: H.footerMargin
                    })
                }, o.a.createElement("p", {
                    className: _.footerText
                }, o.a.createElement(v.a, null), " ", N), o.a.createElement("p", {
                    className: _.footerText
                }, G && o.a.createElement(o.a.Fragment, null, o.a.createElement(h.a, {
                    "aria-label": "Globe"
                }), " ", G)))))
            }
        },
        35: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return d
            })), n.d(t, "b", (function() {
                return u
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(70),
                s = n(23);
            const l = {
                    wrap: s.a.identity,
                    gapUnits: s.a.gapUnits,
                    rowGapUnits: s.a.gapUnits,
                    columnGapUnits: s.a.gapUnits,
                    align: s.a.identity,
                    justify: s.a.identity,
                    direction: s.a.identity,
                    display: s.a.identity,
                    alignSelf: s.a.identity,
                    flexGrow: s.a.identity,
                    flexShrink: s.a.identity
                },
                d = o.a.forwardRef((({
                    wrap: e,
                    gapUnits: t,
                    rowGapUnits: n,
                    columnGapUnits: i,
                    align: s,
                    justify: d,
                    direction: c,
                    display: u = "flex",
                    alignSelf: m,
                    flexGrow: g,
                    flexShrink: p,
                    children: h,
                    _quartzInternal_className: v,
                    ...b
                }, E) => o.a.createElement(r.a, { ...b,
                    _quartzInternal_className: Object(a.c)(Object(a.b)(null != e ? `flex-wrap: ${l.wrap(e)}` : null, ";", null != t ? `gap: ${l.gapUnits(t)}` : null, ";", null != n ? `row-gap: ${l.rowGapUnits(n)}` : null, ";", null != i ? `column-gap: ${l.columnGapUnits(i)}` : null, ";", null != s ? `align-items: ${l.align(s)}` : null, ";", null != d ? `justify-content: ${l.justify(d)}` : null, ";", null != c ? `flex-direction: ${l.direction(c)}` : null, ";", null != m ? `align-self: ${l.alignSelf(m)}` : null, ";", null != g ? `flex-grow: ${l.flexGrow(g)}` : null, ";", null != p ? `flex-shrink: ${l.flexShrink(p)}` : null, ";;label:Flex;"), v),
                    display: u,
                    ref: E
                }, h))),
                c = {
                    alignSelf: s.a.identity,
                    flexGrow: s.a.identity,
                    flexShrink: s.a.identity
                },
                u = o.a.forwardRef((({
                    alignSelf: e,
                    flexGrow: t,
                    flexShrink: n,
                    children: i,
                    _quartzInternal_className: s,
                    ...l
                }, d) => o.a.createElement(r.a, { ...l,
                    _quartzInternal_className: Object(a.c)(Object(a.b)(null != e ? `align-self: ${c.alignSelf(e)}` : null, ";", null != t ? `flex-grow: ${c.flexGrow(t)}` : null, ";", null != n ? `flex-shrink: ${c.flexShrink(n)}` : null, ";;label:FlexItem;"), s),
                    ref: d
                }, i)))
        },
        350: function(e, t, n) {
            "use strict";
            t.a = class {
                getMessageEntries(e, t) {
                    var n;
                    return (null === (n = this[`${e.type.camelize(!0)}Message`]) || void 0 === n ? void 0 : n.call(this, e, t)) || []
                }
            }
        },
        352: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(966),
                s = n(21),
                l = n(132),
                d = n(35),
                c = n(95),
                u = n(70),
                m = n(1);
            const g = {
                    root: Object(a.b)({
                        name: "1jg5xq1-root",
                        styles: "display:inline-block;;label:root;"
                    })
                },
                p = o.a.forwardRef((({
                    _quartzInternal_className: e,
                    label: t,
                    screenReaderOnly: n = !1,
                    marginBottomUnits: i = 0,
                    variant: r,
                    htmlFor: s,
                    ...l
                }, d) => {
                    const c = Object(u.b)({
                        marginBottomUnits: i
                    });
                    return o.a.createElement("label", { ...l,
                        htmlFor: s,
                        className: Object(a.c)(g.root, {
                            [m.o.labelPrimary]: "primary" === r
                        }, {
                            [m.o.labelSecondary]: "secondary" === r
                        }, c, {
                            [m.p]: n
                        }, e),
                        ref: d
                    }, t)
                }));
            var h = n(232),
                v = n(61),
                b = n(46),
                E = n(176),
                _ = n(14),
                f = n(6),
                O = n(33),
                C = n(38),
                S = n(113),
                y = n(309),
                k = n(129),
                T = n(100),
                A = n(76),
                N = n(84),
                R = n(104),
                D = n(220);
            const I = {
                alertMessage: Object(a.b)("position:absolute;top:1rem;left:0;right:0;margin-left:auto;margin-right:auto;width:fit-content;padding:", m.d.paddingUnits(4), ";border-radius:4px;background-color:rgba(255,133,88,0.15);color:", m.c.darkOrange, ";font-size:", m.i.size300, ";;label:alertMessage;"),
                alertMessageMobile: Object(a.b)("top:0.5rem;padding:", m.d.paddingUnits(1), " ", m.d.paddingUnits(2), ";margin:", m.d.marginUnits(1), " auto;;label:alertMessageMobile;")
            };
            var x = ({
                    isSmallView: e = !1,
                    showBookedRepPhoto: t,
                    repAvatarUrl: n,
                    repName: i,
                    repRole: r,
                    duration: s,
                    isMobile: l,
                    errorMessage: c,
                    hideCloseButton: u,
                    closeAction: g,
                    isTimeZoneAbbr: p
                }) => {
                    const h = Object(R.c)(!!p);
                    return o.a.createElement(o.a.Fragment, null, !u && o.a.createElement("button", {
                        className: N.a,
                        onClick: g,
                        "aria-label": "Close"
                    }, o.a.createElement(A.a, {
                        "aria-hidden": !0
                    })), c && o.a.createElement("div", {
                        className: Object(a.c)(I.alertMessage, {
                            [I.alertMessageMobile]: l || e
                        })
                    }, o.a.createElement(T.a, {
                        "aria-hidden": !0,
                        style: {
                            fill: m.c.darkOrange
                        }
                    }), " ", c), t && o.a.createElement(d.a, {
                        align: "center",
                        gapUnits: l ? 3 : 6,
                        paddingTopUnits: l ? 4 : 16,
                        marginRightUnits: l ? 0 : 16,
                        paddingHorizontalUnits: l ? 0 : 12,
                        direction: "column"
                    }, o.a.createElement(k.a, {
                        calendarEventAvatarUrls: [],
                        repAvatarUrl: n,
                        repName: i,
                        repRole: r,
                        isLargeView: !0
                    }), Object(D.a)(s || "", h)))
                },
                M = n(163);
            const B = {
                    hideBoxShadow: Object(a.b)({
                        name: "ifc7qc-hideBoxShadow",
                        styles: "box-shadow:none;;label:hideBoxShadow;"
                    }),
                    root: Object(a.b)({
                        name: "55ihdy-root",
                        styles: "overflow-y:auto;height:100%;;label:root;"
                    }),
                    rootMobile: Object(a.b)({
                        name: "1w90a68-rootMobile",
                        styles: "width:100%;;label:rootMobile;"
                    }),
                    confirmationPageWithThemesStyle: Object(a.b)({
                        name: "1ldg7dr-confirmationPageWithThemesStyle",
                        styles: "display:flex;padding:var(--padding);text-align:center;position:relative;;label:confirmationPageWithThemesStyle;"
                    }),
                    confirmationPageMobileStyle: Object(a.b)("flex-direction:column;padding:", m.d.paddingUnits(6), ";;label:confirmationPageMobileStyle;"),
                    confirmationPageWithThemesStyleWithAlert: Object(a.b)("padding-top:calc(var(--padding) + ", m.d.paddingUnits(6), ");;label:confirmationPageWithThemesStyleWithAlert;"),
                    verticalLine: Object(a.b)("border-left:1px solid ", m.c.lightGray, ";margin-right:", m.d.marginUnits(14), ";align-self:stretch;;label:verticalLine;"),
                    smallVerticalLine: Object(a.b)("border-left:1px solid ", m.c.lightGray, ";;label:smallVerticalLine;"),
                    emailInputSection: Object(a.b)("display:flex;flex-direction:column;padding:", m.d.paddingUnits(14), ";margin-top:", m.d.marginUnits(6), ";border:1px solid ", m.c.borderGray, ";border-radius:", m.n.inputBorderRadius, "px;background-color:", m.c.lightestBackground, ";text-align:left;max-width:", m.d.unsafeSize("450px"), ";&.is-mobile{padding:", m.d.paddingUnits(6), ";margin-top:", m.d.marginUnits(2), ";max-width:", m.d.size("328px"), ";};label:emailInputSection;"),
                    emailInput: Object(a.b)("padding:", m.d.paddingUnits(3), " ", m.d.paddingUnits(4), ";width:", m.d.size("336px"), ";border:1px solid ", m.c.buttonIconDisabled, ";border-radius:", m.n.inputBorderRadius, "px;font-size:", m.i.size500, ";font-weight:", m.j.normal, ";color:", m.c.blackPearl, ";background-color:", m.c.white, ";max-width:90%;&::placeholder{color:", Object(s.h)(.5, m.c.blackPearl), ";}&:focus{outline:none !important;border:1px solid ", f.a.MEETING_BOOKER_COLOR, ";}&.is-mobile{width:100%;};label:emailInput;"),
                    confirmButton: Object(a.b)("display:flex;justify-content:flex-end;margin-top:", m.d.marginUnits(4), ";gap:", m.d.gapUnits(2), ";;label:confirmButton;"),
                    checkIcon: Object(a.b)("position:relative;left:", m.d.size("8px"), ";;label:checkIcon;"),
                    errorMessage: Object(a.b)("font-size:", m.i.size300, ";color:", m.c.dangerRed, ";text-align:left;margin-top:", m.d.marginUnits(2), ";margin-right:", m.d.marginUnits(4), ";padding-bottom:", m.d.paddingUnits(2), ";display:block;;label:errorMessage;")
                },
                F = e => Object(a.b)("animation:growBox 300ms ease-out;@keyframes growBox{from{transform:scale(", e, ");}to{transform:scale(1);}}"),
                w = {
                    default: {
                        padding: m.d.paddingUnits(14),
                        confirmationTitleFontSize: m.n.fontSize800,
                        footerMargin: m.d.marginUnits(8)
                    },
                    smallView: {
                        padding: `${m.d.paddingUnits(10)} ${m.d.paddingUnits(1)}`,
                        confirmationTitleFontSize: m.n.fontSize500,
                        footerMargin: m.d.marginUnits(6)
                    },
                    mobile: {
                        padding: `${m.d.paddingUnits(10)} ${m.d.paddingUnits(6)} ${m.d.paddingUnits(2)} ${m.d.paddingUnits(6)}`,
                        confirmationTitleFontSize: m.n.fontSize500,
                        confirmationSubtitleFontSize: m.n.fontSize300,
                        footerMargin: m.d.marginUnits(6)
                    }
                };
            t.a = ({
                isSmallView: e = !1,
                showBookedRepPhoto: t,
                hasUser: n,
                repAvatarUrl: s,
                repName: u,
                repRole: g,
                calendarEventAvatarUrls: f,
                duration: k,
                isMobile: T,
                className: A,
                errorMessage: N,
                visitorEmail: I,
                growAnimationScale: L,
                hideBoxShadow: P,
                confirmedBooking: U,
                onSubmit: j,
                reselectTime: z,
                confirmation: V = !1,
                hideCloseButton: G,
                closeAction: $,
                isTimeZoneAbbr: H,
                showBranding: W = !1
            }) => {
                const K = o.a.useContext(_.a),
                    q = Object(R.c)(!!H),
                    Y = o.a.useRef(null);
                o.a.useEffect((() => {
                    var e;
                    null === (e = Y.current) || void 0 === e || e.focus()
                }), []);
                const [X, Q] = Object(i.useState)(I || ""), [Z, J] = o.a.useState(null), ee = T && e ? w.mobile : e ? w.smallView : w.default, te = Object(C.f)(Object(r.a)(new Date(U.startsAt), K.t("messenger.dates.time_format_detail"), {
                    locale: O.a[K.locale]
                }), K), {
                    date: ne,
                    time: ae
                } = Object(C.g)(te), ie = () => {
                    const [e, t] = Object(S.c)(X, !1);
                    e ? (J(null), null === j || void 0 === j || j(U, X)) : J("personal" === t ? K.t("messenger.error.business_email") : K.t("messenger.error.email"))
                }, oe = Object(E.a)(), re = Object(E.a)();
                return o.a.createElement(v.a, {
                    className: Object(a.c)(B.root, {
                        [F(L)]: !!L,
                        [B.rootMobile]: T,
                        [B.hideBoxShadow]: P
                    })
                }, o.a.createElement("div", {
                    className: Object(a.c)(B.confirmationPageWithThemesStyle, {
                        [B.confirmationPageWithThemesStyleWithAlert]: !!N && !T && !e,
                        [B.confirmationPageMobileStyle]: T
                    }, A),
                    style: Object(b.a)({
                        padding: ee.padding
                    })
                }, n ? o.a.createElement(x, {
                    isSmallView: e,
                    showBookedRepPhoto: t,
                    repAvatarUrl: s,
                    repName: u,
                    repRole: g,
                    duration: k,
                    isMobile: T,
                    errorMessage: N,
                    hideCloseButton: G,
                    closeAction: $,
                    isTimeZoneAbbr: H
                }) : o.a.createElement(D.b, {
                    isSmallView: e,
                    showBookedRepPhoto: t,
                    calendarEventAvatarUrls: f || [],
                    repAvatarUrl: s,
                    repName: u,
                    repRole: g,
                    duration: k,
                    closeAction: $,
                    hideCloseButton: G,
                    isMobile: T,
                    errorMessage: N,
                    isTimeZoneAbbr: H
                }), o.a.createElement("div", {
                    className: B.verticalLine
                }), o.a.createElement(d.a, {
                    direction: "column",
                    textAlign: "left",
                    gapUnits: T ? 4 : 6
                }, o.a.createElement(c.a, {
                    level: 2,
                    preset: "headingSmall"
                }, "Meeting info"), o.a.createElement(d.a, {
                    gapUnits: T ? 3 : 8,
                    direction: T ? "column" : "row",
                    height: T ? 104 : 48
                }, o.a.createElement(d.b, null, o.a.createElement(p, {
                    label: "Time",
                    variant: "secondary",
                    htmlFor: oe
                }), o.a.createElement(c.a, {
                    level: 2,
                    preset: "headingMedium",
                    id: oe
                }, ae, " ", q)), !T && o.a.createElement("div", {
                    className: B.smallVerticalLine
                }), o.a.createElement(d.b, null, o.a.createElement(p, {
                    label: "Date",
                    variant: "secondary",
                    htmlFor: re
                }), o.a.createElement(c.a, {
                    level: 2,
                    preset: "headingMedium",
                    id: re
                }, ne))), o.a.createElement("div", {
                    className: Object(a.c)(B.emailInputSection, {
                        "is-mobile": T
                    })
                }, o.a.createElement(d.a, {
                    gapUnits: 4,
                    direction: "column"
                }, o.a.createElement(h.a, {
                    role: "status"
                }, V ? "Your meeting has been successfully scheduled, meeting details have been sent to:" : "To which email address should we send the invitation?"), o.a.createElement(d.b, null, o.a.createElement("input", {
                    "aria-label": "Email address",
                    className: B.emailInput,
                    ref: Y,
                    onKeyDown: e => {
                        "Enter" === e.key && ie()
                    },
                    placeholder: K.t("messenger.placeholder.email"),
                    value: X,
                    onChange: e => {
                        Q(e.target.value)
                    },
                    required: !0,
                    disabled: V,
                    type: "email",
                    autoComplete: "email"
                }), V && o.a.createElement(y.a, {
                    height: 12,
                    fill: m.c.green,
                    className: B.checkIcon,
                    "aria-hidden": !0
                }))), Z && o.a.createElement("span", {
                    className: B.errorMessage
                }, Z)), o.a.createElement("div", {
                    className: B.confirmButton
                }, !V && o.a.createElement(l.a, {
                    variant: "secondary",
                    size: "small",
                    onClick: z
                }, "Back"), !V && o.a.createElement(l.a, {
                    variant: "primary",
                    size: "small",
                    disabled: "" === X,
                    onClick: ie
                }, K.t("messenger.meeting_booker.confirm"))))), Object(M.b)(W))
            }
        },
        353: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return l
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(70),
                s = n(1);
            const l = o.a.forwardRef((({
                preset: e,
                children: t,
                _quartzInternal_className: n,
                as: i,
                screenReaderOnly: l,
                ...d
            }, c) => {
                const [u, m] = Object(r.c)(d), g = Object(r.b)(u), p = e ? s.o[e] : s.b;
                return o.a.createElement(i, { ...m,
                    className: Object(a.c)(p, g, {
                        [s.p]: l
                    }, n),
                    ref: c
                }, t)
            }))
        },
        38: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return f
            })), n.d(t, "a", (function() {
                return O
            })), n.d(t, "c", (function() {
                return A
            })), n.d(t, "d", (function() {
                return N
            })), n.d(t, "e", (function() {
                return R
            })), n.d(t, "f", (function() {
                return D
            })), n.d(t, "g", (function() {
                return I
            })), n.d(t, "h", (function() {
                return x
            }));
            var a = n(410),
                i = n(960),
                o = n(165),
                r = n(235),
                s = n(179),
                l = n(961),
                d = n(962),
                c = n(982),
                u = n(963),
                m = n(967),
                g = n(964),
                p = n(966),
                h = n(409),
                v = n.n(h),
                b = n(548),
                E = n.n(b),
                _ = n(33);
            const f = e => Object(a.a)(e) ? e : "number" === typeof e ? new Date(e) : Object(i.a)(e);

            function O(e, t) {
                const n = Math.max(Object(o.a)(f(t), f(e)), 0),
                    a = Object(r.a)(Object(s.a)(new Date), n),
                    i = Object(l.a)(a) > 0 ? "HH:mm:ss" : "mm:ss";
                return Object(d.a)(a, i)
            }
            const C = e => ({
                    roundingMethod: "floor",
                    locale: {
                        formatDistance: (t, n) => 1 === n && e[t].one ? e[t].one : e[t].other.replace("{{count}}", n)
                    }
                }),
                S = C({
                    xSeconds: {
                        one: "1 second",
                        other: "{{count}} seconds"
                    },
                    xMinutes: {
                        one: "1 minute",
                        other: "{{count}} minutes"
                    },
                    xHours: {
                        one: "1 hour",
                        other: "{{count}} hours"
                    },
                    xDays: {
                        one: "1 day",
                        other: "{{count}} days"
                    },
                    xMonths: {
                        one: "1 month",
                        other: "{{count}} months"
                    },
                    xYears: {
                        one: "1 year",
                        other: "{{count}} years"
                    }
                }),
                y = C({
                    xSeconds: {
                        one: "1 sec",
                        other: "{{count}} secs"
                    },
                    xMinutes: {
                        one: "1 min",
                        other: "{{count}} mins"
                    },
                    xHours: {
                        one: "1 hr",
                        other: "{{count}} hrs"
                    },
                    xDays: {
                        one: "1 day",
                        other: "{{count}} days"
                    },
                    xMonths: {
                        one: "1 mo",
                        other: "{{count}} mos"
                    },
                    xYears: {
                        one: "1 yr",
                        other: "{{count}} yrs"
                    }
                }),
                k = C({
                    xSeconds: {
                        other: "{{count}} second"
                    },
                    xMinutes: {
                        other: "{{count}} minute"
                    },
                    xHours: {
                        other: "{{count}} hour"
                    },
                    xDays: {
                        other: "{{count}} day"
                    },
                    xMonths: {
                        other: "{{count}} month"
                    },
                    xYears: {
                        other: "{{count}} year"
                    }
                }),
                T = C({
                    xSeconds: {
                        other: "{{count}} sec"
                    },
                    xMinutes: {
                        other: "{{count}} min"
                    },
                    xHours: {
                        other: "{{count}} hr"
                    },
                    xDays: {
                        other: "{{count}} day"
                    },
                    xMonths: {
                        other: "{{count}} mo"
                    },
                    xYears: {
                        other: "{{count}} yr"
                    }
                });

            function A(e, t, n = !1, a = !0, i = "en") {
                const o = f(e),
                    r = f(t);
                let s = {};
                return s = "en" !== i && _.a[i] ? {
                    roundingMethod: "floor",
                    locale: _.a[i]
                } : n ? a ? y : T : a ? S : k, Object(c.a)(o, r, s)
            }

            function N(e, t = !1, n = !0, a = "en") {
                return function(e, t = !1, n = !0, a = "en") {
                    const i = new Date;
                    return A(i, Object(r.a)(i, e), t, n, a)
                }(1e3 * e, t, n, a)
            }

            function R(e) {
                const t = new Date,
                    n = Object(u.a)(t, e),
                    a = Object(m.a)({
                        start: t,
                        end: n
                    });
                return Object(g.a)(a)
            }
            const D = (e, t) => "en" === t.locale && "string" === typeof e && "function" === typeof e.replace ? e.replace(/a.m./g, "am").replace(/p.m./g, "pm") : e,
                I = e => {
                    const [t, n, ...a] = e.split(" ");
                    return {
                        time: `${t} ${n}`,
                        date: a.join(" ")
                    }
                },
                x = (e, t) => Object(p.a)(f(e), t);
            v.a.extend(E.a)
        },
        434: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("g", {
                    filter: "url(#close_svg__filter0_d_2003_16647)"
                }, a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M2 7.667L3.333 9 6 6.334 8.667 9 10 7.667 7.333 5 10 2.333 8.667 1 6 3.667 3.333 1.001 2 2.334 4.666 5 2 7.667z",
                    fill: "#fff",
                    fillOpacity: .66,
                    shapeRendering: "crispEdges"
                })),
                r = a.createElement("defs", null, a.createElement("filter", {
                    id: "close_svg__filter0_d_2003_16647",
                    x: 0,
                    y: 0,
                    width: 12,
                    height: 12,
                    filterUnits: "userSpaceOnUse",
                    colorInterpolationFilters: "sRGB"
                }, a.createElement("feFlood", {
                    floodOpacity: 0,
                    result: "BackgroundImageFix"
                }), a.createElement("feColorMatrix", { in: "SourceAlpha",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                }), a.createElement("feOffset", {
                    dy: 1
                }), a.createElement("feGaussianBlur", {
                    stdDeviation: 1
                }), a.createElement("feComposite", {
                    in2: "hardAlpha",
                    operator: "out"
                }), a.createElement("feColorMatrix", {
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.4 0"
                }), a.createElement("feBlend", {
                    in2: "BackgroundImageFix",
                    result: "effect1_dropShadow_2003_16647"
                }), a.createElement("feBlend", { in: "SourceGraphic",
                    in2: "effect1_dropShadow_2003_16647",
                    result: "shape"
                })));

            function s(e) {
                return a.createElement("svg", i({
                    viewBox: "0 0 12 12",
                    fill: "none"
                }, e), o, r)
            }
            n.p
        },
        435: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return d
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("rect", {
                    width: 88,
                    height: 88,
                    rx: 44,
                    fill: "#fff",
                    fillOpacity: .2
                }),
                r = a.createElement("rect", {
                    x: 41.998,
                    y: 33.668,
                    width: 5.999,
                    height: 15.333,
                    rx: 3,
                    fill: "#fff",
                    fillOpacity: .16
                }),
                s = a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M44.703 33a4.158 4.158 0 00-4.158 4.158v7.953a4.158 4.158 0 008.316 0v-7.953A4.158 4.158 0 0044.703 33zm-2.658 4.158a2.658 2.658 0 015.316 0v7.953a2.658 2.658 0 11-5.316 0v-7.953zM37.5 45.111a.75.75 0 00-1.5 0c0 3.065 1.237 5.266 2.973 6.687 1.486 1.216 3.311 1.84 4.98 1.983v2.69a.75.75 0 001.5 0v-2.69c1.667-.144 3.492-.767 4.978-1.983 1.736-1.42 2.973-3.622 2.973-6.687a.75.75 0 00-1.5 0c0 2.615-1.035 4.39-2.423 5.526-1.41 1.155-3.225 1.677-4.779 1.677-1.554 0-3.368-.522-4.779-1.677-1.388-1.136-2.423-2.91-2.423-5.526z",
                    fill: "#fff"
                }),
                l = a.createElement("path", {
                    d: "M37.005 38l-6-6m0 0v4.8m0-4.8h4.8",
                    stroke: "#fff",
                    strokeWidth: 1.5,
                    strokeLinecap: "round",
                    strokeLinejoin: "round"
                });

            function d(e) {
                return a.createElement("svg", i({
                    width: 88,
                    height: 88,
                    viewBox: "0 0 88 88",
                    fill: "none"
                }, e), o, r, s, l)
            }
            n.p
        },
        436: function(e, t, n) {
            "use strict";
            n(0);
            t.a = n.p + "bb0c9a82ace24d02fc33848523296ade.svg"
        },
        445: function(e, t, n) {},
        46: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            const a = /^[a-zA-Z]+[A-Za-z0-9-_]*$/;

            function i(e) {
                const t = {};
                for (const [n, i] of Object.entries(e)) {
                    if (!a.test(n)) throw Error(`key ${n} does not match required regex: ${a}`);
                    t[`--${n}`] = i
                }
                return t
            }
        },
        535: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return c
            }));
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(69),
                s = n(1),
                l = n(152),
                d = n(153);
            const c = ({
                    audioOn: e,
                    name: t
                }) => {
                    const {
                        messengerTooTall: n
                    } = Object(i.useContext)(r.a);
                    return o.a.createElement(u.Container, {
                        messengerTooTall: n
                    }, o.a.createElement(u.MicrophoneCircle, null, e ? o.a.createElement(d.a, {
                        height: n ? "8px" : "18px",
                        width: n ? "8px" : "18px"
                    }) : o.a.createElement(l.a, {
                        height: n ? "8px" : "18px",
                        width: n ? "8px" : "18px"
                    })), t && o.a.createElement("span", null, t))
                },
                u = {
                    MicrophoneCircle: Object(a.a)("div", {
                        target: "eyqlhlr0",
                        label: "MicrophoneCircle"
                    })("padding:", s.d.legacyPadding("3px"), ";border-radius:50%;background-color:#fcfcfc;display:flex;align-items:center;justify-content:center;"),
                    Container: Object(a.a)("div", {
                        target: "eyqlhlr1",
                        label: "Container"
                    })("display:inline-flex;flex-direction:row;align-items:center;padding:", (({
                        messengerTooTall: e
                    }) => e ? `0 ${s.d.paddingUnits(1)} 0 0` : `${s.d.paddingUnits(1)} ${s.d.paddingUnits(2)} ${s.d.paddingUnits(1)} ${s.d.paddingUnits(1)}`), ";color:", s.c.white, ";background-color:rgba(0,0,0,0.8);position:absolute;left:6px;top:6px;border-radius:999px;span{margin-left:", s.d.marginUnits(1), ";font-size:", s.i.size300, ";}")
                }
        },
        536: function(e, t, n) {
            "use strict";
            n.r(t)
        },
        537: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(0),
                i = n.n(a),
                o = n(215),
                r = n(14),
                s = n(159),
                l = n(212);
            class d extends i.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        device: null,
                        connection: null,
                        startedAt: null
                    }
                }
                render() {
                    const {
                        connection: e,
                        device: t,
                        startedAt: n
                    } = this.state, {
                        meeting: a,
                        messengerThemes: d,
                        hostname: c,
                        whitelabeling: u,
                        appexchange: m,
                        appexchangeCompanyName: g
                    } = this.props, p = Object(o.a)(c, m, d);
                    return i.a.createElement(s.b, null, i.a.createElement(r.b, {
                        locale: this.props.locale || "en"
                    }, i.a.createElement(l.default, {
                        connection: e,
                        device: t,
                        meeting: a,
                        messengerTheme: p,
                        startedAt: n,
                        whitelabeling: u,
                        appexchange: m,
                        appexchangeCompanyName: g
                    })))
                }
                async componentDidMount() {
                    const {
                        Device: e
                    } = await Promise.all([n.e(0), n.e(2)]).then(n.t.bind(null, 983, 7)), t = new e(this.props.capabilityToken);
                    t.on("incoming", (e => {
                        this.setState({
                            connection: e,
                            device: t,
                            startedAt: new Date
                        }), e.accept(), e.on("disconnect", (() => window.close())), window.opener.postMessage("connected", "*")
                    })), t.on("ready", (e => fetch(this.props.reconnectUrl, {
                        method: "POST"
                    })))
                }
            }
            t.default = d
        },
        539: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(2),
                i = n(5),
                o = (n(919), n(920), n(445), n(0)),
                r = n.n(o),
                s = n(25),
                l = n(155),
                d = n(68),
                c = n(1019),
                u = n(960),
                m = n(88),
                g = n.n(m),
                p = n(227),
                h = n.n(p),
                v = n(428),
                b = n.n(v),
                E = n(269),
                _ = n.n(E),
                f = n(69),
                O = n(62),
                C = n(33);
            const S = e => {
                const t = (e => {
                    switch (e) {
                        case "zh-CN":
                            return "zh_CN";
                        case "zh-TW":
                            return "zh_TW";
                        case "es-419":
                            return "es_LA";
                        case "pt-BR":
                            return "pt_BR";
                        default:
                            return e.split("-")[0]
                    }
                })(e);
                return t in C.a ? t : "en"
            };
            var y = n(215),
                k = n(14),
                T = n(159),
                A = n(57),
                N = n(6),
                R = n(9);
            const D = {
                    chat: R.k.Chat,
                    double_chat: R.k.DoubleChat,
                    messenger: R.k.Messenger,
                    phone: R.k.Phone,
                    question: R.k.Question
                },
                I = {
                    circle: R.i.Circle,
                    square: R.i.Square
                },
                x = {
                    pill: R.b.Pill,
                    rectangle: R.b.Rectangle
                },
                M = {
                    shade: R.c.Shade,
                    solid: R.c.Solid,
                    outline: R.c.Outline
                };
            var B = n(127),
                F = n(348),
                w = n(1),
                L = n(101);
            var P = n.p + "a55fc7f77a209eca46749bc16b0f1bbc.svg";
            var U = n.p + "9bccf30c5b80bf5f77b77dba80d853b8.svg";
            const j = Object(i.a)("div", {
                target: "e12q0pvk0",
                label: "Wrapper"
            })(w.e, " cursor:", (({
                cursor: e
            }) => null == e ? "auto" : e), ";z-index:", 10, ";&.mask{background-color:", w.c.lightBackground, ";}.spinner{position:absolute;left:50%;top:50%;margin-top:", (e => w.d.legacyMargin((e.explicitSize ? e.explicitSize : 80) * (e.centerVertically ? -.5 : -1) + "px")), ";margin-left:", (e => w.d.legacyMargin(-.5 * (e.explicitSize ? e.explicitSize : 80) + "px")), ";height:", (e => w.d.legacySize(`${e.explicitSize?e.explicitSize:80}px`)), ";width:", (e => w.d.legacySize(`${e.explicitSize?e.explicitSize:80}px`)), ";z-index:2147483643;}.drop-shadow{filter:drop-shadow(0px 1px 30px rgba(0,0,0,0.04));}");
            var z = ({
                delay: e = 300,
                className: t,
                imgSrc: n,
                useLogo: i,
                mask: s,
                alwaysShow: l,
                cursor: d,
                explicitSize: c,
                centerVertically: u
            }) => {
                const {
                    registerSpinner: m,
                    unregisterSpinner: g,
                    isVisible: p
                } = Object(o.useContext)(T.a), [h, v] = Object(o.useState)(!!e), [b] = Object(o.useState)(Object(B.v4)());
                return Object(o.useEffect)((() => (m(b), () => {
                    g(b)
                })), [b, m, g]), Object(o.useEffect)((() => Object(L.a)(e, (() => {
                    v(!1)
                }))), [e]), l || p(b) && !h ? r.a.createElement(j, {
                    className: Object(a.c)(t, {
                        mask: !!s
                    }),
                    explicitSize: c,
                    centerVertically: u,
                    cursor: d
                }, r.a.createElement("img", {
                    alt: "Loading",
                    className: Object(a.c)("spinner", {
                        "drop-shadow": i
                    }),
                    src: null !== n && void 0 !== n ? n : i ? P : U
                })) : null
            };
            const V = "aiTool",
                G = "shortcut",
                $ = (R.m.Casual, R.m.Friendly, R.m.Professional, R.n.AutoCorrect, R.n.AutoExpand, R.n.AutoSuggest, R.n.AutoTranslate, R.n.AutoTune, R.a.Incorrect, R.a.Unhelpful, R.a.Other, R.a.WrongTone, "suggest"),
                H = "expand",
                W = "tune",
                K = {
                    [R.l.Suggested]: $,
                    [R.l.Expanded]: H,
                    [R.l.Tuned]: W
                },
                q = {
                    [R.e.IgnoredSpam]: "Spam",
                    [R.e.IgnoredNoResponseNeeded]: "No response needed"
                };
            var Y = n(204),
                X = n(26),
                Q = n(118);
            n(183);
            n.p;
            n.p;

            function Z() {
                return Z = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, Z.apply(this, arguments)
            }
            var J = o.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M20.53 2.47c.201.2.272.498.182.767l-6 18a.75.75 0 01-1.383.098l-3.534-7.069 4.236-4.236a.75.75 0 10-1.061-1.06l-4.236 4.236-7.07-3.535a.75.75 0 01.099-1.382l18-6a.75.75 0 01.768.18z"
            });

            function ee(e) {
                return o.createElement("svg", Z({
                    viewBox: "0 0 24 24"
                }, e), J)
            }
            n.p;
            const te = "rep",
                ne = "visitor",
                ae = {
                    [R.n.AutoExpand]: R.l.Expanded,
                    [R.n.AutoCorrect]: R.l.Corrected,
                    [R.n.AutoTune]: R.l.Tuned,
                    [R.n.AutoTranslate]: R.l.Translated,
                    [R.n.AutoSuggest]: R.l.Suggested,
                    [R.n.FirstAutoPounce]: R.l.Autopounce,
                    [R.n.Playground]: R.l.Playground
                };
            class ie extends r.a.Component {
                constructor(e) {
                    super(e), this.expandSize = 19, this.inputRef = r.a.createRef(), this.transformTimeoutRef = r.a.createRef(), this.isInCompositionMode = !1, this.MESSAGE_EVENT_QUEUE_KEY = `messageEventQueue-${this.props.visitorId}`, this.messageEventQueue = Object(Q.a)(this.MESSAGE_EVENT_QUEUE_KEY) || [], this.handleSubmit = e => {
                        e.preventDefault();
                        const {
                            sendMessage: t,
                            onMessageTyped: n,
                            createMessageEvents: a
                        } = this.props, {
                            inputValue: i
                        } = this.state;
                        if (i.trim()) {
                            const e = {};
                            this.messageEventQueue.forEach((t => {
                                const {
                                    type: n
                                } = t;
                                if (Object.keys(K).includes(n)) {
                                    e[K[n]] = !0
                                }
                            })), null === t || void 0 === t || t({
                                type: "text",
                                text: i,
                                aiUsages: Object.keys(e).length > 0 ? e : null
                            }), null === n || void 0 === n || n("", !0), this.setState({
                                inputValue: "",
                                previousBrushType: null,
                                previousInputValue: ""
                            }), a && this.messageEventQueue.length > 0 && (a([...this.messageEventQueue, {
                                clientTimestamp: (new Date).toISOString(),
                                type: R.l.Submit,
                                text: i
                            }]), this.messageEventQueue = [], Object(Q.b)(this.MESSAGE_EVENT_QUEUE_KEY, this.messageEventQueue))
                        }
                    }, this.handleKeyDown = e => {
                        if (s.isMobile) return;
                        const {
                            code: t
                        } = e.nativeEvent;
                        if ("Enter" !== t || e.shiftKey) {
                            if (this.props.qualifiedGPTEnabled && e.altKey) switch (t) {
                                case "KeyE":
                                    e.preventDefault(), this.transformMessage(this.state.inputValue, R.n.AutoExpand);
                                    break;
                                case "KeyT":
                                    e.preventDefault(), this.transformMessage(this.state.inputValue, R.n.AutoTune);
                                    break;
                                case "KeyS":
                                    e.preventDefault(), this.transformMessage(this.state.inputValue, R.n.AutoSuggest)
                            }
                        } else {
                            if (this.isInCompositionMode) return;
                            this.handleSubmit(e)
                        }
                    }, this.handleChange = e => {
                        const t = {
                            error: null,
                            inputValue: e.target.value,
                            previousBrushType: null,
                            previousInputValue: ""
                        };
                        this.setState(t, this.inputValueChanged)
                    }, this.getGenericTransformErrorMessage = () => r.a.createElement("span", null, "Something went wrong.", " ", r.a.createElement(re.InlineErrorButton, {
                        onClick: this.retryMessageTransform
                    }, "Try again"), " ", "or contact support."), this.transformMessage = (e, t) => {
                        if (!e && t !== R.n.AutoSuggest) return;
                        const {
                            currentConversation: n,
                            transformMessage: a
                        } = this.props;
                        if (null == a) return void this.setState({
                            error: "Something went wrong. Please contact support."
                        });
                        if (t === R.n.AutoExpand && e.length < 15) return void this.setState({
                            error: "Provide more context before expanding this text."
                        });
                        if (t === R.n.AutoSuggest && (null === n || void 0 === n || !n.hasVisitorReplied)) return void this.setState({
                            error: "Wait for a message from the visitor before using suggest."
                        });
                        this.messageEventQueue.push({
                            clientTimestamp: (new Date).toISOString(),
                            type: R.l.Transform,
                            text: e
                        }), Object(Q.b)(this.MESSAGE_EVENT_QUEUE_KEY, this.messageEventQueue);
                        const {
                            previousInputValue: i,
                            previousBrushType: o,
                            autoTuneTone: r
                        } = this.state, s = a({
                            type: t,
                            input: e,
                            tone: r
                        });
                        this.transformTimeoutRef.current = setTimeout((() => this.timeOutMessageTransform(e, t)), 3e4);
                        const l = {
                            previousInputValue: t === o && i || e,
                            disableComposer: !1,
                            activeTransformPromise: null
                        };
                        this.setState({
                            disableComposer: !0,
                            error: null,
                            previousBrushType: t,
                            activeTransformPromise: s
                        }, (async () => {
                            try {
                                const e = await s,
                                    {
                                        errors: n
                                    } = e;
                                if (null == n) {
                                    const {
                                        output: n
                                    } = e;
                                    this.messageEventQueue.push({
                                        clientTimestamp: (new Date).toISOString(),
                                        type: ae[t],
                                        text: n
                                    }), Object(Q.b)(this.MESSAGE_EVENT_QUEUE_KEY, this.messageEventQueue), l.inputValue = n
                                } else l.error = this.getGenericTransformErrorMessage()
                            } catch (e) {
                                l.error = this.getGenericTransformErrorMessage()
                            } finally {
                                this.state.activeTransformPromise === s && (this.cancelMessageTransformTimeout(), this.setState(l, (() => {
                                    var e, t;
                                    (this.focus(), null == l.error) && (null === (e = (t = this.props).onMessageTransformed) || void 0 === e || e.call(t))
                                })))
                            }
                        }))
                    }, this.undoMessageTransform = () => {
                        this.setState({
                            disableComposer: !1,
                            inputValue: this.state.previousInputValue,
                            previousInputValue: "",
                            previousBrushType: null
                        })
                    }, this.handleToneChange = e => {
                        Object(Q.b)("autoTuneTone", e), this.setState({
                            autoTuneTone: e
                        })
                    }, this.cancelMessageTransformTimeout = () => {
                        null != this.transformTimeoutRef.current && (clearTimeout(this.transformTimeoutRef.current), this.transformTimeoutRef.current = null)
                    }, this.cancelMessageTransform = () => {
                        this.cancelMessageTransformTimeout(), this.setState({
                            disableComposer: !1,
                            activeTransformPromise: null
                        })
                    }, this.timeOutMessageTransform = (e, t) => {
                        this.cancelMessageTransform(), this.setState({
                            error: r.a.createElement("span", null, "Processing took too long.", " ", r.a.createElement(re.InlineErrorButton, {
                                onClick: () => this.transformMessage(e, t)
                            }, "Try again"), " ", "or contact support.")
                        })
                    }, this.retryMessageTransform = () => {
                        this.setState({
                            inputValue: this.state.previousInputValue
                        }, (() => {
                            this.state.previousBrushType && this.transformMessage(this.state.previousInputValue, this.state.previousBrushType)
                        }))
                    }, this.inputValueChanged = () => {
                        const {
                            onMessageTyped: e
                        } = this.props, {
                            inputValue: t
                        } = this.state;
                        null === e || void 0 === e || e(t, !1)
                    }, this.focus = () => {
                        var e;
                        null === (e = this.inputRef.current) || void 0 === e || e.focus()
                    }, this.selectAction = ({
                        type: e,
                        value: t
                    }, {
                        selectionStart: n,
                        selectionEnd: a
                    }) => {
                        switch (e) {
                            case G:
                                {
                                    const e = t.steps[0].operands.text;this.insertTextInMessage(e, {
                                        selectionStart: n - 1,
                                        selectionEnd: a
                                    })
                                }
                                break;
                            case V:
                                if (t.action === R.n.AutoTune && null != t.payload) this.handleToneChange(t.payload);
                                else {
                                    const e = this.insertTextInMessage("", {
                                        selectionStart: n - 1,
                                        selectionEnd: a
                                    });
                                    this.transformMessage(e, t.action)
                                }
                        }
                    }, this.deleteMessage = () => {
                        this.setState({
                            inputValue: ""
                        }, this.inputValueChanged)
                    }, this.insertTextInMessage = (e, {
                        selectionStart: t,
                        selectionEnd: n
                    }) => {
                        const {
                            inputValue: a
                        } = this.state, i = a.slice(0, t), o = a.slice(n), r = i + e + o;
                        return this.setState({
                            inputValue: r
                        }, (() => {
                            const n = this.inputRef.current;
                            if (n) {
                                n.focus();
                                const a = t + e.length;
                                n.selectionStart = a, n.selectionEnd = a
                            }
                        })), r
                    }, this.getSelectionStart = () => {
                        var e;
                        return (null === (e = this.inputRef.current) || void 0 === e ? void 0 : e.selectionStart) || 0
                    }, this.getMessageFromInput = () => {
                        var e;
                        return null === (e = this.inputRef.current) || void 0 === e ? void 0 : e.value
                    }, this.shouldExtend = () => {
                        const {
                            inputValue: e
                        } = this.state;
                        return e.length > this.expandSize
                    }, this.lastInputRef = null, this.state = {
                        componentId: Object(B.v4)(),
                        error: null,
                        inputValue: e.draftMessage || "",
                        disableComposer: !1,
                        previousInputValue: "",
                        previousBrushType: null,
                        autoTuneTone: Object(Q.a)("autoTuneTone") || R.m.Friendly,
                        activeTransformPromise: null
                    }
                }
                get isComposerDisabled() {
                    return this.props.disableComposer || this.state.disableComposer
                }
                get autoTuneTone() {
                    return this.state.autoTuneTone
                }
                componentDidUpdate() {
                    const e = this.inputRef.current;
                    var t, n;
                    this.lastInputRef !== e && (null === (t = (n = this.props).inputRef) || void 0 === t || t.call(n, e), this.lastInputRef = e)
                }
                getBrushControls() {
                    const {
                        error: e,
                        previousInputValue: t,
                        activeTransformPromise: n
                    } = this.state, a = this.isComposerDisabled, i = null != n, o = [];
                    return t && !i && (null == e && o.push(r.a.createElement(re.BrushControlButton, {
                        key: "undo",
                        disabled: a,
                        onClick: this.undoMessageTransform,
                        type: "button"
                    }, "Undo")), o.push(r.a.createElement(re.BrushControlButton, {
                        key: "retry",
                        disabled: a,
                        onClick: this.retryMessageTransform,
                        type: "button"
                    }, "Retry"))), i && o.push(r.a.createElement(re.BrushControlButton, {
                        key: "cancel",
                        onClick: this.cancelMessageTransform,
                        showAboveLoadingSpinner: a,
                        type: "button"
                    }, "Cancel")), o
                }
                renderVisitorComposerForm(e) {
                    const {
                        footerBar: t
                    } = this.props, {
                        componentId: n,
                        inputValue: i
                    } = this.state, o = this.isComposerDisabled;
                    return r.a.createElement(re.ComposerForm, {
                        onSubmit: this.handleSubmit,
                        disabled: o
                    }, o && r.a.createElement(z, {
                        explicitSize: 30,
                        centerVertically: !0
                    }), r.a.createElement("div", {
                        className: "sr-only",
                        id: n
                    }, e.t("messenger.text.composer_label")), r.a.createElement(re.InputWrapper, {
                        messengerTooTall: this.context.messengerTooTall,
                        className: Object(a.c)({
                            expanded: this.shouldExtend()
                        })
                    }, r.a.createElement(re.MessageInput, {
                        "aria-describedby": n,
                        "aria-label": e.t("messenger.text.composer_label"),
                        "data-backend-test-id": "message-input",
                        maxRows: 4,
                        minRows: 1,
                        value: i,
                        inputRef: this.inputRef,
                        onKeyDown: this.handleKeyDown,
                        onChange: this.handleChange,
                        onCompositionStart: () => this.isInCompositionMode = !0,
                        onCompositionEnd: () => this.isInCompositionMode = !1,
                        disabled: o,
                        placeholder: e.t("messenger.text.composer_label")
                    }), r.a.createElement(re.SendButton, {
                        type: "submit",
                        "data-backend-test-id": "message-send",
                        "aria-label": e.t("messenger.cta.send"),
                        disabled: !1
                    }, r.a.createElement(ee, {
                        height: "20",
                        width: "20"
                    }))), t)
                }
                renderRepComposerForm(e) {
                    const {
                        footerBar: t,
                        qualifiedGPTEnabled: n
                    } = this.props, {
                        componentId: a,
                        error: i,
                        inputValue: o
                    } = this.state, s = this.isComposerDisabled, l = n ? "\u2018/\u2019 for shortcuts and AI" : e.t("messenger.text.composer_label"), d = this.getBrushControls();
                    return r.a.createElement(re.RepComposerForm, {
                        "aria-label": l,
                        onSubmit: this.handleSubmit
                    }, s && r.a.createElement(z, {
                        cursor: "wait",
                        explicitSize: 30,
                        centerVertically: !0
                    }), r.a.createElement("div", {
                        className: "sr-only",
                        id: a
                    }, e.t("messenger.text.composer_label")), r.a.createElement(re.MessageInput, {
                        "aria-describedby": a,
                        "aria-label": e.t("messenger.text.composer_label"),
                        "data-backend-test-id": "message-input",
                        maxRows: 24,
                        minRows: 2,
                        value: o,
                        inputRef: this.inputRef,
                        onKeyDown: this.handleKeyDown,
                        onChange: this.handleChange,
                        onCompositionStart: () => this.isInCompositionMode = !0,
                        onCompositionEnd: () => this.isInCompositionMode = !1,
                        disabled: s,
                        placeholder: l
                    }), null != i && r.a.createElement(re.ErrorMessageContainer, {
                        role: "status"
                    }, i), r.a.createElement(re.ComposerControlsContainer, null, r.a.createElement(re.StartControlsContainer, {
                        "aria-disabled": !!s || null,
                        disabled: s
                    }, t), r.a.createElement(re.EndControlsContainer, null, d.length > 0 && r.a.createElement(re.BrushControlsWrapper, null, d), r.a.createElement(re.RepSendButton, {
                        type: "submit",
                        "data-backend-test-id": "message-send",
                        disabled: s,
                        "aria-label": e.t("messenger.cta.send")
                    }, "\u2192"))))
                }
                render() {
                    return r.a.createElement(k.a.Consumer, null, (e => this.props.view === te ? this.renderRepComposerForm(e) : this.renderVisitorComposerForm(e)))
                }
            }
            ie.contextType = f.a;
            const oe = {
                    LightenOnDisable: Object(a.b)({
                        name: "qk53qh-LightenOnDisable",
                        styles: "&:disabled,&[aria-disabled]{opacity:0.5;};label:LightenOnDisable;"
                    })
                },
                re = {
                    ComposerForm: Object(i.a)("form", {
                        target: "e17a6du20",
                        label: "ComposerForm"
                    })(oe.LightenOnDisable, " position:relative;display:flex;flex-direction:row;justify-content:space-between;align-items:flex-end;background-color:#fff;"),
                    InputWrapper: Object(i.a)("div", {
                        target: "e17a6du21",
                        label: "InputWrapper"
                    })("position:relative;flex-grow:1;flex-shrink:0;flex-basis:0;display:flex;justify-content:space-between;align-content:center;border:1px solid ", w.c.fieldBorder, ";border-radius:0.5rem;margin:", (({
                        messengerTooTall: e
                    }) => e ? `0 ${w.d.marginUnits(4)}` : `${w.d.marginUnits(3)} ${w.d.marginUnits(4)}`), ";background-color:", w.c.inputBackground, ";transition:flex-basis 0.5s ease-out;&.expanded{flex-basis:calc(100% - 2rem);}"),
                    SendButton: Object(i.a)("button", {
                        target: "e17a6du22",
                        label: "SendButton"
                    })("position:absolute;right:10px;bottom:8px;svg{color:", (({
                        disabled: e
                    }) => e ? w.c.iconGray : N.a.MESSENGER_COMPOSER_SEND_BUTTON_ICON_COLOR), ";}"),
                    RepComposerForm: Object(i.a)("form", {
                        target: "e17a6du23",
                        label: "RepComposerForm"
                    })("position:relative;display:flex;flex-direction:column;background-color:#fff;border-top:1px solid ", w.c.quartzFieldBorder, ";padding:", w.d.paddingUnits(2), ";"),
                    ErrorMessageContainer: Object(i.a)("div", {
                        target: "e17a6du24",
                        label: "ErrorMessageContainer"
                    })("font-size:", w.i.size300, ";display:flex;align-items:center;padding:0 ", w.d.paddingUnits(2), ";color:", w.c.dangerRed, ";"),
                    InlineErrorButton: Object(i.a)("button", {
                        target: "e17a6du25",
                        label: "InlineErrorButton"
                    })("color:", w.c.teal, ";"),
                    ComposerControlsContainer: Object(i.a)("div", {
                        target: "e17a6du26",
                        label: "ComposerControlsContainer"
                    })("display:flex;flex-direction:row;justify-content:space-between;padding:", w.d.paddingUnits(2), " ", w.d.paddingUnits(2), " 0;"),
                    StartControlsContainer: Object(i.a)("div", {
                        target: "e17a6du27",
                        label: "StartControlsContainer"
                    })(oe.LightenOnDisable),
                    EndControlsContainer: Object(i.a)("div", {
                        target: "e17a6du28",
                        label: "EndControlsContainer"
                    })({
                        name: "1xhj18k",
                        styles: "display:flex;flex-direction:row;"
                    }),
                    BrushControlsWrapper: Object(i.a)("div", {
                        target: "e17a6du29",
                        label: "BrushControlsWrapper"
                    })("display:flex;flex-direction:row;margin-top:", w.d.marginUnits(1), ";margin-right:", w.d.marginUnits(4), ";"),
                    RepSendButton: Object(i.a)(Y.a, {
                        target: "e17a6du210",
                        label: "RepSendButton"
                    })(oe.LightenOnDisable, " &,&:hover,&:focus{background-color:", (({
                        disabled: e
                    }) => e ? w.c.iconGray : N.a.MESSENGER_COMPOSER_SEND_BUTTON_ICON_COLOR), ";}")
                };
            re.MessageInput = Object(i.a)(F.a, {
                target: "e17a6du211"
            })(oe.LightenOnDisable, " color:", w.c.primaryText, ";resize:none;scrollbar-width:thin;scrollbar-color:rgba(0,0,0,0.2);&::-webkit-scrollbar{background-color:transparent;width:", w.d.size("8px"), ";}&::-webkit-scrollbar-thumb{border-radius:3px;background-color:rgba(0,0,0,0.2);}", re.ComposerForm, " &{font-size:", w.d.legacyFontSize(`${X.a}px`), ";line-height:", w.d.legacyLineHeight("21px"), ";flex-grow:1;padding:", w.d.paddingUnits(2), " ", w.d.paddingUnits(8), " ", w.d.paddingUnits(2), " ", w.d.paddingUnits(4), ";}", re.RepComposerForm, " &{font-size:", w.d.unsafeFontSize(`${X.a}px`), ";line-height:", w.d.unsafeLineHeight("21px"), ";padding:", w.d.paddingUnits(2), ";}"), re.BrushControlButton = Object(i.a)("button", {
                target: "e17a6du212"
            })(oe.LightenOnDisable, " font-size:", w.i.size500, ";position:relative;color:", w.c.brightPurple, ";line-height:", w.k.baseLineHeight, ";margin-right:", w.d.marginUnits(2), ";z-index:", (({
                showAboveLoadingSpinner: e
            }) => e ? 11 : "auto"), ";&:last-child{margin-right:0;}");
            var se = ie,
                le = n(165),
                de = n(349),
                ce = n.n(de),
                ue = n(209),
                me = n(132),
                ge = n(35),
                pe = n(95),
                he = n(232),
                ve = n(63);
            const be = [R.e.IgnoredSpam, R.e.IgnoredNoResponseNeeded],
                Ee = r.a.forwardRef((({
                    visitor: e,
                    onIgnoreAndMarkConversation: t
                }, n) => Object(ue.b)().wrappedTeam.featuresMap.qualifiedGPTAutoPounceMissedConnections && e.ownedByCurrentUser && e.autoPounceWaiting ? r.a.createElement(_e, {
                    ref: n
                }, r.a.createElement(fe, null, r.a.createElement(pe.a, {
                    level: 3,
                    preset: "headingSmall"
                }, "Auto pounce response"), r.a.createElement(he.a, {
                    preset: "bodySecondary"
                }, "Ignore and mark as:"), r.a.createElement(ge.a, {
                    gapUnits: 2,
                    align: "center",
                    paddingVerticalUnits: 2
                }, be.map((e => r.a.createElement(me.a, {
                    size: "small",
                    onClick: () => t(e),
                    key: e
                }, q[e])))), r.a.createElement("button", {
                    className: "close-button",
                    "aria-label": "Close",
                    onClick: () => t(R.e.IgnoredDismissed)
                }, r.a.createElement(ve.b.Times, {
                    height: 8,
                    fill: w.c.iconGray
                })))) : null)),
                _e = Object(i.a)("div", {
                    target: "e1pjdbdy0",
                    label: "IgnoreAndMarkConversationCardWrapper"
                })("position:absolute;bottom:0px;width:100%;padding:0 ", w.d.paddingUnits(4), " ", w.d.paddingUnits(4), " ", w.d.paddingUnits(4), ";background-color:white;"),
                fe = Object(i.a)("div", {
                    target: "e1pjdbdy1",
                    label: "IgnoreAndMarkConversation"
                })("border:1px solid ", w.c.lightPurpleBorder, ";border-radius:3px;background-color:", w.c.lightPurple, ";padding:", w.d.paddingUnits(2), " ", w.d.paddingUnits(4), ";position:relative;.close-button{position:absolute;top:", w.d.marginUnits(2), ";right:", w.d.marginUnits(2), ";height:", w.d.size("16px"), ";width:", w.d.size("16px"), ";}");
            var Oe = Ee,
                Ce = n(128),
                Se = n(267);
            var ye = ({
                className: e,
                color: t,
                loadingLabel: n = "Loading\u2026"
            }) => r.a.createElement("svg", {
                width: "38",
                height: "38",
                viewBox: "0 0 38 38",
                xmlns: "http://www.w3.org/2000/svg",
                "data-chromatic": "ignore",
                className: e
            }, r.a.createElement("title", null, n), r.a.createElement("defs", null, r.a.createElement("linearGradient", {
                x1: "8.042%",
                y1: "0%",
                x2: "65.682%",
                y2: "23.865%",
                id: "a"
            }, r.a.createElement("stop", {
                "data-testid": "loading-spinner-color",
                stopColor: t,
                stopOpacity: "0",
                offset: "0%"
            }), r.a.createElement("stop", {
                stopColor: t,
                stopOpacity: ".631",
                offset: "63.146%"
            }), r.a.createElement("stop", {
                stopColor: t,
                offset: "100%"
            }))), r.a.createElement("g", {
                fill: "none",
                fillRule: "evenodd"
            }, r.a.createElement("g", {
                transform: "translate(1 1)"
            }, r.a.createElement("path", {
                d: "M36 18c0-9.94-8.06-18-18-18",
                id: "Oval-2",
                stroke: "url(#a)",
                strokeWidth: "2"
            }, r.a.createElement("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 18 18",
                to: "360 18 18",
                dur: "0.9s",
                repeatCount: "indefinite"
            })), r.a.createElement("circle", {
                fill: t,
                cx: "36",
                cy: "18",
                r: "1"
            }, r.a.createElement("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 18 18",
                to: "360 18 18",
                dur: "0.9s",
                repeatCount: "indefinite"
            })))));
            const ke = {
                Wrapper: Object(i.a)("div", {
                    target: "e1fq017a0",
                    label: "Wrapper"
                })(w.e, ";"),
                LoadingSpinner: Object(i.a)(ye, {
                    target: "e1fq017a1",
                    label: "LoadingSpinner"
                })("position:absolute;left:50%;top:50%;margin-top:", (({
                    size: e
                }) => w.d.legacyMargin(-.5 * e + "px")), ";margin-left:", (({
                    size: e
                }) => w.d.legacyMargin(-.5 * e + "px")), ";height:", (({
                    size: e
                }) => w.d.legacySize(`${e}px`)), ";width:", (({
                    size: e
                }) => w.d.legacySize(`${e}px`)), ";z-index:2147483643;")
            };
            var Te = ({
                    color: e = w.c.loadingSpinner,
                    size: t = 80
                }) => r.a.createElement(ke.Wrapper, {
                    "data-testid": "loading-spinner"
                }, r.a.createElement(ke.LoadingSpinner, {
                    size: t,
                    color: e
                })),
                Ae = n(430),
                Ne = n.n(Ae),
                Re = n(570),
                De = n.n(Re);
            class Ie extends r.a.Component {
                render() {
                    return this.list.toSentence()
                }
                get list() {
                    const {
                        excludeMissing: e,
                        groupIds: t = [],
                        userIds: n = [],
                        additionalItems: a = []
                    } = this.props, {
                        groupsById: i,
                        usersById: o
                    } = this.context.user.wrappedTeam;
                    return De()(t.map((t => {
                        var n;
                        return (null === (n = i[t]) || void 0 === n ? void 0 : n.name) || (e ? void 0 : `Group ${t}`)
                    })).concat(n.map((t => {
                        var n, a;
                        return (null === (n = o[t]) || void 0 === n ? void 0 : n.name) || (null === (a = o[t]) || void 0 === a ? void 0 : a.email) || (e ? void 0 : `User ${t}`)
                    }))).concat(a))
                }
            }
            Ie.contextType = ue.a;
            var xe = n(145);
            const Me = ({
                    entry: {
                        availableUserIds: e,
                        unavailableUserIds: t,
                        destination: n
                    },
                    groups: i
                }) => {
                    const {
                        groupIds: o,
                        userIds: s
                    } = n || {}, l = {}, d = {};
                    return null === i || void 0 === i || i.forEach((n => {
                        l[n.id] = Ne()(n.members, "id").filter((t => e.includes(t))), d[n.id] = Ne()(n.members, "id").filter((e => t.includes(e)))
                    })), r.a.createElement(r.a.Fragment, null, null === o || void 0 === o ? void 0 : o.map((e => {
                        var t, n, i;
                        return !(null === (t = l[e]) || void 0 === t || !t.length) && r.a.createElement("span", {
                            key: `${e}-group-id`,
                            className: Object(a.c)(Le)
                        }, r.a.createElement(we, {
                            available: !(null === (n = l[e]) || void 0 === n || !n.length),
                            unavailable: !(null === (i = d[e]) || void 0 === i || !i.length)
                        }), r.a.createElement("span", null, r.a.createElement(Ie, {
                            groupIds: [e]
                        }), " -\xa0", r.a.createElement("span", {
                            className: "availability-text"
                        }, l[e].length, " available:\xa0", r.a.createElement(Ie, {
                            userIds: l[e]
                        }))))
                    })), null === s || void 0 === s ? void 0 : s.map((n => e.includes(n) && r.a.createElement("span", {
                        key: `${n}-user-id`,
                        className: Object(a.c)(Le)
                    }, r.a.createElement(we, {
                        available: e.includes(n),
                        unavailable: t.includes(n)
                    }), r.a.createElement(Ie, {
                        userIds: [n]
                    })))), null === o || void 0 === o ? void 0 : o.map((e => {
                        var t, n, i;
                        return !(null !== (t = l[e]) && void 0 !== t && t.length) && r.a.createElement("span", {
                            key: `${e}-group-id`,
                            className: Object(a.c)(Le)
                        }, r.a.createElement(we, {
                            available: !(null === (n = l[e]) || void 0 === n || !n.length),
                            unavailable: !(null === (i = d[e]) || void 0 === i || !i.length)
                        }), r.a.createElement("span", null, r.a.createElement(Ie, {
                            groupIds: [e]
                        }), " -\xa0", r.a.createElement("span", {
                            className: "availability-text"
                        }, "unavailable")))
                    })), null === s || void 0 === s ? void 0 : s.map((n => t.includes(n) && r.a.createElement("span", {
                        key: `${n}-user-id`,
                        className: Object(a.c)(Le)
                    }, r.a.createElement(we, {
                        available: e.includes(n),
                        unavailable: t.includes(n)
                    }), r.a.createElement("span", null, r.a.createElement(Ie, {
                        userIds: [n]
                    }), " -\xa0", r.a.createElement("span", {
                        className: "availability-text"
                    }, "unavailable"))))))
                },
                Be = ({
                    entry: {
                        availableUserIds: e,
                        unavailableUserIds: t
                    }
                }) => e && e.length > 0 ? r.a.createElement(r.a.Fragment, null, null === e || void 0 === e ? void 0 : e.map((n => e.includes(n) && r.a.createElement("span", {
                    key: `${n}-user-id`,
                    className: Object(a.c)(Le)
                }, r.a.createElement(we, {
                    available: e.includes(n),
                    unavailable: t.includes(n)
                }), r.a.createElement(Ie, {
                    userIds: [n]
                }))))) : r.a.createElement("span", {
                    className: Object(a.c)(Le)
                }, r.a.createElement(we, {
                    available: !1,
                    unavailable: !1
                }), "No reps available"),
                Fe = ({
                    entry: {
                        destination: e,
                        availableUserIds: t,
                        unavailableUserIds: n
                    },
                    name: i,
                    routeable: o
                }) => {
                    if (t.length || n.length) {
                        const {
                            reroute: o
                        } = e;
                        return r.a.createElement(r.a.Fragment, null, !!t.length && r.a.createElement("span", {
                            className: Object(a.c)(Le)
                        }, r.a.createElement(we, {
                            available: !0,
                            unavailable: !1
                        }), r.a.createElement("span", null, i, " - ", t.length, " available:\xa0", r.a.createElement("span", {
                            className: "availability-text"
                        }, r.a.createElement(Ie, {
                            userIds: t.concat(n)
                        })))), !!n.length && r.a.createElement("span", {
                            className: Object(a.c)(Le)
                        }, r.a.createElement(we, {
                            available: !1,
                            unavailable: !0
                        }), r.a.createElement("span", null, i, " - ", n.length, " ", o ? "unavailable" : "unavailable, do not reroute", ":\xa0", r.a.createElement("span", {
                            className: "availability-text"
                        }, r.a.createElement(Ie, {
                            userIds: t.concat(n)
                        })))))
                    }
                    return r.a.createElement("span", {
                        className: Object(a.c)(Le)
                    }, r.a.createElement(we, {
                        available: !1,
                        unavailable: !1
                    }), i, " - ", o ? "no matching Qualified reps" : "no record matched")
                },
                we = ({
                    available: e,
                    unavailable: t
                }) => r.a.createElement("span", {
                    className: Object(a.c)("status", {
                        available: !!e,
                        unavailable: !e && !!t
                    })
                }),
                Le = Object(a.b)("display:flex;max-width:", w.d.size("300px"), ";.status{min-width:", w.d.size("8px"), ";height:", w.d.size("8px"), ";border-radius:100%;margin-right:", w.d.marginUnits(2), ";margin-top:", w.d.legacyMargin("5px"), ";&.available{background-color:", w.c.green, ";}&.unavailable{background-color:", w.c.red, ";}&:not(.available):not(.unavailable){border:1px solid ", w.c.lightGray, ";}}.availability-text{color:", w.c.iconGray, ";};label:destinationAvailabiltyStyle;");
            var Pe = function({
                    entry: e,
                    visitor: t,
                    team: n
                }) {
                    const {
                        groups: a
                    } = n;
                    if (e.type === xe.b.BackupFromPounce || e.type === xe.b.BackupFromRepAvailability) return r.a.createElement(Be, {
                        entry: e
                    });
                    switch (e.destination && e.destination.type) {
                        case "salesforce_owner":
                            {
                                const {
                                    salesforceLeadId: a,
                                    salesforceContactId: i,
                                    hasFuzzyMatchCompany: o,
                                    hasSalesforceIdentifierForRouting: s,
                                    salesforceAccountExternalIdentifier: l = {}
                                } = t,
                                {
                                    value: d
                                } = l,
                                c = !!e.destination.externalFieldIdGroups.find((e => "SALESFORCE_LEAD" === e.relationship && e.externalFieldIds.length && a || "SALESFORCE_CONTACT" === e.relationship && e.externalFieldIds.length && i || "SALESFORCE_ACCOUNT" === e.relationship && e.externalFieldIds.length && d && ((n.featuresMap || {}).advancedRoutingConfig ? o : s)));
                                return r.a.createElement(Fe, {
                                    name: "Salesforce",
                                    entry: e,
                                    routeable: c
                                })
                            }
                        case "outreach_owner":
                            return r.a.createElement(Fe, {
                                name: "Outreach",
                                entry: e,
                                routeable: !!t.outreachProspectId
                            });
                        case "salesloft_owner":
                            return r.a.createElement(Fe, {
                                name: "Salesloft",
                                entry: e,
                                routeable: !!t.salesloftPersonId
                            });
                        case "direct":
                            return r.a.createElement(Me, {
                                entry: e,
                                groups: a
                            })
                    }
                },
                Ue = n(22);
            n.p;
            n.p, n(100), n(312), n(315);
            n.p;
            n.p;

            function je() {
                return je = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, je.apply(this, arguments)
            }
            var ze = o.createElement("g", {
                    clipPath: "url(#caret_svg__clip0_1275_12551)"
                }, o.createElement("path", {
                    d: "M0 1.235L1.3 0 5 3.529 8.7 0 10 1.235 5 6 0 1.235z"
                })),
                Ve = o.createElement("defs", null, o.createElement("clipPath", {
                    id: "caret_svg__clip0_1275_12551"
                }, o.createElement("path", {
                    fill: "#fff",
                    d: "M0 0h10v6H0z"
                })));

            function Ge(e) {
                return o.createElement("svg", je({
                    width: 10,
                    height: 6,
                    viewBox: "0 0 10 6",
                    fill: "#6E7879"
                }, e), ze, Ve)
            }
            n.p;
            n.p;
            n.p, n(309), n(314);

            function $e() {
                return $e = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, $e.apply(this, arguments)
            }
            var He = o.createElement("path", {
                d: "M2 9l3.692 4L14 4",
                stroke: "#000",
                strokeWidth: 1.5,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            });

            function We(e) {
                return o.createElement("svg", $e({
                    width: 12,
                    height: 12,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), He)
            }
            n.p;
            n.p;
            n.p;
            n.p, n(434), n(277);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(278);
            n.p, n(435);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(205);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(436), n(156);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(280);
            n.p;
            n.p;
            n.p;
            n.p;

            function Ke() {
                return Ke = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, Ke.apply(this, arguments)
            }
            var qe = o.createElement("path", {
                fill: "#6E7879",
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.288.754a.75.75 0 01.75-.75h6.212a.75.75 0 01.75.75v6.212a.75.75 0 01-1.5 0V2.565l-2.344 2.343-1.553 1.553a.75.75 0 01-1.06-1.06l1.553-1.554 2.343-2.343H9.038a.75.75 0 01-.75-.75zM.755 8.287a.75.75 0 01.75.75v4.402l2.343-2.344 1.553-1.553a.75.75 0 011.06 1.06L4.91 12.157l-2.344 2.343h4.402a.75.75 0 110 1.5H.755a.75.75 0 01-.75-.75V9.037a.75.75 0 01.75-.75z"
            });

            function Ye(e) {
                return o.createElement("svg", Ke({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), qe)
            }
            n.p;
            n.p;
            var Xe = n(152),
                Qe = n(153);
            n.p;

            function Ze() {
                return Ze = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, Ze.apply(this, arguments)
            }
            var Je = o.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M9.038.004a.75.75 0 01.75.75v4.402l2.343-2.344 1.553-1.553a.75.75 0 111.06 1.06l-1.552 1.554-2.344 2.343h4.402a.75.75 0 010 1.5H9.038a.75.75 0 01-.75-.75V.754a.75.75 0 01.75-.75zM.005 9.037a.75.75 0 01.75-.75h6.212a.75.75 0 01.75.75v6.212a.75.75 0 01-1.5 0v-4.401L3.873 13.19 2.32 14.744a.75.75 0 11-1.06-1.06l1.553-1.553 2.343-2.344H.755a.75.75 0 01-.75-.75z"
            });

            function et(e) {
                return o.createElement("svg", Ze({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 16 16",
                    fill: "#6E7879"
                }, e), Je)
            }
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(208);
            n.p, n(310), n(275);
            n.p;
            n.p;
            n.p, n(157);
            n.p;
            n.p;
            var tt = n(276);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(279);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;

            function nt() {
                return nt = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, nt.apply(this, arguments)
            }
            var at = o.createElement("path", {
                    opacity: .2,
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M1.876 3.946C1.333 4.72 1.333 5.814 1.333 8s0 3.28.543 4.054c.2.287.45.536.737.737.774.542 1.867.542 4.054.542 2.186 0 3.279 0 4.054-.542.286-.201.536-.45.736-.737.538-.768.543-1.847.543-3.992V10l2.667 1V5L12 6v1.937c0-2.144-.005-3.224-.543-3.991-.2-.287-.45-.536-.736-.737-.775-.542-1.868-.542-4.054-.542-2.187 0-3.28 0-4.054.542a3 3 0 00-.737.737z",
                    fill: "#79DA8C"
                }),
                it = o.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M4.189 3.48c-.582.062-.906.175-1.146.344a2.25 2.25 0 00-.553.552c-.168.24-.282.565-.343 1.146-.063.595-.064 1.369-.064 2.478 0 1.11.001 1.883.064 2.478.061.581.175.905.343 1.146.15.215.338.402.553.552.24.169.564.282 1.146.344.595.062 1.368.063 2.478.063 1.109 0 1.882 0 2.477-.063.582-.062.906-.175 1.146-.344.216-.15.403-.337.553-.552.167-.238.28-.559.341-1.13.064-.585.066-1.344.066-2.432 0-.021 0-.042.002-.063a.76.76 0 01-.002-.062c0-1.088-.002-1.847-.066-2.431-.061-.572-.174-.892-.34-1.13a2.251 2.251 0 00-.553-.552c-.241-.169-.565-.282-1.147-.344-.595-.062-1.368-.063-2.477-.063-1.11 0-1.883 0-2.478.063zm8.435 1.485c-.09-.54-.25-1.019-.552-1.45a3.75 3.75 0 00-.921-.92c-.534-.374-1.144-.532-1.85-.606-.682-.072-1.535-.072-2.592-.072h-.084c-1.058 0-1.91 0-2.593.072-.705.074-1.315.232-1.85.606a3.75 3.75 0 00-.92.92C.886 4.05.73 4.66.654 5.366.583 6.048.583 6.901.583 7.958v.084c0 1.057 0 1.91.072 2.593.075.705.232 1.315.606 1.85.251.357.563.67.921.92.535.374 1.145.532 1.85.606.683.072 1.535.072 2.593.072h.084c1.057 0 1.91 0 2.593-.072.705-.074 1.315-.232 1.849-.606.358-.25.67-.563.92-.92.302-.431.463-.91.553-1.45l1.78.667A.75.75 0 0015.416 11V5a.75.75 0 00-1.014-.702l-1.779.667zm.123 3.034a.76.76 0 00.003-.062V6.52l1.167-.438v3.836L12.75 9.48V8.062c0-.021 0-.042-.003-.063z",
                    fill: "#122124"
                });

            function ot(e) {
                return o.createElement("svg", nt({
                    height: 18,
                    width: 18,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), at, it)
            }
            n.p;

            function rt() {
                return rt = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, rt.apply(this, arguments)
            }
            var st = o.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M1.202 4.677c-.06.244-.101.5-.13.771C1 6.131 1 6.984 1 8.041v.084c0 1.058 0 1.91.072 2.593.074.705.232 1.315.606 1.85.251.358.563.67.921.92.534.375 1.144.532 1.85.607.682.072 1.535.072 2.592.072h.084c1.058 0 1.91 0 2.593-.072.271-.029.528-.07.772-.13l-1.33-1.33c-.534.031-1.2.032-2.077.032-1.109 0-1.882-.001-2.477-.064-.582-.061-.906-.175-1.147-.343a2.251 2.251 0 01-.552-.553c-.169-.24-.282-.564-.343-1.146C2.5 9.966 2.5 9.193 2.5 8.083c0-.875 0-1.542.032-2.076l-1.33-1.33zm9.17 7.757l1.112 1.11a3.75 3.75 0 001.06-1.06l-1.11-1.111c-.05.132-.108.24-.174.334-.15.215-.338.402-.553.553a1.485 1.485 0 01-.334.174zm-6.578-8.7c-.132.049-.24.106-.335.173a2.25 2.25 0 00-.552.552 1.484 1.484 0 00-.174.335L1.622 3.683l.056-.084a3.75 3.75 0 011.005-.977l1.11 1.111zm7.84 6.426c.03-.485.032-1.078.033-1.837V7.844c0-.983-.006-1.687-.064-2.238-.061-.582-.175-.906-.343-1.147a2.251 2.251 0 00-.553-.552c-.24-.169-.564-.282-1.146-.343C8.966 3.5 8.193 3.5 7.083 3.5c-.875 0-1.542 0-2.076.032l-1.33-1.33c.244-.06.5-.102.771-.13C5.131 2 5.984 2 7.041 2h.084c1.058 0 1.91 0 2.593.072.705.074 1.315.232 1.85.606.358.251.67.563.92.921.242.344.393.72.49 1.132l.088-.06c.15-.1.333-.213.543-.272a1.75 1.75 0 012.107 1.053c.078.204.099.418.108.598.01.183.01.413.01.68v2.706c0 .268 0 .497-.01.68-.01.18-.03.395-.108.599a1.75 1.75 0 01-2.107 1.053 1.925 1.925 0 01-.543-.272 4.842 4.842 0 01-.088-.06 4.325 4.325 0 01-.013.054l-1.33-1.33zm1.533-2.035V9.587l.859-3.747-.856 3.782a.25.25 0 00.068.136l.026.022.136.103c.234.176.387.29.503.368a1.2 1.2 0 00.123.076.25.25 0 00.286-.144c.002-.01.01-.05.014-.143.007-.14.007-.33.007-.623V6.75c0-.293 0-.483-.007-.623a1.187 1.187 0 00-.014-.144.25.25 0 00-.286-.143c-.01.005-.046.024-.123.075a13.815 13.815 0 00-.665.494.25.25 0 00-.068.136c0 .002-.002.012-.002.035a6.386 6.386 0 00-.001.17V8.125z",
                    fill: "#6E7879"
                }),
                lt = o.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M.47 1.47a.75.75 0 011.06 0l13 13a.75.75 0 11-1.06 1.06l-13-13a.75.75 0 010-1.06z",
                    fill: "#D56D6B"
                });

            function dt(e) {
                return o.createElement("svg", rt({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 16 16",
                    fill: "none"
                }, e), st, lt)
            }
            n.p;
            n.p;
            n.p, n(206), n(307);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            const ct = function(...e) {
                return 1 === e.length ? e[0] : 2 === e.length ? ((e, t) => {
                    let n = 0;
                    return t.reduce(((e, t) => {
                        const a = e.slice(n).findIndex((e => Object(le.a)(t.timestamp, e.timestamp) < 0));
                        return n = -1 === a ? e.length : n + a, e.splice(n, 0, t), e
                    }), e.slice())
                })(...e) : ct(ct(...e.slice(0, 2)), ...e.slice(2))
            };
            class ut extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        disableScrollbars: !1,
                        numOfMessages: (this.props.messages || []).length
                    }, this.scrollable = r.a.createRef(), this.ignoreAndMarkConversationCardRef = r.a.createRef(), this.handleResize = ({
                        bounds: {
                            height: e,
                            width: t
                        }
                    }) => {
                        this.innerHandleResize = this.innerHandleResize || ce()(((e, t) => {
                            this.props.handleResize && this.props.handleResize({
                                height: e,
                                width: t
                            })
                        }), 100, {
                            leading: !0
                        }), this.innerHandleResize(e, t), this.scrollAppropriately()
                    }, this.scrollAppropriately = () => {
                        if (this.scrollable.current && !this.props.notScrollable && !this.props.skipScroll) {
                            const e = this.scrollToConversationEl || this.messagesEnd;
                            this.scrollable.current.osInstance().scroll(e.offsetTop)
                        }
                    }
                }
                static getDerivedStateFromProps(e, t) {
                    const {
                        numOfMessages: n
                    } = t, a = (e.messages || []).length;
                    return { ...t,
                        numOfMessages: a,
                        disableScrollbars: t.disableScrollbars || a > n
                    }
                }
                render() {
                    const e = this.getEntries(),
                        t = 0 === e.length && !this.props.showStartConversationLoadingState;
                    return r.a.createElement(gt, null, r.a.createElement(l.a, {
                        bounds: !0,
                        onResize: this.handleResize
                    }, (({
                        measureRef: n
                    }) => r.a.createElement(pt, {
                        ref: this.scrollable,
                        disableScrollbars: this.state.disableScrollbars,
                        disabled: this.props.notScrollable,
                        "aria-live": "polite"
                    }, t && r.a.createElement(Te, {
                        size: 60,
                        color: this.props.themePrimaryColor
                    }), r.a.createElement(ht, {
                        showStartConversationLoadingState: this.props.showStartConversationLoadingState,
                        ref: n,
                        role: "list",
                        "aria-live": "polite"
                    }, e, !t && this.props.typingIndicator, r.a.createElement(f.a.Consumer, null, (({
                        messengerTooTall: e
                    }) => {
                        var t, n;
                        return r.a.createElement(mt, {
                            messengerTooTall: e,
                            ref: e => this.messagesEnd = e,
                            additionalSpace: null !== (t = null === (n = this.ignoreAndMarkConversationCardRef.current) || void 0 === n ? void 0 : n.offsetHeight) && void 0 !== t ? t : 0
                        })
                    })))))), this.props.showIgnoreAndMarkConversationCard && this.props.visitor && r.a.createElement(Oe, {
                        ref: this.ignoreAndMarkConversationCardRef,
                        visitor: this.props.visitor,
                        onIgnoreAndMarkConversation: this.props.ignoreAndMarkConversation
                    }))
                }
                getEntries() {
                    return ct(this.getConversationAndRoutingEntries(), this.getMeetingEntries(), this.getVideoMeetingEntries(), this.props.additionalEntries).map((e => e.el))
                }
                addShowAvatarToConversationMessages(e) {
                    const t = e.filter((e => ["text", "field_request", "field_entry", "prompt", "greeting"].includes(e.type)));
                    let n = null,
                        a = null;
                    for (const i of t) {
                        const e = i.scriptId ? "bot" : "rep",
                            t = i.isOwn ? "visitor" : "company",
                            o = n !== e,
                            r = a !== t;
                        i.showAvatar = "company" === t && (o || r), n = e, a = t
                    }
                }
                getConversationAndRoutingEntries() {
                    var e, t;
                    const {
                        messages: n,
                        readReceipt: a,
                        conversations: i,
                        sendMessage: o,
                        entryFactory: s,
                        emailDecorator: l,
                        appexchange: d,
                        appexchangeCompanyName: c,
                        visitor: m,
                        showMessageAvatarsWithRepAsOther: g
                    } = this.props, p = i.reduce(((e, t) => (e[t.id] = t, e)), {}), h = new Map(i.map((e => [e, []])));
                    g && null !== (e = s.config) && void 0 !== e && null !== (t = e.features) && void 0 !== t && t.includes("messenger_avatar_bubbles") && this.addShowAvatarToConversationMessages(n);
                    const v = n.reduce(((e, t, i) => {
                            const r = p[t.conversationId];
                            var g;
                            if (!t.conversationId && r) return null === (g = window.Sentry) || void 0 === g || g.captureEvent({
                                message: "Unable to display timeline entry due to missing conversation",
                                level: "error"
                            }), e;
                            const h = n.slice(i + 1),
                                v = n.slice(0, i),
                                b = e.get(r) || [],
                                E = !Number.isNaN(parseInt(t.botStep, 10)) || !!t.executionStep;
                            return [].concat(s.getMessageEntries(t, {
                                sendMessage: o,
                                conversation: r,
                                emailDecorator: l,
                                prevMessages: v,
                                nextMessages: h,
                                readReceipt: a,
                                isBotMessage: E,
                                appexchange: d,
                                appexchangeCompanyName: c,
                                visitor: m
                            })).forEach((e => b.push({
                                timestamp: Object(u.a)(t.createdAt),
                                el: e
                            }))), b.length ? e.set(r, b) : e
                        }), h),
                        b = Array.from(v).sort((([e, t], [n, a]) => (null === e || void 0 === e ? void 0 : e.id) - (null === n || void 0 === n ? void 0 : n.id))).reduce(((e, [t, n]) => {
                            if (t) {
                                var a;
                                const i = s.getConversationHeader(t);
                                ((null === n || void 0 === n ? void 0 : n.length) > 0 || (null === (a = t.routings) || void 0 === a ? void 0 : a.length) > 0) && i && (e.conversationEntries.push({
                                    timestamp: Object(u.a)(t.createdAt),
                                    el: r.a.cloneElement(i, {
                                        ref: e => {
                                            t.id === this.props.scrollToConversationId && (this.scrollToConversationEl = e)
                                        }
                                    })
                                }), e.routingEntries.push(...this.getRoutingEntriesForConversation(t)))
                            }
                            return e.conversationEntries = e.conversationEntries.concat(n), e
                        }), {
                            conversationEntries: [],
                            routingEntries: []
                        });
                    return ct(b.conversationEntries, b.routingEntries)
                }
                getVideoMeetingEntries() {
                    return this.props.shouldShowVideoMeetingEntries ? this.props.meetings.reduce(((e, t) => ("OutboundVideoMeeting" !== t.__typename && "InboundVideoMeeting" !== t.__typename || !t.endedAt || t.visitor.id !== this.props.visitor.id || e.push({
                        timestamp: Object(u.a)(t.endedAt),
                        el: r.a.createElement(X.e.MeetingMessage, {
                            key: `video-meeting-${t.id}`,
                            meeting: t
                        })
                    }), e)), []) : []
                }
                getMeetingEntries() {
                    if (!this.props.shouldShowMeetingEntries) return [];
                    return this.props.meetings.reduce(((e, t) => ("OutboundVoiceMeeting" !== t.__typename && "InboundVoiceMeeting" !== t.__typename || (t.startedAt ? (e.push({
                        timestamp: Object(u.a)(t.startedAt),
                        el: r.a.createElement(X.e.CallTimestamp, {
                            key: `meeting-start-${t.id}`,
                            meeting: t
                        })
                    }), e.push({
                        timestamp: Object(u.a)(t.startedAt),
                        el: r.a.createElement(X.e.StartedCall, {
                            key: `meeting-${t.id}`,
                            meeting: t
                        })
                    })) : t.enqueuedAt && t.endedAt && e.push({
                        timestamp: Object(u.a)(t.endedAt),
                        el: r.a.createElement(X.e.MissedCall, {
                            key: `meeting-${t.id}`,
                            meeting: t
                        })
                    })), e)), [])
                }
                getRoutingEntriesForConversation(e) {
                    return this.context.playback || !e.routings ? [] : e.routings.filter((e => e.routingLogEntries.length && !e.fromRepAvailability)).map((e => {
                        const t = e.routingLogEntries.find((e => e.type === xe.b.BackupFromPounce || e.type === xe.b.BackupFromRepAvailability));
                        return {
                            timestamp: Object(u.a)(e.createdAt),
                            el: r.a.createElement(X.e.SystemMessage, {
                                key: `routing-${e.id}`
                            }, r.a.createElement(Se.a, {
                                tooltip: r.a.createElement(r.a.Fragment, null, e.botName && r.a.createElement(r.a.Fragment, null, r.a.createElement(vt, null, "Experience"), r.a.createElement("div", null, e.botName)), e.routingRule ? "StaticRoutingRule" !== e.routingRule.__typename && r.a.createElement(r.a.Fragment, null, r.a.createElement(vt, null, "Routing rule"), r.a.createElement("div", null, e.routingRule.name)) : this.props.visitor.transferredByUserDisplayName && r.a.createElement(r.a.Fragment, null, r.a.createElement(vt, null, "Transferred by"), r.a.createElement("div", null, this.props.visitor.transferredByUserDisplayName)), r.a.createElement(vt, null, "Routing reason"), r.a.createElement("div", null, e.reason), r.a.createElement(vt, null, "Routed to"), e.routingLogEntries.filter((e => "ROUTING_DESTINATION" === e.type)).map((e => r.a.createElement(Pe, {
                                    key: `messenger-timeline-routing-log-entry-${e.id}`,
                                    entry: e,
                                    visitor: this.props.visitor,
                                    team: this.context.user.wrappedTeam
                                }))), t && r.a.createElement(r.a.Fragment, null, r.a.createElement(vt, null, t.type === xe.b.BackupFromRepAvailability ? "Backup from rep availability" : "Backup from pounce routing"), r.a.createElement(Pe, {
                                    entry: t,
                                    visitor: this.props.visitor,
                                    team: this.context.user.wrappedTeam
                                }))),
                                placement: "left"
                            }, r.a.createElement(tt.a, {
                                height: 16,
                                fill: w.c.iconGray
                            }), "Routed to Reps"))
                        }
                    }))
                }
                componentDidMount() {
                    this.scrollAppropriately()
                }
                componentWillUnmount() {
                    var e, t;
                    null === (e = this.disableScrollbarsTimeout) || void 0 === e || e.call(this), null === (t = this.innerHandleDisableScrollbars) || void 0 === t || t.cancel()
                }
                componentDidUpdate(e, t, n) {
                    this.state.disableScrollbars && (this.innerHandleDisableScrollbars = this.innerHandleDisableScrollbars || ce()((() => this.setState({
                        disableScrollbars: !1
                    })), 2e3), this.innerHandleDisableScrollbars())
                }
            }
            ut.contextType = ue.a, ut.defaultProps = {
                additionalEntries: [],
                showStartConversationLoadingState: !1,
                showIgnoreAndMarkConversationCard: !1
            };
            const mt = Object(i.a)("div", {
                    target: "e15kaf450",
                    label: "MessagesEnd"
                })("height:", (({
                    messengerTooTall: e,
                    additionalSpace: t
                }) => e ? "0.5rem" : `${X.d+X.b+t}px`), ";clear:both;"),
                gt = Object(i.a)("div", {
                    target: "e15kaf451",
                    label: "MessagesContainer"
                })({
                    name: "hqvson",
                    styles: "position:relative;width:100%;flex-grow:1;a{text-decoration:underline;}"
                }),
                pt = Object(i.a)(Ce.a, {
                    target: "e15kaf452",
                    label: "MessagesWrapper"
                })("padding:0 ", w.d.legacyPadding("16px"), ";height:100%;body.ios &{top:auto;max-height:100%;}"),
                ht = Object(i.a)("div", {
                    target: "e15kaf453",
                    label: "EntriesWrapper"
                })((({
                    showStartConversationLoadingState: e
                }) => e && `margin-top: ${w.d.legacyMargin(`${Ue.m}px`)};`), " position:relative;"),
                vt = Object(i.a)("div", {
                    target: "e15kaf454",
                    label: "RoutingEntryTooltipLabel"
                })("font-size:", w.i._deprecated_size200, ";color:", w.c.secondaryText, ";");
            var bt = n(102),
                Et = n(336);
            const _t = r.a.lazy((() => Promise.all([n.e(0), n.e(4), n.e(5)]).then(n.bind(null, 1542)))),
                ft = e => r.a.createElement(o.Suspense, {
                    fallback: r.a.createElement("div", null)
                }, r.a.createElement(_t, { ...e,
                    accessToken: void 0,
                    meetingId: void 0,
                    roomId: void 0,
                    inWidget: !1,
                    yourName: "",
                    lastCallStartTime: "",
                    meetingType: "",
                    showToolTip: !1,
                    shouldShowCloseButton: !1,
                    startVideoCall: Object(Et.b)("CallBoxPlaceholder#startVideoCall"),
                    disableCallControls: !0,
                    theirVideoAllowed: !1,
                    theirAudioAllowed: !1
                }));
            var Ot = n(21),
                Ct = n(56),
                St = n.n(Ct),
                yt = n(344),
                kt = n(1013),
                Tt = n(965),
                At = n(170),
                Nt = n(80);
            const Rt = (e, t) => {
                    "function" === typeof e ? e(t) : e && (e.current = t)
                },
                Dt = () => Object(Nt.a)(((e, t) => n => {
                    Rt(e, n), Rt(t, n)
                })),
                It = r.a.createContext({});
            class xt extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        isOpen: !1
                    }, this.toggle = () => {
                        this.state.isOpen ? this.hide() : this.show()
                    }, this.show = () => {
                        var e, t;
                        this.setState({
                            isOpen: !0
                        }), this.addClickListener(), null === (e = (t = this.props).onShow) || void 0 === e || e.call(t)
                    }, this.hide = () => {
                        var e, t;
                        this.setState({
                            isOpen: !1
                        }), this.removeClickListener(), null === (e = (t = this.props).onHide) || void 0 === e || e.call(t)
                    }, this.setTriggerRef = e => {
                        this.triggerRef = e
                    }, this.setContentsRef = e => {
                        this.contentsRef = e
                    }, this.addClickListener = () => {
                        window.addEventListener("click", this.onWindowClick)
                    }, this.removeClickListener = () => {
                        window.removeEventListener("click", this.onWindowClick)
                    }, this.onWindowClick = e => {
                        this.state.isOpen && this.contentsRef && e.target !== this.contentsRef && !this.contentsRef.contains(e.target) && (!this.triggerRef || this.triggerRef && e.target !== this.triggerRef && !this.triggerRef.contains(e.target)) && document.body.contains(e.target) && this.hide()
                    }
                }
                static getDerivedStateFromProps(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, "open") ? {
                        isOpen: e.open
                    } : null
                }
                componentWillUnmount() {
                    this.removeClickListener()
                }
                render() {
                    const {
                        children: e,
                        top: t,
                        left: n,
                        right: a,
                        bottom: i,
                        referenceElement: o
                    } = this.props, s = {
                        isOpen: this.state.isOpen,
                        show: this.show,
                        hide: this.hide,
                        toggle: this.toggle,
                        setTriggerRef: this.setTriggerRef,
                        setContentsRef: this.setContentsRef
                    };
                    let l;
                    if (null != t && null != n && null != a && null != i) {
                        const o = a - n,
                            r = i - t;
                        s.referenceElement = {
                            getBoundingClientRect: () => ({
                                top: t,
                                left: n,
                                right: a,
                                bottom: i,
                                width: o,
                                height: r
                            }),
                            clientWidth: o,
                            clientHeight: r
                        }, l = e
                    } else o ? (s.referenceElement = o, l = e) : l = r.a.createElement(yt.c, null, e);
                    return r.a.createElement(It.Provider, {
                        value: s
                    }, l)
                }
            }
            const Mt = () => Object(Nt.a)(((e, t) => n => {
                    e(n), n.defaultPrevented || t(n)
                })),
                Bt = () => null,
                Ft = Mt(),
                wt = Dt(),
                Lt = ({
                    elementType: e = "div",
                    children: t,
                    className: n,
                    onClick: i = Bt,
                    disabled: o,
                    ...s
                }) => r.a.createElement(kt.a, null, (({
                    ref: l
                }) => r.a.createElement(It.Consumer, null, (({
                    toggle: d,
                    setTriggerRef: c
                }) => r.a.createElement(e, { ...s,
                    className: Object(a.c)(Pt, n, "q-popover-trigger"),
                    ref: wt(c, l),
                    onClick: o ? null : Ft(i, d)
                }, t))))),
                Pt = Object(a.b)({
                    name: "1vdbuaq-triggerClass",
                    styles: "cursor:pointer;;label:triggerClass;"
                }),
                Ut = Dt(),
                jt = Object(Nt.a)(((e, {
                    top: t,
                    left: n
                }) => e ? e.match(/left/) ? `100% ${t||0}px` : e.match(/right/) ? `0 ${t||0}px` : e.match(/bottom/) ? `${n||0}px 0` : e.match(/top/) ? `${n||0}px 100%` : void 0 : "")),
                zt = ({
                    elementType: e = "div",
                    placement: t,
                    children: n,
                    className: i,
                    hideNubbin: o,
                    nubbinProps: s = {},
                    ...l
                }) => r.a.createElement(It.Consumer, null, (({
                    isOpen: d,
                    setContentsRef: c,
                    referenceElement: u
                }) => St.a.createPortal(r.a.createElement(At.b, {
                    items: d,
                    from: {
                        opacity: 0,
                        scale: .9
                    },
                    enter: {
                        opacity: 1,
                        scale: 1
                    },
                    leave: {
                        opacity: 0,
                        scale: .9
                    },
                    config: {
                        tension: 300,
                        friction: 24
                    }
                }, (d => d && (({
                    scale: d,
                    opacity: m
                }) => r.a.createElement(Tt.a, {
                    referenceElement: u,
                    placement: t,
                    modifiers: {
                        computeStyle: {
                            gpuAcceleration: !1
                        },
                        preventOverflow: {
                            enabled: !0,
                            boundariesElement: "viewport",
                            padding: 10
                        }
                    }
                }, (({
                    ref: t,
                    style: {
                        top: u,
                        left: g,
                        position: p
                    },
                    placement: h,
                    arrowProps: v,
                    scheduleUpdate: b
                }) => r.a.createElement(At.c[e], { ...l,
                    className: Object(a.c)(Wt, Kt, i, {
                        "with-nubbin": !o
                    }),
                    ref: Ut(c, t),
                    style: {
                        opacity: m,
                        top: 0,
                        left: 0,
                        position: p,
                        transform: `translate3d(${g}px, ${u}px, 0) scale(${d})`,
                        transformOrigin: jt(h, v.style),
                        zIndex: 1e10
                    },
                    "data-placement": h
                }, r.a.createElement(r.a.Fragment, null, !o && r.a.createElement(qt, {
                    ref: v.ref,
                    style: v.style,
                    "data-placement": h,
                    ...s
                }), "function" === typeof n ? n({
                    scheduleUpdate: b
                }) : n))))))), document.getElementById("popover-root")))),
                Vt = (Mt(), "10px"),
                Gt = "20px",
                $t = "10px",
                Ht = "5px",
                Wt = Object(a.b)('position:relative;background-color:#fff;border-radius:3px;z-index:1;&.with-nubbin{&[data-placement*="bottom"]{margin-top:', Vt, ';}&[data-placement*="top"]{margin-bottom:', Vt, ';}&[data-placement*="right"]{margin-left:', Vt, ';}&[data-placement*="left"]{margin-right:', Vt, ";}};label:contentClass;"),
                Kt = s.isFirefox ? Object(a.b)({
                    name: "14amceg-shadowClass",
                    styles: "box-shadow:0 0px 15px rgba(0,0,0,0.12);;label:shadowClass;"
                }) : Object(a.b)({
                    name: "zi28gy-shadowClass",
                    styles: "filter:drop-shadow(0 0px 15px rgba(0,0,0,0.12));;label:shadowClass;"
                }),
                qt = Object(i.a)("div", {
                    target: "e1u91dqj0",
                    label: "Nubbin"
                })("position:absolute;width:", Gt, ";height:", Gt, ';&[data-placement*="bottom"]{top:0;left:0;margin:-', Vt, " ", Ht, " 0 ", Ht, ";width:", Gt, ";height:", Vt, ";&::before{border-width:0 ", $t, " ", Vt, " ", $t, ';border-color:transparent transparent #fff transparent;}}&[data-placement*="top"]{bottom:0;left:0;margin:0 ', Ht, " -", Vt, " ", Ht, ";width:", Gt, ";height:", Vt, ";&::before{border-width:", Vt, " ", $t, " 0 ", $t, ';border-color:#fff transparent transparent transparent;}}&[data-placement*="right"]{left:0;margin:', Ht, " 0 ", Ht, " -", Vt, ";height:", Gt, ";width:", Vt, ";&::before{border-width:", $t, " ", Vt, " ", $t, ' 0;border-color:transparent #fff transparent transparent;}}&[data-placement*="left"]{right:0;margin:', Ht, " -", Vt, " ", Ht, " 0;height:", Gt, ";width:", Vt, ";&::before{border-width:", $t, " 0 ", $t, " ", Vt, ';border-color:transparent transparent transparent #fff;}}&::before{content:"";margin:auto;display:block;width:0;height:0;border-style:solid;}');
            var Yt, Xt = n(93);
            ! function(e) {
                e.Audio = "Audio", e.Video = "Video"
            }(Yt || (Yt = {}));
            const Qt = ({
                    isFullScreen: e,
                    audioOn: t,
                    videoOn: a,
                    showToolTip: i,
                    theirName: s,
                    toggleAudio: l,
                    toggleVideo: d,
                    endCall: c,
                    audioSources: u,
                    videoSources: m,
                    audioOutputs: g,
                    setAudioSource: p,
                    setVideoSource: h,
                    setAudioOutput: v,
                    setBlurBackground: b,
                    setFullScreen: E,
                    selectedAudioSourceDeviceId: _,
                    selectedVideoSourceDeviceId: O,
                    selectedAudioOutputDeviceId: C,
                    selectedBlurredBackground: S
                }) => {
                    const {
                        t: y
                    } = Object(o.useContext)(k.a), T = Object(o.useContext)(f.a), {
                        themeStyles: {
                            themePrimaryColor: N
                        }
                    } = Object(A.c)(), R = Object(o.useMemo)((() => 0 === u.length && 0 === g.length), [u, g]), D = Object(o.useMemo)((() => 0 === m.length), [m]), [I, x] = Object(o.useState)(!1), [M, B] = Object(o.useState)(!1), [F, L] = Object(o.useState)(null), [P, U] = Object(o.useState)(null), j = u.length, z = g.length, V = m.length, [G, $] = Object(o.useState)([]), [H, W] = Object(o.useState)([]), K = Object(o.useRef)(null), q = Object(o.useRef)(null), Y = Object(o.useRef)(null), X = Object(o.useRef)(null);
                    Object(o.useEffect)((() => {
                        $((e => [...Array(j + z)].map(((t, n) => e[n] || Object(o.createRef)()))))
                    }), [I, j, z]), Object(o.useEffect)((() => {
                        W((e => [...Array(V + 1)].map(((t, n) => e[n] || Object(o.createRef)()))))
                    }), [M, V]), Object(o.useEffect)((() => {
                        var e;
                        null !== F && (null === (e = G[F].current) || void 0 === e || e.focus())
                    }), [F, G]), Object(o.useEffect)((() => {
                        var e;
                        null !== P && (null === (e = H[P].current) || void 0 === e || e.focus())
                    }), [P, H]);
                    const [Q, Z] = Object(o.useState)(!1), [J, ee] = Object(o.useState)(!1);
                    Object(o.useEffect)((() => {
                        !J && M && ((async () => {
                            const {
                                isSupported: e
                            } = await Promise.all([n.e(1), n.e(3)]).then(n.t.bind(null, 1541, 7));
                            e && Z(!0)
                        })(), ee(!0))
                    }), [M, J]);
                    const te = (e, t) => {
                            switch (t) {
                                case Yt.Audio:
                                    (e => {
                                        switch (e.key) {
                                            case "Tab":
                                            case "Escape":
                                                x(!1), L(null);
                                                break;
                                            case "ArrowUp":
                                                e.preventDefault(), null !== F && L(0 === F ? j + z - 1 : F - 1);
                                                break;
                                            case "ArrowDown":
                                                e.preventDefault(), L(null === F ? 0 : F < j + z - 1 ? F + 1 : 0);
                                                break;
                                            case "Enter":
                                                e.preventDefault(), null === F ? x(!0) : F < j ? p(u[F].deviceId) : v(g[F - j].deviceId)
                                        }
                                    })(e);
                                    break;
                                case Yt.Video:
                                    (e => {
                                        switch (e.key) {
                                            case "Tab":
                                            case "Escape":
                                                B(!1), U(null);
                                                break;
                                            case "ArrowUp":
                                                e.preventDefault(), null !== P && U(0 === P ? V : P - 1);
                                                break;
                                            case "ArrowDown":
                                                e.preventDefault(), U(null === P ? 0 : P < m.length ? P + 1 : 0);
                                                break;
                                            case "Enter":
                                                e.preventDefault(), null === P ? B(!0) : P < V ? h(m[P].deviceId) : b()
                                        }
                                    })(e)
                            }
                        },
                        ne = Object(o.useCallback)((e => {
                            (K.current && q.current && !K.current.contains(e.target) && !q.current.contains(e.target) || Y.current && X.current && !Y.current.contains(e.target) && !X.current.contains(e.target)) && (I || M) && document.body.contains(e.target) && (x(!1), B(!1))
                        }), [K, Y, q, X, I, M]),
                        ae = Object(o.useCallback)((() => {
                            window.addEventListener("click", ne)
                        }), [ne]),
                        ie = Object(o.useCallback)((() => {
                            window.removeEventListener("click", ne)
                        }), [ne]);
                    return Object(o.useEffect)((() => {
                        if (I || M) return ae(), ie;
                        ie()
                    }), [I, M, ae, ie]), r.a.createElement(Zt.CallControlsWrapper, {
                        messengerTooTall: T.messengerTooTall,
                        "data-backend-test-id": "messenger-call-controls"
                    }, r.a.createElement(Zt.AudioVideoButtonWrapper, null, r.a.createElement(Zt.IconButton, {
                        onClick: l,
                        "aria-label": y(t ? "messenger.call_box.mute" : "messenger.call_box.unmute")
                    }, t ? r.a.createElement(Qe.a, {
                        "data-testid": "Mic On"
                    }) : r.a.createElement(Xe.a, {
                        "data-testid": "Mic Off"
                    })), r.a.createElement(xt, {
                        open: I
                    }, r.a.createElement(Lt, {
                        disabled: R,
                        className: ""
                    }, r.a.createElement(Zt.CaretButton, {
                        type: "button",
                        onClick: () => x(!I),
                        "aria-haspopup": "menu",
                        "aria-expanded": I,
                        "aria-label": y("messenger.call_box.view_audio_inputs_sources"),
                        disabled: R,
                        onKeyDown: e => te(e, Yt.Audio),
                        ref: q
                    }, r.a.createElement(Ge, null))), r.a.createElement(zt, {
                        placement: void 0,
                        className: Zt.PopoverContentContainer,
                        width: 260,
                        hideNubbin: !0
                    }, r.a.createElement(Zt.Scrollbars, {
                        "data-clickable": !0,
                        onKeyDown: e => te(e, Yt.Audio)
                    }, r.a.createElement("div", {
                        ref: K
                    }, r.a.createElement(Zt.SectionTitle, {
                        id: "audioSource"
                    }, y("messenger.call_box.select_a_microphone")), r.a.createElement(Zt.Choices, {
                        "data-hide-menu": !0,
                        role: "listbox",
                        tabIndex: -1,
                        "aria-labelledby": "audioSource"
                    }, u.map(((e, t) => r.a.createElement(Zt.Choice, {
                        key: e.deviceId,
                        onClick: () => {
                            p(e.deviceId)
                        },
                        role: "option",
                        tabIndex: -1,
                        ref: G[t],
                        "aria-labelledby": `audioSource audio-${t}`,
                        "aria-selected": e.deviceId === _,
                        keyOn: F === t,
                        themePrimaryColor: N
                    }, e.deviceId === _ ? r.a.createElement(Zt.Check, null) : r.a.createElement(Zt.CheckEmpty, null), r.a.createElement("span", {
                        id: `audio-${t}`
                    }, r.a.createElement(Zt.A11yListboxTitle, null, y("messenger.call_box.select_a_microphone")), e.label))))), g.length > 0 && r.a.createElement(r.a.Fragment, null, r.a.createElement(Zt.SectionTitle, {
                        second: !0,
                        id: "audioOutput"
                    }, y("messenger.call_box.select_a_speaker")), r.a.createElement(Zt.Choices, {
                        "data-hide-menu": !0,
                        role: "listbox",
                        tabIndex: -1,
                        "aria-labelledby": "audioOutput"
                    }, g.map(((e, t) => r.a.createElement(Zt.Choice, {
                        key: e.deviceId,
                        onClick: () => v(e.deviceId),
                        role: "option",
                        tabIndex: -1,
                        ref: G[j + t],
                        "aria-labelledby": `audioOutput audio-${j+t}`,
                        "aria-selected": e.deviceId === C,
                        keyOn: F === j + t,
                        themePrimaryColor: N
                    }, e.deviceId === C ? r.a.createElement(Zt.Check, null) : r.a.createElement(Zt.CheckEmpty, null), r.a.createElement(Zt.A11yListboxTitle, null, y("messenger.call_box.select_a_speaker")), r.a.createElement("span", {
                        id: `audio-${j+t}`
                    }, e.label)))))))))), r.a.createElement(Zt.IconButton, {
                        onClick: d,
                        "aria-label": y(a ? "messenger.call_box.face_mute" : "messenger.call_box.face_unmute")
                    }, a ? r.a.createElement(ot, {
                        "data-testid": "Video On"
                    }) : r.a.createElement(Xt.a, {
                        tooltip: y("messenger.call_box.tooltip_prompt_visitor_call_controls", {
                            name: s
                        }),
                        placement: "bottom-start",
                        shouldShow: i,
                        disableHover: !0,
                        enabled: !0,
                        hideArrow: !1,
                        tooltipClassName: "tooltip-class",
                        timeout: 5e3,
                        delayShow: 1e3,
                        className: "tooltip",
                        wrapperProps: void 0,
                        offset: void 0
                    }, r.a.createElement(dt, {
                        "data-testid": "Video Off"
                    }))), r.a.createElement(xt, {
                        open: M
                    }, r.a.createElement(Lt, {
                        className: "",
                        disabled: D
                    }, r.a.createElement(Zt.CaretButton, {
                        type: "button",
                        onClick: () => B(!M),
                        "aria-haspopup": "menu",
                        "aria-expanded": M,
                        "aria-label": y("messenger.call_box.view_video_sources"),
                        disabled: D,
                        onKeyDown: e => te(e, Yt.Video),
                        ref: X
                    }, r.a.createElement(Ge, null))), r.a.createElement(zt, {
                        placement: void 0,
                        className: Zt.PopoverContentContainer,
                        width: 260,
                        hideNubbin: !0
                    }, r.a.createElement(Zt.Scrollbars, {
                        "data-clickable": !0,
                        onKeyDown: e => te(e, Yt.Video)
                    }, r.a.createElement("div", {
                        ref: Y
                    }, r.a.createElement(Zt.SectionTitle, {
                        id: "videoSource"
                    }, y("messenger.call_box.select_a_camera")), r.a.createElement(Zt.Choices, {
                        "data-hide-menu": !0,
                        role: "listbox",
                        tabIndex: -1,
                        "aria-labelledby": "videoSource"
                    }, m.map(((e, t) => r.a.createElement(Zt.Choice, {
                        key: e.deviceId,
                        onClick: () => h(e.deviceId),
                        role: "option",
                        tabIndex: -1,
                        ref: H[t],
                        "aria-labelledby": `videoSource videoSource-${e.deviceId}`,
                        "aria-selected": e.deviceId === O,
                        keyOn: P === t,
                        themePrimaryColor: N
                    }, e.deviceId === O ? r.a.createElement(Zt.Check, null) : r.a.createElement(Zt.CheckEmpty, null), r.a.createElement(Zt.A11yListboxTitle, null, y("messenger.call_box.select_a_camera")), r.a.createElement("span", {
                        id: `videoSource-${e.deviceId}`
                    }, e.label))))), Q && r.a.createElement(r.a.Fragment, null, r.a.createElement(Zt.SectionTitle, {
                        second: !0,
                        id: "blurBackground"
                    }, y("messenger.call_box.video_settings")), r.a.createElement(Zt.Choices, {
                        "data-hide-menu": !0,
                        role: "listbox",
                        tabIndex: -1,
                        "aria-labelledby": "blurBackground"
                    }, r.a.createElement(Zt.Choice, {
                        onClick: b,
                        role: "option",
                        tabIndex: -1,
                        ref: H[V],
                        "aria-selected": S,
                        keyOn: P === V,
                        themePrimaryColor: N
                    }, S ? r.a.createElement(Zt.Check, null) : r.a.createElement(Zt.CheckEmpty, null), r.a.createElement(Zt.A11yListboxTitle, null, y("messenger.call_box.video_settings")), r.a.createElement("span", {
                        id: "blurBackground"
                    }, "Blur Background"))))))))), r.a.createElement(Zt.ButtonsContainer, null, E && r.a.createElement(Zt.FullScreenButton, {
                        "aria-label": y(e ? "messenger.call_box.close_full_screen" : "messenger.call_box.expand_to_full_screen"),
                        onClick: () => E(!e)
                    }, e ? r.a.createElement(et, null) : r.a.createElement(Ye, null)), c && r.a.createElement(Zt.EndButton, {
                        backgroundColor: "transparent",
                        borderColor: w.c.iconGray,
                        textColor: w.c.appRed,
                        onClick: c,
                        savingMessage: "End"
                    }, "End")))
                },
                Zt = {
                    CallControlsWrapper: Object(i.a)("div", {
                        target: "e1ok79bk0",
                        label: "CallControlsWrapper"
                    })("background:", w.c.offWhite, ";display:flex;justify-content:space-between;flex-direction:row;width:100%;padding:", w.d.paddingUnits(3), " ", w.d.paddingUnits(4), ";align-items:center;position:relative;z-index:200;height:", (({
                        messengerTooTall: e
                    }) => e ? w.d.legacySize("35px") : w.d.legacySize("50px")), ";"),
                    AudioVideoButtonWrapper: Object(i.a)("div", {
                        target: "e1ok79bk1",
                        label: "AudioVideoButtonWrapper"
                    })({
                        name: "1vp8jwk",
                        styles: "display:flex;flex-direction:row;justify-content:center;"
                    }),
                    FullScreenButton: Object(i.a)("button", {
                        target: "e1ok79bk2",
                        label: "FullScreenButton"
                    })("margin-right:", w.d.marginUnits(4), ";"),
                    EndButton: Object(i.a)(Y.a, {
                        target: "e1ok79bk3",
                        label: "EndButton"
                    })("margin-right:", w.d.marginUnits(4), ";line-height:", w.d.legacyLineHeight("1.5rem"), ";&:hover{color:white;background-color:", w.c.red, ";border:none;}"),
                    IconButton: Object(i.a)("button", {
                        target: "e1ok79bk4",
                        label: "IconButton"
                    })("padding-right:", w.d.paddingUnits(1), ";"),
                    CaretButton: Object(i.a)("button", {
                        target: "e1ok79bk5",
                        label: "CaretButton"
                    })("padding-right:", w.d.paddingUnits(4), ";"),
                    PopoverContentContainer: Object(a.b)({
                        name: "ryvgc0-PopoverContentContainer",
                        styles: "padding:0;z-index:100;;label:PopoverContentContainer;"
                    }),
                    Scrollbars: Object(i.a)(Ce.a, {
                        target: "e1ok79bk6",
                        label: "Scrollbars"
                    })("max-height:", w.d.size("400px"), ";padding:0;"),
                    SectionTitle: Object(i.a)("span", {
                        target: "e1ok79bk7",
                        label: "SectionTitle"
                    })("display:block;font-weight:bold;padding:", w.d.paddingUnits(3), " ", w.d.paddingUnits(3), " ", w.d.paddingUnits(1), " ", w.d.paddingUnits(3), ";font-size:", w.i.size300, ";", (({
                        second: e
                    }) => e && `border-top: 1px solid ${w.c.border};`)),
                    Choices: Object(i.a)("div", {
                        target: "e1ok79bk8",
                        label: "Choices"
                    })(),
                    Choice: Object(i.a)("div", {
                        target: "e1ok79bk9",
                        label: "Choice"
                    })("display:flex;align-items:center;padding:", w.d.paddingUnits(1), " ", w.d.paddingUnits(3), ";cursor:pointer;font-size:", w.i.size300, ";span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%;}", (e => e.selected && `background-color: ${Object(Ot.h)(.8,e.theme.primaryColor||e.themePrimaryColor||"#000")};`), " ", (e => e.keyOn && `background: ${w.c.lightBackground};`), " &:hover{", (e => !e.selected && `background: ${w.c.lightBackground};`), "}&:last-of-type{margin-bottom:", w.d.marginUnits(3), ";}"),
                    Check: Object(i.a)(We, {
                        target: "e1ok79bk10",
                        label: "Check"
                    })("flex-shrink:0;margin-right:", w.d.marginUnits(2), ";"),
                    CheckEmpty: Object(i.a)("div", {
                        target: "e1ok79bk11",
                        label: "CheckEmpty"
                    })("flex-shrink:0;height:", w.d.size("12px"), ";width:", w.d.size("12px"), ";margin-right:", w.d.marginUnits(2), ";"),
                    A11yListboxTitle: Object(i.a)("div", {
                        target: "e1ok79bk12",
                        label: "A11yListboxTitle"
                    })("border:0;padding:0;margin:0;position:absolute;height:", w.d.legacySize("1px"), ";width:", w.d.legacySize("1px"), ";overflow:hidden;"),
                    ButtonsContainer: Object(i.a)("div", {
                        target: "e1ok79bk13",
                        label: "ButtonsContainer"
                    })({
                        name: "1n2mv2k",
                        styles: "display:flex;justify-content:center;align-items:center;"
                    })
                },
                Jt = r.a.lazy((() => Promise.all([n.e(0), n.e(4), n.e(5)]).then(n.bind(null, 1542)))),
                en = Object(a.b)("padding-top:", w.d.paddingUnits(3), ";padding-inline:", w.d.paddingUnits(4), ";background-color:", w.c.lightestBackground, ";border-top:1px solid ", w.c.borderGray, ";;label:messengerFooterSpacing;");
            class tn extends r.a.Component {
                constructor(...e) {
                    super(...e), this.composerRef = r.a.createRef(), this.measureInstanceRef = r.a.createRef(), this.lastUnreadMessage = null, this.resizeCallback = void 0, this.focus = () => {
                        var e;
                        null === (e = this.composerRef.current) || void 0 === e || e.focus()
                    }, this.deleteMessage = () => {
                        var e;
                        null === (e = this.composerRef.current) || void 0 === e || e.deleteMessage()
                    }, this.sendMessage = async e => {
                        if (await this.props.startConversation()) {
                            if (e.pendingStatus) return this.props.updatePendingStatus(e.id, "sending"), this._sendMessage(e); {
                                const t = Object(B.v4)();
                                return e.aiUsages || this.props.appendMessage(Object.assign({
                                    id: t,
                                    clientId: t,
                                    pendingStatus: "sending",
                                    isOwn: !0,
                                    createdAt: Date.now()
                                }, e)), this._sendMessage(Object.assign({
                                    clientId: t
                                }, e))
                            }
                        }
                    }, this._sendMessage = e => this.props.sendMessage(e).catch((t => {
                        throw this.props.updatePendingStatus(e.clientId, "failed"), t
                    }))
                }
                render() {
                    return r.a.createElement(l.a, {
                        bounds: !0,
                        onResize: e => {
                            var t, n, a, i, o, r, s;
                            null !== (t = e.bounds) && void 0 !== t && t.left && null !== (n = e.bounds) && void 0 !== n && n.top && null !== (a = e.bounds) && void 0 !== a && a.width && (null === (i = this.props.meetingStore) || void 0 === i || i.setMessengerPosition({
                                left: null === (o = e.bounds) || void 0 === o ? void 0 : o.left,
                                top: null === (r = e.bounds) || void 0 === r ? void 0 : r.top,
                                width: null === (s = e.bounds) || void 0 === s ? void 0 : s.width
                            }))
                        },
                        ref: this.measureInstanceRef
                    }, (({
                        measureRef: e
                    }) => {
                        var t, n, a;
                        return r.a.createElement(nn, {
                            ref: e,
                            "data-backend-test-id": "messenger",
                            role: "region"
                        }, this.props.shouldShowCallBox && (this.props.video.inWidget || !this.props.video.pictureInPicture ? r.a.createElement(o.Suspense, {
                            fallback: r.a.createElement("div", null)
                        }, r.a.createElement(Jt, { ...this.props.video,
                            TheirWindow: this.props.TheirWindow,
                            theirName: this.props.video.theirName,
                            yourName: this.props.video.yourName,
                            lastCallStartTime: this.props.video.lastCallStartTime,
                            meetingType: this.props.video.meetingType,
                            meetingId: this.props.video.meetingId,
                            showToolTip: this.props.video.inWidget,
                            closeMessenger: () => this.props.updateExpanded(!1),
                            shouldShowCloseButton: !!this.props.updateExpanded
                        }, this.props.children ? this.props.children : ({
                            disableCallControls: e,
                            isFullScreen: t,
                            toggleVideo: n,
                            toggleAudio: a,
                            endCall: i,
                            videoOn: o,
                            audioOn: s,
                            showToolTip: l,
                            audioSources: d,
                            videoSources: c,
                            audioOutputs: u,
                            setVideoSource: m,
                            setAudioSource: g,
                            setAudioOutput: p,
                            setBlurBackground: h,
                            setFullScreen: v,
                            selectedAudioOutputDeviceId: b,
                            selectedAudioSourceDeviceId: E,
                            selectedVideoSourceDeviceId: _,
                            selectedBlurredBackground: f,
                            theirName: O
                        }) => e ? null : r.a.createElement(Qt, {
                            isFullScreen: t,
                            toggleVideo: n,
                            toggleAudio: a,
                            endCall: this.props.video.accessToken ? i : void 0,
                            videoOn: o,
                            audioOn: s,
                            showToolTip: l,
                            theirName: O,
                            audioSources: d,
                            videoSources: c,
                            audioOutputs: u,
                            setVideoSource: m,
                            setAudioSource: g,
                            setAudioOutput: p,
                            setBlurBackground: h,
                            setFullScreen: v,
                            selectedAudioOutputDeviceId: b,
                            selectedAudioSourceDeviceId: E,
                            selectedVideoSourceDeviceId: _,
                            selectedBlurredBackground: !!f
                        }))) : this.props.video.showPlaceholder ? r.a.createElement(ft, {
                            theirName: this.props.video.theirName,
                            TheirWindow: this.props.TheirWindow
                        }) : r.a.createElement(an, {
                            height: null === (t = this.props.meetingStore) || void 0 === t ? void 0 : t.pictureInPictureHeight
                        })), !this.props.shouldShowCallBox && this.props.headerBar, r.a.createElement(A.a.Consumer, null, (({
                            themeStyles: e
                        }) => r.a.createElement(ut, {
                            ref: this.props.timelineRef,
                            messages: this.props.messages,
                            meetings: this.props.meetings,
                            conversations: this.props.conversations,
                            routings: this.props.routings,
                            visitor: this.props.visitor,
                            readReceipt: this.props.readReceipt,
                            typingIndicator: this.props.typingIndicator,
                            sendMessage: this.sendMessage,
                            emailDecorator: this.props.emailDecorator,
                            entryFactory: this.props.timelineEntryFactory,
                            showStartConversationLoadingState: this.props.showStartConversationLoadingState,
                            additionalEntries: this.props.timelineEntries,
                            appexchange: this.props.appexchange,
                            appexchangeCompanyName: this.props.appexchangeCompanyName,
                            shouldShowVideoMeetingEntries: this.props.shouldShowVideoMeetingEntries,
                            shouldShowMeetingEntries: !this.props.shouldShowVideoMeetingEntries,
                            handleResize: this.props.handleResize,
                            themePrimaryColor: e.themePrimaryColor,
                            showMessageAvatarsWithRepAsOther: !0,
                            ignoreAndMarkConversation: this.props.ignoreAndMarkConversation,
                            showIgnoreAndMarkConversationCard: this.props.showIgnoreAndMarkConversationCard
                        }))), !this.props.hideComposer && r.a.createElement(se, {
                            ref: this.composerRef,
                            view: this.props.composerView,
                            currentConversation: null === (n = this.props.visitor) || void 0 === n ? void 0 : n.activeOrLastConversation,
                            draftMessage: this.props.draftMessage,
                            inputRef: this.props.composerInputRef,
                            sendMessage: this.sendMessage,
                            qualifiedGPTEnabled: this.props.qualifiedGPTEnabled,
                            qualifiedGPTNextEnabled: this.props.qualifiedGPTNextEnabled,
                            transformMessage: this.props.transformMessage,
                            createMessageEvents: this.props.createMessageEvents,
                            onMessageTyped: this.props.onMessageTyped,
                            onMessageTransformed: this.props.onMessageTransformed,
                            footerBar: this.props.footerBar,
                            disableComposer: this.props.disableComposer,
                            visitorId: null === (a = this.props.visitor) || void 0 === a ? void 0 : a.id
                        }), r.a.createElement(A.a.Consumer, null, (({
                            themeDataValues: e
                        }) => r.a.createElement(bt.MessengerFooter, {
                            ref: this.props.footerRef,
                            privacyPolicyUrl: e.privacyPolicyUrl,
                            privacyPolicyText: e.privacyPolicyText,
                            privacyDisclosures: e.privacyDisclosures,
                            customizablePrivacyPolicyEnabled: this.props.customizablePrivacyPolicyEnabled,
                            showBranding: this.props.showBranding,
                            className: en
                        }))))
                    }))
                }
                componentDidMount() {
                    const e = this.props.messages.filter((e => !e.isOwn)).last();
                    e && this.props.onMessageRead(e), this.props.autofocusMessenger && this.focus(), this.resizeCallback = h()((() => {
                        var e;
                        null === (e = this.measureInstanceRef.current) || void 0 === e || e.measure()
                    }), 200), window.addEventListener("resize", this.resizeCallback)
                }
                componentWillUnmount() {
                    var e;
                    this.resizeCallback && window.removeEventListener("resize", this.resizeCallback), null === (e = this.props.meetingStore) || void 0 === e || e.resetMessengerPosition()
                }
                componentDidUpdate(e) {
                    const t = this.props.messages.filter((e => !e.isOwn && !e.isRead)).last();
                    e.messages.length !== this.props.messages.length && t && (this.props.isActive ? this.props.onMessageRead(t) : this.lastUnreadMessage = t), this.lastUnreadMessage && !e.isActive && this.props.isActive && (this.props.onMessageRead(this.lastUnreadMessage), this.lastUnreadMessage = null), (e.hideComposer && !this.props.hideComposer || e.disableComposer && !this.props.disableComposer) && this.focus()
                }
            }
            tn.defaultProps = {
                messages: [],
                conversations: [],
                meetings: [],
                sendMessage: () => {},
                appendMessage: () => {},
                startConversation: () => Promise.resolve(!0),
                updatePendingStatus: () => {},
                onMessageRead: () => {},
                timelineEntryFactory: {},
                isActive: !0,
                disableComposer: !1,
                shouldShowCallBox: !1
            };
            const nn = Object(i.a)("div", {
                    target: "eg8p8bo0",
                    label: "MessengerWrapper"
                })("height:100%;display:flex;flex-direction:column;position:relative;padding-bottom:", "8px", ";.messenger-footer-bar{height:100%;margin-right:", w.d.marginUnits(4), ";& > div{cursor:pointer;}}"),
                an = Object(i.a)("div", {
                    target: "eg8p8bo1",
                    label: "CallBoxSpaceFiller"
                })("height:", (e => {
                    var t;
                    return w.d.legacySize(`${null!==(t=e.height)&&void 0!==t?t:200}px`)
                }), ";");
            var on = tn;
            const rn = e => r.a.Children.toArray(e.children)[0] || null;
            var sn = n(91),
                ln = n(222),
                dn = n(210),
                cn = n(263),
                un = n(320),
                mn = n(207),
                gn = n(571),
                pn = n.n(gn),
                hn = n(572),
                vn = n.n(hn);
            const bn = {
                    ":hover": ".__q__hover",
                    ":focus-within": ".__q__focus_within",
                    ":focus-visible": ".__q__focus_visible",
                    ":focus": ".__q__focus",
                    ":active": ".__q__active"
                },
                En = 1,
                _n = 2,
                fn = 1,
                On = 2,
                Cn = 3,
                Sn = 4,
                yn = 5,
                kn = 6,
                Tn = 7,
                An = 8,
                Nn = 9,
                Rn = 10,
                Dn = 11,
                In = 12,
                xn = 13,
                Mn = 14,
                Bn = 15,
                Fn = e => vn()(pn()(e), (e => Number.parseInt(e, 10))),
                wn = Fn(["http://www.w3.org/1999/xhtml", "http://www.w3.org/2000/svg", "http://www.w3.org/1999/xlink", "http://www.w3.org/1998/Math/MathML"]),
                Ln = Fn([null, "A", "ABBR", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BASE", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BODY", "BR", "BUTTON", "CANVAS", "CAPTION", "CITE", "CODE", "COL", "COLGROUP", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIALOG", "DIV", "DL", "DT", "EM", "EMBED", "FIELDSET", "FIGCAPTION", "FIGURE", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEAD", "HEADER", "HR", "HTML", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "KEYGEN", "LABEL", "LEGEND", "LI", "LINK", "MAIN", "MAP", "MARK", "MENU", "MENUITEM", "META", "METER", "NAV", "NOSCRIPT", "OBJECT", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PARAM", "PICTURE", "PRE", "PROGRESS", "Q", "RP", "RT", "RUBY", "S", "SAMP", "SCRIPT", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRONG", "STYLE", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TITLE", "TR", "TRACK", "U", "UL", "VAR", "VIDEO", "WBR", "circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan", "use"]),
                Pn = (Fn([null]), [null, "scrollLeft", "scrollTop", "value", "paused", "currentTime", "controls"]),
                Un = (Fn(Pn), Pn.filter((e => !!e))),
                jn = ["NOSCRIPT", "SCRIPT", "TITLE", "FRAME"];
            var zn, Vn;
            (null === (zn = document) || void 0 === zn ? void 0 : zn.documentElement) || null === (Vn = document) || void 0 === Vn || Vn.body;
            const Gn = "isConnected" in Node.prototype ? (e, t = document) => e.isConnected && e.ownerDocument === t : (e, t = document) => e.ownerDocument === t && !(t.compareDocumentPosition(e) & t.DOCUMENT_POSITION_DISCONNECTED);
            let $n = !1,
                Hn = !1;

            function Wn(e, t, n, {
                capture: a = !1,
                passive: i = !1
            } = {}) {
                let o;
                return o = function() {
                    if (!$n) {
                        const t = {
                            get passive() {
                                return Hn = !0, !0
                            }
                        };
                        try {
                            window.addEventListener("testPassive", null, t), window.removeEventListener("testPassive", null, t)
                        } catch (e) {}
                        $n = !0
                    }
                    return Hn
                }() ? {
                    capture: a,
                    passive: i
                } : a, e.addEventListener(t, n, o), () => {
                    e.removeEventListener(t, n, o)
                }
            }

            function Kn(e, t) {
                if (!Object.prototype.hasOwnProperty.call(e, t)) throw new TypeError("attempted to use private field on non-instance");
                return e
            }
            var qn = 0;

            function Yn(e) {
                return "__private_" + qn++ + "_" + e
            }

            function Xn(e, t, n, a, {
                timing: i = "after",
                async: o = !0
            }) {
                const r = e.prototype,
                    s = Object.getOwnPropertyDescriptor(r, t),
                    l = s[n];
                if (!s || "function" !== typeof l) return () => {};
                const d = o ? (...e) => {
                    try {
                        setTimeout((() => a(...e)), 0)
                    } catch (t) {}
                } : (...e) => {
                    try {
                        a(...e)
                    } catch (t) {}
                };
                let c;
                return c = "before" === i ? function() {
                    return d(this, ...arguments), l.apply(this, arguments)
                } : function() {
                    const e = l.apply(this, arguments);
                    return d(this, ...arguments), e
                }, s[n] = c, Object.defineProperty(r, t, s), () => {
                    const a = e.prototype,
                        i = Object.getOwnPropertyDescriptor(a, t);
                    i[n] = l, Object.defineProperty(a, t, i)
                }
            }
            class Qn extends(function(e) {
                var t;
                return t = Yn("disposerQueue"), class extends e {
                    constructor(...e) {
                        super(...e), this.isDisposed = !1, Object.defineProperty(this, t, {
                            writable: !0,
                            value: []
                        })
                    }
                    cleanup() {}
                    dispose() {
                        if (!this.isDisposed) {
                            var e, n;
                            this.isDisposed = !0;
                            const a = function(e, t) {
                                const n = [];
                                for (let i = 0; i < e.length; i++) try {
                                    t(e[i], i, e)
                                } catch (a) {
                                    n.push(a)
                                }
                                return n
                            }(Kn(this, t)[t], (e => e()));
                            if (Kn(this, t)[t] = [], null === (e = this.cleanup) || void 0 === e || e.call(this), null === (n = super.dispose) || void 0 === n || n.call(this), a.length > 0) throw new Error(`Dispose errors: ${a.join(", ")}`)
                        }
                    }
                    tryDispose() {
                        try {
                            this.dispose()
                        } catch {}
                    }
                    callOnDispose(e) {
                        Kn(this, t)[t].push(e)
                    }
                }
            }(Object)) {
                constructor(e) {
                    super(), this.shipper = e
                }
                init() {}
                addPassiveDocumentListener(e, t, n = !1) {
                    this.callOnDispose(Wn(this.shipper.document, e, t, {
                        capture: n,
                        passive: !0
                    }))
                }
                addPassiveWindowListener(e, t, n = !1) {
                    this.callOnDispose(Wn(this.shipper.window, e, t, {
                        capture: n,
                        passive: !0
                    }))
                }
                get document() {
                    return this.shipper.document
                }
                get window() {
                    return this.shipper.window
                }
                get changeQueue() {
                    return this.shipper.changeQueue
                }
                get serializer() {
                    return this.shipper.serializer
                }
            }
            class Zn extends Qn {
                constructor(e) {
                    super(e), this.changes = [], this.changedGlobals = new Set, this.changedNodes = new Map
                }
                clear() {
                    this.changes = [], this.changedGlobals.clear(), this.changedNodes.clear()
                }
                globalChanged(e) {
                    this.changedGlobals.add(e)
                }
                eventHappened(e) {
                    this.changes.push(e)
                }
                nodeTreeChanged(e, t, n, a) {
                    const i = [this.serializer.nodeToId(e), 0, null != n ? this.serializer.nodeToId(n) : 0, 0];
                    if (t.length > 0) {
                        i[1] = [];
                        for (let e = 0; e < t.length; e++) {
                            const n = t[e];
                            this.serializer.possiblyRemoved(n), i[1].push(this.serializer.nodeToId(n))
                        }
                    }
                    if (a.length > 0) {
                        i[3] = [];
                        for (let e = 0; e < a.length; e++) {
                            const t = a[e];
                            i[3].push(this.serializer.idTree(t))
                        }
                    }
                    this.changes.push([On, i])
                }
                nodeAttributeChanged(e, t) {
                    this.isRelevantNodeType(e) && this.getNodeChanges(e).markAttribute(t)
                }
                nodeDataChanged(e) {
                    this.isRelevantNodeType(e) && this.getNodeChanges(e).markData()
                }
                nodePropertyChanged(e, t) {
                    this.isRelevantNodeType(e) && this.getNodeChanges(e).markProperty(t)
                }
                nestedShipperMessage(e, t) {
                    this.changes.push([Bn, [this.serializer.nodeToId(e), t]])
                }
                take() {
                    this.changedNodes.forEach(((e, t) => {
                        e.forEachProperty((e => {
                            this.changes.push([yn, this.serializer.serializeNodePropertyRow(t, e)])
                        })), e.forEachAttribute((e => {
                            this.changes.push([Cn, this.serializer.serializeNodeAttributeRow(t, e)])
                        })), e.data && this.changes.push([Sn, this.serializer.serializeNodeDataRow(t)])
                    })), this.changedGlobals.size > 0 && this.changedGlobals.forEach((e => {
                        this.changes.push(e.serialize())
                    }));
                    const e = this.changes;
                    return this.clear(), e
                }
                isRelevantNodeType(e) {
                    const {
                        Node: t
                    } = this.shipper.window, {
                        nodeType: n
                    } = e;
                    return n === t.TEXT_NODE || n === t.ELEMENT_NODE && !jn.includes(e.tagName) || n === t.DOCUMENT_NODE
                }
                getNodeChanges(e) {
                    if (this.changedNodes.has(e)) return this.changedNodes.get(e); {
                        const t = new Jn;
                        return this.changedNodes.set(e, t), t
                    }
                }
            }
            class Jn {
                constructor() {
                    this.properties = {}, this.attributes = {}, this.data = !1
                }
                markProperty(e) {
                    this.properties[e] = !0
                }
                markAttribute(e) {
                    this.attributes[e] = !0
                }
                markData() {
                    this.data = !0
                }
                forEachProperty(e) {
                    Object.keys(this.properties).forEach(e)
                }
                forEachAttribute(e) {
                    Object.keys(this.attributes).forEach(e)
                }
            }
            class ea extends Qn {
                constructor(e) {
                    super(e), this.idSeq = 1, this.nodesToIds = new Map, this.knownNodeIds = new Set, this.newNodes = [], this.removedNodes = null, this.nextRemovedNodes = null
                }
                clear() {
                    this.knownNodeIds.clear(), this.newNodes = [], this.removedNodes = null, this.nextRemovedNodes = null
                }
                nodeToId(e) {
                    if (!e) throw new Error("nodeToId called without node");
                    let t;
                    return this.nodesToIds.has(e) ? t = this.nodesToIds.get(e) : (t = this.idSeq++, this.nodesToIds.set(e, t)), this.knownNodeIds.has(t) || (this.newNodes.push(e), this.knownNodeIds.add(t)), this.removedNodes && this.removedNodes.delete(e), t
                }
                idTree(e) {
                    const t = [this.nodeToId(e)];
                    if (e.hasChildNodes())
                        for (let n = 0; n < e.childNodes.length; n++) {
                            const a = e.childNodes[n];
                            t.push(this.idTree(a))
                        }
                    return t
                }
                possiblyRemoved(e) {
                    if (this.nextRemovedNodes || (this.nextRemovedNodes = new Set), this.nextRemovedNodes.add(e), e.hasChildNodes())
                        for (let t = 0; t < e.childNodes.length; t++) this.possiblyRemoved(e.childNodes[t])
                }
                takeNew() {
                    const e = this.newNodes;
                    return this.newNodes = [], e.map((e => this.serializeNodeRow(e)))
                }
                takeDeletions() {
                    const e = [];
                    if (this.removedNodes)
                        for (const t of this.removedNodes) {
                            const n = this.nodesToIds.get(t);
                            n && !Gn(t, this.document) && (this.nodesToIds.delete(t), this.knownNodeIds.delete(n), e.push(n))
                        }
                    return this.removedNodes = this.nextRemovedNodes, this.nextRemovedNodes = null, e
                }
                take() {
                    return [this.takeNew(), this.takeDeletions()]
                }
                serializeNodeRow(e) {
                    const t = ea.nodeSerializers[e.nodeType],
                        n = t ? this[t](e) : [];
                    return [this.nodeToId(e), e.nodeType, ...n]
                }
                serializeNodeAttributeRow(e, t) {
                    return [this.nodeToId(e), ...this.serializeAttribute(e, t)]
                }
                serializeNodePropertyRow(e, t) {
                    return [this.nodeToId(e), ...this.serializeProperty(e, t)]
                }
                serializeNodeDataRow(e) {
                    const t = ea.nodeDataSerializers[e.nodeType],
                        n = t ? this[t](e) : "";
                    return [this.nodeToId(e), n]
                }
                serialize_Element(e) {
                    var t, n, a;
                    return [null !== (t = null !== (n = Ln[e.tagName]) && void 0 !== n ? n : e.tagName) && void 0 !== t ? t : "", null !== (a = wn[e.namespaceURI]) && void 0 !== a ? a : 0, this.serializeAttributes(e), this.serializeProperties(e)]
                }
                serialize_DocumentType(e) {
                    return [e.name, e.publicId, e.systemId]
                }
                serialize_Text(e) {
                    return [this.serialize_Text_data(e)]
                }
                serialize_Text_data(e) {
                    const t = e.parentNode;
                    if (t) {
                        if ("STYLE" === t.tagName) return this.serialize_Text_data_STYLEchild(e);
                        if ("TEXTAREA" === t.tagName) return this.serialize_Text_data_TEXTAREAchild(e);
                        if ("SCRIPT" === t.tagName) return this.serialize_Text_data_SCRIPTchild(e)
                    }
                    return this.serialize_Text_data_default(e)
                }
                serialize_Text_data_default(e) {
                    return String(e.data)
                }
                serialize_Text_data_STYLEchild(e) {
                    return this.rewriteStyleSheet(this.styleSheetAsText(e.parentNode, e))
                }
                serialize_Text_data_TEXTAREAchild(e) {
                    return this.maskValue(this.serialize_Text_data_default(e))
                }
                serialize_Text_data_SCRIPTchild(e) {
                    return ""
                }
                serializeAttribute(e, t) {
                    let n = null,
                        a = 0;
                    if ("style" === t) n = e.style.cssText || e.getAttribute("style");
                    else {
                        const o = e.getAttributeNode(t);
                        var i;
                        if (o) t = o.name, n = o.value, "string" === typeof n && (n.length > 2048 ? n = "" : this.isSubmitInput(e) || "value" !== t || (n = this.maskValue(n))), a = null !== (i = wn[o.namespaceURI]) && void 0 !== i ? i : 0
                    }
                    return [t, a, n]
                }
                serializeAttributes(e) {
                    const t = [];
                    if (e.attributes)
                        for (let n = 0; n < e.attributes.length; n++) {
                            const a = e.attributes[n];
                            !a.specified || "style" !== a.name && "string" !== typeof a.value || t.push(this.serializeAttribute(e, a.name))
                        }
                    return t.length > 0 ? t : 0
                }
                serializeProperty(e, t) {
                    if (Un.includes(t)) {
                        let n;
                        return n = this.isSubmitInput(e) || "value" !== t || "string" !== typeof e.value ? e[t] : this.maskValue(e.value), [t, n]
                    }
                    return [0, 0]
                }
                serializeProperties(e) {
                    const t = [];
                    return 0 !== e.scrollLeft && t.push(["scrollLeft", e.scrollLeft]), 0 !== e.scrollTop && t.push(["scrollTop", e.scrollTop]), null != e.value && t.push(this.serializeProperty(e, "value")), e instanceof this.window.HTMLMediaElement && (t.push(["paused", e.paused]), t.push(["currentTime", e.currentTime]), t.push(["controls", e.controls])), t.length > 0 ? t : 0
                }
                maskValue(e) {
                    return e && Array(e.length + 1).join("\u2022")
                }
                styleSheetAsText(e, t) {
                    if (e.dataset.guruExtensionId) return "";
                    if (e.childNodes.length > 1) return String(t.data);
                    try {
                        let t = "";
                        for (let a = 0; a < e.sheet.cssRules.length; a++) {
                            var n;
                            const i = e.sheet.cssRules[a];
                            if (null !== (n = i.style) && void 0 !== n && n.inset) {
                                const {
                                    cssText: e,
                                    selectorText: n,
                                    style: {
                                        top: a,
                                        right: o,
                                        bottom: r,
                                        left: s
                                    }
                                } = i;
                                t += `${e} ${n} { top: ${a}; right: ${o}; bottom: ${r}; left: ${s}; }`
                            } else t += i.cssText
                        }
                        return t
                    } catch (a) {
                        return String(t.data)
                    }
                }
                rewriteStyleSheet(e) {
                    return e.replace(/:hover|:focus-within|:focus-visible|:focus|:active/g, this.convertPseudoClass)
                }
                convertPseudoClass(e) {
                    var t;
                    return null !== (t = bn[e]) && void 0 !== t ? t : e
                }
                isSubmitInput(e) {
                    return e && e.tagName && "INPUT" === e.tagName && "submit" === e.getAttribute("type")
                }
            }
            ea.nodeSerializers = {
                1: "serialize_Element",
                3: "serialize_Text",
                10: "serialize_DocumentType"
            }, ea.nodeDataSerializers = {
                3: "serialize_Text_data"
            };
            class ta extends Qn {
                changed() {
                    this.changeQueue.globalChanged(this), this.shipper.sendFrame()
                }
            }
            ta.includedInKeyframe = !0;
            class na extends Qn {
                constructor(e, t) {
                    super(e), this.onScroll = e => {
                        const t = e.target;
                        t && t !== this.document ? (this.changeQueue.nodePropertyChanged(t, "scrollLeft"), this.changeQueue.nodePropertyChanged(t, "scrollTop"), this.shipper.sendFrame()) : this.onDocumentScroll()
                    }, this.onDocumentScroll = t
                }
                init() {
                    this.addPassiveDocumentListener("scroll", this.onScroll, !0)
                }
            }
            const aa = [class extends ta {
                init() {
                    this.baseLocation = (this.document.getElementsByTagName("base")[0] || {}).href || this.document.location.href.match(/^(.*\/)[^/]*$/)[1]
                }
                serialize() {
                    return [Mn, [this.baseLocation, this.document.location.href]]
                }
            }, class extends ta {
                serialize() {
                    return [fn, [this.serializer.idTree(this.document)]]
                }
            }, class extends ta {
                constructor(e) {
                    super(e), this.onScroll = () => {
                        this.changed()
                    }, this.scrollListener = new na(e, this.onScroll)
                }
                init() {
                    this.scrollListener.init()
                }
                cleanup() {
                    this.scrollListener.dispose(), super.cleanup()
                }
                serialize() {
                    const e = this.document.scrollingElement || this.document.documentElement;
                    return [kn, e ? [e.scrollLeft, e.scrollTop] : [0, 0]]
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.x = -1, this.y = -1, this.target = null, this.onMouseMove = e => {
                        this.x = e.clientX, this.y = e.clientY, this.target = e.target, this.changed()
                    }, this.onMouseLeave = () => {
                        this.x = this.y = -1, this.target = null, this.changed()
                    }
                }
                init() {
                    this.addPassiveDocumentListener("mousemove", this.onMouseMove), this.addPassiveDocumentListener("mouseleave", this.onMouseLeave)
                }
                serialize() {
                    return [Tn, [this.x, this.y, this.target ? this.serializer.nodeToId(this.target) : 0]]
                }
            }, class extends Qn {
                constructor(...e) {
                    super(...e), this.onMouseDown = e => {
                        this.changeQueue.eventHappened([An, [e.clientX, e.clientY]]), this.shipper.sendFrame()
                    }
                }
                init() {
                    this.addPassiveDocumentListener("mousedown", this.onMouseDown, !0)
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.onResize = () => {
                        this.changed()
                    }
                }
                init() {
                    this.addPassiveWindowListener("resize", this.onResize)
                }
                serialize() {
                    return [Nn, [this.window.innerWidth, this.window.innerHeight]]
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.navigating = !1, this.onVisibilityChange = () => {
                        this.navigating || this.changed()
                    }, this.onPageHide = () => {
                        this.navigating = !0
                    }
                }
                init() {
                    this.addPassiveDocumentListener("visibilitychange", this.onVisibilityChange), this.addPassiveWindowListener("pagehide", this.onPageHide)
                }
                get isVisible() {
                    return "visible" === this.document.visibilityState
                }
                serialize() {
                    return [Rn, [0 | this.isVisible]]
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.onWindowFocus = () => {
                        this.changed()
                    }, this.onWindowBlur = () => {
                        this.changed()
                    }
                }
                init() {
                    this.addPassiveWindowListener("focus", this.onWindowFocus), this.addPassiveWindowListener("blur", this.onWindowBlur)
                }
                serialize() {
                    return [Dn, [0 | this.document.hasFocus()]]
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.onSelectionChange = () => {
                        this.changed()
                    }
                }
                init() {
                    this.addPassiveDocumentListener("selectionchange", this.onSelectionChange)
                }
                serialize() {
                    const e = this.document.getSelection();
                    if (e && 0 !== e.rangeCount && !e.isCollapsed) {
                        const t = e.getRangeAt(0);
                        return [In, [this.serializer.nodeToId(t.startContainer), t.startOffset, this.serializer.nodeToId(t.endContainer), t.endOffset]]
                    }
                    return [In, [0]]
                }
            }, class extends ta {
                constructor(...e) {
                    super(...e), this.target = null, this.onFocus = e => {
                        this.target = e.target, this.changed()
                    }, this.onBlur = () => {
                        this.target = null, this.changed()
                    }
                }
                init() {
                    this.addPassiveDocumentListener("focus", this.onFocus, !0), this.addPassiveDocumentListener("blur", this.onBlur, !0)
                }
                serialize() {
                    return [xn, [this.target ? this.serializer.nodeToId(this.target) : 0]]
                }
            }, class extends Qn {
                constructor(...e) {
                    super(...e), this.onMutations = e => {
                        let t = !1;
                        for (let n = 0; n < e.length; n++) {
                            const a = e[n],
                                {
                                    type: i,
                                    target: o
                                } = a;
                            switch (i) {
                                case "childList":
                                    {
                                        const {
                                            nextSibling: e,
                                            addedNodes: n,
                                            removedNodes: i
                                        } = a;this.changeQueue.nodeTreeChanged(o, i, e, n),
                                        t = !0;
                                        break
                                    }
                                case "attributes":
                                    {
                                        const {
                                            attributeName: e
                                        } = a;this.changeQueue.nodeAttributeChanged(o, e),
                                        t = !0;
                                        break
                                    }
                                case "characterData":
                                    this.changeQueue.nodeDataChanged(o), t = !0
                            }
                        }
                        t && this.shipper.sendFrame()
                    }
                }
                init() {
                    this.observer = new MutationObserver(this.onMutations), this.observer.observe(this.document, {
                        childList: !0,
                        characterData: !0,
                        attributes: !0,
                        subtree: !0
                    })
                }
                cleanup() {
                    var e;
                    null === (e = this.observer) || void 0 === e || e.disconnect(), this.observer = null
                }
            }, class extends Qn {
                constructor(...e) {
                    super(...e), this.onCSSRuleChange = e => {
                        const t = null === e || void 0 === e ? void 0 : e.ownerNode,
                            n = null === t || void 0 === t ? void 0 : t.childNodes[0];
                        t && n && (this.changeQueue.nodeDataChanged(n), this.shipper.sendFrame())
                    }
                }
                init() {
                    const {
                        CSSStyleSheet: e
                    } = this.window;
                    ["insertRule", "deleteRule"].forEach((t => {
                        this.callOnDispose(Xn(e, t, "value", this.onCSSRuleChange, {
                            timing: "after",
                            async: !0
                        }))
                    }))
                }
            }, class extends Qn {
                constructor(...e) {
                    super(...e), this.onPlayStateChange = e => {
                        e.target && (this.changeQueue.nodePropertyChanged(e.target, "paused"), this.changeQueue.nodePropertyChanged(e.target, "currentTime"), this.shipper.sendFrame())
                    }
                }
                init() {
                    this.addPassiveDocumentListener("play", this.onPlayStateChange, !0), this.addPassiveDocumentListener("pause", this.onPlayStateChange, !0)
                }
            }, class extends Qn {
                constructor(e) {
                    super(e), this.onInputEvent = e => {
                        const {
                            target: t
                        } = e;
                        "INPUT" !== t.tagName && "TEXTAREA" !== t.tagName || this.onInputValueChange(t)
                    }, this.onInputValueChange = e => {
                        this.changeQueue.nodePropertyChanged(e, "value"), this.shipper.sendFrame()
                    }, this.shipper.observeInputValue && [this.window.HTMLInputElement, this.window.HTMLTextAreaElement].forEach((e => {
                        this.callOnDispose(Xn(e, "value", "set", this.onInputValueChange, {
                            timing: "after",
                            async: !0
                        }))
                    }))
                }
                init() {
                    this.addPassiveDocumentListener("input", this.onInputEvent)
                }
            }];
            class ia {
                constructor(e, t, n, a = !1) {
                    this.sendFrame = h()((() => {
                        const e = this.changeQueue.take(),
                            [t, n] = this.serializer.take();
                        this.sendMessage([1, _n, e, t, n])
                    }), 1e3 / 15), this.window = e, this.document = t, this.sendMessage = n, this.observeInputValue = a, this.started = !1, this.serializer = new ea(this), this.changeQueue = new Zn(this), this.helpers = [], this.keyframeHelpers = [], aa.forEach((e => {
                        const t = new e(this);
                        this.helpers.push(t), e.includedInKeyframe && this.keyframeHelpers.push(t)
                    }))
                }
                dispose() {
                    this.clear(), this.helpers.forEach((e => e.dispose()))
                }
                clear() {
                    this.serializer.clear(), this.changeQueue.clear(), this.sendFrame.cancel()
                }
                start() {
                    this.started || (this.helpers.forEach((e => e.init())), this.started = !0, this.sendKeyframe())
                }
                sendKeyframe() {
                    if (!this.started) return;
                    this.clear();
                    const e = this.keyframeHelpers.map((e => e.serialize())),
                        [t, n] = this.serializer.take();
                    this.sendMessage([1, En, e, t, n])
                }
                onNestedShipperMessage(e, t) {
                    this.changeQueue.nestedShipperMessage(e, t), this.sendFrame()
                }
            }
            var oa = n(327),
                ra = n.p + "88d1c3969704affaf7c583e23f3162a1.mp3",
                sa = n.p + "7bfc614b2b8cf39efbfb3b15da61c94a.mp3",
                la = n.p + "fcc08cee2e776c9a6dc062dd58403e41.mp3",
                da = n.p + "73cb37fbb1269e98be6a7f217a014a44.mp3";
            const ca = "application/x-postmate-v1+json";
            let ua = 0;
            let ma = 0;
            const ga = {
                    handshake: 1,
                    "handshake-reply": 1,
                    call: 1,
                    emit: 1,
                    reply: 1,
                    request: 1,
                    disconnect: 1
                },
                pa = (e, t) => ("string" !== typeof t || e.origin === t) && (!!e.data && (("object" !== typeof e.data || "postmate" in e.data) && (e.data.type === ca && !!ga[e.data.postmate])));
            class ha {
                constructor(e) {
                    this.parent = e.parent, this.frame = e.frame, this.child = e.child, this.childOrigin = e.childOrigin, this.childId = e.childId, this.existingFrame = e.existingFrame, this.events = {}, this.listener = e => {
                        if (!pa(e, this.childOrigin)) return !1;
                        const {
                            data: t,
                            name: n
                        } = ((e || {}).data || {}).value || {};
                        "emit" === e.data.postmate && e.data.childId === this.childId && n in this.events && this.events[n].forEach((e => {
                            e.call(this, t)
                        }))
                    }, this.parent.addEventListener("message", this.listener, !1)
                }
                get(e) {
                    return new ba.Promise((t => {
                        const n = ++ua,
                            a = e => {
                                e.data.uid === n && "reply" === e.data.postmate && e.data.childId === this.childId && (this.parent.removeEventListener("message", a, !1), t(e.data.value))
                            };
                        this.parent.addEventListener("message", a, !1), this.child.postMessage({
                            postmate: "request",
                            type: ca,
                            property: e,
                            uid: n
                        }, this.childOrigin)
                    }))
                }
                call(e, t) {
                    this.child.postMessage({
                        postmate: "call",
                        type: ca,
                        property: e,
                        data: t
                    }, this.childOrigin)
                }
                on(e, t) {
                    this.events[e] || (this.events[e] = []), this.events[e].push(t)
                }
                destroy() {
                    window.removeEventListener("message", this.listener, !1), this.existingFrame ? this.child.postMessage({
                        postmate: "disconnect",
                        type: ca
                    }, this.childOrigin) : this.frame.parentNode.removeChild(this.frame)
                }
            }
            class va {
                constructor(e) {
                    this.listener = e => {
                        if (!pa(e, this.parentOrigin)) return;
                        const {
                            property: t,
                            uid: n,
                            data: a
                        } = e.data;
                        if ("disconnect" === e.data.postmate) return this.child.removeEventListener("message", this.listener), void("_disconnect" in this.model && "function" === typeof this.model._disconnect && this.model._disconnect());
                        "call" !== e.data.postmate ? ((e, t) => {
                            const n = "function" === typeof e[t] ? e[t]() : e[t];
                            return ba.Promise.resolve(n)
                        })(this.model, t).then((a => e.source.postMessage({
                            property: t,
                            postmate: "reply",
                            type: ca,
                            childId: this.childId,
                            uid: n,
                            value: a
                        }, e.origin))) : t in this.model && "function" === typeof this.model[t] && this.model[t](a)
                    }, this.model = e.model, this.parent = e.parent, this.parentOrigin = e.parentOrigin, this.child = e.child, this.childId = e.childId, this.child.addEventListener("message", this.listener)
                }
                emit(e, t) {
                    this.parent.postMessage({
                        postmate: "emit",
                        type: ca,
                        childId: this.childId,
                        value: {
                            name: e,
                            data: t
                        }
                    }, this.parentOrigin)
                }
            }
            class ba {
                constructor({
                    container: e = document.body,
                    model: t,
                    url: n,
                    name: a,
                    classListArray: i = [],
                    frame: o
                }) {
                    return o ? (this.frame = o, this.existingFrame = !0) : (this.frame = document.createElement("iframe"), this.frame.name = a || "", i.length > 0 && this.frame.classList.add.apply(this.frame.classList, i), e.appendChild(this.frame)), !this.existingFrame || this.frame.contentWindow || this.frame.contentDocument ? (this.parent = window, this.child = this.frame.contentWindow || this.frame.contentDocument.parentWindow, this.model = t || {}, this.childId = ++ma, this.sendHandshake(n || o.src)) : ba.Promise.reject("iframe does not have contentWindow or contentDocument")
                }
                sendHandshake(e) {
                    const t = (e => {
                        const t = document.createElement("a");
                        t.href = e;
                        const n = t.protocol.length > 4 ? t.protocol : window.location.protocol,
                            a = t.host.length ? "80" === t.port || "443" === t.port ? t.hostname : t.host : window.location.host;
                        return t.origin || `${n}//${a}`
                    })(e);
                    let n, a = 0;
                    return new ba.Promise(((i, o) => {
                        const r = e => !!pa(e, t) && (e.data.childId === this.childId && ("handshake-reply" === e.data.postmate ? (clearInterval(n), this.parent.removeEventListener("message", r, !1), this.childOrigin = e.origin, i(new ha(this))) : o("Failed handshake")));
                        this.parent.addEventListener("message", r, !1);
                        const s = () => {
                                if (++a > 10) return clearInterval(n), o("Handshake Timeout Reached");
                                this.child.postMessage({
                                    postmate: "handshake",
                                    type: ca,
                                    model: this.model,
                                    childId: this.childId
                                }, t)
                            },
                            l = () => {
                                s(), n = setInterval(s, 500)
                            };
                        this.existingFrame ? l() : (this.frame.attachEvent ? this.frame.attachEvent("onload", l) : this.frame.addEventListener("load", l), this.frame.src = e)
                    }))
                }
            }
            ba.debug = !1, ba.Promise = (() => {
                try {
                    return window ? window.Promise : Promise
                } catch (e) {
                    return null
                }
            })(), ba.Model = class {
                constructor(e) {
                    return this.child = window, this.model = e, this.parent = this.child.parent, this.sendHandshakeReply()
                }
                sendHandshakeReply() {
                    return new ba.Promise(((e, t) => {
                        const n = a => {
                            if (a.data.postmate) {
                                if ("handshake" === a.data.postmate) {
                                    0,
                                    this.child.removeEventListener("message", n, !1),
                                    a.source.postMessage({
                                        postmate: "handshake-reply",
                                        type: ca,
                                        childId: a.data.childId
                                    }, a.origin),
                                    this.childId = a.data.childId,
                                    this.parentOrigin = a.origin;
                                    const t = a.data.model;
                                    return t && Object.keys(t).forEach((e => {
                                        this.model[e] = t[e]
                                    })),
                                    e(new va(this))
                                }
                                return t("Handshake Reply Failed")
                            }
                        };
                        this.child.addEventListener("message", n, !1)
                    }))
                }
            };
            var Ea = ba;
            class _a extends r.a.Component {
                constructor(...e) {
                    super(...e), this.originalDocumentTitle = null, this.flashDocumentTitle = null, this.setTitle = e => {
                        this.props.setTitle ? this.props.setTitle(e) : (this.originalDocumentTitle = window.document.title, this.flashDocumentTitle = e, window.document.title = e)
                    }, this.resetTitle = () => {
                        this.props.resetTitle ? this.props.resetTitle() : (window.document.title === this.flashDocumentTitle && (window.document.title = this.originalDocumentTitle), this.originalDocumentTitle = null, this.flashDocumentTitle = null)
                    }, this.stop = () => {
                        this.resetTitle(), window.document.removeEventListener("focus", this.stop), window.clearInterval(this.interval), this.interval = null
                    }
                }
                render() {
                    const {
                        dismissOnFocus: e
                    } = this.props;
                    if (e && window.document.hasFocus() || !this.props.message.text) this.stop();
                    else if (!this.interval) {
                        let t = 0;
                        this.setTitle(this.props.message.text), this.interval = window.setInterval((() => {
                            t++ % 2 === 0 ? this.resetTitle() : this.setTitle(this.props.message.text)
                        }), 1250), e && window.addEventListener("focus", this.stop)
                    }
                    return null
                }
                shouldComponentUpdate(e) {
                    return e.message !== this.props.message || e.dismissOnFocus !== this.props.dismissOnFocus
                }
                componentWillUnmount() {
                    this.stop()
                }
            }
            _a.defaultProps = {
                dismissOnFocus: !1
            };
            var fa = _a,
                Oa = n(306),
                Ca = n(308),
                Sa = n(158),
                ya = n(316);
            Ea.Promise = window.Promise = window.Promise || g.a;
            const ka = /!\[.*\]\((.*)\)/g;
            Object(a.d)(Ue.a);
            const Ta = Object(a.b)("color:", Ue.g, ";;label:bodyCss;"),
                Aa = Object(a.b)("animation:nudge 500ms ease-out 250ms forwards;transform:translate(", 25, "px,", 25, "px);@keyframes nudge{0%{transform:translate(", 25, "px,", 25, "px);}33%{transform:translate(-5px,-5px);}100%{transform:translate(0px,0px);}};label:nudgeCss;"),
                Na = Object(a.b)("height:30vh;margin-bottom:", w.d.marginUnits(4), ";;label:conversationLoadingStateCss;");
            [s.osName.toLowerCase().replace(/\s/g, "-"), s.isMobile ? "is-mobile" : "not-mobile", s.isTablet ? "is-tablet" : "not-tablet", s.isIE ? "is-ie" : "not-ie", s.isEdge ? "is-edge" : "not-edge", Ta].forEach((e => document.body.classList.add(e)));
            const Ra = Object(a.b)({
                    name: "1mm0ans-backgroundCoverBlack",
                    styles: "width:100%;height:100vh;transition:background-color 0.5s,width 0s,height 0s;background-color:rgba(0,0,0,0.8);;label:backgroundCoverBlack;"
                }),
                Da = Object(i.a)("div", {
                    target: "e8tzad70",
                    label: "BackgroundCover"
                })("display:block;position:fixed;transition:background-color 0.5s,width 0s 0.5s,height 0s 0.5s;width:0;height:0;background-color:rgba(0,0,0,0);top:0;left:0;", (e => e.coverOn && Ra), ";"),
                Ia = Object(i.a)("div", {
                    target: "e8tzad71",
                    label: "MessengerRadialShadow"
                })({
                    name: "vqbos4",
                    styles: "position:fixed;top:0;left:0;width:200%;height:200%;background:radial-gradient(50% 50% at 50% 50%,rgba(0,0,0,0.072) 0%,rgba(0,0,0,0) 100%);z-index:-1;border-radius:50%;"
                }),
                xa = Object(a.b)({
                    name: "1eixbuf-fullScreenOff",
                    styles: "background-color:transparent;;label:fullScreenOff;"
                }),
                Ma = Object(i.a)("div", {
                    target: "e8tzad72",
                    label: "FullScreenVideoBackgroundCover"
                })("height:100vh;width:100%;background-color:rgba(0,0,0,0.8);transition:background-color 300ms;max-height:100vh;", (e => !e.coverOn && xa));
            class Ba extends r.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        readyToRender: !1,
                        showLoading: !1,
                        currentInlineLoadingSelector: null,
                        messengerShowing: !1,
                        messages: [],
                        conversations: [],
                        meetings: [],
                        activeConversation: null,
                        readReceipt: null,
                        agentsAvailable: !1,
                        anyUserAvailable: !1,
                        qualified: !1,
                        typingIndicator: null,
                        incomingMeeting: null,
                        incomingMeetingConnection: null,
                        unreadMessages: [],
                        showFeedback: !1,
                        outgoingMeetingRequest: null,
                        rtcSupported: null,
                        scriptWaitingMessage: null,
                        isFocussed: document.hasFocus(),
                        parentIsFocussed: !1,
                        hostname: null,
                        hasBeenOpened: !1,
                        disableClose: !1,
                        locale: S(navigator.language),
                        lightboxLocale: S(navigator.language),
                        countryCode: null,
                        showingMessengerButton: !1,
                        contentTooTall: !1,
                        contentTooWide: !1,
                        messengerTooTall: !1,
                        routingMedium: null,
                        canInitiateVideoChat: !1,
                        promptingForAudioVideoPermission: !0,
                        microphoneAndCameraPermissions: "not requested",
                        shouldAnnounceTyping: !0,
                        longTaskObserver: null,
                        backgroundCover: !1,
                        fullScreenVideoBackgroundCover: !1,
                        showStartConversationLoadingState: !1
                    }, this.focusable = {
                        messenger: r.a.createRef(),
                        meeting: r.a.createRef(),
                        messengerIconButton: r.a.createRef()
                    }, this.footerRef = r.a.createRef(), this.timelineEntryFactory = new un.MessengerTimelineEntryFactory(this.props.config), this.afterInitQueue = [], this.firstMessageReceived = !1, this.lastTimeLightboxClosed = null, this.initialized = !1, this.initializing = null, this.messageQueue = [], this.sendingMessage = !1, this.autoPounceMessagesCount = 0, this.afterInit = e => (...t) => {
                        this.initialized ? e(...t) : this.afterInitQueue.push((() => e(...t)))
                    }, this.afterLightboxClose = e => (...t) => {
                        if (this.state.showLightbox && this.closeLightbox(), null === this.lastTimeLightboxClosed) e(...t);
                        else {
                            const n = new Date - this.lastTimeLightboxClosed;
                            if (n < 700) {
                                setTimeout((() => {
                                    this.afterLightboxClose(e)(...t)
                                }), 700 - n + 15)
                            } else e(...t)
                        }
                    }, this.emit = (e, t) => {
                        this.handshake.then((n => n.emit(e, t)))
                    }, this.playAudioIfAllowed = e => {
                        (!this.disableAudioBeforeOpen || this.disableAudioBeforeOpen && this.state.hasBeenOpened) && this.playAudio(e)
                    }, this.playAudio = e => this.emit("playAudio", e), this.addAuthParams = e => {
                        const {
                            uuid: t
                        } = this.props, [n, a] = e.split("?"), i = Object.assign(b.a.parse(a), {
                            uuid: t
                        });
                        return `${this.resourcePath(n)}?${b.a.stringify(i)}`
                    }, this.post = (e, t = {}) => fetch(this.addAuthParams(`/${e}`), {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json; charset=utf-8"
                        },
                        body: JSON.stringify(t)
                    }), this.get = e => fetch(this.addAuthParams(`/${e}`), {
                        method: "GET"
                    }), this.loadImage = (e, t = (() => {})) => new g.a((n => {
                        const a = new Image;
                        a.onload = () => n(), a.onerror = () => {
                            t(), n()
                        }, a.src = e
                    })), this.getImgsFromText = e => {
                        if (!e) return [];
                        try {
                            const t = [];
                            let n;
                            for (; null !== (n = ka.exec(e));) t.push(n[1]);
                            return t.map((e => this.loadImage(e)))
                        } catch (t) {
                            return Object(d.c)(t, {
                                extra: e
                            }), []
                        }
                    }, this.initialize = async e => {
                        var t;
                        this.initialized = !1;
                        const n = null === (t = e.conversations) || void 0 === t ? void 0 : t.find((e => !e.endedAt)),
                            a = [];
                        this.messengerTheme.buttonImageUrl && await this.loadImage(this.messengerTheme.buttonImageUrl, (() => {
                            this.messengerTheme.buttonImageUrl = null
                        })), this.messengerTheme.companyLogoUrl && await this.loadImage(this.messengerTheme.companyLogoUrl, (() => {
                            this.messengerTheme.companyLogoUrl = null
                        }));
                        const i = e.messages.find((e => "greeting" === e.type));
                        return null !== i && void 0 !== i && i.headerImageUrl && await this.loadImage(i.headerImageUrl, (() => {
                            i.headerImageUrl = null
                        })), null !== i && void 0 !== i && i.logoImageUrl && await this.loadImage(i.logoImageUrl, (() => {
                            i.logoImageUrl = null
                        })), n && (e.messages.forEach((e => {
                            e.conversationId === n.id && ("prompt" === e.type || "greeting" === e.type ? (a.push(...this.getImgsFromText(e.heading)), a.push(...this.getImgsFromText(e.body))) : a.push(...this.getImgsFromText(null === e || void 0 === e ? void 0 : e.text)))
                        })), await g.a.race([g.a.all(a), Object(L.b)(3e3)])), new g.a((t => this.setState((t => {
                            if (n) {
                                var a;
                                let o, r, {
                                        conversationId: s,
                                        promptDismissed: l,
                                        messengerExpanded: d,
                                        locale: c
                                    } = t,
                                    u = [],
                                    m = null,
                                    g = null,
                                    p = null,
                                    h = !1;
                                var i;
                                if (e.messages.forEach((e => {
                                        e.conversationId === n.id && ("prompt" === e.type && (m = e), "greeting" === e.type && (g = e), "triggerOpen" === e.eventType && (p = e), "open" === e.eventType && (h = !0))
                                    })), n.id !== t.conversationId) switch (o = e.messages.filter((e => e.conversationId !== n.id)), r = e.messages.filter((e => e.conversationId === n.id)), s = n.id, n.initialClientState) {
                                    case "expanded":
                                        p = !0, d = !1, l = !0;
                                        break;
                                    case "collapsed":
                                        d = !1, l = !1
                                } else o = e.messages.map((e => ({ ...e,
                                    existing: !0
                                }))), u = n.id === (null === (i = t.activeConversation) || void 0 === i ? void 0 : i.id) ? t.unreadMessages : o.filter((e => e.conversationId === n.id && !e.isOwn && !e.isRead && e.text)), o.find((e => e.conversationId === n.id && !e.isOwn && e.isRead && e.text)) && (this.firstMessageReceived = !0);
                                n.locale && (c = n.locale), this.emit("displaySkipLink", {
                                    locale: c
                                }), e.messengerShowing = d || "expanded" === n.initialClientState, this.emit(e.messengerShowing ? "maximize" : "minimize");
                                const v = e.messages.filter((e => !e.isOwn)).last(),
                                    b = "waiting" === (null === v || void 0 === v ? void 0 : v.eventType) && v;
                                if (this.scrollPercentage = null === b || void 0 === b ? void 0 : b.scrollPercentage, r) {
                                    const e = Object(dn.calcShowRedDot)(r);
                                    r.forEach((t => this.handleMessage({ ...t,
                                        forceNoRedDot: !e
                                    })))
                                }
                                return p && !h && this.updateExpanded(!0), n.widgetShowing && (e.showingMessengerButton = !0), { ...e,
                                    readyToRender: !0,
                                    scriptWaitingMessage: b,
                                    activeConversation: n,
                                    prompt: m,
                                    greeting: g,
                                    unreadMessages: u,
                                    messages: o,
                                    conversationId: s,
                                    promptDismissed: l,
                                    hasBeenOpened: h,
                                    disableClose: null === (a = p) || void 0 === a ? void 0 : a.disableClose,
                                    messengerExpanded: d,
                                    locale: c,
                                    typingIndicator: null
                                }
                            }
                            return {
                                readyToRender: !1,
                                activeConversation: void 0
                            }
                        }), (() => {
                            if (this.initialized = !0, this.afterInitQueue.forEach((e => e())), this.afterInitQueue = [], this.setState((({
                                    showLoading: e
                                }) => e ? {
                                    showLoading: !1
                                } : null)), this.state.readyToRender || this.state.activeConversation || this.emit("resize", {
                                    height: 0,
                                    width: 0
                                }), this.state.activeConversation) {
                                this.state.messages.some((e => this.messageIsFromRep(e))) && this.emit("setUserResponded", !0);
                                this.state.messages.some((e => this.messageIsFromVisitor(e))) && this.emit("setVisitorResponded", !0);
                                const e = this.state.messages.filter(this.messageCountsForAp).length;
                                this.updateAutoPounceCount(e)
                            }
                            t()
                        }))))
                    }, this.postMessageHandlers = {
                        disconnected: () => this.hideTypingIndicator(),
                        initCookieState: e => {
                            this.cookieStateAttrs = Object.keys(e), this.setState(e)
                        },
                        initState: e => {
                            this.initializing ? this.initializing.then((() => this.initializing = this.initialize(e))) : this.initializing = this.initialize(e)
                        },
                        parentScrolledToPercent: e => {
                            this.scrollPercentage && e > this.scrollPercentage && (this.scrollPercentage = null, this.setState({
                                scriptWaitingMessage: null
                            }), this.sendMessage({
                                type: "event",
                                eventType: "scrollPercentage"
                            }))
                        },
                        botProcessStarted: () => {
                            this.botProcessTimer || (this.botProcessTimer = setTimeout((() => {
                                this.showTypingIndicator(), this.botProcessTimer = null
                            }), 250))
                        },
                        botProcessEnded: () => {
                            this.botProcessTimer ? (clearTimeout(this.botProcessTimer), this.botProcessTimer = null) : this.scriptWaitTimeout || this.hideTypingIndicator()
                        },
                        stateUpdate: e => this.setState(e),
                        typingStarted: () => this.showTypingIndicator(),
                        typingEnded: () => this.hideTypingIndicator(),
                        message: e => this.handleMessage(e),
                        visitorBlocked: () => this.onVisitorBlocked(),
                        visitorUnblocked: () => this.onVisitorUnblocked(),
                        meetingRequest: ({
                            type: e
                        }) => {
                            if ("outbound_voice" === e) this.handleCallFromAgent()
                        },
                        meetingUpdate: e => this.handleMeetingUpdate(e),
                        open: this.afterInit((e => {
                            this.open(e)
                        })),
                        startShipper: this.afterInit((() => {
                            this.recreateShipper(), this.shipper.start()
                        })),
                        stopShipper: this.afterInit((() => {
                            this.recreateShipper()
                        })),
                        requestKeyframe: () => {
                            var e;
                            null === (e = this.shipper) || void 0 === e || e.sendKeyframe()
                        },
                        mousemove: ({
                            x: e,
                            y: t
                        }) => this.handleCursor(e, t),
                        updateParentFocussed: e => {
                            this.setState({
                                parentIsFocussed: e
                            })
                        },
                        setHostname: e => {
                            this.setState({
                                hostname: e
                            })
                        },
                        messageRead: e => {
                            this.setState((t => ({
                                unreadMessages: t.unreadMessages.filter((t => t.id > e))
                            })))
                        },
                        showLoading: () => {
                            this.setState({
                                readyToRender: !0
                            }), this.emit("resize", {
                                height: Ue.j,
                                width: Ue.k
                            }), this.emit("maximize"), this.setState({
                                showLoading: !0
                            })
                        },
                        showInlineLoadingOnSelector: e => {
                            this.props.config.features.includes("meeting_progress_loading_bar") && this.setState({
                                currentInlineLoadingSelector: e
                            })
                        },
                        showLightboxLoading: () => {
                            const e = (t, n) => {
                                if (this.state.messengerExpanded && this.state.hasBeenOpened) return this.updateExpanded(!1), void setTimeout((() => {
                                    e(t, !0)
                                }), 300);
                                n && this.lastTimeLightboxClosed && this.lastTimeLightboxClosed >= new Date - 300 || t()
                            };
                            e((() => {
                                this.emit("setFullScreen", !0), this.setState({
                                    showLightbox: !0,
                                    backgroundCover: !0
                                })
                            }))
                        },
                        startChatConversationLoadingState: () => {
                            this.updateExpanded(!0)
                        },
                        startElementConversationLoadingState: () => {
                            this.props.config.features.includes("meeting_progress_loading_bar") ? (this.emit("setFullScreen", !0), this.setState({
                                showLightbox: !0,
                                backgroundCover: !0,
                                showStartElementConversationLoadingState: !0
                            })) : this.setState({
                                showStartElementConversationLoadingState: !0
                            })
                        },
                        closeLightbox: () => {
                            this.closeLightbox()
                        },
                        contentTooTall: e => {
                            this.setState({
                                contentTooTall: e
                            })
                        },
                        contentTooWide: e => {
                            this.setState({
                                contentTooWide: e
                            })
                        },
                        messengerTooTall: e => {
                            this.setState({
                                messengerTooTall: e
                            })
                        },
                        requestAssetPerformanceEntries: e => {
                            const t = performance.getEntries().filter((t => t.name.startsWith(e.cdnHost)));
                            this.emit("assetPerformanceEntries", JSON.stringify(t))
                        },
                        initElementConversation: e => {
                            this.setState({
                                elementConversation: e,
                                elementMessages: e.messages,
                                lightboxLocale: e.locale
                            })
                        },
                        elementMessage: e => {
                            var t;
                            Array.isArray(this.state.elementMessages) && e.conversationId === (null === (t = this.state.elementConversation) || void 0 === t ? void 0 : t.id) && this.setState((({
                                elementMessages: t
                            }) => ({
                                elementMessages: [...t, e]
                            })))
                        }
                    }, this.botProcessTimer = null, this.delayedTypingTimer = null, this.delayedTyping = g.a.resolve(), this.turnOnAnnouncement = () => {
                        this.setState({
                            shouldAnnounceTyping: !0
                        })
                    }, this.stopStartElementConversationLoadingState = () => {
                        this.emit("endInlineLoading", this.state.currentInlineLoadingSelector), this.setState({
                            showStartElementConversationLoadingState: !1,
                            currentInlineLoadingSelector: null
                        })
                    }, this.closeLightbox = () => {
                        this.lastTimeLightboxClosed = Date.now();
                        const e = {
                            showLightbox: !1,
                            backgroundCover: !1,
                            elementConversation: void 0,
                            elementMessages: null,
                            showStartConversationLoadingState: !1,
                            showStartElementConversationLoadingState: !1
                        };
                        this.props.config.features.includes("meeting_progress_loading_bar") && this.state.currentInlineLoadingSelector && (this.emit("endInlineLoading", this.state.currentInlineLoadingSelector), e.currentInlineLoadingSelector = null), this.setState(e), this.emit("setFullScreen", !1)
                    }, this.handleMessengerTimelineResize = ({
                        height: e
                    }) => {
                        var t, n;
                        const a = this.showComposer ? Ue.c : 0,
                            i = this.shouldShowCallBox ? Ue.b : 0,
                            o = this.shouldShowCallBox ? 0 : Ue.m,
                            r = this.shouldShowPrivacyPolicy ? Ue.q : 0,
                            s = null !== (t = null === (n = this.footerRef.current) || void 0 === n ? void 0 : n.offsetHeight) && void 0 !== t ? t : r,
                            l = Math.ceil(e) + a + i + o + s + Ue.l + Ue.i;
                        this.emit("resize", {
                            height: l,
                            width: Ue.k
                        })
                    }, this.handleResize = ({
                        bounds: {
                            height: e,
                            width: t
                        }
                    }) => {
                        this.resizeBuffer = this.resizeBuffer || h()(((e, t) => {
                            this.state.messengerShowing || this.emit("resize", {
                                width: t + Ue.p,
                                height: e + Ue.p
                            })
                        }), 10), this.state.messengerShowing || this.resizeBuffer(e, t)
                    }, this.open = e => {
                        this.allowInboundVoice && !this.state.outgoingMeetingRequest && "meeting" === (null === e || void 0 === e ? void 0 : e.focus) && this.initInboundVoice(), "same_experience" === (null === e || void 0 === e ? void 0 : e.type) && this.closeLightbox(), this.dismissPrompt(), this.updateExpanded(!0, null === e || void 0 === e ? void 0 : e.focus)
                    }, this.appendMessage = e => {
                        this.setState((t => ({
                            messages: t.messages.concat(e)
                        })))
                    }, this.updatePendingStatus = (e, t) => {
                        this.setState((n => {
                            const a = n.messages.findIndex((t => t.clientId === e)),
                                i = [...n.messages];
                            if (a >= 0) {
                                const e = Object.assign({}, n.messages[a], {
                                    pendingStatus: t
                                });
                                i.splice(a, 1, e)
                            }
                            return {
                                messages: i
                            }
                        }))
                    }, this.sendMessage = e => new g.a((t => {
                        this.messageQueue.push([t, e]), this.sendingMessage || this.drainMessageQueue()
                    })), this.drainMessageQueue = () => {
                        if (0 === this.messageQueue.length) return;
                        const [e, t] = this.messageQueue.shift();
                        if (t) {
                            this.sendingMessage = !0;
                            const n = this._sendMessage(t);
                            e(n), n.finally((() => {
                                this.sendingMessage = !1, this.drainMessageQueue()
                            }))
                        }
                    }, this._sendMessage = e => {
                        const t = Object.keys(e).reduce(((t, n) => (t[n.underscore()] = e[n], t)), {}),
                            n = new URLSearchParams(document.location.search);
                        return n.has("q_trace") && (t.q_trace = n.get("q_trace")), this.sending = this.post("messages", t).then((async t => {
                            if (t.ok) return t.json(); {
                                var n;
                                const a = await t.json();
                                if ("calendar_event_pick" === e.type && a.availabilities) throw new mn.UnavailableTimeSlotError(a.errors, a.availabilities);
                                throw new Error((null === (n = a.errors) || void 0 === n ? void 0 : n[0]) || "Sorry, something went wrong. Please try again.")
                            }
                        })).then((e => this.updateMessages(e, !0)))
                    }, this.startVideoCall = async () => {
                        const e = await this.post("meetings", {
                            type: "inbound_video"
                        });
                        await e.json()
                    }, this.endVideoCall = async () => {
                        this.activeVideoMeeting && await this.post("meetings/end", {
                            meeting_token: this.activeVideoMeeting.token
                        })
                    }, this.startWebInboundVoice = () => {
                        const {
                            hostname: e
                        } = this.state;
                        window.open(this.addAuthParams(`/meeting?type=inbound_voice&hostname=${e}`), "_voiceMeeting", "width=300,height=300"), this.setState({
                            outgoingMeetingRequest: null
                        })
                    }, this.startPhoneInboundVoice = e => this.post("meetings", {
                        type: "inbound_voice",
                        number: e
                    }).then((e => e.json())).then((e => {
                        this.handleMeetingUpdate(e), this.setState({
                            outgoingMeetingRequest: null
                        })
                    })), this.cancelOutgoingMeeting = () => this.post("meetings/cancel", {
                        meeting_token: this.pendingOutgoingMeeting.token
                    }).then((e => e.json())).then((e => this.handleMeetingUpdate(e))), this.initInboundVoice = () => {
                        if (this.setupDevice(), this.props.config.appexchange) this.startWebInboundVoice();
                        else {
                            const e = {
                                timestamp: new Date,
                                type: "inbound_voice"
                            };
                            this.setState({
                                outgoingMeetingRequest: e
                            })
                        }
                    }, this.cancelInitInboundVoice = () => {
                        this.setState({
                            outgoingMeetingRequest: null
                        })
                    }, this.toggleFeedback = () => {
                        this.setState({
                            showFeedback: !this.state.showFeedback
                        }), this.post("events/interaction", {
                            name: "feedback_button_clicked"
                        })
                    }, this.onMessageRead = e => {
                        e.isRead || (this.emit("messageRead", e.id), this.setState({
                            unreadMessages: []
                        }))
                    }, this.onMessageTyped = (e, t) => {
                        this.emit("typing", {
                            message: t ? "" : e
                        })
                    }, this.focus = e => {
                        this.focusable[e] && setTimeout((() => {
                            var t;
                            return null === (t = this.focusable[e].current) || void 0 === t ? void 0 : t.focus()
                        }))
                    }, this.dismissPrompt = () => {
                        this.setState({
                            promptDismissed: !0
                        }), this.focus("messengerIconButton")
                    }, this.updateMessages = this.afterInit(((e, t = !1) => {
                        var n;
                        if (e.scriptId && e.conversationId !== this.state.conversationId || "element" === (null === (n = e.conversation) || void 0 === n ? void 0 : n.type)) return null;
                        t && e.text && (e.visitorId ? this.playAudio(da) : this.firstMessageReceived ? this.playAudioIfAllowed(la) : (this.playAudioIfAllowed(sa), this.firstMessageReceived = !0)), this.setState((t => {
                            var n;
                            const a = {};
                            if (e.conversation) {
                                const {
                                    conversations: n,
                                    messages: i
                                } = t, o = n.findIndex((t => t.id === e.conversation.id));
                                o >= 0 ? (!i.last() || e.id > i.last().id) && n.splice(o, 1, e.conversation) : n.push(e.conversation), a.conversations = n, a.activeConversation = e.conversation, a.conversationId = e.conversation.id
                            }
                            const i = () => {
                                e.isOwn || e.isRead || !e.text || (a.unreadMessages = t.unreadMessages.concat(e))
                            };
                            if (t.messages.length) {
                                const n = t.messages.findIndex((t => !!e.clientId && t.clientId === e.clientId));
                                if (n >= 0) {
                                    const i = [...t.messages];
                                    i.splice(n, 1, e), a.messages = i
                                } else t.messages.find((t => t.id === e.id)) ? a.messages = t.messages : (a.messages = t.messages.concat(e).sort(((e, t) => e.id - t.id)), i())
                            } else a.messages = [e], i();
                            return "waiting" === e.eventType && (a.scriptWaitingMessage = e, e.notProcessing || "timeout" !== e.waitingEvent || (a.typingIndicator = r.a.createElement(X.e.TypingIndicator, null))), "event" === e.type && e.eventType === (null === (n = t.scriptWaitingMessage) || void 0 === n ? void 0 : n.waitingEvent) && this.scriptWaitTimeout && (clearTimeout(this.scriptWaitTimeout), this.scriptWaitTimeout = null, a.scriptWaitingMessage = null), "prompt" === e.type && (a.prompt = e), "greeting" === e.type && (a.greeting = e), "event" === e.type && "triggerOpen" === e.eventType && (this.updateExpanded(!0), a.disableClose = e.disableClose), "event" === e.type && "showWidget" === e.eventType && (a.showingMessengerButton = !0), a.activeConversation && "event" === e.type && "startChatBot" === e.eventType && (a.activeConversation.gptAutoRespondEnabled = !0), a
                        }))
                    })), this.showTypingIndicator = () => {
                        this.state.typingIndicator || this.setState({
                            typingIndicator: r.a.createElement(X.e.TypingIndicator, {
                                showStartConversationLoadingState: this.state.showStartConversationLoadingState,
                                shouldAnnounceTyping: this.state.shouldAnnounceTyping
                            }),
                            shouldAnnounceTyping: !1
                        })
                    }, this.hideTypingIndicator = () => {
                        this.setState({
                            typingIndicator: null
                        })
                    }, this.onVisitorBlocked = () => {
                        this.setState({
                            showingMessengerButton: !1,
                            messengerExpanded: !1
                        })
                    }, this.onVisitorUnblocked = () => {
                        this.setState({
                            showingMessengerButton: !0,
                            messengerExpanded: !0
                        })
                    }, this.beforeMessengerContainerAnimationIn = () => {
                        this.emit("maximize"), this.setState({
                            messengerShowing: !0
                        })
                    }, this.afterMessengerContainerAnimationOut = () => {
                        this.emit("minimize"), this.setState({
                            messengerShowing: !1
                        })
                    }, this.updateExpanded = this.afterInit(this.afterLightboxClose(((e, t = "messenger") => {
                        this.state.activeConversation && e !== this.state.messengerExpanded && (this.state.messengerExpanded ^ e && this.emit("clientEvent", e ? "messengerOpened" : "messengerClosed"), this.state.messengerExpanded || !e || this.state.hasBeenOpened || this.sendMessage({
                            type: "event",
                            eventType: "open"
                        }), e && !s.isMobile && this.focus(t), this.setState({
                            messengerExpanded: e,
                            hasBeenOpened: !0
                        }))
                    }))), this.acceptMeetingRequest = () => {
                        const {
                            incomingMeeting: e,
                            hostname: t
                        } = this.state;
                        window.open(this.addAuthParams(`/meeting/${e.token}?hostname=${t}`), "_voiceMeeting", "width=300,height=300"), this.setState({
                            incomingMeeting: null,
                            incomingMeetingConnection: null
                        })
                    }, this.rejectMeetingRequest = () => {
                        this.state.incomingMeetingConnection.reject(), this.setState({
                            incomingMeeting: null,
                            incomingMeetingConnection: null
                        })
                    }, this.transferMeetingRequest = e => {
                        this.post("meetings/transfer", {
                            meeting_token: this.state.incomingMeeting.token,
                            number: e
                        })
                    }, this.handleMessage = e => {
                        if (e.visitorId)(this.sending || g.a.resolve()).then((() => this.updateMessages(e))), this.messageIsFromVisitor(e) && this.emit("setVisitorResponded", !0);
                        else if (e.scriptId && "event" !== e.type) {
                            const t = this.delayedTyping;
                            this.delayedTyping = new g.a((n => {
                                t.then((() => {
                                    this.delayedTypingTimer = setTimeout((() => {
                                        this.showTypingIndicator(), this.delayedTypingTimer = setTimeout((() => {
                                            this.hideTypingIndicator(), this.updateMessages(e, !0), n()
                                        }), 900)
                                    }), this.state.typingIndicator ? 0 : 250)
                                }))
                            }))
                        } else this.updateMessages(e, !0), this.messageIsFromRep(e) && this.emit("setUserResponded", !0), this.messageCountsForAp(e) && this.updateAutoPounceCount(this.autoPounceMessagesCount + 1)
                    }, this.cancelDelayedTyping = () => {
                        this.delayedTyping = g.a.resolve(), this.delayedTypingTimer && clearTimeout(this.delayedTypingTimer)
                    }, this.handleMeetingUpdate = e => {
                        const {
                            meetings: t
                        } = this.state, n = t.findIndex((t => t.id === e.id)); - 1 !== n ? (t.splice(n, 1, e), this.setState({
                            meetings: t
                        })) : this.setState({
                            meetings: t.concat(e)
                        })
                    }, this.handleCursor = (e, t) => {
                        this.emit("togglePointerEvents", !!this.clickableElementAt(e, t))
                    }, this.clickableElementAt = (e, t) => {
                        var n;
                        return s.isIE && !Element.prototype.closest && (Element.prototype.closest = function(e) {
                            let t = this;
                            do {
                                if (t.msMatchesSelector(e)) return t;
                                t = t.parentElement || t.parentNode
                            } while (null !== t && 1 === t.nodeType);
                            return null
                        }), null === (n = document.elementFromPoint(e, t)) || void 0 === n ? void 0 : n.closest("[data-clickable],button,input,textarea,a")
                    }, this.recreateShipper = () => {
                        var e;
                        null === (e = this.shipper) || void 0 === e || e.dispose(), this.shipper = new ia(window, document, (e => this.emit("mirrorEvent", e)), !0)
                    }, this.reinitStateIfNecessary = e => {
                        if (!this.initialized) return;
                        [this.agentsAvailableIfMessagedByRep].some((t => !t(e))) && this.initializing.then((() => this.initializing = this.reinitState()))
                    }, this.agentsAvailableIfMessagedByRep = e => {
                        var t, n, a, i;
                        const o = null === (t = this.state.messages) || void 0 === t || null === (n = t.at) || void 0 === n ? void 0 : n.call(t, -1);
                        return !o || (null === (a = e.messages) || void 0 === a ? void 0 : a.length) === (null === (i = this.state.messages) || void 0 === i ? void 0 : i.length) || !o.userId || "system" === o.type || this.state.owner && this.state.agentsAvailable
                    }, this.reinitState = async () => this.get("state").then((e => e.json())).then(this.initialize), this.backgroundCoverDisposer = null, this.setBackgroundCover = e => {
                        var t;
                        null === (t = this.backgroundCoverDisposer) || void 0 === t || t.call(this), this.backgroundCoverDisposer = null, !e && this.state.fullScreenVideoBackgroundCover || this.emit("setFullScreen", e), this.setState({
                            backgroundCover: e
                        }), e && (this.backgroundCoverDisposer = Object(L.a)(5e3, (() => {
                            this.emit("setFullScreen", !1), this.setState({
                                backgroundCover: !1
                            })
                        })))
                    }, this.setFullScreen = e => {
                        this.emit("setFullScreen", e), this.setState({
                            fullScreenVideoBackgroundCover: e
                        })
                    }, this.updateAutoPounceCount = e => {
                        e > this.autoPounceMessagesCount && (this.autoPounceMessagesCount = e, this.emit("setAutoPounceMessagesCount", e))
                    }, this.messageCountsForAp = e => !(!0 !== e.isAp || !this.isConversationMessage(e)), this.messageIsFromRep = e => !(!this.isConversationMessage(e) || !e.userId || e.isAp), this.messageIsFromVisitor = e => !(!this.isConversationMessage(e) || !e.visitorId || "text" !== e.type), this.isConversationMessage = e => !(e.conversationId !== this.state.conversationId || "text" !== e.type)
                }
                resourcePath(e) {
                    const {
                        token: t
                    } = this.props.config;
                    return `/w/1/${t}${e}`
                }
                get messengerTheme() {
                    const e = Object(y.a)(this.state.hostname, this.props.config.appexchange, this.props.config.messengerThemes);
                    return this.state.hostname && Object.defineProperty(this, "messengerTheme", {
                        value: e
                    }), e
                }
                get messengerThemeValues() {
                    return e = this.messengerTheme, {
                        themeStyles: Object(N.b)({
                            themePrimaryColor: e.primaryColor,
                            themeTextColor: e.textColor,
                            companyLogoImageUrl: e.companyLogoUrl || void 0,
                            buttonPrimaryColor: e.themeButtonsPrimaryColor,
                            buttonTextColor: e.themeButtonsTextColor,
                            buttonBorderRadiusPx: e.themeButtonsBorderRadiusPx,
                            buttonStyle: M[e.themeButtonsButtonStyle],
                            buttonShape: x[e.themeButtonsButtonShape],
                            buttonsUseThemeColors: e.themeButtonsUseThemeColors,
                            headerBackgroundColor: e.themeHeaderBackgroundColor,
                            headerTextColor: e.themeHeaderTextColor,
                            headerBackgroundImageUrl: e.themeHeaderBackgroundImageUrl || void 0,
                            headerBackgroundType: e.themeHeaderUseImage ? R.h.Image : R.h.Color,
                            headerUseThemeColors: e.themeHeaderUseThemeColors,
                            callboxBackgroundColor: e.callBoxColor,
                            callboxImageBackgroundUrl: e.callBoxImageUrl || void 0,
                            callboxBackgroundType: e.useCallBoxImage ? R.d.Image : R.d.Color,
                            callboxUseThemeColors: e.callboxUseThemeColors,
                            launcherImageBackgroundUrl: e.buttonImageUrl || void 0,
                            launcherBackgroundType: e.launcherBackgroundUseImage ? R.j.Image : R.j.Icon,
                            launcherBackgroundColor: e.launcherIconBackgroundColor,
                            launcherIcon: D[e.buttonIcon],
                            launcherShape: I[e.buttonShape],
                            launcherUseThemeColors: e.launcherUseThemeColors
                        }),
                        themeDataValues: {
                            headerTitle: e.title,
                            enableInboundVoice: e.enableInboundVoice,
                            domains: e.domains,
                            disableAudioBeforeOpen: e.disableAudioBeforeOpen,
                            privacyPolicyUrl: e.privacyPolicyUrl || void 0,
                            privacyPolicyText: e.privacyPolicyText || void 0,
                            meetingsHeadline: e.meetingsHeadline || void 0,
                            meetingsWelcomeMessage: e.meetingsWelcomeMessage || void 0,
                            meetingsLogoUrl: e.meetingsLogoUrl || void 0,
                            meetingsHeaderBackgroundColor: e.meetingsHeaderBackgroundColor || void 0,
                            meetingsBackgroundType: e.meetingsBackgroundUseImage ? R.h.Image : R.h.Color,
                            privacyDisclosures: e.privacyDisclosures || void 0
                        }
                    };
                    var e
                }
                get greeting() {
                    var e, t, n, a, i;
                    return null !== (e = this.state.greeting) && void 0 !== e && e.headerStyle ? { ...this.state.greeting,
                        headerStyle: null === (t = this.state.greeting) || void 0 === t || null === (n = t.headerStyle) || void 0 === n ? void 0 : n.toUpperCase(),
                        headerImageSize: null === (a = this.state.greeting) || void 0 === a || null === (i = a.headerImageSize) || void 0 === i ? void 0 : i.toUpperCase()
                    } : this.state.greeting
                }
                get shouldShowPrivacyPolicy() {
                    return null != this.messengerThemeValues.themeDataValues.privacyPolicyUrl
                }
                get shouldShowBranding() {
                    return !this.props.config.features.includes("whitelabeling")
                }
                get shouldShowProgressBar() {
                    return this.props.config.features.includes("meeting_progress_loading_bar")
                }
                render() {
                    if (!this.state.readyToRender && !this.props.config.features.includes("meeting_booker_experience_builder")) return null;
                    const e = this.state.unreadMessages.slice(Math.max(this.state.unreadMessages.length - 5, 0)),
                        t = this.state.promptDismissed && 0 === e.length,
                        n = Object(a.b)(this.state.showStartConversationLoadingState && "z-index: 1", ";", this.state.showStartConversationLoadingState && Aa, " display:inline-block;position:absolute;bottom:0;right:0;height:", !this.state.contentTooTall || s.isMobile || t ? "auto" : "100vh", ";width:", !this.state.contentTooWide || s.isMobile || t ? "auto" : "100vw", ";;label:Messenger;");
                    return r.a.createElement(T.b, null, r.a.createElement(A.b, {
                        themeValues: this.messengerThemeValues,
                        meetingThemesEnabled: this.meetingThemesEnabled
                    }, r.a.createElement(k.b, {
                        locale: this.state.locale
                    }, r.a.createElement(f.b, {
                        contentTooTall: this.state.contentTooTall,
                        contentTooWide: this.state.contentTooWide,
                        messengerTooTall: this.state.messengerTooTall
                    }, r.a.createElement(Ma, {
                        coverOn: this.state.fullScreenVideoBackgroundCover
                    }), this.state.readyToRender && r.a.createElement(l.a, {
                        bounds: !0,
                        onResize: this.handleResize
                    }, (({
                        measureRef: t
                    }) => r.a.createElement(f.a.Consumer, null, (({
                        isFocusVisible: i
                    }) => {
                        var o;
                        return r.a.createElement("div", {
                            ref: t,
                            className: Object(a.c)(n, {
                                "is-focus-visible": i,
                                [Na]: this.state.showStartConversationLoadingState
                            })
                        }, this.showMessengerButton && r.a.createElement(_.a, {
                            component: rn
                        }, !this.showMessenger && r.a.createElement(dn.MessengerButton, {
                            prompt: this.state.prompt,
                            greeting: this.greeting,
                            anyUserAvailable: this.state.anyUserAvailable,
                            promptDismissed: this.state.promptDismissed,
                            openMessenger: this.open,
                            dismissPrompt: this.dismissPrompt,
                            messages: e,
                            conversation: this.state.activeConversation,
                            onMessagesDismissed: () => this.onMessageRead(this.state.unreadMessages.last()),
                            showBranding: this.shouldShowBranding,
                            customizablePrivacyPolicyEnabled: this.customizablePrivacyPolicyEnabled,
                            allowInboundVoice: this.allowInboundVoice,
                            avatarUrls: this.state.greetingAvatarUrls,
                            config: this.props.config,
                            sendMessage: e => {
                                this.open(), setTimeout((() => this.focusable.messenger.current.sendMessage(e)), 0)
                            },
                            sendMessagesDismissedClientEvent: () => this.emit("clientEvent", "messagesDismissed"),
                            messengerButtonIconRef: this.focusable.messengerIconButton
                        })), r.a.createElement(_.a, {
                            component: rn
                        }, this.messengerComponent), !this.props.config.disableTitleFlash && r.a.createElement(fa, {
                            setTitle: e => this.emit("setTitle", e),
                            resetTitle: () => this.emit("resetTitle"),
                            message: !this.isActiveTab && this.state.unreadMessages.length ? {
                                text: this.state.unreadMessages.last().userId && null !== (o = this.state.activeConversation.user) && void 0 !== o && o.name && !this.props.config.appexchange ? `Message from ${this.state.activeConversation.user.name}` : `Message from ${this.messengerTheme.title}`
                            } : {}
                        }), r.a.createElement(sn.a, null))
                    })))), r.a.createElement(Da, {
                        "data-clickable": !0,
                        coverOn: this.state.backgroundCover,
                        onClick: () => this.setState({
                            backgroundCover: !1
                        })
                    }), (this.state.messengerShowing || (this.greeting || this.state.prompt) && !this.state.promptDismissed) && r.a.createElement(Ia, null), this.lightboxComponent))))
                }
                componentDidMount() {
                    var e;
                    this.handshake = new Ea.Model(this.postMessageHandlers), s.isMobile || s.isIE ? window.addEventListener("click", (e => {
                        this.clickableElementAt(e.clientX, e.clientY) || this.emit("click", {
                            x: e.clientX,
                            y: e.clientY
                        })
                    }), !0) : window.addEventListener("mousemove", (e => {
                        this.handleCursor(e.clientX, e.clientY)
                    })), window.addEventListener("focus", (() => this.setState({
                        isFocussed: !0
                    }))), window.addEventListener("blur", (() => this.setState({
                        isFocussed: !1
                    }))), "undefined" !== typeof PerformanceObserver && null !== (e = PerformanceObserver.supportedEntryTypes) && void 0 !== e && e.includes("longtask") && (this.longTaskObserver = new PerformanceObserver((e => {
                        const t = e.getEntries();
                        this.emit("widgetLongTaskEntries", JSON.stringify(t))
                    })), this.longTaskObserver.observe({
                        entryTypes: ["longtask"]
                    }))
                }
                componentDidUpdate(e, t) {
                    var n;
                    if (t.messages.length !== this.state.messages.length && this.turnOnAnnouncement(), null !== (n = this.state.scriptWaitingMessage) && void 0 !== n && n.waitingUntil && !this.scriptWaitTimeout) {
                        const e = Object(c.a)(Object(u.a)(this.state.scriptWaitingMessage.waitingUntil)) - Object(c.a)(Object(u.a)(this.state.scriptWaitingMessage.createdAt));
                        this.scriptWaitTimeout = setTimeout((() => {
                            this.scriptWaitTimeout = null, this.setState({
                                scriptWaitingMessage: null
                            }), this.sendMessage({
                                type: "event",
                                eventType: "timeout"
                            })
                        }), 1e3 * e)
                    }
                    this.cookieStateAttrs && this.cookieStateAttrs.forEach((e => {
                        t[e] !== this.state[e] && this.emit("cookieStateChanged", {
                            attr: e,
                            value: this.state[e]
                        })
                    })), !this.state.messengerExpanded && this.state.unreadMessages.length !== t.unreadMessages.length && this.state.unreadMessages.find((e => e.scriptId && e.conversationId !== this.state.conversationId)) && this.emit("reportError", {
                        message: "Invalid messenger state \u2013 unread messages from multiple conversations",
                        extra: {
                            unreadMessageIds: this.state.unreadMessages.map((({
                                id: e
                            }) => e))
                        }
                    }), this.reinitStateIfNecessary(t)
                }
                get shouldShowCallBox() {
                    var e;
                    return "meeting" === this.state.routingMedium && this.props.config.features.includes("video") && !(null === (e = this.state.activeConversation) || void 0 === e || !e.user) && this.state.canInitiateVideoChat && (this.messengerTheme.enableInboundVoice || !this.messengerTheme.enableInboundVoice && !!this.activeVideoMeeting)
                }
                get customizablePrivacyPolicyEnabled() {
                    return this.props.config.features.includes("customizable_privacy_policy")
                }
                componentWillUnmount() {
                    var e, t;
                    null === (e = this.expandContractTimeout) || void 0 === e || e.call(this), null === (t = this.longTaskObserver) || void 0 === t || t.disconnect()
                }
                get activeMeeting() {
                    return this.state.meetings.find((e => e.startedAt && !e.endedAt || "queued" === e.status))
                }
                get activeVideoMeeting() {
                    return this.state.meetings.find((e => e.startedAt && !e.endedAt && e.visitorAccessToken))
                }
                get talkingToUser() {
                    var e;
                    return !(null === (e = this.state.activeConversation) || void 0 === e || !e.user)
                }
                get talkingToChatBot() {
                    var e;
                    return (null === (e = this.state.activeConversation) || void 0 === e ? void 0 : e.gptAutoRespondEnabled) || !1
                }
                get showMessengerButton() {
                    return this.state.activeConversation && this.state.showingMessengerButton
                }
                get showMessenger() {
                    return this.state.messengerExpanded || this.state.showLoading
                }
                get showComposer() {
                    return (this.talkingToUser || this.state.qualified) && this.state.agentsAvailable || this.talkingToChatBot
                }
                get feedbackComponent() {
                    const e = {
                        url: this.props.config.feedbackUrl,
                        toggleFeedback: this.toggleFeedback,
                        uuid: this.props.uuid,
                        user: this.state.owner
                    };
                    return /www\.getfeedback\.com/.test(this.props.config.feedbackUrl) ? r.a.createElement(Oa.GetFeedback, { ...e
                    }) : void 0
                }
                get allowInboundVoice() {
                    return Boolean(!this.props.config.features.includes("video") && this.messengerTheme.enableInboundVoice && this.state.agentsAvailable && this.state.qualified && !this.state.incomingMeeting)
                }
                get meetingThemesEnabled() {
                    return this.props.config.features.includes("meeting_themes")
                }
                get disableAudioBeforeOpen() {
                    return this.messengerTheme.disableAudioBeforeOpen
                }
                get hasFeedbackUrl() {
                    return !!this.props.config.feedbackUrl
                }
                get pendingOutgoingMeeting() {
                    return this.state.meetings.find((e => e.type.startsWith("inbound_") && "queued" === e.status))
                }
                get isActiveTab() {
                    return this.state.isFocussed || this.state.parentIsFocussed
                }
                get messengerComponent() {
                    return this.state.showLoading ? r.a.createElement(Sa.default, {
                        showStartConversationLoadingState: this.state.showStartConversationLoadingState,
                        beforeAnimationIn: this.beforeMessengerContainerAnimationIn,
                        afterAnimationOut: this.afterMessengerContainerAnimationOut
                    }, r.a.createElement(on, {
                        typingIndicator: r.a.createElement(X.e.TypingIndicator, null),
                        showBranding: this.shouldShowBranding,
                        customizablePrivacyPolicyEnabled: this.customizablePrivacyPolicyEnabled,
                        headerBar: r.a.createElement(cn.MessengerHeaderBar, {
                            appexchange: this.props.config.appexchange,
                            appexchangeCompanyName: this.props.config.appexchangeCompanyName,
                            disableClose: !0,
                            onCloseMessenger: () => this.focus("messengerIconButton")
                        }),
                        showStartConversationLoadingState: this.state.showStartConversationLoadingState,
                        appexchange: this.props.config.appexchange,
                        appexchangeCompanyName: this.props.config.appexchangeCompanyName,
                        composerView: ne,
                        hideComposer: !0
                    })) : this.state.messengerExpanded ? r.a.createElement(Sa.default, {
                        beforeAnimationIn: this.beforeMessengerContainerAnimationIn,
                        afterAnimationOut: this.afterMessengerContainerAnimationOut
                    }, r.a.createElement(on, {
                        ref: this.focusable.messenger,
                        footerRef: this.footerRef,
                        messages: this.state.messages,
                        meetings: this.state.meetings.filter((e => !(e.enqueuedAt && e.endedAt && !e.startedAt))),
                        showBranding: this.shouldShowBranding,
                        customizablePrivacyPolicyEnabled: this.customizablePrivacyPolicyEnabled,
                        conversations: this.state.conversations,
                        readReceipt: this.state.readReceipt,
                        sendMessage: this.sendMessage,
                        appendMessage: this.appendMessage,
                        updatePendingStatus: this.updatePendingStatus,
                        onMessageTyped: this.onMessageTyped,
                        onMessageRead: this.onMessageRead,
                        typingIndicator: this.state.typingIndicator,
                        updateExpanded: this.updateExpanded,
                        headerBar: r.a.createElement(cn.MessengerHeaderBar, {
                            owner: this.state.owner,
                            appexchange: this.props.config.appexchange,
                            appexchangeCompanyName: this.props.config.appexchangeCompanyName,
                            activeMeeting: this.activeMeeting,
                            updateExpanded: this.updateExpanded,
                            startInboundVoice: () => {
                                this.initInboundVoice(), this.focus("meeting")
                            },
                            allowInboundVoice: this.allowInboundVoice,
                            toggleFeedback: this.hasFeedbackUrl && this.toggleFeedback,
                            disableClose: !s.isMobile && this.state.disableClose,
                            onCloseMessenger: () => this.focus("messengerIconButton")
                        }),
                        appexchange: this.props.config.appexchange,
                        appexchangeCompanyName: this.props.config.appexchangeCompanyName,
                        composerView: ne,
                        hideComposer: !this.showComposer,
                        timelineEntries: this.generatedTimelineEntries,
                        timelineEntryFactory: this.timelineEntryFactory,
                        isActive: this.isActiveTab,
                        shouldShowCallBox: this.shouldShowCallBox,
                        shouldShowVideoMeetingEntries: !1,
                        video: {
                            accessToken: null === (e = this.activeVideoMeeting) || void 0 === e ? void 0 : e.visitorAccessToken,
                            roomId: null === (t = this.activeVideoMeeting) || void 0 === t ? void 0 : t.token,
                            startVideoCall: this.startVideoCall,
                            endVideoCall: this.endVideoCall,
                            inWidget: !0,
                            theirName: null === (n = this.state.owner) || void 0 === n ? void 0 : n.name,
                            disableCallControls: !1,
                            requestMicrophoneAndCameraPermissions: this.requestMicrophoneAndCameraPermissions,
                            microphoneAndCameraPermissions: this.state.microphoneAndCameraPermissions,
                            setBackgroundCover: this.setBackgroundCover,
                            setFullScreen: this.setFullScreen,
                            audioInitiallyOn: null === (a = this.activeVideoMeeting) || void 0 === a || null === (i = a.visitorTracksStatuses) || void 0 === i ? void 0 : i.audio,
                            videoInitiallyOn: null === (o = this.activeVideoMeeting) || void 0 === o || null === (l = o.visitorTracksStatuses) || void 0 === l ? void 0 : l.video,
                            theirAudioAllowed: !0,
                            theirVideoAllowed: !0,
                            assetsUrl: this.props.config.assetsUrl
                        },
                        TheirWindow: Object(ya.createVisitorViewTheirWindow)(null === (d = this.state.activeConversation) || void 0 === d || null === (c = d.user) || void 0 === c ? void 0 : c.name, null === (u = this.state.activeConversation) || void 0 === u || null === (m = u.user) || void 0 === m ? void 0 : m.avatarUrl, null === (g = this.state.activeConversation) || void 0 === g || null === (p = g.user) || void 0 === p ? void 0 : p.jobTitle, this.state.messengerTooTall),
                        handleResize: this.handleMessengerTimelineResize
                    }), r.a.createElement(_.a, {
                        component: rn
                    }, this.state.showFeedback && this.feedbackComponent)) : null;
                    var e, t, n, a, i, o, l, d, c, u, m, g, p
                }
                get generatedTimelineEntries() {
                    const e = [];
                    return this.talkingToUser && !this.state.agentsAvailable ? e.push({
                        timestamp: new Date,
                        el: r.a.createElement(X.e.SystemMessage, {
                            key: "agents-unavailable",
                            role: "listitem"
                        }, r.a.createElement(O.a, {
                            id: "messenger.text.offline"
                        }))
                    }) : this.state.incomingMeeting ? e.push({
                        timestamp: Object(u.a)(this.state.incomingMeeting.createdAt),
                        el: r.a.createElement(ln.IncomingMeetingRequest, {
                            key: "incoming-meeting-request",
                            ref: this.focusable.meeting,
                            rtcSupported: this.state.rtcSupported,
                            meeting: this.state.incomingMeeting,
                            accept: this.acceptMeetingRequest,
                            reject: this.rejectMeetingRequest,
                            transfer: this.transferMeetingRequest,
                            config: this.props.config,
                            countryCode: this.state.countryCode
                        })
                    }) : this.state.outgoingMeetingRequest ? e.push({
                        timestamp: this.state.outgoingMeetingRequest.timestamp,
                        el: r.a.createElement(ln.OutgoingMeetingRequest, {
                            key: "outgoing-meeting-request",
                            ref: this.focusable.meeting,
                            rtcSupported: this.state.rtcSupported,
                            joinViaWeb: this.startWebInboundVoice,
                            joinViaPhone: this.startPhoneInboundVoice,
                            teamPhoneNumber: this.props.config.teamPhoneNumber,
                            config: this.props.config,
                            cancel: this.cancelInitInboundVoice,
                            countryCode: this.state.countryCode
                        })
                    }) : this.pendingOutgoingMeeting && e.push({
                        timestamp: Object(u.a)(this.pendingOutgoingMeeting.createdAt),
                        el: r.a.createElement(ln.PendingOutgoingMeetingRequest, {
                            key: "outgoing-meeting-request",
                            meeting: this.pendingOutgoingMeeting,
                            config: this.props.config,
                            cancel: this.cancelOutgoingMeeting
                        })
                    }), e
                }
                get lightboxComponent() {
                    return this.state.showLightbox ? r.a.createElement(k.b, {
                        locale: this.state.lightboxLocale
                    }, r.a.createElement(Ca.default, {
                        conversation: this.state.elementConversation,
                        messages: this.state.elementMessages,
                        sendMessage: this.sendMessage,
                        closeAction: this.closeLightbox,
                        showStartConversationLoadingState: this.state.showStartConversationLoadingState,
                        showStartElementConversationLoadingState: this.state.showStartElementConversationLoadingState,
                        stopStartElementConversationLoadingState: this.stopStartElementConversationLoadingState,
                        isMobile: s.isMobile,
                        meetingThemesEnabled: this.meetingThemesEnabled,
                        showBranding: this.shouldShowBranding,
                        showProgressBar: this.shouldShowProgressBar
                    })) : null
                }
                async setupDevice() {
                    const {
                        Device: e
                    } = await Promise.all([n.e(0), n.e(2)]).then(n.t.bind(null, 983, 7));
                    var t;
                    return e.isSupported ? "ready" === (null === (t = this.device) || void 0 === t ? void 0 : t.status()) ? g.a.resolve(this.device) : new g.a((t => {
                        this.get("meetings/capability_token").then((e => e.json())).then((({
                            token: n
                        }) => {
                            new e(n).on("ready", (e => {
                                this.device = e, this.setState({
                                    rtcSupported: !!e.audio.availableInputDevices.size
                                }), t(e)
                            }))
                        }))
                    })) : (this.setState({
                        rtcSupported: !1
                    }), g.a.reject())
                }
                handleCallFromAgent() {
                    this.setupDevice().then((e => {
                        e.once("incoming", (e => {
                            this.playAudio(ra), this.setState({
                                incomingMeeting: JSON.parse(e.customParameters.get("meeting")),
                                incomingMeetingConnection: e,
                                outgoingMeetingRequest: null
                            }), this.updateExpanded(!0), e.on("cancel", (() => {
                                this.setState({
                                    incomingMeeting: null
                                })
                            }))
                        })), this.post("meetings/ready")
                    }))
                }
            }
            const Fa = Object(oa.a)(Ba);
            t.default = Fa
        },
        540: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(5),
                i = n(0),
                o = n.n(i),
                r = n(62),
                s = n(215),
                l = n(14),
                d = n(159),
                c = n(1),
                u = {
                    logger: self.console,
                    WebSocket: self.WebSocket
                },
                m = {
                    log(...e) {
                        this.enabled && (e.push(Date.now()), u.logger.log("[ActionCable]", ...e))
                    }
                };
            const g = () => (new Date).getTime(),
                p = e => (g() - e) / 1e3;
            class h {
                constructor(e) {
                    this.visibilityDidChange = this.visibilityDidChange.bind(this), this.connection = e, this.reconnectAttempts = 0
                }
                start() {
                    this.isRunning() || (this.startedAt = g(), delete this.stoppedAt, this.startPolling(), addEventListener("visibilitychange", this.visibilityDidChange), m.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`))
                }
                stop() {
                    this.isRunning() && (this.stoppedAt = g(), this.stopPolling(), removeEventListener("visibilitychange", this.visibilityDidChange), m.log("ConnectionMonitor stopped"))
                }
                isRunning() {
                    return this.startedAt && !this.stoppedAt
                }
                recordPing() {
                    this.pingedAt = g()
                }
                recordConnectWaiting() {
                    this.connectWaitingStartedAt = g(), m.log("ConnectionMonitor recorded waiting for connect")
                }
                recordConnect() {
                    this.reconnectAttempts = 0, this.recordPing(), delete this.connectWaitingStartedAt, delete this.disconnectedAt, m.log("ConnectionMonitor recorded connect")
                }
                recordDisconnect() {
                    this.disconnectedAt = g(), m.log("ConnectionMonitor recorded disconnect")
                }
                startPolling() {
                    this.stopPolling(), this.poll()
                }
                stopPolling() {
                    clearTimeout(this.pollTimeout)
                }
                poll() {
                    this.pollTimeout = setTimeout((() => {
                        this.reconnectIfStale(), this.poll()
                    }), this.getPollInterval())
                }
                getPollInterval() {
                    const {
                        staleThreshold: e,
                        reconnectionBackoffRate: t
                    } = this.constructor;
                    return 1e3 * e * Math.pow(1 + t, Math.min(this.reconnectAttempts, 10)) * (1 + (0 === this.reconnectAttempts ? 1 : t) * Math.random())
                }
                reconnectIfStale() {
                    this.connectionIsStale() && (m.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${p(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`), this.reconnectAttempts++, this.disconnectedRecently() ? m.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${p(this.disconnectedAt)} s`) : this.waitingForConnect() ? m.log(`ConnectionMonitor skipping reopening recent connect waiting. time waiting = ${p(this.connectWaitingStartedAt)} s`) : (m.log("ConnectionMonitor reopening"), this.connection.reopen()))
                }
                get refreshedAt() {
                    return this.pingedAt ? this.pingedAt : this.startedAt
                }
                connectionIsStale() {
                    return p(this.refreshedAt) > this.constructor.staleThreshold
                }
                disconnectedRecently() {
                    return this.disconnectedAt && p(this.disconnectedAt) < this.constructor.staleThreshold
                }
                waitingForConnect() {
                    return this.connectWaitingStartedAt && p(this.connectWaitingStartedAt) < this.constructor.staleThreshold
                }
                visibilityDidChange() {
                    "visible" === document.visibilityState && setTimeout((() => {
                        (this.connectionIsStale() && !this.waitingForConnect() || !this.connection.isOpen()) && (m.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`), this.connection.reopen())
                    }), 200)
                }
            }
            h.staleThreshold = 6, h.reconnectionBackoffRate = .15;
            var v = h,
                b = {
                    message_types: {
                        welcome: "welcome",
                        disconnect: "disconnect",
                        ping: "ping",
                        confirmation: "confirm_subscription",
                        rejection: "reject_subscription"
                    },
                    disconnect_reasons: {
                        unauthorized: "unauthorized",
                        invalid_request: "invalid_request",
                        server_restart: "server_restart"
                    },
                    default_mount_path: "/cable",
                    protocols: ["actioncable-v1-json", "actioncable-unsupported"]
                };
            const {
                message_types: E,
                protocols: _
            } = b, f = _.slice(0, _.length - 1), O = [].indexOf;
            class C {
                constructor(e) {
                    this.open = this.open.bind(this), this.consumer = e, this.subscriptions = this.consumer.subscriptions, this.monitor = new v(this), this.disconnected = !0
                }
                send(e) {
                    return !!this.isOpen() && (this.webSocket.send(JSON.stringify(e)), !0)
                }
                open() {
                    return this.isActive() ? (m.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`), !1) : (m.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${_}`), this.webSocket && this.uninstallEventHandlers(), this.webSocket = new u.WebSocket(this.consumer.url, _), this.installEventHandlers(), this.monitor.start(), this.monitor.recordConnectWaiting(), this._connectedBefore = !0, !0)
                }
                close({
                    allowReconnect: e
                } = {
                    allowReconnect: !0
                }) {
                    if (e || this.monitor.stop(), this.isActive()) return this.webSocket.close()
                }
                reopen() {
                    if (m.log(`Reopening WebSocket, current state is ${this.getState()}`), !this.isActive()) return this.open();
                    try {
                        return this.close()
                    } catch (e) {
                        m.log("Failed to reopen WebSocket", e)
                    } finally {
                        m.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`), setTimeout(this.open, this.constructor.reopenDelay)
                    }
                }
                getProtocol() {
                    if (this.webSocket) return this.webSocket.protocol
                }
                isOpen() {
                    return this.isState("open")
                }
                isActive() {
                    return this.isState("open", "connecting")
                }
                hasConnectedBefore() {
                    return !!this._connectedBefore
                }
                isProtocolSupported() {
                    return O.call(f, this.getProtocol()) >= 0
                }
                isState(...e) {
                    return O.call(e, this.getState()) >= 0
                }
                getState() {
                    if (this.webSocket)
                        for (let e in u.WebSocket)
                            if (u.WebSocket[e] === this.webSocket.readyState) return e.toLowerCase();
                    return null
                }
                installEventHandlers() {
                    for (let e in this.events) {
                        const t = this.events[e].bind(this);
                        this.webSocket[`on${e}`] = t
                    }
                }
                uninstallEventHandlers() {
                    for (let e in this.events) this.webSocket[`on${e}`] = function() {}
                }
            }
            C.reopenDelay = 500, C.prototype.events = {
                message(e) {
                    if (!this.isProtocolSupported()) return;
                    const {
                        identifier: t,
                        message: n,
                        reason: a,
                        reconnect: i,
                        type: o
                    } = JSON.parse(e.data);
                    switch (o) {
                        case E.welcome:
                            return this.monitor.recordConnect(), this.subscriptions.reload();
                        case E.disconnect:
                            m.log(`Disconnecting. Reason: ${a}`);
                            try {
                                this.subscriptions.notifyAll("disconnecting", {
                                    allowReconnect: i,
                                    reason: a
                                })
                            } catch (r) {}
                            return this.close({
                                allowReconnect: i
                            });
                        case E.ping:
                            try {
                                this.subscriptions.notifyAll("ping")
                            } catch (r) {}
                            return this.monitor.recordPing();
                        case E.confirmation:
                            return this.subscriptions.notify(t, "connected");
                        case E.rejection:
                            return this.subscriptions.reject(t);
                        default:
                            return this.monitor.recordPing(), n.__event = e, this.subscriptions.notify(t, "received", n)
                    }
                },
                open() {
                    if (m.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`), this.disconnected = !1, !this.isProtocolSupported()) return m.log("Protocol is unsupported. Stopping monitor and disconnecting."), this.close({
                        allowReconnect: !1
                    })
                },
                close(e) {
                    if (m.log("WebSocket onclose event"), !this.disconnected) return this.disconnected = !0, this.monitor.recordDisconnect(), this.subscriptions.notifyAll("disconnected", {
                        willAttemptReconnect: this.monitor.isRunning()
                    })
                },
                error() {
                    m.log("WebSocket onerror event")
                }
            };
            var S = C;
            class y {
                constructor(e, t = {}, n) {
                    this.consumer = e, this.identifier = JSON.stringify(t),
                        function(e, t) {
                            if (null != t)
                                for (let n in t) {
                                    const a = t[n];
                                    e[n] = a
                                }
                        }(this, n)
                }
                perform(e, t = {}) {
                    return t.action = e, this.send(t)
                }
                send(e) {
                    return this.consumer.send({
                        command: "message",
                        identifier: this.identifier,
                        data: JSON.stringify(e)
                    })
                }
                unsubscribe() {
                    return this.consumer.subscriptions.remove(this)
                }
            }
            class k {
                constructor(e) {
                    this.consumer = e, this.subscriptions = []
                }
                create(e, t) {
                    const n = "object" === typeof e ? e : {
                            channel: e
                        },
                        a = new y(this.consumer, n, t);
                    return this.add(a)
                }
                add(e) {
                    return this.subscriptions.push(e), this.consumer.ensureActiveConnection(), this.notify(e, "initialized"), this.sendCommand(e, "subscribe"), e
                }
                remove(e) {
                    return this.forget(e), this.findAll(e.identifier).length || this.sendCommand(e, "unsubscribe"), e
                }
                reject(e) {
                    return this.findAll(e).map((e => (this.forget(e), this.notify(e, "rejected"), e)))
                }
                forget(e) {
                    return this.subscriptions = this.subscriptions.filter((t => t !== e)), e
                }
                findAll(e) {
                    return this.subscriptions.filter((t => t.identifier === e))
                }
                reload() {
                    return this.subscriptions.map((e => this.sendCommand(e, "subscribe")))
                }
                notifyAll(e, ...t) {
                    return this.subscriptions.map((n => this.notify(n, e, ...t)))
                }
                notify(e, t, ...n) {
                    let a;
                    return a = "string" === typeof e ? this.findAll(e) : [e], a.map((e => "function" === typeof e[t] ? e[t](...n) : void 0))
                }
                sendCommand(e, t) {
                    const {
                        identifier: n
                    } = e;
                    return this.consumer.send({
                        command: t,
                        identifier: n
                    })
                }
            }
            class T {
                constructor(e) {
                    this._url = e, this.subscriptions = new k(this), this.connection = new S(this)
                }
                get url() {
                    return function(e, t) {
                        let n;
                        try {
                            const t = new URL(e);
                            n = Array.from(t.searchParams.entries()).length > 0
                        } catch {
                            n = !1
                        }
                        const a = `ic=${!t}`;
                        return e + (n ? `&${a}` : `?${a}`)
                    }(function(e) {
                        "function" === typeof e && (e = e());
                        if (e && !/^wss?:/i.test(e)) {
                            const t = document.createElement("a");
                            return t.href = e, t.href = t.href, t.protocol = t.protocol.replace("http", "ws"), t.href
                        }
                        return e
                    }(this._url), this.connection.hasConnectedBefore())
                }
                send(e) {
                    return this.connection.send(e)
                }
                connect() {
                    return this.connection.open()
                }
                disconnect() {
                    return this.connection.close({
                        allowReconnect: !1
                    })
                }
                ensureActiveConnection() {
                    if (!this.connection.isActive()) return this.connection.open()
                }
            }

            function A(e = function(e) {
                const t = document.head.querySelector(`meta[name='action-cable-${e}']`);
                if (t) return t.getAttribute("content")
            }("url") || b.default_mount_path) {
                return new T(e)
            }
            var N = n(63),
                R = n(212);
            class D extends o.a.Component {
                constructor(...e) {
                    super(...e), this.state = {
                        meeting: this.props.meeting,
                        device: null,
                        connection: null,
                        startedAt: null
                    }
                }
                render() {
                    const {
                        connection: e,
                        device: t,
                        meeting: n,
                        startedAt: a
                    } = this.state, {
                        messengerThemes: i,
                        hostname: c,
                        whitelabeling: u,
                        appexchange: m,
                        appexchangeCompanyName: g,
                        locale: p
                    } = this.props, h = Object(s.a)(c, m, i);
                    return o.a.createElement(d.b, null, o.a.createElement(l.b, {
                        locale: p || "en"
                    }, o.a.createElement(R.default, {
                        connection: e,
                        device: t,
                        meeting: n,
                        messengerTheme: h,
                        startedAt: a,
                        whitelabeling: u,
                        appexchange: m,
                        appexchangeCompanyName: g
                    }, !n.user && o.a.createElement(I, null, o.a.createElement(N.b.StartCall, {
                        height: 32
                    }), o.a.createElement("p", null, o.a.createElement(r.a, {
                        id: "messenger.text.connecting_to_rep"
                    }))))))
                }
                async componentDidMount() {
                    A(this.props.apiWsRoot).subscriptions.create({
                        channel: "Visitors::MeetingChannel",
                        token: this.props.meeting.token
                    }, {
                        received: ({
                            event: e,
                            payload: t
                        }) => {
                            "updated" === e && this.setState({
                                meeting: t
                            })
                        }
                    });
                    const {
                        Device: e
                    } = await Promise.all([n.e(0), n.e(2)]).then(n.t.bind(null, 983, 7));
                    new e(this.props.capabilityToken).on("ready", (e => {
                        const t = e.connect({
                            token: this.props.meeting.token,
                            enqueue: !0
                        });
                        t.on("disconnect", (() => window.close())), this.setState({
                            device: e,
                            connection: t,
                            startedAt: new Date
                        })
                    }))
                }
            }
            const I = Object(a.a)("div", {
                target: "e1bh2aaz0",
                label: "Connecting"
            })("color:", c.c.primaryText, ";svg{fill:", c.c.primaryText, ";}p{font-weight:", c.j.semiBold, ";font-size:", c.i.size600, ";}");
            t.default = D
        },
        57: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return L
            })), n.d(t, "b", (function() {
                return P
            })), n.d(t, "c", (function() {
                return U
            }));
            var a = n(0),
                i = n.n(a),
                o = n(140),
                r = n(2);
            const s = {
                    root: Object(r.b)({
                        name: "37aq03-root",
                        styles: "display:contents;;label:root;"
                    })
                },
                l = ({
                    styleVariables: e,
                    children: t
                }) => i.a.createElement("div", {
                    style: e,
                    className: s.root
                }, t);
            var d = n(46),
                c = (n(127), n(1)),
                u = n(9);
            const m = c.c.darkerTeal,
                g = c.c.white,
                p = {
                    domains: [],
                    disableAudioBeforeOpen: !1,
                    enableInboundVoice: !0,
                    isDefault: !1,
                    privacyPolicyUrl: null,
                    privacyPolicyText: null,
                    meetings: {
                        headline: null,
                        welcomeMessage: null,
                        logoUrl: null,
                        headerBackgroundColor: m,
                        logoImage: null,
                        headerBackgroundImage: null,
                        backgroundType: u.h.Color
                    },
                    privacyDisclosures: null,
                    themeName: "New theme",
                    themePrimaryColor: m,
                    themeTextColor: g,
                    themeVersion: 2,
                    header: {
                        title: "New theme",
                        textColor: g,
                        colorBackground: m,
                        backgroundType: u.h.Color,
                        useThemeColors: !0,
                        companyLogoImage: null,
                        imageBackground: null
                    },
                    buttons: {
                        shape: u.b.Rectangle,
                        borderRadiusPx: 4,
                        style: u.c.Outline,
                        textColor: g,
                        primaryColor: m,
                        useThemeColors: !0
                    },
                    callbox: {
                        imageBackground: null,
                        useThemeColors: !0,
                        backgroundType: u.d.Color,
                        colorBackground: m
                    },
                    launcher: {
                        backgroundShape: u.i.Square,
                        backgroundType: u.j.Icon,
                        iconBackground: {
                            icon: u.k.Messenger,
                            backgroundColor: m
                        },
                        imageBackground: null,
                        useThemeColors: !0
                    }
                };
            var h = n(6);
            const {
                themeStyles: v,
                themeDataValues: b
            } = (E = p, {
                themeStyles: Object(h.b)({
                    themePrimaryColor: E.themePrimaryColor,
                    themeTextColor: E.themeTextColor,
                    companyLogoImageUrl: null === (_ = E.header.companyLogoImage) || void 0 === _ ? void 0 : _.url,
                    meetingsLogoImageUrl: null === (f = E.meetings) || void 0 === f || null === (O = f.logoImage) || void 0 === O ? void 0 : O.url,
                    meetingsHeaderBackgroundImageUrl: null === (C = E.meetings) || void 0 === C || null === (S = C.headerBackgroundImage) || void 0 === S ? void 0 : S.url,
                    buttonPrimaryColor: E.buttons.primaryColor,
                    buttonTextColor: E.buttons.textColor,
                    buttonBorderRadiusPx: E.buttons.borderRadiusPx,
                    buttonStyle: E.buttons.style,
                    buttonShape: E.buttons.shape,
                    buttonsUseThemeColors: E.buttons.useThemeColors,
                    headerBackgroundColor: E.header.colorBackground,
                    headerTextColor: E.header.textColor,
                    headerBackgroundImageUrl: null === (y = E.header.imageBackground) || void 0 === y ? void 0 : y.url,
                    headerBackgroundType: E.header.backgroundType,
                    headerUseThemeColors: E.header.useThemeColors,
                    callboxBackgroundColor: (null === (k = E.callbox) || void 0 === k ? void 0 : k.colorBackground) || void 0,
                    callboxImageBackgroundUrl: null === (T = E.callbox) || void 0 === T || null === (A = T.imageBackground) || void 0 === A ? void 0 : A.url,
                    callboxBackgroundType: null === (N = E.callbox) || void 0 === N ? void 0 : N.backgroundType,
                    callboxUseThemeColors: null === (R = E.callbox) || void 0 === R ? void 0 : R.useThemeColors,
                    launcherImageBackgroundUrl: null === (D = E.launcher.imageBackground) || void 0 === D ? void 0 : D.url,
                    launcherBackgroundType: E.launcher.backgroundType,
                    launcherBackgroundColor: E.launcher.iconBackground.backgroundColor,
                    launcherIcon: E.launcher.iconBackground.icon,
                    launcherShape: E.launcher.backgroundShape,
                    launcherUseThemeColors: E.launcher.useThemeColors
                }),
                themeDataValues: {
                    headerTitle: E.header.title,
                    enableInboundVoice: E.enableInboundVoice,
                    domains: E.domains,
                    disableAudioBeforeOpen: E.disableAudioBeforeOpen,
                    privacyPolicyUrl: E.privacyPolicyUrl || void 0,
                    privacyPolicyText: E.privacyPolicyText || void 0,
                    meetingsHeadline: (null === (I = E.meetings) || void 0 === I ? void 0 : I.headline) || void 0,
                    meetingsWelcomeMessage: (null === (x = E.meetings) || void 0 === x ? void 0 : x.welcomeMessage) || void 0,
                    meetingsLogoUrl: (null === (M = E.meetings) || void 0 === M ? void 0 : M.logoUrl) || void 0,
                    meetingsHeaderBackgroundColor: (null === (B = E.meetings) || void 0 === B ? void 0 : B.headerBackgroundColor) || void 0,
                    meetingsBackgroundType: (null === (F = E.meetings) || void 0 === F ? void 0 : F.backgroundType) || u.h.Color,
                    privacyDisclosures: E.privacyDisclosures || void 0
                }
            });
            var E, _, f, O, C, S, y, k, T, A, N, R, D, I, x, M, B, F;
            const w = {
                    themeStyles: v,
                    themeDataValues: b,
                    styleVariableValues: Object(h.c)({
                        themeStyles: v
                    }),
                    get cssVariableMap() {
                        return Object(d.a)(this.styleVariableValues)
                    }
                },
                L = i.a.createContext(w),
                P = ({
                    themeValues: e,
                    meetingThemesEnabled: t,
                    children: n
                }) => {
                    const r = null !== e && void 0 !== e ? e : w,
                        {
                            themeStyles: s,
                            themeDataValues: c
                        } = r,
                        u = Object(a.useMemo)((() => Object(h.c)({
                            themeStyles: s,
                            meetingThemesEnabled: t
                        })), [s, t]),
                        m = Object(a.useMemo)((() => Object(d.a)(u)), [u]),
                        g = Object(a.useMemo)((() => ({
                            themeStyles: s,
                            themeDataValues: c,
                            styleVariableValues: u,
                            cssVariableMap: m
                        })), [s, c, u, m]),
                        p = Object(o.b)(),
                        v = Object(a.useMemo)((() => ({ ...p,
                            brand: { ...p.brand,
                                primaryColor: u.THEME_PRIMARY_COLOR,
                                primaryTextColor: u.THEME_TEXT_COLOR,
                                linkTextColor: u.THEME_PRIMARY_COLOR
                            }
                        })), [p, u.THEME_PRIMARY_COLOR, u.THEME_TEXT_COLOR]);
                    return i.a.createElement(L.Provider, {
                        value: g
                    }, i.a.createElement(o.a, {
                        value: v
                    }, i.a.createElement(l, {
                        styleVariables: m
                    }, n)))
                },
                U = () => Object(a.useContext)(L)
        },
        591: function(e, t, n) {
            var a = {
                "./ChatLoadingModal": 319,
                "./ChatLoadingModal.tsx": 319,
                "./CloseButton": 103,
                "./CloseButton.tsx": 103,
                "./ExternalFeedback": 306,
                "./ExternalFeedback.jsx": 306,
                "./Feedback": 231,
                "./Feedback.jsx": 231,
                "./InboundVoice": 540,
                "./InboundVoice.jsx": 540,
                "./Lightbox": 308,
                "./Lightbox.tsx": 308,
                "./LightboxEntry": 317,
                "./LightboxEntry.tsx": 317,
                "./MeetingBookerOfferEntry": 318,
                "./MeetingBookerOfferEntry.tsx": 318,
                "./MeetingLoadingModal": 313,
                "./MeetingLoadingModal.tsx": 313,
                "./MeetingLoadingModalV2": 311,
                "./MeetingLoadingModalV2.tsx": 311,
                "./MeetingLoadingStatus": 259,
                "./MeetingLoadingStatus.tsx": 259,
                "./MeetingRequest": 222,
                "./MeetingRequest.jsx": 222,
                "./MeetingStatus": 212,
                "./MeetingStatus.jsx": 212,
                "./Messenger": 539,
                "./Messenger.jsx": 539,
                "./MessengerButton": 210,
                "./MessengerButton.tsx": 210,
                "./MessengerButtonEntryFactory": 262,
                "./MessengerButtonEntryFactory.tsx": 262,
                "./MessengerButtonIcon": 167,
                "./MessengerButtonIcon.tsx": 167,
                "./MessengerContainer": 158,
                "./MessengerContainer.tsx": 158,
                "./MessengerFooter": 102,
                "./MessengerFooter.tsx": 102,
                "./MessengerHeaderBar": 263,
                "./MessengerHeaderBar.styles": 134,
                "./MessengerHeaderBar.styles.ts": 134,
                "./MessengerHeaderBar.tsx": 263,
                "./MessengerPrompt": 228,
                "./MessengerPrompt.tsx": 228,
                "./MessengerPromptV3": 229,
                "./MessengerPromptV3.tsx": 229,
                "./MessengerTimelineEntryFactory": 320,
                "./MessengerTimelineEntryFactory.tsx": 320,
                "./MessengerTypes": 536,
                "./MessengerTypes.ts": 536,
                "./OutboundVoice": 537,
                "./OutboundVoice.jsx": 537,
                "./UnavailableTimeSlotError": 207,
                "./UnavailableTimeSlotError.ts": 207,
                "./UserDetails": 211,
                "./UserDetails.tsx": 211,
                "./VisitorViewTheirWindow": 316,
                "./VisitorViewTheirWindow.tsx": 316
            };

            function i(e) {
                var t = o(e);
                return n(t)
            }

            function o(e) {
                if (!n.o(a, e)) {
                    var t = new Error("Cannot find module '" + e + "'");
                    throw t.code = "MODULE_NOT_FOUND", t
                }
                return a[e]
            }
            i.keys = function() {
                return Object.keys(a)
            }, i.resolve = o, e.exports = i, i.id = 591
        },
        6: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return p
            })), n.d(t, "c", (function() {
                return h
            })), n.d(t, "b", (function() {
                return v
            }));
            var a = n(21),
                i = n(142),
                o = n(117),
                r = n(326);
            var s = n(1),
                l = n(9);
            const d = ["BUTTON_PRIMARY_COLOR", "BUTTON_TEXT_COLOR", "BUTTON_BORDER_RADIUS", "CALENDAR_CARD_DAY_CONTROL_BUTTON_ICON_COLOR", "CALENDAR_CARD_DAY_CONTROL_BUTTON_TEXT_COLOR", "CALENDAR_CARD_BACK_BUTTON_TEXT_COLOR", "FOOTER_BAR_ICON_BUTTON_COLOR", "MEETING_REQUEST_CANCEL_BUTTON_TEXT_COLOR", "AVAILABLE_EVENTS_BUTTON_TEXT_COLOR", "AVAILABLE_EVENTS_BUTTON_BACKGROUND_COLOR", "AVAILABLE_EVENTS_BUTTON_HOVER_BACKGROUND", "AVAILABLE_EVENTS_BUTTON_HOVER_TEXT_COLOR", "AVAILABLE_EVENTS_BUTTON_BORDER_COLOR", "AVAILABLE_EVENTS_BUTTON_HOVER_BORDER_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_TEXT_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_BACKGROUND_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_BORDER_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BACKGROUND_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_HOVER_TEXT_COLOR", "CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BORDER_COLOR", "MEETING_REQUEST_PHONE_BUTTON_BACKGROUND_COLOR", "MEETING_REQUEST_PHONE_BUTTON_BORDER_COLOR", "MEETING_REQUEST_PHONE_BUTTON_HOVER_BORDER_COLOR", "MEETING_REQUEST_PHONE_BUTTON_ICON_COLOR", "MEETING_REQUEST_PHONE_BUTTON_HOVER_BACKGROUND_COLOR", "MEETING_REQUEST_PHONE_BUTTON_HOVER_ICON_COLOR", "MEETING_REQUEST_WEB_BUTTON_BACKGROUND_COLOR", "MEETING_REQUEST_WEB_BUTTON_BORDER_COLOR", "MEETING_REQUEST_WEB_BUTTON_TEXT_COLOR", "MEETING_REQUEST_WEB_BUTTON_HOVER_BACKGROUND_COLOR", "MEETING_REQUEST_WEB_BUTTON_HOVER_TEXT_COLOR", "MEETING_REQUEST_WEB_BUTTON_HOVER_BORDER_COLOR", "MESSENGER_PROMPT_CTA_TEXT_COLOR", "MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR", "MESSENGER_PROMPT_CTA_BACKGROUND_COLOR", "MESSENGER_PROMPT_CTA_HOVER_BACKGROUND", "MESSENGER_PROMPT_CTA_BORDER_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_TEXT_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_BACKGROUND_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_BORDER_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_TEXT_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BACKGROUND_COLOR", "MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BORDER_COLOR", "MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR", "MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR", "MESSENGER_PROMPT_CTA_SOLID_ONLY_BORDER_COLOR", "MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_BACKGROUND_COLOR", "MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_TEXT_COLOR", "PICKLIST_FIELD_BUTTON_TEXT_COLOR", "PICKLIST_FIELD_BUTTON_BACKGROUND_COLOR", "PICKLIST_FIELD_BUTTON_BORDER_COLOR", "PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BACKGROUND_COLOR", "PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BORDER_COLOR", "PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_TEXT_COLOR", "STRING_FIELD_SEND_BUTTON_BACKGROUND_COLOR", "STRING_FIELD_SEND_BUTTON_TEXT_COLOR", "STRING_FIELD_SEND_BUTTON_BORDER_COLOR", "STRING_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR", "STRING_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR", "STRING_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR", "TEXT_FIELD_SEND_BUTTON_BACKGROUND_COLOR", "TEXT_FIELD_SEND_BUTTON_TEXT_COLOR", "TEXT_FIELD_SEND_BUTTON_BORDER_COLOR", "TEXT_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR", "TEXT_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR", "TEXT_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR"],
                c = ({
                    style: e,
                    buttonPrimaryColor: t,
                    buttonTextColor: n
                }) => {
                    const i = e === l.c.Outline ? {
                        backgroundColor: s.c.white,
                        borderColor: t,
                        textColor: t,
                        hoverBackgroundColor: t,
                        hoverBorderColor: t,
                        hoverTextColor: s.c.white
                    } : e === l.c.Solid ? {
                        backgroundColor: t,
                        borderColor: "transparent",
                        textColor: n,
                        hoverBackgroundColor: Object(a.a)(.1, t),
                        hoverBorderColor: "transparent",
                        hoverTextColor: n
                    } : e === l.c.Shade ? {
                        backgroundColor: Object(a.g)(.8, t),
                        borderColor: "transparent",
                        textColor: Object(a.a)(.07, t),
                        hoverBackgroundColor: t,
                        hoverBorderColor: "transparent",
                        hoverTextColor: n
                    } : void
                    function(e) {
                        throw new Error(`asserted unreachable but this was reached. value was: ${e}`)
                    }(e);
                    return { ...i,
                        contrastRatio: Object(a.c)(i.backgroundColor, i.textColor),
                        hoverContrastRatio: Object(a.c)(i.hoverBackgroundColor, i.hoverTextColor)
                    }
                },
                u = ({
                    themeTextColor: e,
                    buttonPrimaryColor: t,
                    buttonTextColor: n,
                    buttonBorderRadiusPx: o,
                    buttonStyle: r,
                    buttonShape: d,
                    accessibleIconColorOnMessengerBackground: u,
                    accessibleTextColorOnMessengerBackground: m
                }) => {
                    const g = d === l.b.Pill ? 9999 : o,
                        p = {
                            CALENDAR_CARD_DAY_CONTROL_BUTTON_TEXT_COLOR: m,
                            CALENDAR_CARD_DAY_CONTROL_BUTTON_ICON_COLOR: u,
                            CALENDAR_CARD_BACK_BUTTON_TEXT_COLOR: m,
                            FOOTER_BAR_ICON_BUTTON_COLOR: u,
                            MEETING_REQUEST_CANCEL_BUTTON_TEXT_COLOR: m
                        },
                        h = c({
                            style: l.c.Outline,
                            buttonPrimaryColor: t,
                            buttonTextColor: n
                        }),
                        v = c({
                            style: l.c.Solid,
                            buttonPrimaryColor: t,
                            buttonTextColor: n
                        }),
                        b = c({
                            style: l.c.Shade,
                            buttonPrimaryColor: t,
                            buttonTextColor: n
                        });
                    return { ...{
                            BUTTON_PRIMARY_COLOR: t,
                            BUTTON_TEXT_COLOR: n,
                            BUTTON_BORDER_RADIUS: `${g}px`
                        },
                        ...p,
                        ...{
                            [l.c.Outline]: {
                                MEETING_REQUEST_WEB_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_BORDER_COLOR: h.borderColor,
                                MEETING_REQUEST_WEB_BUTTON_TEXT_COLOR: h.textColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_TEXT_COLOR: h.hoverTextColor,
                                MEETING_REQUEST_PHONE_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_BORDER_COLOR: s.c.fieldBorder,
                                MEETING_REQUEST_PHONE_BUTTON_ICON_COLOR: h.textColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_ICON_COLOR: h.hoverTextColor,
                                MESSENGER_PROMPT_CTA_TEXT_COLOR: h.textColor,
                                MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR: h.hoverTextColor,
                                MESSENGER_PROMPT_CTA_BACKGROUND_COLOR: h.backgroundColor,
                                MESSENGER_PROMPT_CTA_HOVER_BACKGROUND: h.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_BORDER_COLOR: h.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_TEXT_COLOR: h.textColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BACKGROUND_COLOR: h.backgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BORDER_COLOR: h.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_TEXT_COLOR: h.hoverTextColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR: e,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR: "transparent",
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BORDER_COLOR: s.c.white,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_BACKGROUND_COLOR: Object(a.g)(.3, h.hoverBackgroundColor),
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_TEXT_COLOR() {
                                    return this.MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR
                                },
                                AVAILABLE_EVENTS_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BACKGROUND: h.hoverBackgroundColor,
                                AVAILABLE_EVENTS_BUTTON_TEXT_COLOR: h.textColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_TEXT_COLOR: h.hoverTextColor,
                                AVAILABLE_EVENTS_BUTTON_BORDER_COLOR: h.borderColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_TEXT_COLOR: h.textColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_TEXT_COLOR: h.hoverTextColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BORDER_COLOR: h.borderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_TEXT_COLOR: h.textColor,
                                PICKLIST_FIELD_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                PICKLIST_FIELD_BUTTON_BORDER_COLOR: h.borderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BORDER_COLOR: h.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_TEXT_COLOR: h.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                STRING_FIELD_SEND_BUTTON_TEXT_COLOR: h.textColor,
                                STRING_FIELD_SEND_BUTTON_BORDER_COLOR: s.c.fieldBorder,
                                STRING_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: h.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor,
                                TEXT_FIELD_SEND_BUTTON_BACKGROUND_COLOR: h.backgroundColor,
                                TEXT_FIELD_SEND_BUTTON_TEXT_COLOR: h.textColor,
                                TEXT_FIELD_SEND_BUTTON_BORDER_COLOR: h.borderColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: h.hoverBackgroundColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: h.hoverTextColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: h.hoverBorderColor
                            },
                            [l.c.Solid]: {
                                MEETING_REQUEST_WEB_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_TEXT_COLOR: v.textColor,
                                MEETING_REQUEST_WEB_BUTTON_BORDER_COLOR: v.borderColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_TEXT_COLOR: v.hoverTextColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                MEETING_REQUEST_PHONE_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_BORDER_COLOR: v.borderColor,
                                MEETING_REQUEST_PHONE_BUTTON_ICON_COLOR: v.textColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_ICON_COLOR: v.hoverTextColor,
                                MESSENGER_PROMPT_CTA_TEXT_COLOR: v.textColor,
                                MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR: v.hoverTextColor,
                                MESSENGER_PROMPT_CTA_BACKGROUND_COLOR: v.backgroundColor,
                                MESSENGER_PROMPT_CTA_HOVER_BACKGROUND: v.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_BORDER_COLOR: v.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_TEXT_COLOR: v.textColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BACKGROUND_COLOR: v.backgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BORDER_COLOR: v.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_TEXT_COLOR: v.hoverTextColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR() {
                                    return Object(i.c)(this.MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR, t, n)
                                },
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR: s.c.white,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BORDER_COLOR: "transparent",
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_BACKGROUND_COLOR() {
                                    return Object(a.a)(.1, this.MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR)
                                },
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_TEXT_COLOR() {
                                    return this.MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR
                                },
                                AVAILABLE_EVENTS_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BACKGROUND: v.hoverBackgroundColor,
                                AVAILABLE_EVENTS_BUTTON_TEXT_COLOR: v.textColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_TEXT_COLOR: v.hoverTextColor,
                                AVAILABLE_EVENTS_BUTTON_BORDER_COLOR: v.borderColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_TEXT_COLOR: v.textColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_TEXT_COLOR: v.hoverTextColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BORDER_COLOR: v.borderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_TEXT_COLOR: v.textColor,
                                PICKLIST_FIELD_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                PICKLIST_FIELD_BUTTON_BORDER_COLOR: v.borderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BORDER_COLOR: v.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_TEXT_COLOR: v.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                STRING_FIELD_SEND_BUTTON_TEXT_COLOR: v.textColor,
                                STRING_FIELD_SEND_BUTTON_BORDER_COLOR: v.borderColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: v.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor,
                                TEXT_FIELD_SEND_BUTTON_BACKGROUND_COLOR: v.backgroundColor,
                                TEXT_FIELD_SEND_BUTTON_TEXT_COLOR: v.textColor,
                                TEXT_FIELD_SEND_BUTTON_BORDER_COLOR: v.borderColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: v.hoverBackgroundColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: v.hoverTextColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: v.hoverBorderColor
                            },
                            [l.c.Shade]: {
                                MEETING_REQUEST_WEB_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_BORDER_COLOR: b.borderColor,
                                MEETING_REQUEST_WEB_BUTTON_TEXT_COLOR: b.textColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                MEETING_REQUEST_WEB_BUTTON_HOVER_TEXT_COLOR: b.hoverTextColor,
                                MEETING_REQUEST_PHONE_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_BORDER_COLOR: b.borderColor,
                                MEETING_REQUEST_PHONE_BUTTON_ICON_COLOR: b.textColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                MEETING_REQUEST_PHONE_BUTTON_HOVER_ICON_COLOR: b.hoverTextColor,
                                MESSENGER_PROMPT_CTA_TEXT_COLOR: b.textColor,
                                MESSENGER_PROMPT_CTA_HOVER_TEXT_COLOR: b.hoverTextColor,
                                MESSENGER_PROMPT_CTA_BACKGROUND_COLOR: b.backgroundColor,
                                MESSENGER_PROMPT_CTA_HOVER_BACKGROUND: b.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_BORDER_COLOR: b.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_TEXT_COLOR: b.textColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BACKGROUND_COLOR: b.backgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_BORDER_COLOR: b.borderColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_TEXT_COLOR: b.hoverTextColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                MESSENGER_PROMPT_CTA_CHAT_ONLY_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR: b.textColor,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR: b.backgroundColor,
                                MESSENGER_PROMPT_CTA_SOLID_ONLY_BORDER_COLOR: b.borderColor,
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_BACKGROUND_COLOR() {
                                    return Object(a.a)(.1, this.MESSENGER_PROMPT_CTA_SOLID_ONLY_BACKGROUND_COLOR)
                                },
                                get MESSENGER_PROMPT_CTA_SOLID_ONLY_HOVER_TEXT_COLOR() {
                                    return this.MESSENGER_PROMPT_CTA_SOLID_ONLY_COLOR
                                },
                                AVAILABLE_EVENTS_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BACKGROUND: b.hoverBackgroundColor,
                                AVAILABLE_EVENTS_BUTTON_TEXT_COLOR: b.textColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_TEXT_COLOR: b.hoverTextColor,
                                AVAILABLE_EVENTS_BUTTON_BORDER_COLOR: b.borderColor,
                                AVAILABLE_EVENTS_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_TEXT_COLOR: b.textColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_TEXT_COLOR: b.hoverTextColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_BORDER_COLOR: b.borderColor,
                                CALENDAR_CARD_CONFIRM_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_TEXT_COLOR: b.textColor,
                                PICKLIST_FIELD_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                PICKLIST_FIELD_BUTTON_BORDER_COLOR: b.borderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_BORDER_COLOR: b.hoverBorderColor,
                                PICKLIST_FIELD_BUTTON_HOVER_OR_SELECTED_TEXT_COLOR: b.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                STRING_FIELD_SEND_BUTTON_TEXT_COLOR: b.textColor,
                                STRING_FIELD_SEND_BUTTON_BORDER_COLOR: b.borderColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: b.hoverTextColor,
                                STRING_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor,
                                TEXT_FIELD_SEND_BUTTON_BACKGROUND_COLOR: b.backgroundColor,
                                TEXT_FIELD_SEND_BUTTON_TEXT_COLOR: b.textColor,
                                TEXT_FIELD_SEND_BUTTON_BORDER_COLOR: b.borderColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BACKGROUND_COLOR: b.hoverBackgroundColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_TEXT_COLOR: b.hoverTextColor,
                                TEXT_FIELD_SEND_BUTTON_HOVER_BORDER_COLOR: b.hoverBorderColor
                            }
                        }[r]
                    }
                };
            var m = n(158);
            const g = ["THEME_PRIMARY_COLOR", "THEME_TEXT_COLOR", "MESSENGER_FOOTER_TEXT_COLOR", "BOT_AVATAR_BACKGROUND_IMAGE", "BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND", "BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND", "HEADER_BACKGROUND_COLOR", "HEADER_TEXT_COLOR", "HEADER_BACKGROUND_IMAGE", "HEADER_ICON_BUTTON_COLOR", "CALLBOX_BACKGROUND_COLOR", "CALLBOX_IMAGE_BACKGROUND_URL", "LAUNCHER_IMAGE_BACKGROUND_URL", "LAUNCHER_BACKGROUND_COLOR", "COMPANY_LOGO_BACKGROUND_URL", "MESSAGE_BUBBLE_OWN_BORDER_COLOR", "MESSAGE_BUBBLE_OWN_BACKGROUND_COLOR", "MESSAGE_BUBBLE_OWN_TEXT_COLOR", "MESSAGE_BUBBLE_BOT_BACKGROUND_COLOR", "MESSAGE_BUBBLE_BOT_TEXT_COLOR", "MESSAGE_BUBBLE_BOT_BORDER_COLOR", "MESSENGER_COMPOSER_SEND_BUTTON_ICON_COLOR", "NON_BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND", "NON_BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND", "PLACEHOLDER_AVATAR_URL", ...d, "DARKENED_MEETING_BOOKER_COLOR", "MEETING_BOOKER_COLOR", "MEETING_BOOKER_TEXT_COLOR"],
                p = Object(r.a)(g),
                h = ({
                    themeStyles: e,
                    meetingThemesEnabled: t = !1
                }) => {
                    const n = Object(a.c)(e.themePrimaryColor, m.MESSENGER_BACKGROUND_COLOR) >= i.a.MINIMUM_BODY_TEXT_CONTRAST_RATIO ? e.themePrimaryColor : s.c.primaryText,
                        r = Object(a.c)(e.themePrimaryColor, m.MESSENGER_BACKGROUND_COLOR) >= i.a.MINIMUM_ICON_CONTRAST_RATIO ? e.themePrimaryColor : s.c.gray,
                        l = u({
                            themeTextColor: e.themeTextColor,
                            buttonPrimaryColor: e.buttonPrimaryColor,
                            buttonTextColor: e.buttonTextColor,
                            buttonBorderRadiusPx: e.buttonBorderRadiusPx,
                            buttonStyle: e.buttonStyle,
                            buttonShape: e.buttonShape,
                            accessibleTextColorOnMessengerBackground: n,
                            accessibleIconColorOnMessengerBackground: r
                        });
                    return { ...{
                            THEME_PRIMARY_COLOR: e.themePrimaryColor,
                            THEME_TEXT_COLOR: e.themeTextColor,
                            BOT_AVATAR_BACKGROUND_IMAGE: Object(o.a)(e.companyLogoImageUrl),
                            get BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND() {
                                return this.BOT_AVATAR_BACKGROUND_IMAGE ? this.HEADER_BACKGROUND_IMAGE : void 0
                            },
                            get BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND() {
                                return this.BOT_AVATAR_BACKGROUND_IMAGE ? this.HEADER_BACKGROUND_COLOR : void 0
                            },
                            MESSENGER_FOOTER_TEXT_COLOR: s.c.secondaryText,
                            CALLBOX_BACKGROUND_COLOR: e.callboxBackgroundColor,
                            CALLBOX_IMAGE_BACKGROUND_URL: Object(o.a)(e.callboxImageBackgroundUrl),
                            HEADER_BACKGROUND_COLOR: e.headerBackgroundColor,
                            HEADER_BACKGROUND_IMAGE: Object(o.a)(e.headerBackgroundImageUrl),
                            HEADER_ICON_BUTTON_COLOR: e.headerTextColor,
                            HEADER_TEXT_COLOR: e.headerTextColor,
                            LAUNCHER_BACKGROUND_COLOR: e.launcherBackgroundColor,
                            LAUNCHER_IMAGE_BACKGROUND_URL: Object(o.a)(e.launcherImageBackgroundUrl),
                            COMPANY_LOGO_BACKGROUND_URL: Object(o.a)(e.companyLogoImageUrl),
                            MESSAGE_BUBBLE_OWN_BACKGROUND_COLOR: e.themePrimaryColor,
                            get MESSAGE_BUBBLE_OWN_BORDER_COLOR() {
                                return this.MESSAGE_BUBBLE_OWN_BACKGROUND_COLOR
                            },
                            MESSAGE_BUBBLE_OWN_TEXT_COLOR: e.themeTextColor,
                            MESSAGE_BUBBLE_BOT_BACKGROUND_COLOR: Object(a.h)(.75, e.themePrimaryColor),
                            MESSAGE_BUBBLE_BOT_BORDER_COLOR: "transparent",
                            MESSAGE_BUBBLE_BOT_TEXT_COLOR: s.c.primaryText,
                            MESSENGER_COMPOSER_SEND_BUTTON_ICON_COLOR: r,
                            get NON_BOT_BACKGROUND_IMAGE_FOR_AVATAR_BACKGROUND() {
                                return this.HEADER_BACKGROUND_IMAGE
                            },
                            get NON_BOT_BACKGROUND_COLOR_FOR_AVATAR_BACKGROUND() {
                                return this.HEADER_BACKGROUND_COLOR
                            },
                            PLACEHOLDER_AVATAR_URL: Object(o.a)("data:image/svg+xml,%3Csvg width='154' height='240' viewBox='0 0 154 240' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='154' height='154' rx='77' fill='%23C0C5C9'/%3E%3Cpath d='M100.294 88.7586L89.1459 85.6821C88.2571 85.4466 87.4505 84.9691 86.8151 84.3021C86.1798 83.6352 85.7405 82.805 85.5458 81.9031L84.8509 78.5795C87.4808 77.4594 89.7283 75.5938 91.3183 73.211C92.9082 70.8283 93.7717 68.0318 93.8029 65.164V58.3811C93.7868 54.392 92.234 50.5639 89.4696 47.6983C86.7053 44.8328 82.9438 43.1521 78.9729 43.0082C74.8644 42.8746 70.8686 44.3696 67.8493 47.17C66.3899 48.5219 65.2239 50.1615 64.4243 51.9863C63.6246 53.8111 63.2085 55.7819 63.2019 57.7755V65.164C63.2314 68.0315 64.093 70.8283 65.6812 73.2119C67.2695 75.5954 69.5155 77.4624 72.1443 78.5843L71.459 81.9031C71.2635 82.8041 70.8239 83.6333 70.1886 84.2993C69.5533 84.9653 68.7471 85.4422 67.8589 85.6772L56.6966 88.7537C55.648 89.0269 54.7179 89.6388 54.0499 90.4951C53.3819 91.3514 53.0129 92.4045 53 93.492V104.538C53.0139 105.204 53.2899 105.836 53.7676 106.298C54.2452 106.759 54.8854 107.011 55.5481 107H101.452C102.115 107.011 102.755 106.759 103.232 106.298C103.71 105.836 103.986 105.204 104 104.538V93.492C103.986 92.4053 103.617 91.3533 102.949 90.498C102.281 89.6427 101.351 89.0315 100.303 88.7586H100.294Z' fill='white'/%3E%3C/svg%3E")
                        },
                        ...l,
                        ...{
                            MEETING_BOOKER_COLOR: t ? e.themePrimaryColor : Object(i.c)(s.c.white, e.themePrimaryColor, e.themeTextColor),
                            MEETING_BOOKER_TEXT_COLOR: t ? e.themeTextColor : Object(i.d)(s.c.white, e.themePrimaryColor, e.themeTextColor),
                            get DARKENED_MEETING_BOOKER_COLOR() {
                                return Object(a.a)(.05, this.MEETING_BOOKER_COLOR)
                            }
                        }
                    }
                },
                v = e => {
                    var t, n;
                    const a = null === (t = e.callboxUseThemeColors) || void 0 === t || t,
                        i = e.buttonsUseThemeColors ? e.themePrimaryColor : e.buttonPrimaryColor,
                        o = e.buttonsUseThemeColors ? e.themeTextColor : e.buttonTextColor,
                        r = c({
                            style: e.buttonStyle,
                            buttonTextColor: o,
                            buttonPrimaryColor: i
                        });
                    return {
                        themePrimaryColor: e.themePrimaryColor,
                        themeTextColor: e.themeTextColor,
                        companyLogoImageUrl: e.companyLogoImageUrl,
                        buttonPrimaryColor: i,
                        buttonTextColor: o,
                        buttonBorderRadiusPx: e.buttonBorderRadiusPx,
                        buttonStyle: e.buttonStyle,
                        buttonShape: e.buttonShape,
                        buttonColors: r,
                        headerBackgroundColor: e.headerUseThemeColors ? e.themePrimaryColor : e.headerBackgroundColor,
                        headerTextColor: e.headerUseThemeColors ? e.themeTextColor : e.headerTextColor,
                        headerBackgroundImageUrl: e.headerBackgroundType === l.h.Image ? e.headerBackgroundImageUrl : void 0,
                        callboxBackgroundColor: a ? e.themePrimaryColor : null !== (n = e.callboxBackgroundColor) && void 0 !== n ? n : e.themePrimaryColor,
                        callboxImageBackgroundUrl: e.callboxBackgroundType === l.d.Image ? e.callboxImageBackgroundUrl : void 0,
                        launcherImageBackgroundUrl: e.launcherBackgroundType === l.j.Image ? e.launcherImageBackgroundUrl : void 0,
                        launcherBackgroundColor: e.launcherUseThemeColors ? e.themePrimaryColor : e.launcherBackgroundColor,
                        launcherIcon: e.launcherIcon,
                        launcherShape: e.launcherShape
                    }
                }
        },
        61: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return l
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(1);
            const s = {
                    tileContainer: Object(a.b)("background:", r.c.white, ";border-radius:8px;box-shadow:0px 0px 4px 1px rgba(0,0,0,0.05);overflow-y:hidden;;label:tileContainer;")
                },
                l = ({
                    children: e,
                    className: t
                }) => o.a.createElement("div", {
                    className: Object(a.c)(s.tileContainer, t)
                }, e)
        },
        62: function(e, t, n) {
            "use strict";
            var a = n(0),
                i = n.n(a),
                o = n(14);
            t.a = ({
                id: e,
                substitutions: t = {}
            }) => i.a.createElement(o.a.Consumer, null, (({
                t: n
            }) => i.a.createElement(i.a.Fragment, null, n(e, t))))
        },
        63: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return l
            })), n.d(t, "b", (function() {
                return u
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(213),
                s = n(91);
            const l = () => o.a.createElement(o.a.Fragment, null, o.a.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    display: "none"
                }, o.a.createElement("path", {
                    id: "logoIcon",
                    d: "M224,96,128,0,32,96a45.255,45.255,0,0,0,0,64l26.667,26.667,42.666,42.666,16,16h0L128,256l10.666-10.666h0l16-16,42.666-42.666L224,160A45.255,45.255,0,0,0,224,96Zm-47.639,95.638a37.568,37.568,0,0,0-11.028-26.305l-36-36a1.886,1.886,0,0,0-2.666,0l-36,36a37.568,37.568,0,0,0-11.028,26.305L66.667,178.667a26.4,26.4,0,0,1,0-37.333L128,80l61.333,61.333a26.4,26.4,0,0,1,0,37.333ZM216,152l-7.639,7.638a37.566,37.566,0,0,0-11.028-26.3l-68-68a1.883,1.883,0,0,0-2.666,0l-68,68a37.566,37.566,0,0,0-11.028,26.3L40,152a33.941,33.941,0,0,1,0-48l88-88,88,88a33.941,33.941,0,0,1,0,48Z",
                    transform: "translate(-18.745)"
                }), o.a.createElement("g", {
                    id: "worldIcon",
                    transform: "translate(-1)"
                }, o.a.createElement("path", {
                    d: "M16.154 9.218a6.7 6.7 0 0 1 .153 1.225 6.9 6.9 0 0 1-.689 3.061 2.2 2.2 0 0 1-2.908-.153c-.459-.383-1.148-1.894-1.99-1.588s-1.454 2.047-1.837 2.889a5.2 5.2 0 0 0-.23 2.679 6.45 6.45 0 0 1-3.9-1.837A3.17 3.17 0 0 0 4.6 12.2a3 3 0 0 0-.612-.765.84.84 0 0 1 .23-1.3c.612-.306 2.353-.612 2.813-1.225.918-1.378-1.205-3.368-1.435-3.75a1.057 1.057 0 0 1-.23-.306 7.565 7.565 0 0 1 2.522-1.147A4.947 4.947 0 0 1 8.347 2.1a8.415 8.415 0 1 0 9.49 8.342 8.668 8.668 0 0 0-.459-2.755 11.927 11.927 0 0 1-1.224 1.531z",
                    transform: "translate(0 -0.493)"
                }), o.a.createElement("path", {
                    d: "M15.827 0A3.785 3.785 0 0 0 12 3.827c0 2.143 2.985 4.9 3.291 5.128a.74.74 0 0 0 1.072 0c.306-.23 3.291-2.985 3.291-5.128A3.785 3.785 0 0 0 15.827 0zm0 5.358a1.531 1.531 0 1 1 1.531-1.531 1.535 1.535 0 0 1-1.531 1.531z",
                    transform: "translate(-2.581)"
                })), o.a.createElement("path", {
                    id: "homeIcon",
                    d: "M14,15.975a.944.944,0,0,0,1-1V5.991a.908.908,0,0,0-.4-.8L8.6.2A1.053,1.053,0,0,0,7.3.2l-6,4.992a1.133,1.133,0,0,0-.3.8v8.986a.944.944,0,0,0,1,1H6V10.983h4v4.992Z",
                    transform: "translate(-1 0.025)"
                }), o.a.createElement("path", {
                    id: "gearMenuIcon",
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M0.184 10.0389C0.368 10.3552 0.702667 10.5429 1.37133 10.9176L4.70467 12.7866C5.338 13.1411 5.654 13.3187 6 13.3187C6.34533 13.3187 6.662 13.1411 7.29467 12.7866L10.628 10.9176C11.2967 10.5429 11.6313 10.3552 11.8153 10.0389C12 9.72274 12 9.33724 12 8.56556V5.00386C12 4.23151 12 3.84534 11.8153 3.52913C11.6313 3.21359 11.2973 3.02589 10.6287 2.65115L7.29533 0.782169C6.662 0.427614 6.34533 0.25 6 0.25C5.654 0.25 5.338 0.427614 4.70467 0.782169L1.37133 2.65115C0.702667 3.02589 0.368 3.21359 0.184 3.52913C1.98682e-08 3.84601 0 4.23218 0 5.00454V8.56489C0 9.33724 1.98682e-08 9.72341 0.184 10.0389ZM6 4.76637C5.46957 4.76637 4.96086 4.97902 4.58579 5.35753C4.21071 5.73604 4 6.24941 4 6.78471C4 7.32001 4.21071 7.83338 4.58579 8.21189C4.96086 8.5904 5.46957 8.80305 6 8.80305C6.53043 8.80305 7.03914 8.5904 7.41421 8.21189C7.78929 7.83338 8 7.32001 8 6.78471C8 6.24941 7.78929 5.73604 7.41421 5.35753C7.03914 4.97902 6.53043 4.76637 6 4.76637Z"
                }), o.a.createElement("path", {
                    id: "plusIcon",
                    d: "M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z"
                }), o.a.createElement("g", {
                    id: "pinheadIcon",
                    "data-name": "!",
                    transform: "translate(-79.857 -73.547)"
                }, o.a.createElement("g", {
                    id: "Ellipse_118",
                    "data-name": "Ellipse 118",
                    className: Object(a.b)({
                        name: "16tio5h-IconSprites",
                        styles: "fill:rgba(105,185,180,0.3);stroke:#69b9b4;;label:IconSprites;"
                    }),
                    transform: "translate(80.858 74.547)"
                }, o.a.createElement("circle", {
                    className: Object(a.b)({
                        name: "1xqn58q-IconSprites",
                        styles: "stroke:none;;label:IconSprites;"
                    }),
                    cx: "8",
                    cy: "8",
                    r: "8"
                }), o.a.createElement("circle", {
                    className: Object(a.b)({
                        name: "1gw82vk-IconSprites",
                        styles: "fill:none;;label:IconSprites;"
                    }),
                    cx: "8",
                    cy: "8",
                    r: "8.5"
                })), o.a.createElement("path", {
                    id: "Path_717",
                    "data-name": "Path 717",
                    className: Object(a.b)({
                        name: "lmxncz-IconSprites",
                        styles: "fill:#69b9b4;;label:IconSprites;"
                    }),
                    d: "M4,0A4,4,0,1,1,0,4,4,4,0,0,1,4,0Z",
                    transform: "translate(84.858 78.547)"
                })), o.a.createElement("path", {
                    id: "downArrowIcon",
                    d: "M15.5.5L8 8 .5.5",
                    fill: "inherit",
                    stroke: "#fff",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    strokeMiterlimit: "10"
                }), o.a.createElement("path", {
                    id: "salesforceOpportunityIcon",
                    d: "M19.3 18.9H4.7c-.4 0-.6.3-.6.7 0 1.2.9 2.1 2 2.1h11.8c1.2 0 2.1-.9 2.1-2.1-.1-.4-.3-.7-.7-.7zM21 4.7c-1.2 0-2.1.9-2.1 2.1 0 .6.3 1.2.8 1.6-.6 1.3-2 2.2-3.5 2.2-1.9-.1-3.4-1.6-3.5-3.4 0-.4 0-.6.1-.9.8-.3 1.3-1 1.3-2 0-1.1-.9-2-2.1-2s-2.1.9-2.1 2.1c0 .9.6 1.6 1.3 1.9.1.3.1.6.1.9-.1 1.8-1.6 3.3-3.4 3.4-1.6.1-3-.9-3.6-2.2.5-.4.8-1 .8-1.6 0-1.1-.9-2-2.1-2s-2.1.9-2.1 2S1.8 8.9 3 8.9l1 7.4c0 .3.3.5.6.5h14.8c.3 0 .6-.2.6-.5l1-7.4c1.2 0 2.1-.9 2.1-2.1s-.9-2.1-2.1-2.1z"
                }), o.a.createElement("path", {
                    id: "endCallIcon",
                    d: "M15.992,12.627a.774.774,0,0,1-.237.678L13.5,15.542a1.268,1.268,0,0,1-.4.288,1.644,1.644,0,0,1-.483.153l-.1.009Q12.436,16,12.3,16a7.8,7.8,0,0,1-1.042-.11A7.908,7.908,0,0,1,9.5,15.347a14.783,14.783,0,0,1-2.363-1.3,17.619,17.619,0,0,1-2.812-2.373A18.569,18.569,0,0,1,2.357,9.441,15.942,15.942,0,0,1,1.1,7.466,10.638,10.638,0,0,1,.392,5.822,8.727,8.727,0,0,1,.071,4.551,4.2,4.2,0,0,1,0,3.712Q.02,3.407.02,3.373A1.648,1.648,0,0,1,.172,2.89a1.27,1.27,0,0,1,.288-.4L2.713.237A.746.746,0,0,1,3.255,0a.632.632,0,0,1,.39.127,1.178,1.178,0,0,1,.288.314L5.745,3.881a.825.825,0,0,1,.085.593,1.057,1.057,0,0,1-.288.542l-.83.831a.283.283,0,0,0-.059.11.419.419,0,0,0-.025.127,3.062,3.062,0,0,0,.3.814,7.469,7.469,0,0,0,.627.992,11.007,11.007,0,0,0,1.2,1.347,11.222,11.222,0,0,0,1.355,1.212,7.825,7.825,0,0,0,.991.636,2.633,2.633,0,0,0,.61.246l.212.042a.4.4,0,0,0,.11-.025.283.283,0,0,0,.11-.059l.965-.983a1.037,1.037,0,0,1,.711-.271.885.885,0,0,1,.457.1H12.3l3.269,1.932A.853.853,0,0,1,15.992,12.627Z",
                    transform: "translate(22.627 11.314) rotate(135)"
                }), o.a.createElement("path", {
                    id: "muteIcon",
                    d: "M20.222,12H18.711a4.372,4.372,0,0,1-.387,1.822l1.093,1.093A5.755,5.755,0,0,0,20.222,12Zm-3.569.147c0-.049.013-.1.013-.147V6.667a2.667,2.667,0,0,0-5.333,0v.164ZM7.133,4.889,6,6.022l5.342,5.342V12A2.661,2.661,0,0,0,14,14.671a2.74,2.74,0,0,0,.578-.067l1.476,1.476A4.9,4.9,0,0,1,14,16.538,4.612,4.612,0,0,1,9.289,12H7.778a6.2,6.2,0,0,0,5.333,5.973v2.911h1.778V17.973a6.3,6.3,0,0,0,2.258-.8l3.72,3.72L22,19.76Z",
                    transform: "translate(-6 -4)"
                }), o.a.createElement("g", {
                    id: "chatIcon",
                    transform: "translate(0 -1)"
                }, o.a.createElement("g", {
                    transform: "translate(0 1)"
                }, o.a.createElement("path", {
                    d: "M15,4H14v6a1,1,0,0,1-1,1H6.828L5,13h5l3,3V13h2a1,1,0,0,0,1-1V5A1,1,0,0,0,15,4Z"
                }), o.a.createElement("path", {
                    d: "M1,0H11a1,1,0,0,1,1,1V8a1,1,0,0,1-1,1H6L3,12V9H1A1,1,0,0,1,0,8V1A1,1,0,0,1,1,0Z"
                }))), o.a.createElement("g", {
                    id: "pencilIcon",
                    transform: "translate(-1 -1)"
                }, o.a.createElement("path", {
                    d: "M12.313,6,10.934,7.379,4,14.313l3.421,3.421,8.313-8.313Z",
                    transform: "translate(-1.4 -2.333)"
                }), o.a.createElement("path", {
                    d: "M2,23.291l-.98,3.432a.533.533,0,0,0,.659.659l3.432-.98Z",
                    transform: "translate(0 -10.401)"
                }), o.a.createElement("path", {
                    d: "M26.178,3.823,23.511,1.156a.533.533,0,0,0-.754,0L21,2.913l3.421,3.421,1.756-1.756A.533.533,0,0,0,26.178,3.823Z",
                    transform: "translate(-9.332 0)"
                })), o.a.createElement("g", {
                    id: "checkIcon"
                }, o.a.createElement("path", {
                    d: "M8.62 17.238c-4.752 0-8.619-3.866-8.619-8.619C.001 3.867 3.867 0 8.619 0c1.591-.024 3.193.437 4.567 1.295a1 1 0 1 1-1.059 1.696A6.519 6.519 0 0 0 8.668 2h-.043C4.97 2 2.001 4.97 2.001 8.619s2.969 6.619 6.619 6.619a6.627 6.627 0 0 0 6.619-6.619 7.272 7.272 0 0 0-.202-1.747 1.001 1.001 0 0 1 1.945-.469c.174.722.26 1.469.257 2.22 0 4.749-3.866 8.615-8.619 8.615z"
                }), o.a.createElement("path", {
                    d: "M8.619 11.557L4.864 7.802a.999.999 0 1 1 1.414-1.414l2.341 2.34 7.674-7.673a.999.999 0 1 1 1.414 1.414l-9.088 9.088z"
                })), o.a.createElement("path", {
                    id: "chevronIcon",
                    d: "M5.835,12.6,4.6,11.3,8.129,7.6,4.6,3.9,5.835,2.6l4.765,5Z",
                    transform: "translate(-4.6 -2.6)"
                }), o.a.createElement("g", {
                    id: "dragHandleIcon",
                    transform: "translate(-13 317) rotate(-90)"
                }, o.a.createElement("rect", {
                    width: "3",
                    height: "24",
                    rx: "1.5",
                    transform: "translate(307 13)"
                }), o.a.createElement("rect", {
                    width: "3",
                    height: "24",
                    rx: "1.5",
                    transform: "translate(314 13)"
                })), o.a.createElement("g", {
                    id: "arrowsIcon",
                    transform: "translate(-3958 20926)"
                }, o.a.createElement("g", {
                    transform: "translate(3958 -20920)"
                }, o.a.createElement("path", {
                    d: "M3.75,0,0,4.375H2.5V7.5H5V4.375H7.5Z",
                    transform: "translate(0 -6)"
                })), o.a.createElement("path", {
                    d: "M3.75,7.5,0,3.125H2.5V0H5V3.125H7.5Z",
                    transform: "translate(3964.25 -20922)"
                })), o.a.createElement("g", {
                    id: "analyticsIcon"
                }, o.a.createElement("path", {
                    d: "M14.6 14.5c-.2 0-.4-.1-.6-.2L7.4 9.8C7.2 9.6 7 9.3 7 9V1c0-.6.4-1 1-1 1.8 0 3.6.5 5.1 1.6 4.1 2.8 5.2 8.4 2.4 12.5-.3.2-.6.4-.9.4zM9 8.5l5.3 3.6c1.5-3.1.6-6.9-2.4-8.9-.9-.6-1.9-1-2.9-1.1v6.4z"
                }), o.a.createElement("path", {
                    d: "M7.5 17c-2.2 0-4.4-1-5.9-2.9C.4 12.5-.2 10.6.1 8.6c.2-2 1.3-3.8 2.8-5 .7-.5 1.5-.9 2.3-1.2.5-.2 1.1.1 1.3.6.1.5-.2 1.1-.7 1.3-.6.2-1.2.5-1.7.9C3 6.1 2.2 7.4 2 8.8c-.2 1.5.2 2.9 1.1 4.1 1.9 2.4 5.3 2.8 7.7 1 .4-.3 1.1-.3 1.4.2.3.4.3 1.1-.2 1.4-1.3 1-2.9 1.5-4.5 1.5z"
                })), o.a.createElement("g", {
                    id: "visitorsIcon"
                }, o.a.createElement("path", {
                    d: "M15.275,10.293l-2.188-.625a1,1,0,0,1-.706-.767l-.134-.675A3,3,0,0,0,14,5.5V4.126A3.084,3.084,0,0,0,11.092,1,3,3,0,0,0,8.266,2.767,4.175,4.175,0,0,1,9,5.126V6.5a3.94,3.94,0,0,1-.155,1.075,3,3,0,0,0,.908.651L9.619,8.9a1,1,0,0,1-.706.767l-.843.241,1.48.423A2.007,2.007,0,0,1,11,12.254V14.5a1.483,1.483,0,0,1-.092.5H15.5a.5.5,0,0,0,.5-.5V11.254a1,1,0,0,0-.725-.961Z"
                }), o.a.createElement("path", {
                    d: "M9.275,11.293l-2.188-.625A1,1,0,0,1,6.381,9.9l-.134-.675A3,3,0,0,0,8,6.5V5.126A3.084,3.084,0,0,0,5.092,2,3,3,0,0,0,2,5V6.5A3,3,0,0,0,3.753,9.226L3.619,9.9a1,1,0,0,1-.706.767l-2.188.625A1,1,0,0,0,0,12.254V14.5a.5.5,0,0,0,.5.5h9a.5.5,0,0,0,.5-.5V12.254a1,1,0,0,0-.725-.961Z"
                })), o.a.createElement("g", {
                    id: "companyIcon"
                }, o.a.createElement("path", {
                    d: "M3.226 3.226h1.613v1.613H3.226zM3.226 6.452h1.613v1.613H3.226zM6.452 3.226h1.613v1.613H6.452zM6.452 6.452h1.613v1.613H6.452z"
                }), o.a.createElement("path", {
                    d: "M10.618.818L5.779.011a.819.819 0 0 0-.266 0L.673.818a.807.807 0 0 0-.673.8V12.1a.807.807 0 0 0 .807.807h9.678a.807.807 0 0 0 .807-.807V1.613a.807.807 0 0 0-.673-.8zm-.94 10.474H6.452V9.679H4.839v1.613H1.613v-9l4.033-.672 4.033.672z"
                })), o.a.createElement("g", {
                    id: "supportIcon"
                }, o.a.createElement("path", {
                    d: "M8,0C3.6,0,0,3.6,0,8c0,4.4,3.6,8,8,8s8-3.6,8-8C16,3.6,12.4,0,8,0z M8,10c-1.1,0-2-0.9-2-2c0-1.1,0.9-2,2-2 s2,0.9,2,2C10,9.1,9.1,10,8,10z M8,2c0.9,0,1.8,0.2,2.6,0.6L9.044,4.156c-0.761-0.207-1.327-0.207-2.089,0L5.4,2.6 C6.2,2.2,7.1,2,8,2z M2,8c0-0.9,0.2-1.8,0.6-2.6l1.556,1.556c-0.207,0.761-0.207,1.327,0,2.089L2.6,10.6C2.2,9.8,2,8.9,2,8z M8,14 c-0.9,0-1.8-0.2-2.6-0.6l1.556-1.556c0.761,0.207,1.327,0.207,2.089,0L10.6,13.4C9.8,13.8,8.9,14,8,14z M13.4,10.6l-1.556-1.556 c0.207-0.761,0.207-1.327,0-2.089L13.4,5.4C13.8,6.2,14,7.1,14,8C14,8.9,13.8,9.8,13.4,10.6z"
                })), o.a.createElement("g", {
                    id: "clipboardIcon"
                }, o.a.createElement("path", {
                    d: "M10,4H2C1.4,4,1,4.4,1,5v10c0,0.6,0.4,1,1,1h8c0.6,0,1-0.4,1-1V5C11,4.4,10.6,4,10,4z"
                }), o.a.createElement("path", {
                    d: "M14,0H4v2h9v11h2V1C15,0.4,14.6,0,14,0z"
                })), o.a.createElement("g", {
                    id: "ascArrowIcon"
                }, o.a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M11.4697 4.46964C11.7626 4.17674 12.2374 4.17674 12.5303 4.46964L18.5303 10.4696C18.8232 10.7625 18.8232 11.2374 18.5303 11.5303C18.2374 11.8232 17.7626 11.8232 17.4697 11.5303L12.75 6.81063L12.75 19C12.75 19.4142 12.4142 19.75 12 19.75C11.5858 19.75 11.25 19.4142 11.25 19L11.25 6.81063L6.53034 11.5303C6.23745 11.8232 5.76257 11.8232 5.46968 11.5303C5.17679 11.2374 5.17679 10.7625 5.46968 10.4696L11.4697 4.46964Z"
                })), o.a.createElement("g", {
                    id: "descArrowIcon"
                }, o.a.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M12 4.24996C12.4142 4.24996 12.75 4.58575 12.75 4.99996L12.75 17.1893L17.4697 12.4696C17.7626 12.1767 18.2374 12.1767 18.5303 12.4696C18.8232 12.7625 18.8232 13.2374 18.5303 13.5303L12.5303 19.5303C12.3897 19.6709 12.1989 19.75 12 19.75C11.8011 19.75 11.6103 19.6709 11.4697 19.5303L5.46968 13.5303C5.17679 13.2374 5.17679 12.7625 5.46968 12.4696C5.76257 12.1767 6.23745 12.1767 6.53034 12.4696L11.25 17.1893L11.25 4.99996C11.25 4.58575 11.5858 4.24996 12 4.24996Z"
                }))), o.a.createElement(s.a, null)),
                d = Object.assign({}, s.c, {
                    logo: "0 0 218.51 256",
                    world: "0 0 16.838 18.369",
                    home: "0 0 14 16.025",
                    gearMenu: "0 0 12 14",
                    plus: "0 0 24 24",
                    pinhead: "0 0 18 18",
                    downArrow: "0 0 16 8.5",
                    salesforceOpportunity: "0 0 24 24",
                    endCall: "0 0 22.627 22.627",
                    mute: "0 0 16 16.889",
                    chat: "0 0 16 16",
                    pencil: "0 0 16.001 16.002",
                    chevron: "0 0 6 10",
                    dragHandle: "0 0 24 10",
                    check: "0 0 18 17.238",
                    arrows: "0 0 13.75 11.5",
                    analytics: "0 0 17 17",
                    visitors: "0 0 16 14.001",
                    company: "0 0 11.292 12.904",
                    support: "0 0 16 16",
                    clipboard: "0 0 16 16",
                    ascArrow: "0 0 24 24",
                    descArrow: "0 0 24 24"
                }),
                c = e => t => o.a.createElement("svg", {
                    viewBox: d[e],
                    ...t
                }, o.a.createElement("use", {
                    href: `#${e}Icon`,
                    xlinkHref: `#${e}Icon`
                })),
                u = Object.keys(d).reduce(((e, t) => (e[Object(r.a)(t)] = c(t), e)), {})
        },
        634: function(e, t) {},
        69: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            })), n.d(t, "b", (function() {
                return l
            }));
            var a = n(0),
                i = n.n(a),
                o = n(25),
                r = n(270);
            const s = i.a.createContext({}),
                l = ({
                    contentTooTall: e,
                    contentTooWide: t,
                    messengerTooTall: n,
                    children: a
                }) => {
                    const [l, d] = i.a.useState(!0), {
                        isFocusVisible: c
                    } = Object(r.a)({
                        isTextInput: !0,
                        autoFocus: !0
                    });
                    return i.a.useEffect((() => {
                        d(!1)
                    }), []), i.a.createElement(s.Provider, {
                        value: {
                            contentTooTall: e && !o.isMobile,
                            contentTooWide: t && !o.isMobile,
                            messengerTooTall: n && !o.isMobile,
                            isFocusVisible: c && !l
                        }
                    }, a)
                }
        },
        70: function(e, t, n) {
            "use strict";
            n.d(t, "c", (function() {
                return c
            })), n.d(t, "b", (function() {
                return u
            })), n.d(t, "a", (function() {
                return m
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(23),
                s = n(218);
            const l = {
                    backgroundColor: r.a.themeColor,
                    border: r.a.identity,
                    borderColor: r.a.themeColor,
                    borderRadius: r.a.pxValue,
                    display: r.a.identity,
                    fontSize: r.a.fontSize,
                    fontWeight: r.a.fontWeight,
                    fontColor: r.a.fontColor,
                    textAlign: r.a.identity,
                    textDecoration: r.a.identity,
                    marginUnits: r.a.marginUnits,
                    marginVerticalUnits: r.a.marginUnits,
                    marginHorizontalUnits: r.a.marginUnits,
                    marginTopUnits: r.a.marginUnits,
                    marginBottomUnits: r.a.marginUnits,
                    marginLeftUnits: r.a.marginUnits,
                    marginRightUnits: r.a.marginUnits,
                    marginHorizontal: r.a.identity,
                    paddingUnits: r.a.paddingUnits,
                    paddingVerticalUnits: r.a.paddingUnits,
                    paddingHorizontalUnits: r.a.paddingUnits,
                    paddingTopUnits: r.a.paddingUnits,
                    paddingBottomUnits: r.a.paddingUnits,
                    paddingLeftUnits: r.a.paddingUnits,
                    paddingRightUnits: r.a.paddingUnits,
                    position: r.a.identity,
                    overflow: r.a.identity,
                    minWidth: r.a.width,
                    width: r.a.width,
                    maxWidth: r.a.width,
                    minHeight: r.a.height,
                    height: r.a.height,
                    maxHeight: r.a.height
                },
                d = Object.keys(l),
                c = e => {
                    const t = {},
                        n = {};
                    for (const a in e) d.includes(a) ? t[a] = e[a] : n[a] = e[a];
                    return [t, n]
                },
                u = e => Object(a.b)(null != e.backgroundColor ? `background-color: ${l.backgroundColor(e.backgroundColor)}` : null, ";", null != e.border ? `border: ${l.border(e.border)}` : null, ";", null != e.borderColor ? `border-color: ${l.borderColor(e.borderColor)}` : null, ";", null != e.borderRadius ? `border-radius: ${l.borderRadius(e.borderRadius)}` : null, ";", null != e.display ? `display: ${l.display(e.display)}` : null, ";", null != e.overflow ? `overflow: ${l.overflow(e.overflow)}` : null, ";", null != e.position ? `position: ${l.position(e.position)}` : null, ";", null != e.marginUnits ? `margin: ${l.marginUnits(e.marginUnits)}` : null, ";", null != e.marginVerticalUnits ? `margin-block: ${l.marginVerticalUnits(e.marginVerticalUnits)}` : null, ";", null != e.marginHorizontalUnits ? `margin-inline: ${l.marginHorizontalUnits(e.marginHorizontalUnits)}` : null, ";", null != e.marginHorizontal ? `margin-inline: ${l.marginHorizontal(e.marginHorizontal)}` : null, ";", null != e.marginTopUnits ? `margin-top: ${l.marginTopUnits(e.marginTopUnits)}` : null, ";", null != e.marginBottomUnits ? `margin-bottom: ${l.marginBottomUnits(e.marginBottomUnits)}` : null, ";", null != e.marginLeftUnits ? `margin-left: ${l.marginLeftUnits(e.marginLeftUnits)}` : null, ";", null != e.marginRightUnits ? `margin-right: ${l.marginRightUnits(e.marginRightUnits)}` : null, ";", null != e.paddingUnits ? `padding: ${l.paddingUnits(e.paddingUnits)}` : null, ";", null != e.paddingVerticalUnits ? `padding-block: ${l.paddingVerticalUnits(e.paddingVerticalUnits)}` : null, ";", null != e.paddingHorizontalUnits ? `padding-inline: ${l.paddingHorizontalUnits(e.paddingHorizontalUnits)}` : null, ";", null != e.paddingTopUnits ? `padding-top: ${l.paddingTopUnits(e.paddingTopUnits)}` : null, ";", null != e.paddingBottomUnits ? `padding-bottom: ${l.paddingBottomUnits(e.paddingBottomUnits)}` : null, ";", null != e.paddingLeftUnits ? `padding-left: ${l.paddingLeftUnits(e.paddingLeftUnits)}` : null, ";", null != e.paddingRightUnits ? `padding-right: ${l.paddingRightUnits(e.paddingRightUnits)}` : null, ";", null != e.fontSize ? `font-size: ${l.fontSize(e.fontSize)}` : null, ";", null != e.fontWeight ? `font-weight: ${l.fontWeight(e.fontWeight)}` : null, ";", null != e.fontColor ? `color: ${l.fontColor(e.fontColor)}` : null, ";", null != e.textAlign ? `text-align: ${l.textAlign(e.textAlign)}` : null, ";", null != e.textDecoration ? `text-decoration: ${l.textDecoration(e.textDecoration)}` : null, ";", null != e.minWidth ? `min-width: ${l.minWidth(e.minWidth)}` : null, ";", null != e.width ? `width: ${l.width(e.width)}` : null, ";", null != e.maxWidth ? `max-width: ${l.maxWidth(e.maxWidth)}` : null, ";", null != e.minHeight ? `min-height: ${l.minHeight(e.minHeight)}` : null, ";", null != e.height ? `height: ${l.height(e.height)}` : null, ";", null != e.maxHeight ? `max-height: ${l.maxHeight(e.maxHeight)}` : null, ";"),
                m = o.a.forwardRef((({
                    children: e,
                    _quartzInternal_className: t,
                    UNSAFE_style: n,
                    as: i = "div",
                    ...r
                }, l) => {
                    const [d, m] = c(r), g = null != d.marginHorizontalUnits && null != d.marginHorizontal;
                    return Object(s.a)(!g, "Cannot define both marginHorizontalUnits and marginHorizontal"), o.a.createElement(i, { ...m,
                        className: Object(a.c)(u(d), t),
                        style: n,
                        ref: l
                    }, e)
                }))
        },
        76: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            var o = a.createElement("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M.47.47a.75.75 0 011.06 0L5 3.94 8.47.47a.75.75 0 011.06 1.06L6.06 5l3.47 3.47a.75.75 0 01-1.06 1.06L5 6.06 1.53 9.53A.75.75 0 01.47 8.47L3.94 5 .47 1.53a.75.75 0 010-1.06z"
            });

            function r(e) {
                return a.createElement("svg", i({
                    width: 10,
                    height: 10,
                    viewBox: "0 0 10 10",
                    fill: "#8A9394"
                }, e), o)
            }
            n.p
        },
        84: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(2),
                i = n(1);
            const o = Object(a.b)("position:absolute;top:0;right:0;padding:", i.d.paddingUnits(4), " ", i.d.paddingUnits(6), ";;label:cancelButtonStyle;")
        },
        85: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return h
            }));
            var a = n(2),
                i = n(5),
                o = n(0),
                r = n.n(o),
                s = n(335),
                l = n(1);
            n.p, n(275), n(183);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(276), n(277);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(278);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p, n(279), n(280);
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;

            function d() {
                return d = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }, d.apply(this, arguments)
            }
            var c = o.createElement("path", {
                d: "M6.56 11.5A5.497 5.497 0 0012.052 6c0-3.037-2.46-5.5-5.494-5.5A5.497 5.497 0 001.065 6c0 3.037 2.46 5.5 5.494 5.5z",
                fill: "#79DA8C",
                stroke: "#fff"
            });

            function u(e) {
                return o.createElement("svg", d({
                    width: 13,
                    height: 12,
                    viewBox: "0 0 13 12",
                    fill: "none"
                }, e), c)
            }
            n.p;
            n.p;
            n.p;
            n.p;
            n.p;
            const {
                CSS_VARS: m,
                setCssVariables: g
            } = Object(s.a)(["avatarHeight", "availableUsersDotMarginLeft", "avatarMarginLeft", "avatarMask"]), p = {
                root: Object(a.b)({
                    name: "m91bjp-root",
                    styles: "display:inline-flex;;label:root;"
                }),
                facepileAvatar: Object(a.b)("height:", m.avatarHeight, ";border-radius:100%;&:not(:last-child){mask:", m.avatarMask, ";}&:not(:first-child){margin-left:", m.avatarMarginLeft, ";};label:facepileAvatar;"),
                availabilityIndicator: Object(a.b)("margin-left:", m.availableUsersDotMarginLeft, ";align-self:end;;label:availabilityIndicator;")
            }, h = Object(i.a)((({
                className: e,
                avatarUrls: t,
                anyUserAvailable: n = !1,
                avatarHeight: i = 40,
                transparentBorder: o = !1
            }) => r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                className: Object(a.c)(p.root, e)
            }, t.map(((e, t) => r.a.createElement("img", {
                className: Object(a.c)(p.facepileAvatar, "facepile-avatar"),
                style: g({
                    avatarHeight: l.d.unsafeSize(`${i}px`),
                    avatarMarginLeft: l.d.unsafeMargin(`-${i/5}px`),
                    avatarMask: o ? `radial-gradient(circle at 130% center, transparent ${i/2+2}px, white 0)` : "none"
                }),
                key: t,
                src: e,
                alt: ""
            })))), n && r.a.createElement(u, {
                className: p.availabilityIndicator,
                role: "graphics-symbol",
                style: g({
                    availableUsersDotMarginLeft: l.d.unsafeMargin(`-${i/4}px`)
                })
            }))), {
                target: "e1dxo7e00",
                label: "Facepile"
            })()
        },
        9: function(e, t, n) {
            "use strict";
            let a, i, o, r, s, l, d, c, u, m, g, p, h, v, b, E, _, f, O, C, S, y, k, T, A, N, R, D, I, x, M, B, F, w, L, P, U, j, z, V, G, $, H, W, K, q, Y, X, Q, Z, J, ee, te, ne, ae, ie, oe, re, se, le, de, ce, ue, me, ge, pe, he, ve, be, Ee, _e, fe, Oe, Ce, Se, ye, ke, Te;
            n.d(t, "a", (function() {
                    return i
                })), n.d(t, "b", (function() {
                    return p
                })), n.d(t, "c", (function() {
                    return h
                })), n.d(t, "d", (function() {
                    return _
                })), n.d(t, "e", (function() {
                    return k
                })), n.d(t, "f", (function() {
                    return $
                })), n.d(t, "g", (function() {
                    return H
                })), n.d(t, "h", (function() {
                    return W
                })), n.d(t, "i", (function() {
                    return q
                })), n.d(t, "j", (function() {
                    return Y
                })), n.d(t, "k", (function() {
                    return X
                })), n.d(t, "l", (function() {
                    return te
                })), n.d(t, "m", (function() {
                    return ie
                })), n.d(t, "n", (function() {
                    return oe
                })),
                function(e) {
                    e.Google = "GOOGLE", e.Linkedin = "LINKEDIN"
                }(a || (a = {})),
                function(e) {
                    e.Incorrect = "INCORRECT", e.Other = "OTHER", e.Unhelpful = "UNHELPFUL", e.WrongTone = "WRONG_TONE"
                }(i || (i = {})),
                function(e) {
                    e.Bad = "BAD", e.Good = "GOOD"
                }(o || (o = {})),
                function(e) {
                    e.AutoCorrect = "AUTO_CORRECT", e.AutoExpand = "AUTO_EXPAND", e.AutoRespond = "AUTO_RESPOND", e.AutoSuggest = "AUTO_SUGGEST", e.AutoTranslate = "AUTO_TRANSLATE", e.AutoTune = "AUTO_TUNE", e.FirstAutoPounce = "FIRST_AUTO_POUNCE", e.Playground = "PLAYGROUND", e.SecondAutoPounce = "SECOND_AUTO_POUNCE"
                }(r || (r = {})),
                function(e) {
                    e.Casual = "CASUAL", e.Friendly = "FRIENDLY", e.Professional = "PROFESSIONAL"
                }(s || (s = {})),
                function(e) {
                    e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Messenger = "MESSENGER", e.Tuning = "TUNING", e.TuningSeed = "TUNING_SEED"
                }(l || (l = {})),
                function(e) {
                    e.Dismissed = "DISMISSED", e.Shown = "SHOWN"
                }(d || (d = {})),
                function(e) {
                    e.Feature = "FEATURE", e.Maintenance = "MAINTENANCE"
                }(c || (c = {})),
                function(e) {
                    e.Google = "GOOGLE", e.Microsoft = "MICROSOFT", e.Password = "PASSWORD", e.PendingInvitation = "PENDING_INVITATION", e.SsoBound = "SSO_BOUND", e.SsoUnbound = "SSO_UNBOUND"
                }(u || (u = {})),
                function(e) {
                    e.Action = "ACTION", e.Automatic = "AUTOMATIC", e.Block = "BLOCK", e.Form = "FORM", e.Manual = "MANUAL", e.SmartCta = "SMART_CTA", e.Workflow = "WORKFLOW"
                }(m || (m = {})),
                function(e) {
                    e.Friday = "FRIDAY", e.Monday = "MONDAY", e.Saturday = "SATURDAY", e.Sunday = "SUNDAY", e.Thursday = "THURSDAY", e.Tuesday = "TUESDAY", e.Wednesday = "WEDNESDAY"
                }(g || (g = {})),
                function(e) {
                    e.Pill = "PILL", e.Rectangle = "RECTANGLE"
                }(p || (p = {})),
                function(e) {
                    e.Outline = "OUTLINE", e.Shade = "SHADE", e.Solid = "SOLID"
                }(h || (h = {})),
                function(e) {
                    e.Fixed = "FIXED", e.Rolling = "ROLLING"
                }(v || (v = {})),
                function(e) {
                    e.SmartRouting = "SMART_ROUTING", e.StrictRoundRobin = "STRICT_ROUND_ROBIN"
                }(b || (b = {})),
                function(e) {
                    e.Days = "DAYS", e.Weeks = "WEEKS"
                }(E || (E = {})),
                function(e) {
                    e.Color = "COLOR", e.Image = "IMAGE"
                }(_ || (_ = {})),
                function(e) {
                    e.PushDown = "PUSH_DOWN", e.SlideUp = "SLIDE_UP"
                }(f || (f = {})),
                function(e) {
                    e.Aborted = "ABORTED", e.Completed = "COMPLETED", e.Enqueued = "ENQUEUED", e.Processing = "PROCESSING", e.Skipped = "SKIPPED"
                }(O || (O = {})),
                function(e) {
                    e.Pdf = "PDF"
                }(C || (C = {})),
                function(e) {
                    e.File = "FILE", e.Text = "TEXT", e.Url = "URL", e.UrlPrefix = "URL_PREFIX"
                }(S || (S = {})),
                function(e) {
                    e.HeadlineBodyButton = "HEADLINE_BODY_BUTTON", e.HeadlineButton = "HEADLINE_BUTTON", e.HeadlineForm = "HEADLINE_FORM", e.HeadlineLink = "HEADLINE_LINK"
                }(y || (y = {})),
                function(e) {
                    e.IgnoredDismissed = "IGNORED_DISMISSED", e.IgnoredNoResponseNeeded = "IGNORED_NO_RESPONSE_NEEDED", e.IgnoredSpam = "IGNORED_SPAM"
                }(k || (k = {})),
                function(e) {
                    e.Chat = "CHAT", e.Element = "ELEMENT", e.MeetingLink = "MEETING_LINK", e.MeetingLinkRouted = "MEETING_LINK_ROUTED"
                }(T || (T = {})),
                function(e) {
                    e.All = "ALL", e.BotConversation = "BOT_CONVERSATION", e.FormFill = "FORM_FILL", e.Meeting = "MEETING", e.RepConversation = "REP_CONVERSATION"
                }(A || (A = {})),
                function(e) {
                    e.Button = "BUTTON", e.Form = "FORM", e.Link = "LINK"
                }(N || (N = {})),
                function(e) {
                    e.AutoPounceAttempts = "AUTO_POUNCE_ATTEMPTS", e.AutoPounceAvgRepResponseTime = "AUTO_POUNCE_AVG_REP_RESPONSE_TIME", e.AutoPounceDeflections = "AUTO_POUNCE_DEFLECTIONS", e.AutoPounceEngagedConversation = "AUTO_POUNCE_ENGAGED_CONVERSATION", e.AutoPounceMissedConnections = "AUTO_POUNCE_MISSED_CONNECTIONS", e.AverageRepAvailableHours = "AVERAGE_REP_AVAILABLE_HOURS", e.AvgRepResponseTime = "AVG_REP_RESPONSE_TIME", e.CallsFromExperience = "CALLS_FROM_EXPERIENCE", e.CallsFromInboundChat = "CALLS_FROM_INBOUND_CHAT", e.CallsFromPounce = "CALLS_FROM_POUNCE", e.CallsFromRep = "CALLS_FROM_REP", e.CallsTotal = "CALLS_TOTAL", e.EloquaContactEngagement = "ELOQUA_CONTACT_ENGAGEMENT", e.EloquaContactEngagementConversations = "ELOQUA_CONTACT_ENGAGEMENT_CONVERSATIONS", e.EloquaContactEngagementExperiences = "ELOQUA_CONTACT_ENGAGEMENT_EXPERIENCES", e.EloquaContactSessions = "ELOQUA_CONTACT_SESSIONS", e.EngagementConversations = "ENGAGEMENT_CONVERSATIONS", e.EngagementExperiences = "ENGAGEMENT_EXPERIENCES", e.EngagementExperiencesOrConversations = "ENGAGEMENT_EXPERIENCES_OR_CONVERSATIONS", e.HubspotContactEngagement = "HUBSPOT_CONTACT_ENGAGEMENT", e.HubspotContactEngagementConversations = "HUBSPOT_CONTACT_ENGAGEMENT_CONVERSATIONS", e.HubspotContactEngagementExperiences = "HUBSPOT_CONTACT_ENGAGEMENT_EXPERIENCES", e.HubspotContactSessions = "HUBSPOT_CONTACT_SESSIONS", e.InboundChatRepsAvailable = "INBOUND_CHAT_REPS_AVAILABLE", e.InboundChatRepsUnavailable = "INBOUND_CHAT_REPS_UNAVAILABLE", e.InboundChatRepJoinedNoConversation = "INBOUND_CHAT_REP_JOINED_NO_CONVERSATION", e.InboundChatRepNotStartConvo = "INBOUND_CHAT_REP_NOT_START_CONVO", e.InboundChatRepStartedConversation = "INBOUND_CHAT_REP_STARTED_CONVERSATION", e.InboundChatRepStartedConversationInTime = "INBOUND_CHAT_REP_STARTED_CONVERSATION_IN_TIME", e.InboundChatRepStartedConversationLate = "INBOUND_CHAT_REP_STARTED_CONVERSATION_LATE", e.InboundChatVisitorEngagedConversation = "INBOUND_CHAT_VISITOR_ENGAGED_CONVERSATION", e.InboundChatWaitTimeExpired = "INBOUND_CHAT_WAIT_TIME_EXPIRED", e.LeadsAndProspectsCreated = "LEADS_AND_PROSPECTS_CREATED", e.LeadCaptureEloqua = "LEAD_CAPTURE_ELOQUA", e.LeadCaptureEloquaByExperience = "LEAD_CAPTURE_ELOQUA_BY_EXPERIENCE", e.LeadCaptureEloquaByRep = "LEAD_CAPTURE_ELOQUA_BY_REP", e.LeadCaptureEloquaByRepAfterInboundChat = "LEAD_CAPTURE_ELOQUA_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureEloquaByRepAfterPounce = "LEAD_CAPTURE_ELOQUA_BY_REP_AFTER_POUNCE", e.LeadCaptureHubspot = "LEAD_CAPTURE_HUBSPOT", e.LeadCaptureHubspotByExperience = "LEAD_CAPTURE_HUBSPOT_BY_EXPERIENCE", e.LeadCaptureHubspotByRep = "LEAD_CAPTURE_HUBSPOT_BY_REP", e.LeadCaptureHubspotByRepAfterInboundChat = "LEAD_CAPTURE_HUBSPOT_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureHubspotByRepAfterPounce = "LEAD_CAPTURE_HUBSPOT_BY_REP_AFTER_POUNCE", e.LeadCaptureMarketo = "LEAD_CAPTURE_MARKETO", e.LeadCaptureMarketoByExperience = "LEAD_CAPTURE_MARKETO_BY_EXPERIENCE", e.LeadCaptureMarketoByRep = "LEAD_CAPTURE_MARKETO_BY_REP", e.LeadCaptureMarketoByRepAfterInboundChat = "LEAD_CAPTURE_MARKETO_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureMarketoByRepAfterPounce = "LEAD_CAPTURE_MARKETO_BY_REP_AFTER_POUNCE", e.LeadCapturePardot = "LEAD_CAPTURE_PARDOT", e.LeadCapturePardotByExperience = "LEAD_CAPTURE_PARDOT_BY_EXPERIENCE", e.LeadCapturePardotByRep = "LEAD_CAPTURE_PARDOT_BY_REP", e.LeadCapturePardotByRepAfterInboundChat = "LEAD_CAPTURE_PARDOT_BY_REP_AFTER_INBOUND_CHAT", e.LeadCapturePardotByRepAfterPounce = "LEAD_CAPTURE_PARDOT_BY_REP_AFTER_POUNCE", e.LeadCaptureSalesforce = "LEAD_CAPTURE_SALESFORCE", e.LeadCaptureSalesforceByExperience = "LEAD_CAPTURE_SALESFORCE_BY_EXPERIENCE", e.LeadCaptureSalesforceByRep = "LEAD_CAPTURE_SALESFORCE_BY_REP", e.LeadCaptureSalesforceByRepAfterInboundChat = "LEAD_CAPTURE_SALESFORCE_BY_REP_AFTER_INBOUND_CHAT", e.LeadCaptureSalesforceByRepAfterPounce = "LEAD_CAPTURE_SALESFORCE_BY_REP_AFTER_POUNCE", e.MarketoLeadEngagement = "MARKETO_LEAD_ENGAGEMENT", e.MarketoLeadEngagementConversations = "MARKETO_LEAD_ENGAGEMENT_CONVERSATIONS", e.MarketoLeadEngagementExperiences = "MARKETO_LEAD_ENGAGEMENT_EXPERIENCES", e.MarketoLeadSessions = "MARKETO_LEAD_SESSIONS", e.MeetingsBookedAfterAutoPounce = "MEETINGS_BOOKED_AFTER_AUTO_POUNCE", e.MeetingsBookedAfterInboundChat = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT", e.MeetingsBookedAfterInboundChatGotCanceled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_GOT_CANCELED", e.MeetingsBookedAfterInboundChatGotRescheduled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_GOT_RESCHEDULED", e.MeetingsBookedAfterInboundChatUnanswered = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsBookedAfterInboundChatUnansweredGotCanceled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED_GOT_CANCELED", e.MeetingsBookedAfterInboundChatUnansweredGotRescheduled = "MEETINGS_BOOKED_AFTER_INBOUND_CHAT_UNANSWERED_GOT_RESCHEDULED", e.MeetingsBookedAfterPouncing = "MEETINGS_BOOKED_AFTER_POUNCING", e.MeetingsBookedAfterPouncingGotCanceled = "MEETINGS_BOOKED_AFTER_POUNCING_GOT_CANCELED", e.MeetingsBookedAfterPouncingGotRescheduled = "MEETINGS_BOOKED_AFTER_POUNCING_GOT_RESCHEDULED", e.MeetingsBookedByBotWithoutInboundChat = "MEETINGS_BOOKED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsBookedByExperience = "MEETINGS_BOOKED_BY_EXPERIENCE", e.MeetingsBookedByExperienceGotCanceled = "MEETINGS_BOOKED_BY_EXPERIENCE_GOT_CANCELED", e.MeetingsBookedByExperienceGotRescheduled = "MEETINGS_BOOKED_BY_EXPERIENCE_GOT_RESCHEDULED", e.MeetingsBookedByRep = "MEETINGS_BOOKED_BY_REP", e.MeetingsBookedByRepGotCanceled = "MEETINGS_BOOKED_BY_REP_GOT_CANCELED", e.MeetingsBookedByRepGotRescheduled = "MEETINGS_BOOKED_BY_REP_GOT_RESCHEDULED", e.MeetingsBookedForRep = "MEETINGS_BOOKED_FOR_REP", e.MeetingsBookedGotCanceledTotal = "MEETINGS_BOOKED_GOT_CANCELED_TOTAL", e.MeetingsBookedGotRescheduledTotal = "MEETINGS_BOOKED_GOT_RESCHEDULED_TOTAL", e.MeetingsBookedTotal = "MEETINGS_BOOKED_TOTAL", e.MeetingsNotBookedByBotAfterInboundChatUnanswered = "MEETINGS_NOT_BOOKED_BY_BOT_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsNotBookedByBotWithoutInboundChat = "MEETINGS_NOT_BOOKED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsOfferedAfterInboundChat = "MEETINGS_OFFERED_AFTER_INBOUND_CHAT", e.MeetingsOfferedAfterInboundChatUnanswered = "MEETINGS_OFFERED_AFTER_INBOUND_CHAT_UNANSWERED", e.MeetingsOfferedAfterPouncing = "MEETINGS_OFFERED_AFTER_POUNCING", e.MeetingsOfferedByBotNotBooked = "MEETINGS_OFFERED_BY_BOT_NOT_BOOKED", e.MeetingsOfferedByBotWithoutInboundChat = "MEETINGS_OFFERED_BY_BOT_WITHOUT_INBOUND_CHAT", e.MeetingsOfferedByExperience = "MEETINGS_OFFERED_BY_EXPERIENCE", e.MeetingsOfferedByRep = "MEETINGS_OFFERED_BY_REP", e.MeetingsOfferedByRepAfterInboundChatNotBooked = "MEETINGS_OFFERED_BY_REP_AFTER_INBOUND_CHAT_NOT_BOOKED", e.MeetingsOfferedByRepAfterPouncingNotBooked = "MEETINGS_OFFERED_BY_REP_AFTER_POUNCING_NOT_BOOKED", e.MeetingsOfferedByRepNotBooked = "MEETINGS_OFFERED_BY_REP_NOT_BOOKED", e.MeetingsOfferedNotBooked = "MEETINGS_OFFERED_NOT_BOOKED", e.MeetingsOfferedTotal = "MEETINGS_OFFERED_TOTAL", e.MeetingCancelledByChannel = "MEETING_CANCELLED_BY_CHANNEL", e.MeetingLeadCaptureEloquaByChannel = "MEETING_LEAD_CAPTURE_ELOQUA_BY_CHANNEL", e.MeetingLeadCaptureHubspotByChannel = "MEETING_LEAD_CAPTURE_HUBSPOT_BY_CHANNEL", e.MeetingLeadCaptureMarketoByChannel = "MEETING_LEAD_CAPTURE_MARKETO_BY_CHANNEL", e.MeetingLeadCapturePardotByChannel = "MEETING_LEAD_CAPTURE_PARDOT_BY_CHANNEL", e.MeetingLeadCaptureSalesforceByChannel = "MEETING_LEAD_CAPTURE_SALESFORCE_BY_CHANNEL", e.MeetingOfferedByChannel = "MEETING_OFFERED_BY_CHANNEL", e.MeetingPickedByChannel = "MEETING_PICKED_BY_CHANNEL", e.MeetingRescheduledByChannel = "MEETING_RESCHEDULED_BY_CHANNEL", e.OpensAfterPounce = "OPENS_AFTER_POUNCE", e.OpensBeforePounce = "OPENS_BEFORE_POUNCE", e.PardotProspectEngagement = "PARDOT_PROSPECT_ENGAGEMENT", e.PardotProspectEngagementConversations = "PARDOT_PROSPECT_ENGAGEMENT_CONVERSATIONS", e.PardotProspectEngagementExperiences = "PARDOT_PROSPECT_ENGAGEMENT_EXPERIENCES", e.PardotProspectSessions = "PARDOT_PROSPECT_SESSIONS", e.PounceAttempts = "POUNCE_ATTEMPTS", e.PounceEngagedConversation = "POUNCE_ENGAGED_CONVERSATION", e.PounceRoutings = "POUNCE_ROUTINGS", e.RepAvailability = "REP_AVAILABILITY", e.RepCallAttempts = "REP_CALL_ATTEMPTS", e.SalesforceAccountEngagement = "SALESFORCE_ACCOUNT_ENGAGEMENT", e.SalesforceAccountEngagementConversations = "SALESFORCE_ACCOUNT_ENGAGEMENT_CONVERSATIONS", e.SalesforceAccountEngagementExperiences = "SALESFORCE_ACCOUNT_ENGAGEMENT_EXPERIENCES", e.SalesforceAccountSessions = "SALESFORCE_ACCOUNT_SESSIONS", e.SalesforceContactEngagement = "SALESFORCE_CONTACT_ENGAGEMENT", e.SalesforceContactEngagementConversations = "SALESFORCE_CONTACT_ENGAGEMENT_CONVERSATIONS", e.SalesforceContactEngagementExperiences = "SALESFORCE_CONTACT_ENGAGEMENT_EXPERIENCES", e.SalesforceContactSessions = "SALESFORCE_CONTACT_SESSIONS", e.SalesforceLeadEngagement = "SALESFORCE_LEAD_ENGAGEMENT", e.SalesforceLeadEngagementConversations = "SALESFORCE_LEAD_ENGAGEMENT_CONVERSATIONS", e.SalesforceLeadEngagementExperiences = "SALESFORCE_LEAD_ENGAGEMENT_EXPERIENCES", e.SalesforceLeadSessions = "SALESFORCE_LEAD_SESSIONS", e.SessionExperience = "SESSION_EXPERIENCE", e.SessionExperienceNotShown = "SESSION_EXPERIENCE_NOT_SHOWN", e.SessionExperienceShown = "SESSION_EXPERIENCE_SHOWN", e.SessionExperienceTriggered = "SESSION_EXPERIENCE_TRIGGERED", e.SessionInboundChat = "SESSION_INBOUND_CHAT", e.SessionTotal = "SESSION_TOTAL", e.SessionWidgetNotShowing = "SESSION_WIDGET_NOT_SHOWING", e.SessionWidgetShowing = "SESSION_WIDGET_SHOWING", e.SmartCtaExperienceShown = "SMART_CTA_EXPERIENCE_SHOWN", e.SmartCtaExperienceTriggered = "SMART_CTA_EXPERIENCE_TRIGGERED", e.SmartCtaMeetingsBooked = "SMART_CTA_MEETINGS_BOOKED", e.SmartCtaMeetingsOffered = "SMART_CTA_MEETINGS_OFFERED", e.SmartFormExperienceShown = "SMART_FORM_EXPERIENCE_SHOWN", e.SmartFormExperienceTriggered = "SMART_FORM_EXPERIENCE_TRIGGERED", e.SmartFormMeetingsBooked = "SMART_FORM_MEETINGS_BOOKED", e.SmartFormMeetingsOffered = "SMART_FORM_MEETINGS_OFFERED", e.SuccessfulCallsFromExperience = "SUCCESSFUL_CALLS_FROM_EXPERIENCE", e.SuccessfulCallsFromInboundChat = "SUCCESSFUL_CALLS_FROM_INBOUND_CHAT", e.SuccessfulCallsFromPounce = "SUCCESSFUL_CALLS_FROM_POUNCE", e.SuccessfulCallsFromRep = "SUCCESSFUL_CALLS_FROM_REP", e.SuccessfulCallsTotal = "SUCCESSFUL_CALLS_TOTAL", e.TotalRepAvailableHours = "TOTAL_REP_AVAILABLE_HOURS", e.UserAvailabilityTimeline = "USER_AVAILABILITY_TIMELINE", e.VisitorCallAttempts = "VISITOR_CALL_ATTEMPTS"
                }(R || (R = {})),
                function(e) {
                    e.AutoPounceConversionRate = "AUTO_POUNCE_CONVERSION_RATE", e.Engagement = "ENGAGEMENT", e.InboundChatHealth = "INBOUND_CHAT_HEALTH", e.PounceConversationRate = "POUNCE_CONVERSATION_RATE", e.SmartButtonHealth = "SMART_BUTTON_HEALTH", e.SmartFormHealth = "SMART_FORM_HEALTH"
                }(D || (D = {})),
                function(e) {
                    e.Bar = "BAR", e.Funnel = "FUNNEL", e.Heatmap = "HEATMAP", e.Leaderboard = "LEADERBOARD", e.Line = "LINE", e.Numeric = "NUMERIC", e.UserAvailabilityTimeline = "USER_AVAILABILITY_TIMELINE"
                }(I || (I = {})),
                function(e) {
                    e.Hidden = "HIDDEN", e.Parent = "PARENT", e.Top = "TOP"
                }(x || (x = {})),
                function(e) {
                    e.Daily = "DAILY", e.Monthly = "MONTHLY", e.Weekly = "WEEKLY"
                }(M || (M = {})),
                function(e) {
                    e.Full = "FULL", e.Half = "HALF", e.Quarter = "QUARTER", e.Third = "THIRD"
                }(B || (B = {})),
                function(e) {
                    e.Eloqua = "ELOQUA", e.Hubspot = "HUBSPOT", e.Marketo = "MARKETO", e.Pardot = "PARDOT", e.Salesforce = "SALESFORCE"
                }(F || (F = {})),
                function(e) {
                    e.Desktop = "DESKTOP", e.Mobile = "MOBILE", e.Tablet = "TABLET"
                }(w || (w = {})),
                function(e) {
                    e.Failed = "FAILED", e.Finished = "FINISHED", e.InProgress = "IN_PROGRESS", e.Queued = "QUEUED"
                }(L || (L = {})),
                function(e) {
                    e.Completed = "COMPLETED", e.Created = "CREATED", e.Failed = "FAILED"
                }(P || (P = {})),
                function(e) {
                    e.Report = "REPORT", e.SignalsList = "SIGNALS_LIST"
                }(U || (U = {})),
                function(e) {
                    e.MarketoProgram = "MARKETO_PROGRAM", e.MarketoSmart = "MARKETO_SMART", e.MarketoStatic = "MARKETO_STATIC"
                }(j || (j = {})),
                function(e) {
                    e.Outreach = "OUTREACH", e.Salesloft = "SALESLOFT"
                }(z || (z = {})),
                function(e) {
                    e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.EloquaVisitor = "ELOQUA_VISITOR", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.OutreachProspect = "OUTREACH_PROSPECT", e.PardotProspect = "PARDOT_PROSPECT", e.PardotVisitor = "PARDOT_VISITOR", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceAccountTeamMember = "SALESFORCE_ACCOUNT_TEAM_MEMBER", e.SalesforceCampaignMember = "SALESFORCE_CAMPAIGN_MEMBER", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceEvent = "SALESFORCE_EVENT", e.SalesforceGenericEntity = "SALESFORCE_GENERIC_ENTITY", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesforceOpportunity = "SALESFORCE_OPPORTUNITY", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
                }(V || (V = {})),
                function(e) {
                    e.Daily = "DAILY", e.Monthly = "MONTHLY", e.Weekly = "WEEKLY"
                }(G || (G = {})),
                function(e) {
                    e.Framed = "FRAMED", e.Full = "FULL"
                }($ || ($ = {})),
                function(e) {
                    e.Faces = "FACES", e.Image = "IMAGE", e.Logo = "LOGO", e.None = "NONE"
                }(H || (H = {})),
                function(e) {
                    e.Color = "COLOR", e.Image = "IMAGE"
                }(W || (W = {})),
                function(e) {
                    e.AdfsSaml = "ADFS_SAML", e.AzureAdSaml = "AZURE_AD_SAML", e.None = "NONE", e.OktaSaml = "OKTA_SAML", e.OneloginSaml = "ONELOGIN_SAML"
                }(K || (K = {})),
                function(e) {
                    e.Circle = "CIRCLE", e.Square = "SQUARE"
                }(q || (q = {})),
                function(e) {
                    e.Icon = "ICON", e.Image = "IMAGE"
                }(Y || (Y = {})),
                function(e) {
                    e.Chat = "CHAT", e.DoubleChat = "DOUBLE_CHAT", e.Messenger = "MESSENGER", e.Phone = "PHONE", e.Question = "QUESTION"
                }(X || (X = {})),
                function(e) {
                    e.Embed = "EMBED", e.Footer = "FOOTER", e.Header = "HEADER", e.Popup = "POPUP", e.Sidebar = "SIDEBAR"
                }(Q || (Q = {})),
                function(e) {
                    e.Facebook = "FACEBOOK", e.Google = "GOOGLE", e.Linkedin = "LINKEDIN", e.Unknown = "UNKNOWN"
                }(Z || (Z = {})),
                function(e) {
                    e.Personal = "PERSONAL", e.Routed = "ROUTED"
                }(J || (J = {})),
                function(e) {
                    e.Automatic = "AUTOMATIC", e.Chat = "CHAT", e.Form = "FORM", e.Manual = "MANUAL", e.MeetingLink = "MEETING_LINK", e.MeetingLinkRouted = "MEETING_LINK_ROUTED", e.SmartCta = "SMART_CTA"
                }(ee || (ee = {})),
                function(e) {
                    e.Autopounce = "AUTOPOUNCE", e.Corrected = "CORRECTED", e.Expanded = "EXPANDED", e.Playground = "PLAYGROUND", e.Submit = "SUBMIT", e.Suggested = "SUGGESTED", e.Transform = "TRANSFORM", e.Translated = "TRANSLATED", e.Tuned = "TUNED"
                }(te || (te = {})),
                function(e) {
                    e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Standard = "STANDARD"
                }(ne || (ne = {})),
                function(e) {
                    e.AutoPounce = "AUTO_POUNCE", e.AutoRespond = "AUTO_RESPOND", e.Messenger = "MESSENGER", e.Playground = "PLAYGROUND"
                }(ae || (ae = {})),
                function(e) {
                    e.Casual = "CASUAL", e.Friendly = "FRIENDLY", e.Professional = "PROFESSIONAL"
                }(ie || (ie = {})),
                function(e) {
                    e.AutoCorrect = "AUTO_CORRECT", e.AutoExpand = "AUTO_EXPAND", e.AutoSuggest = "AUTO_SUGGEST", e.AutoTranslate = "AUTO_TRANSLATE", e.AutoTune = "AUTO_TUNE", e.FirstAutoPounce = "FIRST_AUTO_POUNCE", e.Playground = "PLAYGROUND"
                }(oe || (oe = {})),
                function(e) {
                    e.LeadsConverted = "LEADS_CONVERTED", e.LeadsCreated = "LEADS_CREATED", e.LeadsIdentified = "LEADS_IDENTIFIED"
                }(re || (re = {})),
                function(e) {
                    e.Pipeline = "PIPELINE", e.Revenue = "REVENUE"
                }(se || (se = {})),
                function(e) {
                    e.Account = "ACCOUNT", e.OpportunityContactRole = "OPPORTUNITY_CONTACT_ROLE"
                }(le || (le = {})),
                function(e) {
                    e.Golden = "GOLDEN", e.Ignore = "IGNORE"
                }(de || (de = {})),
                function(e) {
                    e.BackupFromPounce = "BACKUP_FROM_POUNCE", e.BackupFromRepAvailability = "BACKUP_FROM_REP_AVAILABILITY", e.RoutingDestination = "ROUTING_DESTINATION"
                }(ce || (ce = {})),
                function(e) {
                    e.Active = "ACTIVE", e.Inactive = "INACTIVE", e.Invited = "INVITED", e.NotInvited = "NOT_INVITED"
                }(ue || (ue = {})),
                function(e) {
                    e.Company = "COMPANY", e.Visitor = "VISITOR"
                }(me || (me = {})),
                function(e) {
                    e.Active = "ACTIVE", e.Archived = "ARCHIVED", e.Dead = "DEAD", e.Idle = "IDLE"
                }(ge || (ge = {})),
                function(e) {
                    e.BotConversation = "BOT_CONVERSATION", e.EngagedRep = "ENGAGED_REP", e.Outreach = "OUTREACH", e.RepConversation = "REP_CONVERSATION", e.Salesloft = "SALESLOFT", e.TopContent = "TOP_CONTENT", e.Visitor = "VISITOR"
                }(pe || (pe = {})),
                function(e) {
                    e.BotConversation = "BOT_CONVERSATION", e.CalendarEvent = "CALENDAR_EVENT", e.FacebookAd = "FACEBOOK_AD", e.G2Clickthrough = "G2_CLICKTHROUGH", e.GoldenPage = "GOLDEN_PAGE", e.GoogleAd = "GOOGLE_AD", e.LinkedinAd = "LINKEDIN_AD", e.Marketing = "MARKETING", e.Outreach = "OUTREACH", e.RepAndBotConversation = "REP_AND_BOT_CONVERSATION", e.RepConversation = "REP_CONVERSATION", e.Salesloft = "SALESLOFT", e.VoiceChat = "VOICE_CHAT"
                }(he || (he = {})),
                function(e) {
                    e.NonSfdc = "NON_SFDC", e.Sfdc = "SFDC"
                }(ve || (ve = {})),
                function(e) {
                    e.DateRange = "DATE_RANGE"
                }(be || (be = {})),
                function(e) {
                    e.MultipleDomains = "MULTIPLE_DOMAINS", e.MultiplePages = "MULTIPLE_PAGES"
                }(Ee || (Ee = {})),
                function(e) {
                    e.AfterPageLoad = "AFTER_PAGE_LOAD"
                }(_e || (_e = {})),
                function(e) {
                    e.High = "HIGH", e.Low = "LOW", e.Medium = "MEDIUM"
                }(fe || (fe = {})),
                function(e) {
                    e.BotEdit = "BOT_EDIT", e.BotPublish = "BOT_PUBLISH", e.BotView = "BOT_VIEW", e.EditAllTeamSettings = "EDIT_ALL_TEAM_SETTINGS", e.EditAnalytics = "EDIT_ANALYTICS", e.EditAutoPounce = "EDIT_AUTO_POUNCE", e.EditBusinessHours = "EDIT_BUSINESS_HOURS", e.EditClearbit = "EDIT_CLEARBIT", e.EditDemandbase = "EDIT_DEMANDBASE", e.EditEloqua = "EDIT_ELOQUA", e.EditExperiences = "EDIT_EXPERIENCES", e.EditFacebook = "EDIT_FACEBOOK", e.EditGoogle = "EDIT_GOOGLE", e.EditGroups = "EDIT_GROUPS", e.EditHubspot = "EDIT_HUBSPOT", e.EditLinkedin = "EDIT_LINKEDIN", e.EditLiveStreams = "EDIT_LIVE_STREAMS", e.EditMacros = "EDIT_MACROS", e.EditMarketo = "EDIT_MARKETO", e.EditMeetingRouting = "EDIT_MEETING_ROUTING", e.EditMeetingTypes = "EDIT_MEETING_TYPES", e.EditMessenger = "EDIT_MESSENGER", e.EditMicrosoft = "EDIT_MICROSOFT", e.EditOutreach = "EDIT_OUTREACH", e.EditPardot = "EDIT_PARDOT", e.EditRouting = "EDIT_ROUTING", e.EditSalesforce = "EDIT_SALESFORCE", e.EditSalesloft = "EDIT_SALESLOFT", e.EditSegments = "EDIT_SEGMENTS", e.EditSixsense = "EDIT_SIXSENSE", e.EditSlack = "EDIT_SLACK", e.EditSso = "EDIT_SSO", e.EditTeammates = "EDIT_TEAMMATES", e.EditTeamCalendar = "EDIT_TEAM_CALENDAR", e.EditVsiitorFields = "EDIT_VSIITOR_FIELDS", e.EditZoominfo = "EDIT_ZOOMINFO", e.ExportReports = "EXPORT_REPORTS", e.ViewAllStatistics = "VIEW_ALL_STATISTICS", e.ViewAllVisitors = "VIEW_ALL_VISITORS"
                }(Oe || (Oe = {})),
                function(e) {
                    e.Api = "API", e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Deleted = "DELETED", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.Experience = "EXPERIENCE", e.Form = "FORM", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.None = "NONE", e.OutreachProspect = "OUTREACH_PROSPECT", e.Param = "PARAM", e.PardotProspect = "PARDOT_PROSPECT", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.System = "SYSTEM", e.User = "USER", e.Visitor = "VISITOR", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
                }(Ce || (Ce = {})),
                function(e) {
                    e.ClearbitEnrichment = "CLEARBIT_ENRICHMENT", e.ClearbitReveal = "CLEARBIT_REVEAL", e.Demandbase = "DEMANDBASE", e.EloquaContact = "ELOQUA_CONTACT", e.EloquaVisitor = "ELOQUA_VISITOR", e.HubspotContact = "HUBSPOT_CONTACT", e.MarketoLead = "MARKETO_LEAD", e.OutreachProspect = "OUTREACH_PROSPECT", e.PardotProspect = "PARDOT_PROSPECT", e.PardotVisitor = "PARDOT_VISITOR", e.QualifiedDemographic = "QUALIFIED_DEMOGRAPHIC", e.QualifiedGeneral = "QUALIFIED_GENERAL", e.QualifiedVisitorFields = "QUALIFIED_VISITOR_FIELDS", e.QualifiedVisitData = "QUALIFIED_VISIT_DATA", e.SalesforceAccount = "SALESFORCE_ACCOUNT", e.SalesforceAccountTeamMember = "SALESFORCE_ACCOUNT_TEAM_MEMBER", e.SalesforceCampaignMember = "SALESFORCE_CAMPAIGN_MEMBER", e.SalesforceContact = "SALESFORCE_CONTACT", e.SalesforceEvent = "SALESFORCE_EVENT", e.SalesforceGenericEntity = "SALESFORCE_GENERIC_ENTITY", e.SalesforceLead = "SALESFORCE_LEAD", e.SalesforceOpportunity = "SALESFORCE_OPPORTUNITY", e.SalesloftPerson = "SALESLOFT_PERSON", e.Sixsense = "SIXSENSE", e.ZoominfoEnrichment = "ZOOMINFO_ENRICHMENT", e.ZoominfoReveal = "ZOOMINFO_REVEAL"
                }(Se || (Se = {})),
                function(e) {
                    e.CalendarEvent = "CALENDAR_EVENT", e.CalendarEventType = "CALENDAR_EVENT_TYPE", e.CalendarEventUser = "CALENDAR_EVENT_USER"
                }(ye || (ye = {})),
                function(e) {
                    e.AfterExperienceEnds = "AFTER_EXPERIENCE_ENDS", e.AfterLeadCaptured = "AFTER_LEAD_CAPTURED", e.Immediately = "IMMEDIATELY"
                }(ke || (ke = {})),
                function(e) {
                    e.HasAutopilotConversation = "HAS_AUTOPILOT_CONVERSATION", e.HasAutoPounceReply = "HAS_AUTO_POUNCE_REPLY", e.HasAutoPounceSent = "HAS_AUTO_POUNCE_SENT", e.HasCalendarEventOffer = "HAS_CALENDAR_EVENT_OFFER", e.HasCalendarEventOfferBooked = "HAS_CALENDAR_EVENT_OFFER_BOOKED", e.HasCalendarEventOfferNotBooked = "HAS_CALENDAR_EVENT_OFFER_NOT_BOOKED", e.HasEmailCaptured = "HAS_EMAIL_CAPTURED", e.HasEngaged = "HAS_ENGAGED", e.HasEngagedWithBot = "HAS_ENGAGED_WITH_BOT", e.HasEngagedWithRep = "HAS_ENGAGED_WITH_REP", e.HasInboundRouting = "HAS_INBOUND_ROUTING", e.HasRepPounce = "HAS_REP_POUNCE", e.WaitTimeExpired = "WAIT_TIME_EXPIRED"
                }(Te || (Te = {}))
        },
        91: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            })), n.d(t, "c", (function() {
                return s
            }));
            var a = n(0),
                i = n.n(a),
                o = n(213);
            const r = () => i.a.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    style: {
                        display: "none"
                    }
                }, i.a.createElement("path", {
                    id: "timesIcon",
                    d: "M23 20.168l-8.185-8.187 8.185-8.174-2.832-2.807-8.182 8.179-8.176-8.179-2.81 2.81 8.186 8.196-8.186 8.184 2.81 2.81 8.203-8.192 8.18 8.192z"
                }), i.a.createElement("g", {
                    id: "dotMenuIcon",
                    transform: "translate(0 15) rotate(-90)"
                }, i.a.createElement("circle", {
                    cx: "1.5",
                    cy: "1.5",
                    r: "1.5",
                    transform: "translate(6 0)"
                }), i.a.createElement("circle", {
                    cx: "1.5",
                    cy: "1.5",
                    r: "1.5",
                    transform: "translate(12 0)"
                }), i.a.createElement("circle", {
                    cx: "1.5",
                    cy: "1.5",
                    r: "1.5",
                    transform: "translate(0 0)"
                })), i.a.createElement("g", {
                    id: "phoneCallIcon",
                    transform: "translate(-0.5 -0.207)"
                }, i.a.createElement("path", {
                    d: "M15.5,12.5l-3-3c-.39-.393-.609-.391-1,0l-2,3-5-5,2-3c.39-.39.39-.609,0-1l-3-3c-.391-.391-.609-.391-1,0l-2,3h0a13,13,0,0,0,13,13l2-3C15.89,13.11,15.889,12.891,15.5,12.5Z"
                }), i.a.createElement("path", {
                    d: "M16.5,8.5h-2a6.006,6.006,0,0,0-6-6V.5A8.009,8.009,0,0,1,16.5,8.5Z"
                }), i.a.createElement("path", {
                    d: "M12.5,8.5h-2a2,2,0,0,0-2-2v-2A4,4,0,0,1,12.5,8.5Z"
                })), i.a.createElement("path", {
                    id: "rightArrowIcon",
                    d: "M22.707,11.293,17,5.586,15.586,7l4,4H7a1,1,0,0,0,0,2H19.586l-4,4L17,18.414l5.707-5.707A1,1,0,0,0,22.707,11.293Z",
                    transform: "translate(-6 -5.586)"
                }), i.a.createElement("path", {
                    id: "rightTriangleIcon",
                    d: "M6,0V6H0Z",
                    transform: "translate(0 4.243) rotate(-45)"
                }), i.a.createElement("path", {
                    id: "leftTriangleIcon",
                    d: "M6,0V6H0Z",
                    transform: "translate(8.486 4.243) rotate(135)"
                }), i.a.createElement("g", {
                    id: "feedbackIcon",
                    transform: "translate(-231.001 -12.398)"
                }, i.a.createElement("g", {
                    transform: "translate(267.761 14.398)"
                }, i.a.createElement("g", {
                    transform: "translate(-17.761 -2)"
                }, i.a.createElement("path", {
                    d: "M14,6H8V2A1.89,1.89,0,0,0,6,0L3,7H1A.945.945,0,0,0,0,8v7a.945.945,0,0,0,1,1H12a2.908,2.908,0,0,0,2.9-2.4l1-5.2A1.937,1.937,0,0,0,14,6Z"
                }))), i.a.createElement("g", {
                    transform: "translate(229.198 26.399) rotate(180)"
                }, i.a.createElement("g", {
                    transform: "translate(-17.761 -2)"
                }, i.a.createElement("path", {
                    d: "M14,6H8V2A1.89,1.89,0,0,0,6,0L3,7H1A.945.945,0,0,0,0,8v7a.945.945,0,0,0,1,1H12a2.908,2.908,0,0,0,2.9-2.4l1-5.2A1.937,1.937,0,0,0,14,6Z"
                })))), i.a.createElement("g", {
                    id: "startCallIcon"
                }, i.a.createElement("g", null, i.a.createElement("path", {
                    d: "M577.83,456.128c1.225,9.385-1.635,17.545-8.568,24.48l-81.396,80.781 c-3.672,4.08-8.465,7.551-14.381,10.404c-5.916,2.857-11.729,4.693-17.439,5.508c-0.408,0-1.635,0.105-3.676,0.309 c-2.037,0.203-4.689,0.307-7.953,0.307c-7.754,0-20.301-1.326-37.641-3.979s-38.555-9.182-63.645-19.584 c-25.096-10.404-53.553-26.012-85.376-46.818c-31.823-20.805-65.688-49.367-101.592-85.68 c-28.56-28.152-52.224-55.08-70.992-80.783c-18.768-25.705-33.864-49.471-45.288-71.299 c-11.425-21.828-19.993-41.616-25.705-59.364S4.59,177.362,2.55,164.51s-2.856-22.95-2.448-30.294 c0.408-7.344,0.612-11.424,0.612-12.24c0.816-5.712,2.652-11.526,5.508-17.442s6.324-10.71,10.404-14.382L98.022,8.756 c5.712-5.712,12.24-8.568,19.584-8.568c5.304,0,9.996,1.53,14.076,4.59s7.548,6.834,10.404,11.322l65.484,124.236 c3.672,6.528,4.692,13.668,3.06,21.42c-1.632,7.752-5.1,14.28-10.404,19.584l-29.988,29.988c-0.816,0.816-1.53,2.142-2.142,3.978 s-0.918,3.366-0.918,4.59c1.632,8.568,5.304,18.36,11.016,29.376c4.896,9.792,12.444,21.726,22.644,35.802 s24.684,30.293,43.452,48.653c18.36,18.77,34.68,33.354,48.96,43.76c14.277,10.4,26.215,18.053,35.803,22.949 c9.588,4.896,16.932,7.854,22.031,8.871l7.648,1.531c0.816,0,2.145-0.307,3.979-0.918c1.836-0.613,3.162-1.326,3.979-2.143 l34.883-35.496c7.348-6.527,15.912-9.791,25.705-9.791c6.938,0,12.443,1.223,16.523,3.672h0.611l118.115,69.768 C571.098,441.238,576.197,447.968,577.83,456.128z"
                }))), i.a.createElement("g", {
                    id: "missedCallIcon",
                    transform: "translate(-663.687 -6.996) rotate(-30)"
                }, i.a.createElement("path", {
                    d: "M15.992,12.627a.774.774,0,0,1-.237.678L13.5,15.542a1.268,1.268,0,0,1-.4.288,1.644,1.644,0,0,1-.483.153l-.1.009Q12.436,16,12.3,16a7.8,7.8,0,0,1-1.042-.11A7.908,7.908,0,0,1,9.5,15.347a14.783,14.783,0,0,1-2.363-1.3,17.619,17.619,0,0,1-2.812-2.373A18.569,18.569,0,0,1,2.357,9.441,15.942,15.942,0,0,1,1.1,7.466,10.638,10.638,0,0,1,.392,5.822,8.727,8.727,0,0,1,.071,4.551,4.2,4.2,0,0,1,0,3.712Q.02,3.407.02,3.373A1.648,1.648,0,0,1,.172,2.89a1.27,1.27,0,0,1,.288-.4L2.713.237A.746.746,0,0,1,3.255,0a.632.632,0,0,1,.39.127,1.178,1.178,0,0,1,.288.314L5.745,3.881a.825.825,0,0,1,.085.593,1.057,1.057,0,0,1-.288.542l-.83.831a.283.283,0,0,0-.059.11.419.419,0,0,0-.025.127,3.062,3.062,0,0,0,.3.814,7.469,7.469,0,0,0,.627.992,11.007,11.007,0,0,0,1.2,1.347,11.222,11.222,0,0,0,1.355,1.212,7.825,7.825,0,0,0,.991.636,2.633,2.633,0,0,0,.61.246l.212.042a.4.4,0,0,0,.11-.025.283.283,0,0,0,.11-.059l.965-.983a1.037,1.037,0,0,1,.711-.271.885.885,0,0,1,.457.1H12.3l3.269,1.932A.853.853,0,0,1,15.992,12.627Z",
                    transform: "matrix(-0.966, 0.259, -0.259, -0.966, 584.501, 360.242)"
                }), i.a.createElement("path", {
                    d: "M9,11V8H7v3H5l3,3,3-3Z",
                    transform: "translate(577.963 332.528) rotate(30)"
                }))),
                s = {
                    times: "0 0 24 24",
                    dotMenu: "0 0 3 15",
                    phoneCall: "0 0 16 16.293",
                    rightArrow: "0 0 17 12.828",
                    rightTriangle: "0 0 8.485 8.485",
                    leftTriangle: "0 0 8.485 8.485",
                    feedback: "0 0 34.958 16",
                    startCall: "0 0 578.106 578.106",
                    missedCall: "0 0 22.627 24.047"
                },
                l = Object.keys(s).reduce(((e, t) => (e[Object(o.a)(t)] = ({
                    height: e,
                    className: n,
                    alt: a,
                    description: o
                }) => {
                    e || console.warn("SVG height should be specified or IE sizing will be incorrect.");
                    const r = s[t],
                        [l, d] = /([0-9.]+\s)([0-9.]+)$/.exec(r).slice(1),
                        c = e ? {
                            height: e,
                            width: l / d * e
                        } : {};
                    return i.a.createElement("svg", {
                        className: n,
                        viewBox: r,
                        style: c,
                        role: "img"
                    }, a && i.a.createElement("title", null, a), o && i.a.createElement("desc", null, o), i.a.createElement("use", {
                        href: `#${t}Icon`,
                        xlinkHref: `#${t}Icon`
                    }))
                }, e)), {});
            t.b = l
        },
        93: function(e, t, n) {
            "use strict";
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(56),
                s = n.n(r),
                l = n(965),
                d = n(270),
                c = n(267),
                u = n(101);
            const m = ({
                    children: e,
                    tooltip: t,
                    placement: n = "bottom",
                    enabled: i,
                    offset: r,
                    delayShow: m = 0,
                    hideArrow: g,
                    shouldShow: p = !1,
                    disableHover: h = !1,
                    timeout: v = 0,
                    tooltipClassName: b,
                    className: E,
                    Wrapper: _ = "div",
                    wrapperProps: f,
                    shouldAnnounce: O = !0
                }) => {
                    var C, S;
                    const y = o.a.useRef(null),
                        [k, T] = (o.a.useRef(), o.a.useState(null !== p && void 0 !== p && p)),
                        [A, N] = o.a.useState(!1),
                        {
                            isFocusVisible: R
                        } = Object(d.a)(),
                        {
                            focusWithinProps: D
                        } = Object(d.b)({
                            onFocusWithinChange: e => {
                                T(R && e)
                            }
                        }),
                        I = o.a.useCallback((() => N(!h)), [h]),
                        x = o.a.useCallback((() => {
                            h || (N(!1), T(!1))
                        }), [h]),
                        M = o.a.useCallback((e => {
                            "Escape" === e.key && (N(!1), T(!1))
                        }), []),
                        B = "function" === typeof _ || "object" === typeof _ && Object.keys(_).some((e => e.includes("emotion"))) ? y.current : (null === (C = y.current) || void 0 === C ? void 0 : C.firstElementChild) || (null === (S = y.current) || void 0 === S ? void 0 : S.parentElement),
                        F = k && t && (void 0 === i || void 0 !== i && i),
                        w = o.a.useMemo((() => o.a.forwardRef(((e, t) => o.a.createElement(_, {
                            ref: t,
                            ...e
                        }, e.children)))), [_]);
                    return o.a.useEffect((() => {
                        if (A && !h || p) return Object(u.a)(m, (() => T(!0)));
                        p || T(!1)
                    }), [A, m, h, p]), o.a.useEffect((() => {
                        if (k && v > 0) return Object(u.a)(v, (() => T(!1)))
                    }), [v, k]), o.a.useEffect((() => (window.addEventListener("keydown", M), () => window.removeEventListener("keydown", M))), [M]), o.a.createElement(w, {
                        ref: y,
                        onPointerEnter: I,
                        onPointerLeave: x,
                        "aria-live": F ? "off" : "polite",
                        className: E,
                        ...D,
                        ...f
                    }, e, F && B && s.a.createPortal(o.a.createElement(l.a, {
                        referenceElement: B,
                        placement: n,
                        modifiers: (() => {
                            const e = {
                                preventOverflow: {
                                    boundariesElement: "viewport",
                                    escapeWithReference: !0
                                }
                            };
                            return r && (e.offset = {
                                enabled: !0,
                                offset: `0, ${r}`
                            }), e
                        })()
                    }, (({
                        ref: e,
                        style: n,
                        placement: i,
                        arrowProps: r
                    }) => o.a.createElement("div", {
                        ref: e,
                        "data-placement": i,
                        className: Object(a.c)(c.c, b),
                        style: n,
                        "aria-live": O ? "polite" : "off"
                    }, !g && o.a.createElement("div", {
                        ref: r.ref,
                        style: r.style,
                        "data-placement": i,
                        className: c.b
                    }), t))), document.getElementById("tooltip-root")))
                },
                g = o.a.memo(m);
            t.a = g
        },
        95: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return d
            }));
            var a = n(2),
                i = n(0),
                o = n.n(i),
                r = n(353),
                s = n(1);
            const l = {
                    1: "h1",
                    2: "h2",
                    3: "h3",
                    4: "h4",
                    5: "h5",
                    6: "h6"
                },
                d = o.a.forwardRef((({
                    level: e,
                    preset: t,
                    _quartzInternal_className: n,
                    children: i,
                    screenReaderOnly: d = !1,
                    ...c
                }, u) => {
                    const m = l[e];
                    return o.a.createElement(r.a, { ...c,
                        as: m,
                        preset: t,
                        _quartzInternal_className: Object(a.c)({
                            [s.p]: d
                        }, n),
                        ref: u
                    }, i)
                }))
        },
        959: function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n(213);
            Array.prototype.last = function() {
                return this[this.length - 1]
            }, Array.prototype.toSentence = function(e = "and") {
                return this.length <= 1 ? this[0] || "" : `${this.slice(0,-1).join(", ")}${this.length>2?`, ${e} `:` ${e} `}${this.last()}`
            }, String.prototype.camelize = function(e = !1) {
                return this.split(/[\s_-]/g).map(((t, n) => 0 === n && e ? t : t.replace(/./, (e => e.toUpperCase())))).join("")
            }, String.prototype.underscore = function() {
                return this.replace(/([a-z\d])([A-Z]+)/g, "$1_$2").replace(/[-\s]+/g, "_").toLowerCase()
            }, String.prototype.titleize = function() {
                return this.split(/[\s_]|(?=[A-Z])/g).map((e => Object(a.a)(e))).join(" ")
            }, String.prototype.humanize = function() {
                return this.underscore().replace(/_/g, " ")
            }, Number.prototype.commafy = function(e = 0) {
                const t = /\B(?=(\d{3})+(?!\d))/g;
                if (e > 0) {
                    const n = this.toFixed(e),
                        a = n.split(".")[1] || "";
                    return Math.floor(n).toString().replace(t, ",") + (a ? `.${a}` : "")
                }
                return Math.round(this).toString().replace(t, ",")
            };
            const i = (e, t) => {
                const n = e.toLowerCase().replace("_", "-"),
                    a = document.querySelector(`meta[name^='app-constant-${n}']`);
                if (a) {
                    const e = a.getAttribute("content");
                    if (e) return JSON.parse(e)
                }
                return t
            };
            var o = n(257),
                r = n(121),
                s = n(1003);
            if (i("SENTRY_DSN")) {
                window.Sentry = o;
                const e = ["top.GLOBALS", "originalCreateNotification", "canvas.contentDocument", "MyApp_RemoveAllHighlights", "http://tt.epicplay.com", "Can't find variable: ZiteReader", "jigsaw is not defined", "ComboSearch is not defined", "http://loading.retry.widdit.com/", "atomicFindClose", "fb_xd_fragment", "bmi_SafeAddOnload", "EBCallBackMessageReceived", "conduitPage", "Script error.", "_avast_submit"],
                    t = [/pagead\/js/i, /graph\.facebook\.com/i, /connect\.facebook\.net\/en_US\/all\.js/i, /eatdifferent\.com\.woopra-ns\.com/i, /static\.woopra\.com\/js\/woopra\.js/i, /^chrome-extension:\/\//i, /^chrome:\/\//i, /127\.0\.0\.1:4001\/isrunning/i, /webappstoolbarba\.texthelp\.com\//i, /metrics\.itunes\.apple\.com\.edgesuite\.net\//i];
                r.e({
                    dsn: i("SENTRY_DSN"),
                    environment: i("SENTRY_ENV"),
                    release: i("SENTRY_RELEASE"),
                    integrations: [new s.a],
                    ignoreErrors: e,
                    denyUrls: t
                })
            }
            const l = n(591);
            n(948).useContext(l)
        },
        96: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(0),
                i = n.n(a);
            const o = (e, t = "context") => n => a => i.a.createElement(e.Consumer, null, (e => i.a.createElement(n, { ...a,
                [t]: e
            })))
        }
    },
    [
        [959, 8, 6]
    ]
]);